{"version":3,"file":"static/js/306.0ae71cfc.chunk.js","mappings":"+LAMO,MAAMA,EAA2BA,EACtCC,aACAC,eAKID,IAAeE,EAAAA,GAAWC,UACrBC,EAAAA,EAAAA,GAACC,EAAAA,aAAY,CAACJ,UAAWA,IACvBD,IAAeE,EAAAA,GAAWI,OAC5BF,EAAAA,EAAAA,GAACG,EAAAA,aAAY,CAACN,UAAWA,IACvBD,IAAeE,EAAAA,GAAWM,SAC5BJ,EAAAA,EAAAA,GAACK,EAAAA,iBAAgB,CAACR,UAAWA,IAC3BD,IAAeE,EAAAA,GAAWQ,KAC5BN,EAAAA,EAAAA,GAACO,EAAAA,cAAa,CAACV,UAAWA,IAE5B,I,mBC0BTW,EAAOC,QA5BS,SAASC,EAAWC,EAAQC,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,GAOzD,IAAKP,EAAW,CACd,IAAIQ,EACJ,QAAeC,IAAXR,EACFO,EAAQ,IAAIE,MACV,qIAGG,CACL,IAAIC,EAAO,CAACT,EAAGC,EAAGC,EAAGC,EAAGC,EAAGC,GACvBK,EAAW,GACfJ,EAAQ,IAAIE,MACVT,EAAOY,QAAQ,OAAO,WAAa,OAAOF,EAAKC,IAAa,MAExDE,KAAO,qBACf,CAGA,MADAN,EAAMO,YAAc,EACdP,CACR,CACF,C,6aC9BA,IAAIQ,EAA+B,KAE5B,MAAMC,EAAuBA,IAE9BD,IAGJA,EAAa,IAAIE,EAAAA,UACjBF,EAAWG,UAVmB,UAWvBH,GAQHI,EAAmB,CACvBC,YAAa,CACX,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,aACA,IACA,IACA,KACA,KACA,KACA,KACA,MACA,IACA,IACA,SACA,KACA,SACA,OACA,KACA,KACA,MACA,QACA,QACA,QACA,KACA,KACA,KACA,MACA,MACA,MACA,MACA,KACA,KACA,KACA,MACA,IACA,OACA,OACA,MACA,KACA,KACA,KACA,UACA,SACA,MACA,UACA,UAEFC,kBAAmB,CACjBpB,EAAG,CAAC,OAAQ,OAAQ,UACpBqB,IAAK,CAAC,MAAO,YACbC,IAAK,CAAC,YAAa,cAIVC,EAAyBC,GAC7BC,IAAaD,EAAWN,GAGpBQ,EAAwBC,GAC5BA,EAAKhB,QAAQ,IAAIiB,OAAO,KAAM,KAAM,sBAGhCC,EAAuBA,KAClCC,EAAAA,EAAAA,cAAaC,IACX,MACMJ,EADYZ,IACKiB,SAASD,GAChC,OAAOR,EAAsBI,EAAK,GACjC,G,6HCvG2E,IAAAM,EAAA,CAAArB,KAAA,UAAAsB,OAAA,0CAEzE,MAAMC,EAAqBC,EAAAA,MAAW,EAAGC,MAAOC,MAA2C,IAADC,EAC/F,MAAM,MAAEC,IAAUC,EAAAA,EAAAA,KAClB,IAAKH,EACH,OAAOlD,EAAAA,EAAAA,GAAAsD,EAAAA,GAAA,CAAAC,SAAE,MAEX,MAAM3D,GAAsC,QAAzBuD,EAAAD,EAAKM,EAAAA,EAAMC,sBAAc,IAAAN,OAAA,EAAzBA,EAA2BF,QAAS,GAEjDS,EAAaF,EAAAA,EAAMG,aAAaT,GAAQ,CAAC,OAAG/B,OAAWA,GAC7D,OAAOuC,GACLE,EAAAA,EAAAA,IAAA,OAAKC,KAAGC,EAAAA,EAAAA,IAAE,CAAEC,QAAS,OAAQC,IAAKZ,EAAMa,QAAQC,GAAIC,WAAY,UAAU,IAACZ,SAAA,EACzEvD,EAAAA,EAAAA,GAACL,EAAAA,EAAwB,CAACC,WAAYA,EAAYiE,KAAGC,EAAAA,EAAAA,IAAE,CAAEM,MAAOhB,EAAMiB,OAAOC,eAAe,OAC5FtE,EAAAA,EAAAA,GAAA,QAAM6D,IAAGhB,EAAmDU,SAAEG,QAGhE1D,EAAAA,EAAAA,GAAAsD,EAAAA,GAAA,CAAAC,SAAE,KACH,G,iHCJI,SAASgB,GAAiB,YAC/BC,EAAW,YACXC,EAAW,SACXC,EAAQ,YACRC,EAAW,mBACXC,GAAqB,EAAK,OAC1BC,EAAM,aACNC,IAEA,MAAM,WAAEC,EAAU,KAAEC,EAAI,wBAAEC,EAAuB,YAAEC,EAAW,eAAEC,IAAmBC,EAAAA,EAAAA,GACjFV,EACAC,EACAE,GAGIQ,GACJrF,EAAAA,EAAAA,GAACsF,EAAAA,EAAM,CACL,aAAYH,EACZV,YAAwB,OAAXA,QAAW,IAAXA,EAAAA,EAAe,sDAC5Bc,KAAMR,EACNS,QAASR,EACTS,KAAK,WACDjB,IAIFkB,GACJ1F,EAAAA,EAAAA,GAACsF,EAAAA,EAAM,CACL,aAAYH,EACZV,YAAwB,OAAXA,QAAW,IAAXA,EAAAA,EAAe,sDAC5Be,QAASR,KACLR,EAAWjB,SAEdwB,IAIL,OACE/E,EAAAA,EAAAA,GAAC2F,EAAAA,EAAO,CACNlB,YACEA,EAAc,GAAGA,YAAwB,8DAE3CmB,QAAST,EACTU,aAAcZ,EACda,KAAMZ,KACFJ,EAAYvB,SAEfqB,EAAqBc,EAAmBL,GAG/C,C,wDCxDe,MAAMU,EAanB,2BAAOC,CAAqBC,EAAoBC,GAC9C,OAAO,IAAIC,EAAkB,CAACF,EAAeC,GAAIE,KAAK,KAAM,eAC9D,CAEA,wCAAOC,CAAkCJ,EAAoBC,GAC3D,OAAO,IAAIC,EAAkB,CAACF,EAAeC,GAAIE,KAAK,KAAM,iBAC9D,EAnBmBL,EAMZO,QAAU,MAoBnB,MAAMH,EACJI,WAAAA,CAAYC,EAAYC,GAAY,KAUpCD,WAAK,OACLE,gBAAU,EAVRC,KAAKH,MAAQA,EAEXG,KAAKD,WADM,iBAATD,EACgBG,OAAOC,aAEPD,OAAOE,cAE7B,CASAC,kBAAAA,GACE,MAAMC,EAAYL,KAAKM,QAAQd,EAAkBe,wBACjD,OAAIF,EACKG,KAAKC,MAAMJ,GAEb,CAAC,CACV,CAMAK,kBAAAA,CAAmBC,GACjB,MAAMC,EAA4C,oBAAvBD,EAAYE,OAAwBF,EAAYE,SAAWF,EACtFX,KAAKc,QAAQtB,EAAkBe,uBAAwBC,KAAKO,UAAUH,GACxE,CAMAI,eAAAA,CAAgBC,GACd,MAAO,CAAC,qBAAsB7B,EAAkBO,QAASK,KAAKH,MAAOoB,GAAKxB,KAAK,IACjF,CAGAqB,OAAAA,CAAQG,EAAU3E,GAChB0D,KAAKD,WAAWe,QAAQd,KAAKgB,gBAAgBC,GAAM3E,EACrD,CAGAgE,OAAAA,CAAQW,GACN,OAAOjB,KAAKD,WAAWO,QAAQN,KAAKgB,gBAAgBC,GACtD,EAlDIzB,EASGe,uBAAyB,qB,mHC5CkD,IAAArE,EAAA,CAAArB,KAAA,UAAAsB,OAAA,aAQ7E,MAAM+E,EAAaA,EAAGnD,WAAUoD,aAAY,EAAMrD,iBAAgBD,MACvE,MAAOuD,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,GAc/C,OACEjI,EAAAA,EAAAA,GAACkI,EAAAA,cAAa,CACZC,OACEnI,EAAAA,EAAAA,GAACoI,EAAAA,EAAgB,CAAAlC,GAAA,SAACmC,eAAe,WAEnCC,wBAAyB,CACvBC,QAASR,GACTxE,UAEFvD,EAAAA,EAAAA,GAACsF,EAAAA,EAAM,CACLb,YAAwB,OAAXA,QAAW,IAAXA,EAAAA,EAAe,4BAC5BgC,KAAK,UACLjB,QAxBcgD,KAClBC,UAAUC,UAAUC,UAAUjE,GAC9BsD,GAAe,GACfY,YAAW,KACTZ,GAAe,EAAM,GACpB,IAAK,EAoBJa,aAjBmBC,KACvBd,GAAe,EAAM,EAiBjBnE,IAAGhB,EAEHU,SACEuE,GAAY9H,EAAAA,EAAAA,GAACoI,EAAAA,EAAgB,CAAAlC,GAAA,SAACmC,eAAe,cAAsDlH,KAEjGqD,KAEQ,C,uECvCpB,MAAMuE,EAAuBC,EAAAA,EAAG;;;;;;;;;;;;;;;;;;;;;EA4BnBC,EAAwBA,EACnCC,eACAC,UAAU,CAAC,MAIN,IAADC,EACJ,MAAM,KACJC,EAAI,QACJC,EACApI,MAAOqI,EAAW,QAClBC,IACEC,EAAAA,EAAAA,IAAsEV,EAAsB,CAC9FW,UAAW,CACTC,MAAO,CACLT,iBAGJU,MAAOV,KACJC,IAUL,MAAO,CACLG,UACAD,KAR8E,OAAJA,QAAI,IAAJA,GAAyB,QAArBD,EAAJC,EAAMQ,2BAAmB,IAAAT,OAArB,EAAJA,EAA2BU,WASrGN,UACAD,YAAaA,EACbQ,SATkBC,MAAO,IAADC,EACxB,OAAW,OAAJZ,QAAI,IAAJA,GAAyB,QAArBY,EAAJZ,EAAMQ,2BAAmB,IAAAI,OAArB,EAAJA,EAA2BF,QAAQ,EAQhCC,GACX,C,mOCjEI,MAAME,EAA0B,wBAE1BC,EACXC,IAEoB,IAAAC,EAAA,OAEN,OAAdD,QAAc,IAAdA,GAAkE,QAApDC,EAAdD,EAAgBE,MAAMC,GAAQA,EAAI3C,MAAQsC,WAAwB,IAAAG,OAApD,EAAdA,EAAoEpH,KAAK,EAE9DuH,EAA4BC,GACvCA,IAAmBC,EAAAA,GAAeC,4BAClCF,IAAmBC,EAAAA,GAAeE,mCAClCH,IAAmBC,EAAAA,GAAeG,kBAClCJ,IAAmBC,EAAAA,GAAeI,mBAClCL,IAAmBC,EAAAA,GAAeK,0BAClCN,IAAmBC,EAAAA,GAAeM,MAEvBC,EAAmCR,GAC1CA,IAAmBC,EAAAA,GAAeC,2BAC7BD,EAAAA,GAAeI,kBAEpBL,IAAmBC,EAAAA,GAAeE,kCAC7BF,EAAAA,GAAeK,yBAEjBN,EAGIS,EAA0E,CACrF,CAACR,EAAAA,GAAeI,oBAAoBK,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SAChDmC,eAAe,wBAGjB,CAACqC,EAAAA,GAAeK,2BAA2BI,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SACvDmC,eAAe,qBAGjB,CAACqC,EAAAA,GAAeC,6BAA6BQ,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SACzDmC,eAAe,wBAGjB,CAACqC,EAAAA,GAAeE,oCAAoCO,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SAChEmC,eAAe,qBAGjB,CAACqC,EAAAA,GAAeG,mBAAmBM,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SAC/CmC,eAAe,SAGjB,CAACqC,EAAAA,GAAeU,aAAaD,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SACzCmC,eAAe,eAGjB,CAACqC,EAAAA,GAAeW,aAAaF,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SACzCmC,eAAe,eAGjB,CAACqC,EAAAA,GAAeY,iBAAiBH,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SAC7CmC,eAAe,mBAGjB,CAACqC,EAAAA,GAAea,cAAcJ,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SAC1CmC,eAAe,gBAGjB,CAACqC,EAAAA,GAAec,SAASL,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SACrCmC,eAAe,WAGjB,CAACqC,EAAAA,GAAeM,QAAQG,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SACpCmC,eAAe,UAKNoD,EAAuE,CAClF,CAACf,EAAAA,GAAeI,oBAAoBK,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SAChDmC,eAAe,wBAGjB,CAACqC,EAAAA,GAAeK,2BAA2BI,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SACvDmC,eAAe,qBAGjB,CAACqC,EAAAA,GAAeC,6BAA6BQ,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SACzDmC,eAAe,wBAIjB,CAACqC,EAAAA,GAAeE,oCAAoCO,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SAChEmC,eAAe,qBAGjB,CAACqC,EAAAA,GAAeG,mBAAmBM,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SAC/CmC,eAAe,SAGjB,CAACqC,EAAAA,GAAeU,aAAaD,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SACzCmC,eAAe,eAGjB,CAACqC,EAAAA,GAAeW,aAAaF,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SACzCmC,eAAe,eAGjB,CAACqC,EAAAA,GAAeY,iBAAiBH,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SAC7CmC,eAAe,mBAGjB,CAACqC,EAAAA,GAAea,cAAcJ,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SAC1CmC,eAAe,gBAGjB,CAACqC,EAAAA,GAAec,SAASL,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SACrCmC,eAAe,WAGjB,CAACqC,EAAAA,GAAeM,QAAQG,EAAAA,EAAAA,IAAc,CAAAjF,GAAA,SACpCmC,eAAe,UAMNqD,EAA+BA,IAAM,CAChDhB,EAAAA,GAAeI,kBACfJ,EAAAA,GAAeK,yB,kGCpHjB,UAT6BY,KAC3B,MAAM,aAAEzC,IAAiB0C,EAAAA,EAAAA,KACzBC,IAAU3C,EAAc,iCAExB,MAAM4C,GAAgBC,EAAAA,EAAAA,UAAQ,IAAM,CAAC7C,IAAe,CAACA,IAErD,OAAOlJ,EAAAA,EAAAA,GAACgM,EAAAA,EAAoB,CAACF,cAAeA,GAAiB,C,kQCNG,IAAAjJ,EAAA,CAAArB,KAAA,UAAAsB,OAAA,aAMnD,SAASmJ,GAAoB,eAAE9G,KAAmBX,IAC/D,MAAM0H,EAAKrJ,EAGX,OACE7C,EAAAA,EAAAA,GAACkI,EAAAA,cAAa,CAACC,MAAOhD,EAAe5B,UACnCvD,EAAAA,EAAAA,GAACsF,EAAAA,EAAM,CACLb,YAAY,uEACRD,EACJX,IAAKqI,KAIb,CCTO,SAASC,GAAkB,SAAEzH,EAAQ,QAAEc,KAAY4G,IACxD,MAAM,WAAErH,EAAU,eAAEI,EAAc,KAAEH,IAASI,EAAAA,EAAAA,IAAkBV,GAE/D,OACE1E,EAAAA,EAAAA,GAACiM,EAAmB,CAClB9G,eAAgBA,EAChBI,KAAMR,EACNS,QAAUxE,IACRgE,IACO,OAAPQ,QAAO,IAAPA,GAAAA,EAAUxE,EAAE,KAEVoL,GAGV,CCpBAC,EAAAA,EAAkBC,iBAAiB,MAAOC,EAAAA,GAC1CF,EAAAA,EAAkBC,iBAAiB,OAAQE,EAAAA,GAC3CH,EAAAA,EAAkBC,iBAAiB,SAAUG,EAAAA,GAC7CJ,EAAAA,EAAkBC,iBAAiB,KAAMI,EAAAA,GACzCL,EAAAA,EAAkBC,iBAAiB,aAAcK,EAAAA,GACjDN,EAAAA,EAAkBC,iBAAiB,OAAQM,EAAAA,GAC3CP,EAAAA,EAAkBC,iBAAiB,OAAQO,EAAAA,GAOpC,MAKMC,EAAiB,OACxBC,EAA8C,CAClDC,MAAOC,EAAAA,EACPC,YAAaC,EAAAA,GAwDR,SAASC,GAAY,MAC1BhK,EAAQ,QAAO,SACfiK,EAAQ,QACRC,EAAO,MACPpB,EAAK,SACL3I,EAAQ,gBACRgK,EAAe,gBACfC,EAAe,cACfC,EAAa,UACbC,EAAS,OACTC,IAEA,MAAMC,EAAc,CAClBC,OAAQ,OACRC,aAAc,EACdC,OAAQ,EACRC,QAASlB,KACNZ,GAEL,OACElM,EAAAA,EAAAA,GAACqM,EAAAA,EAAiB,CAChBkB,gBAAiBA,EACjBC,gBAAiBA,EACjBH,SAAUA,EACVnB,MAAOa,EAAa3J,GACpBwK,YAAaA,EACbK,aAAc,CACZ/B,OAAOgC,EAAAA,EAAAA,MAAKhC,EAAO,oBAErBuB,cAAeA,EACfC,UAAWA,EACXC,OAAQA,EAAOpK,SAEdA,GAGP,C","sources":["experiment-tracking/components/ExperimentSourceTypeIcon.tsx","../node_modules/invariant/browser.js","common/utils/MarkdownUtils.ts","experiment-tracking/components/experiment-page/components/runs/cells/SourceCellRenderer.tsx","shared/web-shared/copy/CopyActionButton.tsx","common/utils/LocalStorageUtils.ts","shared/building_blocks/CopyButton.tsx","experiment-tracking/hooks/useExperimentQuery.tsx","experiment-tracking/utils/ExperimentKindUtils.ts","experiment-tracking/pages/experiment-traces/ExperimentTracesPage.tsx","shared/web-shared/snippet/actions/SnippetActionButton.tsx","shared/web-shared/snippet/actions/SnippetCopyAction.tsx","shared/web-shared/snippet/index.tsx"],"sourcesContent":["import { FileCodeIcon, FolderBranchIcon, NotebookIcon, WorkflowsIcon } from '@databricks/design-system';\nimport { SourceType } from '../sdk/MlflowEnums';\n\n/**\n * Displays an icon corresponding to the source type of an experiment run.\n */\nexport const ExperimentSourceTypeIcon = ({\n  sourceType,\n  className,\n}: {\n  sourceType: SourceType | string;\n  className?: string;\n}) => {\n  if (sourceType === SourceType.NOTEBOOK) {\n    return <NotebookIcon className={className} />;\n  } else if (sourceType === SourceType.LOCAL) {\n    return <FileCodeIcon className={className} />;\n  } else if (sourceType === SourceType.PROJECT) {\n    return <FolderBranchIcon className={className} />;\n  } else if (sourceType === SourceType.JOB) {\n    return <WorkflowsIcon className={className} />;\n  }\n  return null;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { useCallback } from 'react';\nimport sanitizeHtml from 'sanitize-html';\n// @ts-expect-error TS(7016): Could not find a declaration file for module 'show... Remove this comment to see the full error message\nimport { Converter } from 'showdown';\n\n// Use Github-like Markdown (i.e. support for tasklists, strikethrough,\n// simple line breaks, code blocks, emojis)\nconst DEFAULT_MARKDOWN_FLAVOR = 'github';\n\nlet _converter: Converter | null = null;\n\nexport const getMarkdownConverter = () => {\n  // Reuse the same converter instance if available\n  if (_converter) {\n    return _converter;\n  }\n  _converter = new Converter();\n  _converter.setFlavor(DEFAULT_MARKDOWN_FLAVOR);\n  return _converter;\n};\n\n// Options for HTML sanitizer.\n// See https://www.npmjs.com/package/sanitize-html#what-are-the-default-options for usage.\n// These options were chosen to be similar to Github's allowlist but simpler (i.e. we don't\n// do any transforms of the contained HTML and we disallow script entirely instead of\n// removing contents).\nconst sanitizerOptions = {\n  allowedTags: [\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'h7',\n    'h8',\n    'blockquote',\n    'p',\n    'a',\n    'ul',\n    'ol',\n    'nl',\n    'li',\n    'ins',\n    'b',\n    'i',\n    'strong',\n    'em',\n    'strike',\n    'code',\n    'hr',\n    'br',\n    'div',\n    'table',\n    'thead',\n    'tbody',\n    'tr',\n    'th',\n    'td',\n    'pre',\n    'del',\n    'sup',\n    'sub',\n    'dl',\n    'dt',\n    'dd',\n    'kbd',\n    'q',\n    'samp',\n    'samp',\n    'var',\n    'hr',\n    'rt',\n    'rp',\n    'summary',\n    'iframe',\n    'img',\n    'caption',\n    'figure',\n  ],\n  allowedAttributes: {\n    a: ['href', 'name', 'target'],\n    img: ['src', 'longdesc'],\n    div: ['itemscope', 'itemtype'],\n  },\n};\n\nexport const sanitizeConvertedHtml = (dirtyHtml: any) => {\n  return sanitizeHtml(dirtyHtml, sanitizerOptions);\n};\n\nexport const forceAnchorTagNewTab = (html: any) => {\n  return html.replace(new RegExp('<a', 'g'), '<a target=\"_blank\"');\n};\n\nexport const useMarkdownConverter = () =>\n  useCallback((markdown?: string) => {\n    const converter = getMarkdownConverter();\n    const html = converter.makeHtml(markdown);\n    return sanitizeConvertedHtml(html);\n  }, []);\n","import React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport type { RunRowType } from '../../../utils/experimentPage.row-types';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentSourceTypeIcon } from '../../../../ExperimentSourceTypeIcon';\n\nexport const SourceCellRenderer = React.memo(({ value: tags }: { value: RunRowType['tags'] }) => {\n  const { theme } = useDesignSystemTheme();\n  if (!tags) {\n    return <>-</>;\n  }\n  const sourceType = tags[Utils.sourceTypeTag]?.value || '';\n\n  const sourceLink = Utils.renderSource(tags || {}, undefined, undefined);\n  return sourceLink ? (\n    <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n      <ExperimentSourceTypeIcon sourceType={sourceType} css={{ color: theme.colors.textSecondary }} />\n      <span css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>{sourceLink}</span>\n    </div>\n  ) : (\n    <>-</>\n  );\n});\n","import React from 'react';\n\nimport type { ButtonProps, TooltipProps } from '@databricks/design-system';\nimport { Button, Tooltip } from '@databricks/design-system';\n\nimport { useCopyController } from './useCopyController';\n\nexport interface CopyActionButtonProps {\n  buttonProps?: Partial<ButtonProps>;\n  componentId?: string;\n  copyText: string;\n  copyTooltip?: string;\n  isInsideInputGroup?: boolean;\n  onCopy?: () => void;\n  tooltipProps?: Partial<TooltipProps>;\n}\n\nexport function CopyActionButton({\n  buttonProps,\n  componentId,\n  copyText,\n  copyTooltip,\n  isInsideInputGroup = false,\n  onCopy,\n  tooltipProps,\n}: CopyActionButtonProps) {\n  const { actionIcon, copy, handleTooltipOpenChange, tooltipOpen, tooltipMessage } = useCopyController(\n    copyText,\n    copyTooltip,\n    onCopy,\n  );\n\n  const button = (\n    <Button\n      aria-label={tooltipMessage}\n      componentId={componentId ?? 'codegen_web-shared_src_copy_copyactionbutton.tsx_17'}\n      icon={actionIcon}\n      onClick={copy}\n      size=\"small\"\n      {...buttonProps}\n    />\n  );\n\n  const inputGroupButton = (\n    <Button\n      aria-label={tooltipMessage}\n      componentId={componentId ?? 'codegen_web-shared_src_copy_copyactionbutton.tsx_17'}\n      onClick={copy}\n      {...buttonProps}\n    >\n      {actionIcon}\n    </Button>\n  );\n\n  return (\n    <Tooltip\n      componentId={\n        componentId ? `${componentId}-tooltip` : 'codegen_web-shared_src_copy_copyactionbutton.tsx_17-tooltip'\n      }\n      content={tooltipMessage}\n      onOpenChange={handleTooltipOpenChange}\n      open={tooltipOpen}\n      {...tooltipProps}\n    >\n      {isInsideInputGroup ? inputGroupButton : button}\n    </Tooltip>\n  );\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\n/**\n * Utils for working with local storage.\n */\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class -- TODO(FEINF-4274)\nexport default class LocalStorageUtils {\n  /**\n   * Protocol version of MLflow's local storage. Should be incremented on any breaking change in how\n   * data persisted in local storage is used, to prevent old (invalid) cached data from being loaded\n   * and breaking the application.\n   */\n  static version = '1.1';\n\n  /**\n   * Return a LocalStorageStore corresponding to the specified component and ID, where the ID\n   * can be used to disambiguate between multiple instances of cached data for the same component\n   * (e.g. cached data for multiple experiments).\n   */\n  static getStoreForComponent(componentName: any, id: any) {\n    return new LocalStorageStore([componentName, id].join('-'), 'localStorage');\n  }\n\n  static getSessionScopedStoreForComponent(componentName: any, id: any) {\n    return new LocalStorageStore([componentName, id].join('-'), 'sessionStorage');\n  }\n}\n\n/**\n * Interface to browser local storage that allows for setting key-value pairs under the specified\n * \"scope\".\n */\nclass LocalStorageStore {\n  constructor(scope: any, type: any) {\n    this.scope = scope;\n    if (type === 'localStorage') {\n      this.storageObj = window.localStorage;\n    } else {\n      this.storageObj = window.sessionStorage;\n    }\n  }\n  static reactComponentStateKey = 'ReactComponentState';\n\n  scope: any;\n  storageObj: any;\n\n  /**\n   * Loads React component state cached in local storage into a vanilla JS object.\n   */\n  loadComponentState() {\n    const storedVal = this.getItem(LocalStorageStore.reactComponentStateKey);\n    if (storedVal) {\n      return JSON.parse(storedVal);\n    }\n    return {};\n  }\n\n  /**\n   * Save React component state in local storage.\n   * @param stateRecord: Immutable.Record instance or plain object containing component state.\n   */\n  saveComponentState(stateRecord: any) {\n    const targetValue = typeof stateRecord.toJSON === 'function' ? stateRecord.toJSON() : stateRecord;\n    this.setItem(LocalStorageStore.reactComponentStateKey, JSON.stringify(targetValue));\n  }\n\n  /**\n   * Helper method for constructing a scoped key to use for setting/getting values in\n   * local storage.\n   */\n  withScopePrefix(key: any) {\n    return ['MLflowLocalStorage', LocalStorageUtils.version, this.scope, key].join('-');\n  }\n\n  /** Save the specified key-value pair in local storage. */\n  setItem(key: any, value: any) {\n    this.storageObj.setItem(this.withScopePrefix(key), value);\n  }\n\n  /** Fetch the value corresponding to the passed-in key from local storage. */\n  getItem(key: any) {\n    return this.storageObj.getItem(this.withScopePrefix(key));\n  }\n}\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, type ButtonProps, LegacyTooltip } from '@databricks/design-system';\n\ninterface CopyButtonProps extends Partial<ButtonProps> {\n  copyText: string;\n  showLabel?: React.ReactNode;\n  componentId?: string;\n}\n\nexport const CopyButton = ({ copyText, showLabel = true, componentId, ...buttonProps }: CopyButtonProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <LegacyTooltip\n      title={\n        <FormattedMessage defaultMessage=\"Copied\" description=\"Tooltip text shown when copy operation completes\" />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button\n        componentId={componentId ?? 'mlflow.shared.copy_button'}\n        type=\"primary\"\n        onClick={handleClick}\n        onMouseLeave={handleMouseLeave}\n        css={{ 'z-index': 1 }}\n        // Define children as a explicit prop so it can be easily overrideable\n        children={\n          showLabel ? <FormattedMessage defaultMessage=\"Copy\" description=\"Button text for copy button\" /> : undefined\n        }\n        {...buttonProps}\n      />\n    </LegacyTooltip>\n  );\n};\n","import type { QueryHookOptions } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { gql } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { useQuery } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport type { MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables } from '../../graphql/__generated__/graphql';\nimport { isArray } from 'lodash';\nimport { NotFoundError } from '@databricks/web-shared/errors';\n\nconst GET_EXPERIMENT_QUERY = gql`\n  query MlflowGetExperimentQuery($input: MlflowGetExperimentInput!) @component(name: \"MLflow.ExperimentRunTracking\") {\n    mlflowGetExperiment(input: $input) {\n      apiError {\n        code\n        message\n      }\n      experiment {\n        artifactLocation\n        creationTime\n        experimentId\n        lastUpdateTime\n        lifecycleStage\n        name\n        tags {\n          key\n          value\n        }\n      }\n    }\n  }\n`;\n\nexport type UseGetExperimentQueryResultExperiment = NonNullable<\n  MlflowGetExperimentQuery['mlflowGetExperiment']\n>['experiment'];\n\n/* eslint-disable react-hooks/rules-of-hooks */\nexport const useGetExperimentQuery = ({\n  experimentId,\n  options = {},\n}: {\n  experimentId?: string;\n  options?: QueryHookOptions<MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables>;\n}) => {\n  const {\n    data,\n    loading,\n    error: apolloError,\n    refetch,\n  } = useQuery<MlflowGetExperimentQuery, MlflowGetExperimentQueryVariables>(GET_EXPERIMENT_QUERY, {\n    variables: {\n      input: {\n        experimentId,\n      },\n    },\n    skip: !experimentId,\n    ...options,\n  });\n\n  // Extract the single experiment entity from the response\n  const experimentEntity: UseGetExperimentQueryResultExperiment | undefined = data?.mlflowGetExperiment?.experiment;\n\n  const getApiError = () => {\n    return data?.mlflowGetExperiment?.apiError;\n  };\n\n  return {\n    loading,\n    data: experimentEntity,\n    refetch,\n    apolloError: apolloError,\n    apiError: getApiError(),\n  } as const;\n};\n","import { ExperimentKind } from '../constants';\nimport type { MessageDescriptor } from 'react-intl';\nimport { defineMessage } from 'react-intl';\nimport type { KeyValueEntity } from '../../common/types';\n\nexport const EXPERIMENT_KIND_TAG_KEY = 'mlflow.experimentKind';\n\nexport const getExperimentKindFromTags = (\n  experimentTags?:\n    | ({ __typename: 'MlflowExperimentTag'; key: string | null; value: string | null }[] | null)\n    | KeyValueEntity[],\n): ExperimentKind | undefined =>\n  experimentTags?.find((tag) => tag.key === EXPERIMENT_KIND_TAG_KEY)?.value as ExperimentKind;\n\nexport const isEditableExperimentKind = (experimentKind: ExperimentKind): boolean =>\n  experimentKind === ExperimentKind.GENAI_DEVELOPMENT_INFERRED ||\n  experimentKind === ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED ||\n  experimentKind === ExperimentKind.NO_INFERRED_TYPE ||\n  experimentKind === ExperimentKind.GENAI_DEVELOPMENT ||\n  experimentKind === ExperimentKind.CUSTOM_MODEL_DEVELOPMENT ||\n  experimentKind === ExperimentKind.EMPTY;\n\nexport const normalizeInferredExperimentKind = (experimentKind: ExperimentKind): ExperimentKind => {\n  if (experimentKind === ExperimentKind.GENAI_DEVELOPMENT_INFERRED) {\n    return ExperimentKind.GENAI_DEVELOPMENT;\n  }\n  if (experimentKind === ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED) {\n    return ExperimentKind.CUSTOM_MODEL_DEVELOPMENT;\n  }\n  return experimentKind;\n};\n\nexport const ExperimentKindDropdownLabels: Record<ExperimentKind, MessageDescriptor> = {\n  [ExperimentKind.GENAI_DEVELOPMENT]: defineMessage({\n    defaultMessage: 'GenAI apps & agents',\n    description: 'Label for experiments focused on generative AI model development',\n  }),\n  [ExperimentKind.CUSTOM_MODEL_DEVELOPMENT]: defineMessage({\n    defaultMessage: 'Machine learning',\n    description: 'Label for custom experiments focused on machine learning',\n  }),\n  [ExperimentKind.GENAI_DEVELOPMENT_INFERRED]: defineMessage({\n    defaultMessage: 'GenAI apps & agents',\n    description: 'Label for experiments automatically identified as generative AI development',\n  }),\n  [ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED]: defineMessage({\n    defaultMessage: 'Machine learning',\n    description: 'Label for custom experiments automatically identified as being focused on machine learning',\n  }),\n  [ExperimentKind.NO_INFERRED_TYPE]: defineMessage({\n    defaultMessage: 'None',\n    description: 'Label for experiments with no automatically inferred experiment type',\n  }),\n  [ExperimentKind.FINETUNING]: defineMessage({\n    defaultMessage: 'Finetuning',\n    description: 'Label for experiments focused on model finetuning',\n  }),\n  [ExperimentKind.REGRESSION]: defineMessage({\n    defaultMessage: 'Regression',\n    description: 'Label for experiments focused on regression modeling',\n  }),\n  [ExperimentKind.CLASSIFICATION]: defineMessage({\n    defaultMessage: 'Classification',\n    description: 'Label for experiments focused on classification modeling',\n  }),\n  [ExperimentKind.FORECASTING]: defineMessage({\n    defaultMessage: 'Forecasting',\n    description: 'Label for experiments focused on time series forecasting',\n  }),\n  [ExperimentKind.AUTOML]: defineMessage({\n    defaultMessage: 'AutoML',\n    description: 'Label for generic AutoML experiments',\n  }),\n  [ExperimentKind.EMPTY]: defineMessage({\n    defaultMessage: 'None',\n    description: 'Label for experiments with no experiment kind',\n  }),\n};\n\nexport const ExperimentKindShortLabels: Record<ExperimentKind, MessageDescriptor> = {\n  [ExperimentKind.GENAI_DEVELOPMENT]: defineMessage({\n    defaultMessage: 'GenAI apps & agents',\n    description: 'A short label for custom experiments focused on generative AI app and agent development',\n  }),\n  [ExperimentKind.CUSTOM_MODEL_DEVELOPMENT]: defineMessage({\n    defaultMessage: 'Machine learning',\n    description: 'A short label for custom experiments focused on machine learning',\n  }),\n  [ExperimentKind.GENAI_DEVELOPMENT_INFERRED]: defineMessage({\n    defaultMessage: 'GenAI apps & agents',\n    description:\n      'A short label for custom experiments automatically identified as being focused on generative AI app and agent development',\n  }),\n  [ExperimentKind.CUSTOM_MODEL_DEVELOPMENT_INFERRED]: defineMessage({\n    defaultMessage: 'Machine learning',\n    description: 'A short label for custom experiments automatically identified as being focused on machine learning',\n  }),\n  [ExperimentKind.NO_INFERRED_TYPE]: defineMessage({\n    defaultMessage: 'None',\n    description: 'A short label for experiments with no automatically inferred experiment type',\n  }),\n  [ExperimentKind.FINETUNING]: defineMessage({\n    defaultMessage: 'finetuning',\n    description: 'A short label for experiments focused on model finetuning',\n  }),\n  [ExperimentKind.REGRESSION]: defineMessage({\n    defaultMessage: 'regression',\n    description: 'A short label for experiments focused on regression modeling',\n  }),\n  [ExperimentKind.CLASSIFICATION]: defineMessage({\n    defaultMessage: 'classification',\n    description: 'A short label for experiments focused on classification modeling',\n  }),\n  [ExperimentKind.FORECASTING]: defineMessage({\n    defaultMessage: 'forecasting',\n    description: 'A short label for experiments focused on time series forecasting',\n  }),\n  [ExperimentKind.AUTOML]: defineMessage({\n    defaultMessage: 'AutoML',\n    description: 'A short label for generic AutoML experiments',\n  }),\n  [ExperimentKind.EMPTY]: defineMessage({\n    defaultMessage: 'None',\n    description: 'A short label for experiments with no experiment kind',\n  }),\n};\n\n// Returns list of experiment kinds that are user-selectable in the dropdown\nexport const getSelectableExperimentKinds = () => [\n  ExperimentKind.GENAI_DEVELOPMENT,\n  ExperimentKind.CUSTOM_MODEL_DEVELOPMENT,\n];\n","import { useMemo } from 'react';\nimport invariant from 'invariant';\nimport { useParams } from '../../../common/utils/RoutingUtils';\nimport { ExperimentViewTraces } from '../../components/experiment-page/components/ExperimentViewTraces';\n\nconst ExperimentTracesPage = () => {\n  const { experimentId } = useParams();\n  invariant(experimentId, 'Experiment ID must be defined');\n\n  const experimentIds = useMemo(() => [experimentId], [experimentId]);\n\n  return <ExperimentViewTraces experimentIds={experimentIds} />;\n};\n\nexport default ExperimentTracesPage;\n","import { css } from '@emotion/react';\nimport type { ReactNode } from 'react';\nimport React from 'react';\n\nimport type { ButtonProps } from '@databricks/design-system';\nimport { Button, LegacyTooltip } from '@databricks/design-system';\n\ntype SnippetActionButtonProps = Pick<ButtonProps, 'icon' | 'onClick' | 'href' | 'rel' | 'target'> & {\n  tooltipMessage: NonNullable<ReactNode>;\n};\n\nexport default function SnippetActionButton({ tooltipMessage, ...buttonProps }: SnippetActionButtonProps) {\n  const style = css({\n    zIndex: 1, // required for action buttons to be visible and float\n  });\n  return (\n    <LegacyTooltip title={tooltipMessage}>\n      <Button\n        componentId=\"codegen_web-shared_src_snippet_actions_snippetactionbutton.tsx_33\"\n        {...buttonProps}\n        css={style}\n      />\n    </LegacyTooltip>\n  );\n}\n","import React from 'react';\n\nimport type { ButtonProps } from '@databricks/design-system';\nimport { useCopyController } from '@databricks/web-shared/copy';\n\nimport SnippetActionButton from './SnippetActionButton';\n\nexport interface SnippetCopyActionProps extends ButtonProps {\n  /**\n   * The text to be copied into clipboard when action button is clicked.\n   */\n  copyText: string;\n  onClick?: (e: React.MouseEvent) => void;\n}\n\nexport function SnippetCopyAction({ copyText, onClick, ...props }: SnippetCopyActionProps) {\n  const { actionIcon, tooltipMessage, copy } = useCopyController(copyText);\n\n  return (\n    <SnippetActionButton\n      tooltipMessage={tooltipMessage}\n      icon={actionIcon}\n      onClick={(e) => {\n        copy();\n        onClick?.(e);\n      }}\n      {...props}\n    />\n  );\n}\n","import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport go from 'react-syntax-highlighter/dist/cjs/languages/prism/go';\nimport java from 'react-syntax-highlighter/dist/cjs/languages/prism/java';\nimport javascript from 'react-syntax-highlighter/dist/cjs/languages/prism/javascript';\nimport json from 'react-syntax-highlighter/dist/cjs/languages/prism/json';\nimport python from 'react-syntax-highlighter/dist/cjs/languages/prism/python';\nimport yaml from 'react-syntax-highlighter/dist/cjs/languages/prism/yaml';\nimport sql from 'react-syntax-highlighter/dist/cjs/languages/prism/sql';\n\nSyntaxHighlighter.registerLanguage('sql', sql);\nSyntaxHighlighter.registerLanguage('java', java);\nSyntaxHighlighter.registerLanguage('python', python);\nSyntaxHighlighter.registerLanguage('go', go);\nSyntaxHighlighter.registerLanguage('javascript', javascript);\nSyntaxHighlighter.registerLanguage('yaml', yaml);\nSyntaxHighlighter.registerLanguage('json', json);\n\nimport duotoneDarkStyle from './theme/databricks-duotone-dark';\nimport lightStyle from './theme/databricks-light';\nimport type { CSSProperties, ReactNode } from 'react';\nimport { pick } from 'lodash';\nexport type CodeSnippetTheme = 'duotoneDark' | 'light';\nexport const buttonBackgroundColorDark = 'rgba(140, 203, 255, 0)';\nexport const buttonColorDark = 'rgba(255, 255, 255, 0.84)';\nexport const buttonHoverColorDark = '#8ccbffcc';\nexport const buttonHoverBackgroundColorDark = 'rgba(140, 203, 255, 0.08)';\nexport const duboisAlertBackgroundColor = '#fff0f0';\nexport const snippetPadding = '24px';\nconst themesStyles: Record<CodeSnippetTheme, any> = {\n  light: lightStyle,\n  duotoneDark: duotoneDarkStyle,\n};\n\nexport type CodeSnippetLanguage = 'sql' | 'java' | 'python' | 'javascript' | 'go' | 'yaml' | 'text' | 'json';\n\nexport interface CodeSnippetProps {\n  /**\n   * The code string\n   */\n  children: string;\n  /**\n   * The actions that are displayed on the right top corner of the component\n   *  see `./actions` for built-in actions\n   */\n  actions?: NonNullable<ReactNode> | NonNullable<ReactNode>[];\n  /**\n   * The theme, default theme is `light`\n   */\n  theme?: CodeSnippetTheme;\n  /**\n   * Language of the code (`children`)\n   */\n  language: CodeSnippetLanguage;\n  /**\n   * Custom styles (passed to the internal `<pre>`)\n   */\n  style?: CSSProperties;\n  /**\n   * Whether to show line numbers on the left or not\n   */\n  showLineNumbers?: boolean;\n  /**\n   * Custom styles for line numbers\n   */\n  lineNumberStyle?: CSSProperties;\n  /**\n   * Boolean to specify whether to style the <code> block with white-space: pre-wrap or white-space: pre\n   */\n  wrapLongLines?: boolean;\n  /**\n   * Boolean that determines whether or not each line of code should be wrapped in a parent element\n   */\n  wrapLines?: boolean;\n  /**\n   * Props to pass to the line elements\n   */\n  lineProps?: React.HTMLProps<HTMLElement> | undefined;\n  /**\n   * Custom tag to use for the `<pre>` element\n   */\n  PreTag?: keyof JSX.IntrinsicElements | React.ComponentType<React.PropsWithChildren<any>> | undefined;\n}\n\n/**\n * `CodeSnippet` is used for highlighting code, use this instead of\n */\nexport function CodeSnippet({\n  theme = 'light',\n  language,\n  actions,\n  style,\n  children,\n  showLineNumbers,\n  lineNumberStyle,\n  wrapLongLines,\n  wrapLines,\n  PreTag,\n}: CodeSnippetProps) {\n  const customStyle = {\n    border: 'none',\n    borderRadius: 0,\n    margin: 0,\n    padding: snippetPadding,\n    ...style,\n  };\n  return (\n    <SyntaxHighlighter\n      showLineNumbers={showLineNumbers}\n      lineNumberStyle={lineNumberStyle}\n      language={language}\n      style={themesStyles[theme]}\n      customStyle={customStyle}\n      codeTagProps={{\n        style: pick(style, 'backgroundColor'),\n      }}\n      wrapLongLines={wrapLongLines}\n      wrapLines={wrapLines}\n      PreTag={PreTag}\n    >\n      {children}\n    </SyntaxHighlighter>\n  );\n}\n\nexport * from './actions/SnippetCopyAction';\n"],"names":["ExperimentSourceTypeIcon","sourceType","className","SourceType","NOTEBOOK","_jsx","NotebookIcon","LOCAL","FileCodeIcon","PROJECT","FolderBranchIcon","JOB","WorkflowsIcon","module","exports","condition","format","a","b","c","d","e","f","error","undefined","Error","args","argIndex","replace","name","framesToPop","_converter","getMarkdownConverter","Converter","setFlavor","sanitizerOptions","allowedTags","allowedAttributes","img","div","sanitizeConvertedHtml","dirtyHtml","sanitizeHtml","forceAnchorTagNewTab","html","RegExp","useMarkdownConverter","useCallback","markdown","makeHtml","_ref","styles","SourceCellRenderer","React","value","tags","_tags$Utils$sourceTyp","theme","useDesignSystemTheme","_Fragment","children","Utils","sourceTypeTag","sourceLink","renderSource","_jsxs","css","_css","display","gap","spacing","xs","alignItems","color","colors","textSecondary","CopyActionButton","buttonProps","componentId","copyText","copyTooltip","isInsideInputGroup","onCopy","tooltipProps","actionIcon","copy","handleTooltipOpenChange","tooltipOpen","tooltipMessage","useCopyController","button","Button","icon","onClick","size","inputGroupButton","Tooltip","content","onOpenChange","open","LocalStorageUtils","getStoreForComponent","componentName","id","LocalStorageStore","join","getSessionScopedStoreForComponent","version","constructor","scope","type","storageObj","this","window","localStorage","sessionStorage","loadComponentState","storedVal","getItem","reactComponentStateKey","JSON","parse","saveComponentState","stateRecord","targetValue","toJSON","setItem","stringify","withScopePrefix","key","CopyButton","showLabel","showTooltip","setShowTooltip","useState","LegacyTooltip","title","FormattedMessage","defaultMessage","dangerouslySetAntdProps","visible","handleClick","navigator","clipboard","writeText","setTimeout","onMouseLeave","handleMouseLeave","GET_EXPERIMENT_QUERY","gql","useGetExperimentQuery","experimentId","options","_data$mlflowGetExperi","data","loading","apolloError","refetch","useQuery","variables","input","skip","mlflowGetExperiment","experiment","apiError","getApiError","_data$mlflowGetExperi2","EXPERIMENT_KIND_TAG_KEY","getExperimentKindFromTags","experimentTags","_experimentTags$find","find","tag","isEditableExperimentKind","experimentKind","ExperimentKind","GENAI_DEVELOPMENT_INFERRED","CUSTOM_MODEL_DEVELOPMENT_INFERRED","NO_INFERRED_TYPE","GENAI_DEVELOPMENT","CUSTOM_MODEL_DEVELOPMENT","EMPTY","normalizeInferredExperimentKind","ExperimentKindDropdownLabels","defineMessage","FINETUNING","REGRESSION","CLASSIFICATION","FORECASTING","AUTOML","ExperimentKindShortLabels","getSelectableExperimentKinds","ExperimentTracesPage","useParams","invariant","experimentIds","useMemo","ExperimentViewTraces","SnippetActionButton","style","SnippetCopyAction","props","SyntaxHighlighter","registerLanguage","sql","java","python","go","javascript","yaml","json","snippetPadding","themesStyles","light","lightStyle","duotoneDark","duotoneDarkStyle","CodeSnippet","language","actions","showLineNumbers","lineNumberStyle","wrapLongLines","wrapLines","PreTag","customStyle","border","borderRadius","margin","padding","codeTagProps","pick"],"sourceRoot":""}