{"version":3,"file":"static/js/6791.a5d1f5e4.chunk.js","mappings":"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","sources":["common/components/TagList.tsx","common/components/CollapsibleSection.tsx","common/utils/MarkdownUtils.ts","common/components/AliasSelect.tsx","common/hooks/useEditAliasesModal.tsx","common/components/error-boundaries/SectionErrorBoundary.tsx","common/components/tables/EditableFormTable.tsx","common/components/EditableTagsTableView.tsx","shared/building_blocks/CopyButton.tsx","common/components/RequestStateWrapper.tsx","common/components/Descriptions.tsx","common/components/Prompt.tsx","common/components/EditableNote.tsx","common/components/Spinner.tsx","common/components/KeyValueTagFullViewModal.tsx","common/components/KeyValueTag.tsx"],"sourcesContent":["import { useDesignSystemTheme } from '@databricks/design-system';\nimport { Tag, Button, PencilIcon } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../types';\nimport { FormattedMessage } from 'react-intl';\nimport { KeyValueTag } from './KeyValueTag';\n\ninterface Props {\n  tags: KeyValueEntity[];\n  onEdit: () => void;\n}\n\nexport const TagList = ({ tags, onEdit }: Props) => {\n  const { theme } = useDesignSystemTheme();\n\n  const hasTags = tags.length > 0;\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        gap: theme.spacing.xs,\n      }}\n    >\n      {tags?.map((tag) => (\n        <KeyValueTag key={tag.key} tag={tag} />\n      ))}\n      <Button\n        componentId=\"databricks-experiment-tracking-prompt-edit-tags-button\"\n        size=\"small\"\n        icon={hasTags ? <PencilIcon /> : undefined}\n        onClick={onEdit}\n      >\n        {hasTags ? null : (\n          <FormattedMessage defaultMessage=\"Add tags\" description=\"Add new prompt version tags button\" />\n        )}\n      </Button>\n    </div>\n  );\n};\n","import React, { useCallback } from 'react';\nimport { SectionErrorBoundary } from './error-boundaries/SectionErrorBoundary';\nimport type { DesignSystemThemeInterface } from '@databricks/design-system';\nimport { ChevronRightIcon, useDesignSystemTheme, Accordion, importantify } from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\n\ninterface CollapsibleSectionProps {\n  title: string | any;\n  forceOpen?: boolean;\n  children: React.ReactNode;\n  showServerError?: boolean;\n  defaultCollapsed?: boolean;\n  onChange?: (key: string | string[]) => void;\n  className?: string;\n  componentId?: string;\n}\n\n// Custom styles to make <Accordion> look like previously used <Collapse> from antd\nconst getAccordionStyles = ({\n  theme,\n  getPrefixedClassName,\n}: Pick<DesignSystemThemeInterface, 'theme' | 'getPrefixedClassName'>) => {\n  const clsPrefix = getPrefixedClassName('collapse');\n\n  const classItem = `.${clsPrefix}-item`;\n  const classHeader = `.${clsPrefix}-header`;\n  const classContentBox = `.${clsPrefix}-content-box`;\n\n  return {\n    fontSize: 14,\n    [`& > ${classItem} > ${classHeader}`]: {\n      paddingLeft: 0,\n      paddingTop: 12,\n      paddingBottom: 12,\n      display: 'flex',\n      alignItems: 'center',\n      fontSize: 16,\n      fontWeight: 'normal',\n      lineHeight: theme.typography.lineHeightLg,\n    },\n    [classContentBox]: {\n      padding: `${theme.spacing.xs}px 0 ${theme.spacing.md}px 0`,\n    },\n  };\n};\n\nexport function CollapsibleSection(props: CollapsibleSectionProps) {\n  const {\n    title,\n    forceOpen,\n    showServerError,\n    defaultCollapsed,\n    onChange,\n    className,\n    componentId = 'mlflow.common.generic_collapsible_section',\n  } = props;\n\n  // We need to spread `activeKey` into <Collapse/> as an optional prop because its enumerability\n  // affects rendering, i.e. passing `activeKey={undefined}` is different from not passing activeKey\n  const activeKeyProp = forceOpen && { activeKey: ['1'] };\n  const defaultActiveKey = defaultCollapsed ? null : ['1'];\n\n  const { theme, getPrefixedClassName } = useDesignSystemTheme();\n  const { formatMessage } = useIntl();\n\n  const getExpandIcon = useCallback(\n    ({ isActive }: { isActive?: boolean }) => (\n      <div\n        css={importantify({ width: theme.general.heightBase / 2, transform: isActive ? 'rotate(90deg)' : undefined })}\n      >\n        <ChevronRightIcon\n          css={{\n            svg: { width: theme.general.heightBase / 2, height: theme.general.heightBase / 2 },\n          }}\n          aria-label={\n            isActive\n              ? formatMessage(\n                  {\n                    defaultMessage: 'collapse {title}',\n                    description: 'Common component > collapsible section > alternative label when expand',\n                  },\n                  { title },\n                )\n              : formatMessage(\n                  {\n                    defaultMessage: 'expand {title}',\n                    description: 'Common component > collapsible section > alternative label when collapsed',\n                  },\n                  { title },\n                )\n          }\n        />\n      </div>\n    ),\n    [theme, title, formatMessage],\n  );\n\n  return (\n    <Accordion\n      componentId={componentId}\n      {...activeKeyProp}\n      dangerouslyAppendEmotionCSS={getAccordionStyles({ theme, getPrefixedClassName })}\n      dangerouslySetAntdProps={{\n        className,\n        expandIconPosition: 'left',\n        expandIcon: getExpandIcon,\n      }}\n      defaultActiveKey={defaultActiveKey ?? undefined}\n      onChange={onChange}\n    >\n      <Accordion.Panel header={title} key=\"1\">\n        <SectionErrorBoundary showServerError={showServerError}>{props.children}</SectionErrorBoundary>\n      </Accordion.Panel>\n    </Accordion>\n  );\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport { useCallback } from 'react';\nimport sanitizeHtml from 'sanitize-html';\n// @ts-expect-error TS(7016): Could not find a declaration file for module 'show... Remove this comment to see the full error message\nimport { Converter } from 'showdown';\n\n// Use Github-like Markdown (i.e. support for tasklists, strikethrough,\n// simple line breaks, code blocks, emojis)\nconst DEFAULT_MARKDOWN_FLAVOR = 'github';\n\nlet _converter: Converter | null = null;\n\nexport const getMarkdownConverter = () => {\n  // Reuse the same converter instance if available\n  if (_converter) {\n    return _converter;\n  }\n  _converter = new Converter();\n  _converter.setFlavor(DEFAULT_MARKDOWN_FLAVOR);\n  return _converter;\n};\n\n// Options for HTML sanitizer.\n// See https://www.npmjs.com/package/sanitize-html#what-are-the-default-options for usage.\n// These options were chosen to be similar to Github's allowlist but simpler (i.e. we don't\n// do any transforms of the contained HTML and we disallow script entirely instead of\n// removing contents).\nconst sanitizerOptions = {\n  allowedTags: [\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'h7',\n    'h8',\n    'blockquote',\n    'p',\n    'a',\n    'ul',\n    'ol',\n    'nl',\n    'li',\n    'ins',\n    'b',\n    'i',\n    'strong',\n    'em',\n    'strike',\n    'code',\n    'hr',\n    'br',\n    'div',\n    'table',\n    'thead',\n    'tbody',\n    'tr',\n    'th',\n    'td',\n    'pre',\n    'del',\n    'sup',\n    'sub',\n    'dl',\n    'dt',\n    'dd',\n    'kbd',\n    'q',\n    'samp',\n    'samp',\n    'var',\n    'hr',\n    'rt',\n    'rp',\n    'summary',\n    'iframe',\n    'img',\n    'caption',\n    'figure',\n  ],\n  allowedAttributes: {\n    a: ['href', 'name', 'target'],\n    img: ['src', 'longdesc'],\n    div: ['itemscope', 'itemtype'],\n  },\n};\n\nexport const sanitizeConvertedHtml = (dirtyHtml: any) => {\n  return sanitizeHtml(dirtyHtml, sanitizerOptions);\n};\n\nexport const forceAnchorTagNewTab = (html: any) => {\n  return html.replace(new RegExp('<a', 'g'), '<a target=\"_blank\"');\n};\n\nexport const useMarkdownConverter = () =>\n  useCallback((markdown?: string) => {\n    const converter = getMarkdownConverter();\n    const html = converter.makeHtml(markdown);\n    return sanitizeConvertedHtml(html);\n  }, []);\n","import type { Dispatch } from 'react';\nimport { useCallback, useState } from 'react';\n\nimport { LegacySelect, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { AliasTag } from './AliasTag';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\n/**\n * A specialized <LegacySelect> component used for adding and removing aliases from model versions\n */\nexport const AliasSelect = ({\n  renderKey,\n  setDraftAliases,\n  existingAliases,\n  draftAliases,\n  version,\n  aliasToVersionMap,\n  disabled,\n}: {\n  renderKey: any;\n  disabled: boolean;\n  setDraftAliases: Dispatch<React.SetStateAction<string[]>>;\n  existingAliases: string[];\n  draftAliases: string[];\n  version: string;\n  aliasToVersionMap: Record<string, string>;\n}) => {\n  const intl = useIntl();\n  const [dropdownVisible, setDropdownVisible] = useState(false);\n\n  const { theme } = useDesignSystemTheme();\n\n  const removeFromEditedAliases = useCallback(\n    (alias: string) => {\n      setDraftAliases((aliases) => aliases.filter((existingAlias) => existingAlias !== alias));\n    },\n    [setDraftAliases],\n  );\n\n  const updateEditedAliases = useCallback(\n    (aliases: string[]) => {\n      const sanitizedAliases = aliases\n        // Remove all characters that are not alphanumeric, underscores or hyphens\n        .map((alias) =>\n          alias\n            .replace(/[^\\w-]/g, '')\n            .toLowerCase()\n            .substring(0, 255),\n        )\n        // After sanitization, filter out invalid aliases\n        // so we won't get empty values\n        .filter((alias) => alias.length > 0);\n\n      // Remove duplicates that might result from varying letter case\n      const uniqueAliases = Array.from(new Set(sanitizedAliases));\n      setDraftAliases(uniqueAliases);\n      setDropdownVisible(false);\n    },\n    [setDraftAliases],\n  );\n\n  return (\n    // For the time being, we will use <LegacySelect /> under the hood,\n    // while <TypeaheadCombobox /> is still in the design phase.\n    <LegacySelect\n      disabled={disabled}\n      filterOption={(val, opt) => opt?.value.toLowerCase().startsWith(val.toLowerCase())}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Enter aliases (champion, challenger, etc)',\n        description: 'Model registry > model version alias select > Alias input placeholder',\n      })}\n      allowClear\n      css={{ width: '100%' }}\n      mode=\"tags\"\n      // There's a bug with current <LegacySelect /> implementation that causes the dropdown\n      // to detach from input vertically when its position on screen changes (in this case, it's\n      // caused by the conflict alerts). A small key={} hack ensures that the component is recreated\n      // and the dropdown is repositioned each time the alerts below are changed.\n      key={JSON.stringify(renderKey)}\n      onChange={updateEditedAliases}\n      dangerouslySetAntdProps={{\n        dropdownMatchSelectWidth: true,\n        tagRender: ({ value }) => (\n          <AliasTag\n            compact\n            css={{ marginTop: 2 }}\n            closable\n            onClose={() => removeFromEditedAliases(value.toString())}\n            value={value.toString()}\n          />\n        ),\n      }}\n      onDropdownVisibleChange={setDropdownVisible}\n      open={dropdownVisible}\n      value={draftAliases || []}\n    >\n      {existingAliases.map((alias) => (\n        <LegacySelect.Option key={alias} value={alias} data-testid=\"model-alias-option\">\n          <div key={alias} css={{ display: 'flex', marginRight: theme.spacing.xs }}>\n            <div css={{ flex: 1 }}>{alias}</div>\n            <div>\n              <FormattedMessage\n                defaultMessage=\"This version\"\n                description=\"Model registry > model version alias select > Indicator for alias of selected version\"\n              />\n            </div>\n          </div>\n        </LegacySelect.Option>\n      ))}\n      {Object.entries(aliasToVersionMap)\n        .filter(([, otherVersion]) => otherVersion !== version)\n        .map(([alias, aliasedVersion]) => (\n          <LegacySelect.Option key={alias} value={alias} data-testid=\"model-alias-option\">\n            <div key={alias} css={{ display: 'flex', marginRight: theme.spacing.xs }}>\n              <div css={{ flex: 1 }}>{alias}</div>\n              <div>\n                <FormattedMessage\n                  defaultMessage=\"Version {version}\"\n                  description=\"Model registry > model version alias select > Indicator for alias of a particular version\"\n                  values={{ version: aliasedVersion }}\n                />\n              </div>\n            </div>\n          </LegacySelect.Option>\n        ))}\n    </LegacySelect>\n  );\n};\n","import { isEqual } from 'lodash';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { Alert, Button, LegacyForm, Modal, useDesignSystemTheme } from '@databricks/design-system';\nimport { Typography } from '@databricks/design-system';\nimport { AliasSelect } from '../components/AliasSelect';\nimport { FormattedMessage } from 'react-intl';\n\nimport { ErrorWrapper } from '../utils/ErrorWrapper';\nimport type { AliasMap } from '../types';\n\nconst MAX_ALIASES_PER_MODEL_VERSION = 10;\n\n/**\n * Provides methods to initialize and display modal used to add and remove aliases from the model version\n */\nexport const useEditAliasesModal = ({\n  aliases,\n  onSuccess,\n  onSave,\n  getTitle,\n  description,\n}: {\n  aliases: AliasMap;\n  onSuccess?: () => void;\n  onSave: (currentlyEditedVersion: string, existingAliases: string[], draftAliases: string[]) => Promise<any>;\n  getTitle: (version: string) => React.ReactNode;\n  description?: React.ReactNode;\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [form] = LegacyForm.useForm();\n\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const { theme } = useDesignSystemTheme();\n\n  // We will keep version's existing aliases in `existingAliases` state array\n  const [existingAliases, setExistingAliases] = useState<string[]>([]);\n  // Currently edited aliases will be kept in `draftAliases` state array\n  const [draftAliases, setDraftAliases] = useState<string[]>([]);\n  // Currently edited version\n  const [currentlyEditedVersion, setCurrentlyEditedVersion] = useState<string>('0');\n\n  /**\n   * Function used to invoke the modal and start editing aliases of the particular model version\n   */\n  const showEditAliasesModal = useCallback(\n    (versionNumber: string) => {\n      const modelVersionAliases =\n        aliases.filter(({ version }) => version === versionNumber).map(({ alias }) => alias) || [];\n\n      if (versionNumber) {\n        setExistingAliases(modelVersionAliases);\n        setDraftAliases(modelVersionAliases);\n        setCurrentlyEditedVersion(versionNumber);\n        setShowModal(true);\n      }\n    },\n    [aliases],\n  );\n\n  // // Finds and stores alias values found in other model versions\n  const conflictedAliases = useMemo(() => {\n    const versionsWithAliases = aliases.reduce<{ version: string; aliases: string[] }[]>((aliasMap, aliasEntry) => {\n      if (!aliasMap.some(({ version }) => version === aliasEntry.version)) {\n        return [...aliasMap, { version: aliasEntry.version, aliases: [aliasEntry.alias] }];\n      }\n      aliasMap.find(({ version }) => version === aliasEntry.version)?.aliases.push(aliasEntry.alias);\n      return aliasMap;\n    }, []);\n    const otherVersionMappings = versionsWithAliases.filter(\n      ({ version: otherVersion }) => otherVersion !== currentlyEditedVersion,\n    );\n    return draftAliases\n      .map((alias) => ({\n        alias,\n        otherVersion: otherVersionMappings.find((version) =>\n          version.aliases?.find((alias_name) => alias_name === alias),\n        ),\n      }))\n      .filter(({ otherVersion }) => otherVersion);\n  }, [aliases, draftAliases, currentlyEditedVersion]);\n\n  // Maps particular aliases to versions\n  const aliasToVersionMap = useMemo(\n    () =>\n      aliases.reduce<Record<string, string>>((result, { alias, version }) => {\n        return { ...result, [alias]: version };\n      }, {}) || {},\n    [aliases],\n  );\n\n  const save = () => {\n    setErrorMessage('');\n    setIsLoading(true);\n    onSave(currentlyEditedVersion, existingAliases, draftAliases)\n      .then(() => {\n        setIsLoading(false);\n        setShowModal(false);\n        onSuccess?.();\n      })\n      .catch((e: ErrorWrapper | Error) => {\n        setIsLoading(false);\n        if (e instanceof ErrorWrapper) {\n          const extractedErrorMessage = e.getMessageField() || e.getUserVisibleError().toString() || e.text;\n          setErrorMessage(extractedErrorMessage);\n        } else {\n          setErrorMessage(e.message);\n        }\n      });\n  };\n\n  // Indicates if there is any pending change to the alias set\n  const isPristine = isEqual(existingAliases.slice().sort(), draftAliases.slice().sort());\n  const isExceedingLimit = draftAliases.length > MAX_ALIASES_PER_MODEL_VERSION;\n\n  const isInvalid = isPristine || isExceedingLimit;\n\n  const EditAliasesModal = (\n    <Modal\n      componentId=\"mlflow.edit-aliases-modal\"\n      visible={showModal}\n      footer={\n        <div>\n          <Button componentId=\"mlflow.edit-aliases-modal.cancel-button\" onClick={() => setShowModal(false)}>\n            <FormattedMessage defaultMessage=\"Cancel\" description=\"Alias editor > Cancel editing aliases\" />\n          </Button>\n          <Button\n            componentId=\"mlflow.edit-aliases-modal.save-button\"\n            loading={isLoading}\n            type=\"primary\"\n            disabled={isInvalid}\n            onClick={save}\n          >\n            <FormattedMessage defaultMessage=\"Save aliases\" description=\"Alias editor > Confirm change of aliases\" />\n          </Button>\n        </div>\n      }\n      destroyOnClose\n      title={getTitle(currentlyEditedVersion)}\n      onCancel={() => setShowModal(false)}\n      confirmLoading={false}\n    >\n      <Typography.Paragraph>{description}</Typography.Paragraph>\n      <LegacyForm form={form} layout=\"vertical\">\n        <LegacyForm.Item>\n          <AliasSelect\n            disabled={false}\n            renderKey={conflictedAliases} // todo\n            aliasToVersionMap={aliasToVersionMap}\n            version={currentlyEditedVersion}\n            draftAliases={draftAliases}\n            existingAliases={existingAliases}\n            setDraftAliases={setDraftAliases}\n          />\n        </LegacyForm.Item>\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n          {isExceedingLimit && (\n            <Alert\n              componentId=\"mlflow.edit-aliases-modal.exceeding-limit-alert\"\n              role=\"alert\"\n              message={\n                <FormattedMessage\n                  defaultMessage=\"You are exceeding a limit of {limit} aliases assigned to the single model version\"\n                  description=\"Alias editor > Warning about exceeding aliases limit\"\n                  values={{ limit: MAX_ALIASES_PER_MODEL_VERSION }}\n                />\n              }\n              type=\"error\"\n              closable={false}\n            />\n          )}\n          {conflictedAliases.map(({ alias, otherVersion }) => (\n            <Alert\n              componentId=\"mlflow.edit-aliases-modal.conflicted-alias-alert\"\n              role=\"alert\"\n              key={alias}\n              message={\n                <FormattedMessage\n                  defaultMessage='The \"{alias}\" alias is also being used on version {otherVersion}. Adding it to this version will remove it from version {otherVersion}.'\n                  description=\"Alias editor > Warning about reusing alias from the other version\"\n                  values={{ otherVersion: otherVersion?.version, alias }}\n                />\n              }\n              type=\"info\"\n              closable={false}\n            />\n          ))}\n          {errorMessage && (\n            <Alert\n              componentId=\"mlflow.edit-aliases-modal.error-alert\"\n              role=\"alert\"\n              message={errorMessage}\n              type=\"error\"\n              closable={false}\n            />\n          )}\n        </div>\n      </LegacyForm>\n    </Modal>\n  );\n\n  return { EditAliasesModal, showEditAliasesModal };\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport Utils from '../../utils/Utils';\n\ntype Props = {\n  showServerError?: boolean;\n};\n\ntype State = any;\n\nexport class SectionErrorBoundary extends React.Component<Props, State> {\n  state = { error: null };\n\n  componentDidCatch(error: any, errorInfo: any) {\n    this.setState({ error });\n    // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n    console.error(error, errorInfo);\n  }\n\n  renderErrorMessage(error: any) {\n    return this.props.showServerError ? <div>Error message: {error.message}</div> : '';\n  }\n\n  render() {\n    const { children } = this.props;\n    const { error } = this.state;\n    if (error) {\n      return (\n        <div>\n          <p>\n            <i\n              data-testid=\"icon-fail\"\n              className=\"fa fa-exclamation-triangle mlflow-icon-fail\"\n              css={classNames.wrapper}\n            />\n            <span> Something went wrong with this section. </span>\n            <span>If this error persists, please report an issue </span>\n            {/* Reported during ESLint upgrade */}\n            {/* eslint-disable-next-line react/jsx-no-target-blank */}\n            <a href={Utils.getSupportPageUrl()} target=\"_blank\">\n              here\n            </a>\n            .{this.renderErrorMessage(error)}\n          </p>\n        </div>\n      );\n    }\n\n    return children;\n  }\n}\n\nconst classNames = {\n  wrapper: {\n    marginLeft: -2, // to align the failure icon with the collapsable section caret toggle\n  },\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport {\n  Input,\n  Button,\n  LegacyForm,\n  Modal,\n  LegacyTable,\n  PencilIcon,\n  Spinner,\n  TrashIcon,\n} from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\n// @ts-expect-error TS(2554): Expected 1 arguments, but got 0.\nconst EditableContext = React.createContext();\n\ntype EditableCellProps = {\n  editing?: boolean;\n  dataIndex?: string;\n  title?: string;\n  record?: any;\n  index?: number;\n  save?: (...args: any[]) => any;\n  cancel?: (...args: any[]) => any;\n  recordKey?: string;\n};\n\nclass EditableCell extends React.Component<EditableCellProps> {\n  handleKeyPress = (event: any) => {\n    const { save, recordKey, cancel } = this.props;\n    if (event.key === 'Enter') {\n      // @ts-expect-error TS(2722): Cannot invoke an object which is possibly 'undefin... Remove this comment to see the full error message\n      save(recordKey);\n    } else if (event.key === 'Escape') {\n      // @ts-expect-error TS(2722): Cannot invoke an object which is possibly 'undefin... Remove this comment to see the full error message\n      cancel();\n    }\n  };\n\n  render() {\n    const { editing, dataIndex, record, children } = this.props;\n    return (\n      <EditableContext.Consumer>\n        {/* @ts-expect-error TS(2322): Type '({ formRef }: { formRef: any; }) => Element'... Remove this comment to see the full error message */}\n        {({ formRef }) => (\n          <div className={editing ? 'editing-cell' : ''}>\n            {editing ? (\n              // @ts-expect-error TS(2322): Type '{ children: Element; ref: any; }' is not ass... Remove this comment to see the full error message\n              <LegacyForm ref={formRef}>\n                {/* @ts-expect-error TS(2322): Type '{ children: Element; style: { margin: number... Remove this comment to see the full error message */}\n                <LegacyForm.Item style={{ margin: 0 }} name={dataIndex} initialValue={record[dataIndex]}>\n                  <Input\n                    componentId=\"codegen_mlflow_app_src_common_components_tables_editableformtable.tsx_50\"\n                    onKeyDown={this.handleKeyPress}\n                    data-testid=\"editable-table-edited-input\"\n                  />\n                </LegacyForm.Item>\n              </LegacyForm>\n            ) : (\n              children\n            )}\n          </div>\n        )}\n      </EditableContext.Consumer>\n    );\n  }\n}\n\ntype EditableTableProps = {\n  columns: any[];\n  data: any[];\n  onSaveEdit: (...args: any[]) => any;\n  onDelete: (...args: any[]) => any;\n  intl?: any;\n};\n\ntype EditableTableState = any;\n\nexport class EditableTable extends React.Component<EditableTableProps, EditableTableState> {\n  columns: any;\n  form: any;\n\n  constructor(props: EditableTableProps) {\n    super(props);\n    this.state = { editingKey: '', isRequestPending: false, deletingKey: '' };\n    this.columns = this.initColumns();\n    this.form = React.createRef();\n  }\n\n  initColumns = () => [\n    ...this.props.columns.map((col) =>\n      col.editable\n        ? {\n            ...col,\n            render: (text: any, record: any) => (\n              <EditableCell\n                record={record}\n                dataIndex={col.dataIndex}\n                title={col.title}\n                editing={this.isEditing(record)}\n                save={this.save}\n                cancel={this.cancel}\n                recordKey={record.key}\n                children={text}\n              />\n            ),\n          }\n        : col,\n    ),\n    {\n      title: (\n        <FormattedMessage\n          defaultMessage=\"Actions\"\n          description=\"Column title for actions column in editable form table in MLflow\"\n        />\n      ),\n      dataIndex: 'operation',\n      render: (text: any, record: any) => {\n        const { editingKey, isRequestPending } = this.state;\n        const editing = this.isEditing(record);\n        if (editing && isRequestPending) {\n          return <Spinner size=\"small\" />;\n        }\n        return editing ? (\n          <span>\n            <Button\n              componentId=\"codegen_mlflow_app_src_common_components_tables_editableformtable.tsx_120\"\n              type=\"link\"\n              onClick={() => this.save(record.key)}\n              style={{ marginRight: 10 }}\n              data-testid=\"editable-table-button-save\"\n            >\n              <FormattedMessage\n                defaultMessage=\"Save\"\n                description=\"Text for saving changes on rows in editable form table in MLflow\"\n              />\n            </Button>\n            <Button\n              componentId=\"codegen_mlflow_app_src_common_components_tables_editableformtable.tsx_131\"\n              type=\"link\"\n              // @ts-expect-error TS(2554): Expected 0 arguments, but got 1.\n              onClick={() => this.cancel(record.key)}\n              data-testid=\"editable-table-button-cancel\"\n            >\n              <FormattedMessage\n                defaultMessage=\"Cancel\"\n                description=\"Text for canceling changes on rows in editable form table in MLflow\"\n              />\n            </Button>\n          </span>\n        ) : (\n          <span>\n            <Button\n              componentId=\"codegen_mlflow_app_src_common_components_tables_editableformtable.tsx_145\"\n              icon={<PencilIcon />}\n              disabled={editingKey !== ''}\n              onClick={() => this.edit(record.key)}\n              data-testid=\"editable-table-button-edit\"\n            />\n            <Button\n              componentId=\"codegen_mlflow_app_src_common_components_tables_editableformtable.tsx_151\"\n              icon={<TrashIcon />}\n              disabled={editingKey !== ''}\n              onClick={() => this.setState({ deletingKey: record.key })}\n              data-testid=\"editable-table-button-delete\"\n            />\n          </span>\n        );\n      },\n    },\n  ];\n\n  // @ts-expect-error TS(4111): Property 'editingKey' comes from an index signatur... Remove this comment to see the full error message\n  isEditing = (record: any) => record.key === this.state.editingKey;\n\n  cancel = () => {\n    this.setState({ editingKey: '' });\n  };\n\n  save = (key: any) => {\n    this.form.current.validateFields().then((values: any) => {\n      const record = this.props.data.find((r) => r.key === key);\n      if (record) {\n        this.setState({ isRequestPending: true });\n        this.props.onSaveEdit({ ...record, ...values }).then(() => {\n          this.setState({ editingKey: '', isRequestPending: false });\n        });\n      }\n    });\n  };\n\n  delete = async (key: any) => {\n    try {\n      const record = this.props.data.find((r) => r.key === key);\n      if (record) {\n        this.setState({ isRequestPending: true });\n        await this.props.onDelete({ ...record });\n      }\n    } finally {\n      this.setState({ deletingKey: '', isRequestPending: false });\n    }\n  };\n\n  edit = (key: any) => {\n    this.setState({ editingKey: key });\n  };\n\n  render() {\n    const { data } = this.props;\n    return (\n      <EditableContext.Provider value={{ formRef: this.form }}>\n        <LegacyTable\n          className=\"editable-table\"\n          data-testid=\"editable-table\"\n          dataSource={data}\n          columns={this.columns}\n          size=\"middle\"\n          tableLayout=\"fixed\"\n          pagination={false}\n          locale={{\n            emptyText: (\n              <FormattedMessage\n                defaultMessage=\"No tags found.\"\n                description=\"Text for no tags found in editable form table in MLflow\"\n              />\n            ),\n          }}\n          scroll={{ y: 280 }}\n        />\n        <Modal\n          componentId=\"codegen_mlflow_app_src_common_components_tables_editableformtable.tsx_228\"\n          data-testid=\"editable-form-table-remove-modal\"\n          title={\n            <FormattedMessage\n              defaultMessage=\"Are you sure you want to delete this tag？\"\n              description=\"Title text for confirmation pop-up to delete a tag from table\n                     in MLflow\"\n            />\n          }\n          // @ts-expect-error TS(4111): Property 'deletingKey' comes from an index signatu... Remove this comment to see the full error message\n          visible={this.state.deletingKey}\n          okText={\n            <FormattedMessage\n              defaultMessage=\"Confirm\"\n              description=\"OK button text for confirmation pop-up to delete a tag from table\n                     in MLflow\"\n            />\n          }\n          cancelText={\n            <FormattedMessage\n              defaultMessage=\"Cancel\"\n              description=\"Cancel button text for confirmation pop-up to delete a tag from\n                     table in MLflow\"\n            />\n          }\n          // @ts-expect-error TS(4111): Property 'isRequestPending' comes from an index si... Remove this comment to see the full error message\n          confirmLoading={this.state.isRequestPending}\n          // @ts-expect-error TS(4111): Property 'deletingKey' comes from an index signatu... Remove this comment to see the full error message\n          onOk={() => this.delete(this.state.deletingKey)}\n          onCancel={() => this.setState({ deletingKey: '' })}\n        />\n      </EditableContext.Provider>\n    );\n  }\n}\n\nexport const EditableFormTable = EditableTable;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport Utils from '../utils/Utils';\nimport { LegacyForm, Input, Button, Spacer } from '@databricks/design-system';\nimport { EditableFormTable } from './tables/EditableFormTable';\nimport { sortBy } from 'lodash';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\ntype Props = {\n  tags: any;\n  handleAddTag: (...args: any[]) => any;\n  handleSaveEdit: (...args: any[]) => any;\n  handleDeleteTag: (...args: any[]) => any;\n  isRequestPending: boolean;\n  intl: {\n    formatMessage: (...args: any[]) => any;\n  };\n  innerRef?: any;\n};\n\nclass EditableTagsTableViewImpl extends Component<Props> {\n  tableColumns = [\n    {\n      title: this.props.intl.formatMessage({\n        defaultMessage: 'Name',\n        description: 'Column title for name column in editable tags table view in MLflow',\n      }),\n      dataIndex: 'name',\n      width: 200,\n    },\n    {\n      title: this.props.intl.formatMessage({\n        defaultMessage: 'Value',\n        description: 'Column title for value column in editable tags table view in MLflow',\n      }),\n      dataIndex: 'value',\n      width: 200,\n      editable: true,\n    },\n  ];\n\n  getData = () =>\n    sortBy(\n      Utils.getVisibleTagValues(this.props.tags).map((values) => ({\n        key: values[0],\n        name: values[0],\n        value: values[1],\n      })),\n      'name',\n    );\n\n  getTagNamesAsSet = () => new Set(Utils.getVisibleTagValues(this.props.tags).map((values) => values[0]));\n\n  tagNameValidator = (rule: any, value: any, callback: any) => {\n    const tagNamesSet = this.getTagNamesAsSet();\n    callback(\n      tagNamesSet.has(value)\n        ? this.props.intl.formatMessage(\n            {\n              defaultMessage: 'Tag \"{value}\" already exists.',\n              description: 'Validation message for tags that already exist in tags table in MLflow',\n            },\n            {\n              value: value,\n            },\n          )\n        : undefined,\n    );\n  };\n\n  render() {\n    const { isRequestPending, handleSaveEdit, handleDeleteTag, handleAddTag, innerRef } = this.props;\n\n    return (\n      <>\n        <EditableFormTable\n          columns={this.tableColumns}\n          data={this.getData()}\n          onSaveEdit={handleSaveEdit}\n          onDelete={handleDeleteTag}\n        />\n        <Spacer size=\"sm\" />\n        <div>\n          {/* @ts-expect-error TS(2322): Type '{ children: Element[]; ref: any; layout: \"in... Remove this comment to see the full error message */}\n          <LegacyForm ref={innerRef} layout=\"inline\" onFinish={handleAddTag} css={styles.form}>\n            <LegacyForm.Item\n              name=\"name\"\n              rules={[\n                {\n                  required: true,\n                  message: this.props.intl.formatMessage({\n                    defaultMessage: 'Name is required.',\n                    description: 'Error message for name requirement in editable tags table view in MLflow',\n                  }),\n                },\n                {\n                  validator: this.tagNameValidator,\n                },\n              ]}\n            >\n              <Input\n                componentId=\"codegen_mlflow_app_src_common_components_editabletagstableview.tsx_107\"\n                aria-label=\"tag name\"\n                data-testid=\"tags-form-input-name\"\n                placeholder={this.props.intl.formatMessage({\n                  defaultMessage: 'Name',\n                  description: 'Default text for name placeholder in editable tags table form in MLflow',\n                })}\n              />\n            </LegacyForm.Item>\n            <LegacyForm.Item name=\"value\" rules={[]}>\n              <Input\n                componentId=\"codegen_mlflow_app_src_common_components_editabletagstableview.tsx_117\"\n                aria-label=\"tag value\"\n                data-testid=\"tags-form-input-value\"\n                placeholder={this.props.intl.formatMessage({\n                  defaultMessage: 'Value',\n                  description: 'Default text for value placeholder in editable tags table form in MLflow',\n                })}\n              />\n            </LegacyForm.Item>\n            <LegacyForm.Item>\n              <Button\n                componentId=\"codegen_mlflow_app_src_common_components_editabletagstableview.tsx_127\"\n                loading={isRequestPending}\n                htmlType=\"submit\"\n                data-testid=\"add-tag-button\"\n              >\n                <FormattedMessage\n                  defaultMessage=\"Add\"\n                  description=\"Add button text in editable tags table view in MLflow\"\n                />\n              </Button>\n            </LegacyForm.Item>\n          </LegacyForm>\n        </div>\n      </>\n    );\n  }\n}\n\nconst styles = {\n  form: (theme: any) => ({\n    '& > div': { marginRight: theme.spacing.sm },\n  }),\n};\n\n// @ts-expect-error TS(2769): No overload matches this call.\nexport const EditableTagsTableView = injectIntl(EditableTagsTableViewImpl);\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, type ButtonProps, LegacyTooltip } from '@databricks/design-system';\n\ninterface CopyButtonProps extends Partial<ButtonProps> {\n  copyText: string;\n  showLabel?: React.ReactNode;\n  componentId?: string;\n}\n\nexport const CopyButton = ({ copyText, showLabel = true, componentId, ...buttonProps }: CopyButtonProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <LegacyTooltip\n      title={\n        <FormattedMessage defaultMessage=\"Copied\" description=\"Tooltip text shown when copy operation completes\" />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button\n        componentId={componentId ?? 'mlflow.shared.copy_button'}\n        type=\"primary\"\n        onClick={handleClick}\n        onMouseLeave={handleMouseLeave}\n        css={{ 'z-index': 1 }}\n        // Define children as a explicit prop so it can be easily overrideable\n        children={\n          showLabel ? <FormattedMessage defaultMessage=\"Copy\" description=\"Button text for copy button\" /> : undefined\n        }\n        {...buttonProps}\n      />\n    </LegacyTooltip>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getApis } from '../../experiment-tracking/reducers/Reducers';\nimport { Spinner } from './Spinner';\nimport { ErrorCodes } from '../constants';\nimport type { ErrorWrapper } from '../utils/ErrorWrapper';\nimport type { ReduxState } from '../../redux-types';\n\nexport const DEFAULT_ERROR_MESSAGE = 'A request error occurred.';\n\ntype RequestStateWrapperProps = {\n  children?: React.ReactNode;\n  customSpinner?: React.ReactNode;\n  shouldOptimisticallyRender?: boolean;\n  requests: any[];\n  requestIds?: string[];\n  requestIdsWith404sToIgnore?: string[];\n  description?: any; // TODO: PropTypes.oneOf(Object.values(LoadingDescription))\n  permissionDeniedView?: React.ReactNode;\n  suppressErrorThrow?: boolean;\n  customRequestErrorHandlerFn?: (\n    failedRequests: {\n      id: string;\n      active?: boolean;\n      error: Error | ErrorWrapper;\n    }[],\n  ) => void;\n};\n\ntype RequestStateWrapperState = any;\n\nexport class RequestStateWrapper extends Component<RequestStateWrapperProps, RequestStateWrapperState> {\n  static defaultProps = {\n    requests: [],\n    requestIdsWith404sToIgnore: [],\n    shouldOptimisticallyRender: false,\n  };\n\n  state = {\n    shouldRender: false,\n    shouldRenderError: false,\n  };\n\n  static getErrorRequests(requests: any, requestIdsWith404sToIgnore: any) {\n    return requests.filter((r: any) => {\n      if (r.error !== undefined) {\n        return !(\n          requestIdsWith404sToIgnore &&\n          requestIdsWith404sToIgnore.includes(r.id) &&\n          r.error.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n        );\n      }\n      return false;\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps: any) {\n    const shouldRender = nextProps.requests.length\n      ? nextProps.requests.every((r: any) => r && r.active === false)\n      : false;\n\n    const requestErrors = RequestStateWrapper.getErrorRequests(\n      nextProps.requests,\n      nextProps.requestIdsWith404sToIgnore,\n    );\n\n    return {\n      shouldRender,\n      shouldRenderError: requestErrors.length > 0,\n      requestErrors,\n    };\n  }\n\n  getRenderedContent() {\n    const { children, requests, customSpinner, permissionDeniedView, suppressErrorThrow, customRequestErrorHandlerFn } =\n      this.props;\n    // @ts-expect-error TS(2339): Property 'requestErrors' does not exist on type '{... Remove this comment to see the full error message\n    const { shouldRender, shouldRenderError, requestErrors } = this.state;\n    const permissionDeniedErrors = requestErrors.filter((failedRequest: any) => {\n      return failedRequest.error.getErrorCode() === ErrorCodes.PERMISSION_DENIED;\n    });\n\n    if (typeof children === 'function') {\n      return children(!shouldRender, shouldRenderError, requests, requestErrors);\n    } else if (shouldRender || shouldRenderError || this.props.shouldOptimisticallyRender) {\n      if (permissionDeniedErrors.length > 0 && permissionDeniedView) {\n        return permissionDeniedView;\n      }\n      if (shouldRenderError && !suppressErrorThrow) {\n        customRequestErrorHandlerFn ? customRequestErrorHandlerFn(requestErrors) : triggerError(requestErrors);\n      }\n\n      return children;\n    }\n\n    return customSpinner || <Spinner />;\n  }\n\n  render() {\n    return this.getRenderedContent();\n  }\n}\n\nexport const triggerError = (requests: any) => {\n  // This triggers the OOPS error boundary.\n  // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n  console.error('ERROR', requests);\n  throw Error(`${DEFAULT_ERROR_MESSAGE}: ${requests.error}`);\n};\n\nconst mapStateToProps = (state: ReduxState, ownProps: Omit<RequestStateWrapperProps, 'requests'>) => ({\n  requests: getApis(ownProps.requestIds, state),\n});\n\nexport default connect(mapStateToProps)(RequestStateWrapper);\n","import { Typography } from '@databricks/design-system';\nimport type { Theme } from '@emotion/react';\nimport React from 'react';\n\nexport interface DescriptionsProps {\n  columns?: number;\n}\n\nexport interface DescriptionsItemProps {\n  label: string | React.ReactNode;\n  labelSize?: 'sm' | 'md' | 'lg' | 'xl' | 'xxl';\n  span?: number;\n}\n\n/**\n * A component that displays the informative data in a key-value\n * fashion. Behaves similarly to antd's <Descriptions /> component.\n * If the number of columns is specified, then the key-values will\n * be displayed as such and will always be that number of columns\n * regardless of the width of the window.\n * If the number of columns is not specified, then the number of\n * columns will vary based on the size of the window.\n *\n * The following example will display four key-value descriptions\n * using two columns, which will result in data displayed in two rows:\n *\n * @example\n * <Descriptions columns={2}>\n *   <Descriptions.Item label=\"The label\">The value</Descriptions.Item>\n *   <Descriptions.Item label=\"Another label\">Another value</Descriptions.Item>\n *   <Descriptions.Item label=\"A label\">A value</Descriptions.Item>\n *   <Descriptions.Item label=\"Extra label\">Extra value</Descriptions.Item>\n * </Descriptions>\n */\nexport const Descriptions = ({ children, columns }: React.PropsWithChildren<DescriptionsProps>) => {\n  const instanceStyles = columns ? styles.descriptionsArea(columns) : styles.autoFitArea;\n\n  return <div css={instanceStyles}>{children}</div>;\n};\n\nDescriptions.Item = ({ label, labelSize = 'sm', children, span }: React.PropsWithChildren<DescriptionsItemProps>) => {\n  return (\n    <div data-testid=\"descriptions-item\" css={styles.descriptionItem(span || 1)}>\n      <div data-testid=\"descriptions-item-label\" css={{ whiteSpace: 'nowrap' }}>\n        <Typography.Text size={labelSize} color=\"secondary\">\n          {label}\n        </Typography.Text>\n      </div>\n      <div data-testid=\"descriptions-item-colon\" css={styles.colon}>\n        <Typography.Text size={labelSize} color=\"secondary\">\n          :\n        </Typography.Text>\n      </div>\n      <div data-testid=\"descriptions-item-content\">{children}</div>\n    </div>\n  );\n};\n\nconst styles = {\n  descriptionsArea: (columnCount: number) => (theme: Theme) => ({\n    display: 'grid',\n    gridTemplateColumns: `repeat(${columnCount}, minmax(100px, 1fr))`,\n    columnGap: theme.spacing.sm,\n    rowGap: theme.spacing.md,\n    marginBottom: theme.spacing.lg,\n  }),\n  autoFitArea: (theme: Theme) => ({\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fill, minmax(350px, 1fr))',\n    gridGap: theme.spacing.md,\n  }),\n  descriptionItem: (span: number) => ({\n    display: 'flex',\n    gridColumn: `span ${span}`,\n  }),\n  colon: {\n    margin: '0 8px 0 0',\n  },\n};\n","import React from 'react';\nimport { UNSAFE_NavigationContext } from '../utils/RoutingUtils';\n\nconst useNavigationBlock = () => {\n  return (React.useContext(UNSAFE_NavigationContext) as any).navigator.block;\n};\n\nexport interface PromptProps {\n  when: boolean;\n  message: string;\n}\n\n/**\n * Component confirms navigating away by displaying prompt if given condition is met.\n * Uses react-router v6 API.\n */\nexport const Prompt = ({ when, message }: PromptProps) => {\n  const block = useNavigationBlock();\n\n  React.useEffect(() => {\n    if (!when) return;\n\n    const unblock = block?.(() => {\n      // eslint-disable-next-line no-alert\n      return window.confirm(message);\n    });\n\n    // eslint-disable-next-line consistent-return\n    return unblock;\n  }, [message, block, when]);\n\n  return null;\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { Alert, Button, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { Prompt } from './Prompt';\nimport 'react-mde/lib/styles/css/react-mde-all.css';\nimport ReactMde, { SvgIcon } from 'react-mde';\nimport { forceAnchorTagNewTab, getMarkdownConverter, sanitizeConvertedHtml } from '../utils/MarkdownUtils';\nimport './EditableNote.css';\nimport type { IntlShape } from 'react-intl';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\ntype EditableNoteImplProps = {\n  defaultMarkdown?: string;\n  defaultSelectedTab?: string;\n  onSubmit?: (...args: any[]) => any;\n  onCancel?: (...args: any[]) => any;\n  showEditor?: boolean;\n  saveText?: any;\n  toolbarCommands?: any[];\n  maxEditorHeight?: number;\n  minEditorHeight?: number;\n  childProps?: any;\n  intl: IntlShape;\n};\n\ntype EditableNoteImplState = any;\n\nconst getReactMdeIcon = (name: string) => <TooltipIcon name={name} />;\n\nexport class EditableNoteImpl extends Component<EditableNoteImplProps, EditableNoteImplState> {\n  static defaultProps = {\n    defaultMarkdown: '',\n    defaultSelectedTab: 'write',\n    showEditor: false,\n    saveText: (\n      <FormattedMessage defaultMessage=\"Save\" description=\"Default text for save button on editable notes in MLflow\" />\n    ),\n    confirmLoading: false,\n    toolbarCommands: [\n      ['header', 'bold', 'italic', 'strikethrough'],\n      ['link', 'quote', 'code', 'image'],\n      ['unordered-list', 'ordered-list', 'checked-list'],\n    ],\n    maxEditorHeight: 500,\n    minEditorHeight: 200,\n    childProps: {},\n  };\n\n  state = {\n    markdown: this.props.defaultMarkdown,\n    selectedTab: this.props.defaultSelectedTab,\n    error: null,\n  };\n\n  converter = getMarkdownConverter();\n\n  componentDidUpdate(prevProps: EditableNoteImplProps) {\n    if (\n      prevProps.defaultMarkdown !== this.props.defaultMarkdown ||\n      prevProps.defaultSelectedTab !== this.props.defaultSelectedTab\n    ) {\n      this.setState({\n        markdown: this.props.defaultMarkdown,\n        selectedTab: this.props.defaultSelectedTab,\n      });\n    }\n  }\n\n  handleMdeValueChange = (markdown: any) => {\n    this.setState({ markdown });\n  };\n\n  handleTabChange = (selectedTab: any) => {\n    this.setState({ selectedTab });\n  };\n\n  handleSubmitClick = () => {\n    const { onSubmit } = this.props;\n    const { markdown } = this.state;\n    this.setState({ confirmLoading: true });\n    if (onSubmit) {\n      return Promise.resolve(onSubmit(markdown))\n        .then(() => {\n          this.setState({ confirmLoading: false, error: null });\n        })\n        .catch((e) => {\n          this.setState({\n            confirmLoading: false,\n            error:\n              e && e.getMessageField\n                ? e.getMessageField()\n                : this.props.intl.formatMessage({\n                    defaultMessage: 'Failed to submit',\n                    description: 'Message text for failing to save changes in editable note in MLflow',\n                  }),\n          });\n        });\n    }\n    return null;\n  };\n\n  handleCancelClick = () => {\n    // Reset to the last defaultMarkdown passed in as props.\n    this.setState({\n      markdown: this.props.defaultMarkdown,\n      selectedTab: this.props.defaultSelectedTab,\n    });\n    const { onCancel } = this.props;\n    if (onCancel) {\n      onCancel();\n    }\n  };\n\n  contentHasChanged() {\n    return this.state.markdown !== this.props.defaultMarkdown;\n  }\n\n  renderActions() {\n    // @ts-expect-error TS(2339): Property 'confirmLoading' does not exist on type '... Remove this comment to see the full error message\n    const { confirmLoading } = this.state;\n    return (\n      <div className=\"mlflow-editable-note-actions\" data-testid=\"editable-note-actions\">\n        <div>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_components_editablenote.tsx_114\"\n            type=\"primary\"\n            className=\"editable-note-save-button\"\n            onClick={this.handleSubmitClick}\n            disabled={!this.contentHasChanged() || confirmLoading}\n            loading={confirmLoading}\n            data-testid=\"editable-note-save-button\"\n          >\n            {this.props.saveText}\n          </Button>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_components_editablenote.tsx_124\"\n            htmlType=\"button\"\n            className=\"editable-note-cancel-button\"\n            onClick={this.handleCancelClick}\n            disabled={confirmLoading}\n          >\n            <FormattedMessage\n              defaultMessage=\"Cancel\"\n              description=\"Text for the cancel button in an editable note in MLflow\"\n            />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  getSanitizedHtmlContent() {\n    const { markdown } = this.state;\n    if (markdown) {\n      const sanitized = sanitizeConvertedHtml(this.converter.makeHtml(markdown));\n      return forceAnchorTagNewTab(sanitized);\n    }\n    return null;\n  }\n\n  render() {\n    const { showEditor } = this.props;\n    const { markdown, selectedTab, error } = this.state;\n    const htmlContent = this.getSanitizedHtmlContent();\n    return (\n      <div className=\"note-view-outer-container\" data-testid=\"note-view-outer-container\">\n        {showEditor ? (\n          <React.Fragment>\n            <div className=\"note-view-text-area\">\n              <ReactMde\n                value={markdown}\n                minEditorHeight={this.props.minEditorHeight}\n                maxEditorHeight={this.props.maxEditorHeight}\n                minPreviewHeight={50}\n                childProps={this.props.childProps}\n                toolbarCommands={this.props.toolbarCommands}\n                onChange={this.handleMdeValueChange}\n                // @ts-expect-error TS(2322): Type 'string' is not assignable to type '\"write\" |... Remove this comment to see the full error message\n                selectedTab={selectedTab}\n                onTabChange={this.handleTabChange}\n                // @ts-expect-error TS(2554): Expected 0 arguments, but got 1.\n                generateMarkdownPreview={(md) => Promise.resolve(this.getSanitizedHtmlContent(md))}\n                getIcon={getReactMdeIcon}\n              />\n            </div>\n            {error && (\n              <Alert\n                componentId=\"codegen_mlflow_app_src_common_components_editablenote.tsx_178\"\n                type=\"error\"\n                message={this.props.intl.formatMessage({\n                  defaultMessage: 'There was an error submitting your note.',\n                  description: 'Error message text when saving an editable note in MLflow',\n                })}\n                description={error}\n                closable\n              />\n            )}\n            {this.renderActions()}\n            <Prompt\n              when={this.contentHasChanged()}\n              message={this.props.intl.formatMessage({\n                defaultMessage: 'Are you sure you want to navigate away? Your pending text changes will be lost.',\n                description: 'Prompt text for navigating away before saving changes in editable note in MLflow',\n              })}\n            />\n          </React.Fragment>\n        ) : (\n          <HTMLNoteContent content={htmlContent} />\n        )}\n      </div>\n    );\n  }\n}\n\ntype TooltipIconProps = {\n  name?: string;\n};\n\nfunction TooltipIcon(props: TooltipIconProps) {\n  const { theme } = useDesignSystemTheme();\n  const { name } = props;\n  return (\n    // @ts-expect-error TS(2322): Type '{ children: Element; position: string; title... Remove this comment to see the full error message\n    <LegacyTooltip position=\"top\" title={name}>\n      <span css={{ color: theme.colors.textPrimary }}>\n        {/* @ts-expect-error TS(2322): Type 'string | undefined' is not assignable to typ... Remove this comment to see the full error message */}\n        <SvgIcon icon={name} />\n      </span>\n    </LegacyTooltip>\n  );\n}\n\ntype HTMLNoteContentProps = {\n  content?: string;\n};\n\nfunction HTMLNoteContent(props: HTMLNoteContentProps) {\n  const { content } = props;\n  return content ? (\n    <div className=\"note-view-outer-container\" data-testid=\"note-view-outer-container\">\n      <div className=\"note-view-text-area\">\n        <div className=\"note-view-preview note-editor-preview\">\n          <div\n            className=\"note-editor-preview-content\"\n            data-testid=\"note-editor-preview-content\"\n            // @ts-expect-error TS(2322): Type 'string | undefined' is not assignable to typ... Remove this comment to see the full error message\n            // eslint-disable-next-line react/no-danger\n            dangerouslySetInnerHTML={{ __html: props.content }}\n          />\n        </div>\n      </div>\n    </div>\n  ) : (\n    <div>\n      <FormattedMessage defaultMessage=\"None\" description=\"Default text for no content in an editable note in MLflow\" />\n    </div>\n  );\n}\n\nexport const EditableNote = injectIntl(EditableNoteImpl);\n","import spinner from '../static/mlflow-spinner.png';\nimport type { Interpolation, Theme } from '@emotion/react';\nimport { keyframes } from '@emotion/react';\n\ntype Props = {\n  showImmediately?: boolean;\n};\n\nexport function Spinner({ showImmediately }: Props) {\n  return (\n    <div css={(theme) => styles.spinner(theme, showImmediately)}>\n      <img alt=\"Page loading...\" src={spinner} />\n    </div>\n  );\n}\n\nconst styles = {\n  spinner: (theme: Theme, immediate?: boolean): Interpolation<Theme> => ({\n    width: 100,\n    marginTop: 100,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n\n    img: {\n      position: 'absolute',\n      opacity: 0,\n      top: '50%',\n      left: '50%',\n      width: theme.general.heightBase * 2,\n      height: theme.general.heightBase * 2,\n      marginTop: -theme.general.heightBase,\n      marginLeft: -theme.general.heightBase,\n      animation: `${keyframes`\n          0% {\n            opacity: 1;\n          }\n          100% {\n            opacity: 1;\n            -webkit-transform: rotate(360deg);\n                transform: rotate(360deg);\n            }\n          `} 3s linear infinite`,\n      animationDelay: immediate ? '0s' : '0.5s',\n    },\n  }),\n};\n","import React from 'react';\nimport { Modal, Typography, CopyIcon, useDesignSystemTheme } from '@databricks/design-system';\nconst { Paragraph } = Typography;\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\n\nexport interface KeyValueTagFullViewModalProps {\n  tagKey: string;\n  tagValue: string;\n  setIsKeyValueTagFullViewModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\n  isKeyValueTagFullViewModalVisible: boolean;\n}\n\nexport const KeyValueTagFullViewModal = React.memo((props: KeyValueTagFullViewModalProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_components_keyvaluetagfullviewmodal.tsx_17\"\n      title={'Tag: ' + props.tagKey}\n      visible={props.isKeyValueTagFullViewModalVisible}\n      onCancel={() => props.setIsKeyValueTagFullViewModalVisible(false)}\n    >\n      <div css={{ display: 'flex' }}>\n        <Paragraph css={{ flexGrow: 1 }}>\n          <pre\n            css={{\n              backgroundColor: theme.colors.backgroundPrimary,\n              marginTop: theme.spacing.sm,\n              whiteSpace: 'pre-wrap',\n              wordBreak: 'break-all',\n            }}\n          >\n            {props.tagValue}\n          </pre>\n        </Paragraph>\n        <div\n          css={{\n            marginTop: theme.spacing.sm,\n          }}\n        >\n          <CopyButton copyText={props.tagValue} showLabel={false} icon={<CopyIcon />} aria-label=\"Copy\" />\n        </div>\n      </div>\n    </Modal>\n  );\n});\n","import { Tag, LegacyTooltip, Typography } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../types';\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { KeyValueTagFullViewModal } from './KeyValueTagFullViewModal';\nimport type { Interpolation, Theme } from '@emotion/react';\n\n/**\n * An arbitrary number that is used to determine if a tag is too\n * long and should be truncated. We want to avoid short keys or values\n * in a long tag to be truncated\n * */\nconst TRUNCATE_ON_CHARS_LENGTH = 30;\n\nfunction getTruncatedStyles(shouldTruncate = true): Interpolation<Theme> {\n  return shouldTruncate\n    ? {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        textWrap: 'nowrap',\n        whiteSpace: 'nowrap' as const,\n      }\n    : { whiteSpace: 'nowrap' as const };\n}\n\n/**\n * A <Tag /> wrapper used for displaying key-value entity\n */\nexport const KeyValueTag = ({\n  isClosable = false,\n  onClose,\n  tag,\n  enableFullViewModal = false,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n  maxWidth = 300,\n  className,\n}: {\n  isClosable?: boolean;\n  onClose?: () => void;\n  tag: KeyValueEntity;\n  enableFullViewModal?: boolean;\n  charLimit?: number;\n  maxWidth?: number;\n  className?: string;\n}) => {\n  const intl = useIntl();\n\n  const [isKeyValueTagFullViewModalVisible, setIsKeyValueTagFullViewModalVisible] = useState(false);\n\n  const { shouldTruncateKey, shouldTruncateValue } = getKeyAndValueComplexTruncation(tag, charLimit);\n  const allowFullViewModal = enableFullViewModal && (shouldTruncateKey || shouldTruncateValue);\n\n  const fullViewModalLabel = intl.formatMessage({\n    defaultMessage: 'Click to see more',\n    description: 'Run page > Overview > Tags cell > Tag',\n  });\n\n  return (\n    <div>\n      <Tag\n        componentId=\"codegen_mlflow_app_src_common_components_keyvaluetag.tsx_60\"\n        closable={isClosable}\n        onClose={onClose}\n        title={tag.key}\n        className={className}\n      >\n        <LegacyTooltip title={allowFullViewModal ? fullViewModalLabel : ''}>\n          <span\n            css={{ maxWidth, display: 'inline-flex' }}\n            onClick={() => (allowFullViewModal ? setIsKeyValueTagFullViewModalVisible(true) : undefined)}\n          >\n            <Typography.Text bold title={tag.key} css={getTruncatedStyles(shouldTruncateKey)}>\n              {tag.key}\n            </Typography.Text>\n            {tag.value && (\n              <Typography.Text title={tag.value} css={getTruncatedStyles(shouldTruncateValue)}>\n                : {tag.value}\n              </Typography.Text>\n            )}\n          </span>\n        </LegacyTooltip>\n      </Tag>\n      <div>\n        {isKeyValueTagFullViewModalVisible && (\n          <KeyValueTagFullViewModal\n            tagKey={tag.key}\n            tagValue={tag.value}\n            isKeyValueTagFullViewModalVisible={isKeyValueTagFullViewModalVisible}\n            setIsKeyValueTagFullViewModalVisible={setIsKeyValueTagFullViewModalVisible}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport function getKeyAndValueComplexTruncation(\n  tag: KeyValueEntity,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n): { shouldTruncateKey: boolean; shouldTruncateValue: boolean } {\n  const { key, value } = tag;\n  const fullLength = key.length + value.length;\n  const isKeyLonger = key.length > value.length;\n  const shorterLength = isKeyLonger ? value.length : key.length;\n\n  // No need to truncate if tag is short enough\n  if (fullLength <= charLimit) return { shouldTruncateKey: false, shouldTruncateValue: false };\n  // If the shorter string is too long, truncate both key and value.\n  if (shorterLength > charLimit / 2) return { shouldTruncateKey: true, shouldTruncateValue: true };\n\n  // Otherwise truncate the longer string\n  return {\n    shouldTruncateKey: isKeyLonger,\n    shouldTruncateValue: !isKeyLonger,\n  };\n}\n"],"names":["TagList","tags","onEdit","theme","useDesignSystemTheme","hasTags","length","_jsxs","css","_css","display","flexDirection","flexWrap","alignItems","gap","spacing","xs","children","map","tag","_jsx","KeyValueTag","key","Button","componentId","size","icon","PencilIcon","undefined","onClick","FormattedMessage","id","defaultMessage","getAccordionStyles","getPrefixedClassName","clsPrefix","classItem","classHeader","classContentBox","fontSize","paddingLeft","paddingTop","paddingBottom","fontWeight","lineHeight","typography","lineHeightLg","padding","md","CollapsibleSection","props","title","forceOpen","showServerError","defaultCollapsed","onChange","className","activeKeyProp","activeKey","defaultActiveKey","formatMessage","useIntl","getExpandIcon","useCallback","isActive","importantify","width","general","heightBase","transform","ChevronRightIcon","svg","height","Accordion","dangerouslyAppendEmotionCSS","dangerouslySetAntdProps","expandIconPosition","expandIcon","Panel","header","SectionErrorBoundary","_converter","getMarkdownConverter","Converter","setFlavor","sanitizerOptions","allowedTags","allowedAttributes","a","img","div","sanitizeConvertedHtml","dirtyHtml","sanitizeHtml","forceAnchorTagNewTab","html","replace","RegExp","useMarkdownConverter","markdown","makeHtml","_ref","name","styles","_ref2","_ref3","_ref4","AliasSelect","renderKey","setDraftAliases","existingAliases","draftAliases","version","aliasToVersionMap","disabled","intl","dropdownVisible","setDropdownVisible","useState","removeFromEditedAliases","alias","aliases","filter","existingAlias","updateEditedAliases","sanitizedAliases","toLowerCase","substring","uniqueAliases","Array","from","Set","LegacySelect","filterOption","val","opt","value","startsWith","placeholder","allowClear","mode","dropdownMatchSelectWidth","tagRender","AliasTag","compact","closable","onClose","toString","onDropdownVisibleChange","open","Option","marginRight","Object","entries","otherVersion","aliasedVersion","values","JSON","stringify","useEditAliasesModal","onSuccess","onSave","getTitle","description","isLoading","setIsLoading","showModal","setShowModal","form","LegacyForm","useForm","errorMessage","setErrorMessage","setExistingAliases","currentlyEditedVersion","setCurrentlyEditedVersion","showEditAliasesModal","versionNumber","modelVersionAliases","conflictedAliases","useMemo","otherVersionMappings","reduce","aliasMap","aliasEntry","_aliasMap$find","some","find","push","_version$aliases","alias_name","result","isPristine","isEqual","slice","sort","isExceedingLimit","isInvalid","EditAliasesModal","Modal","visible","footer","loading","type","save","then","catch","e","ErrorWrapper","extractedErrorMessage","getMessageField","getUserVisibleError","text","message","destroyOnClose","onCancel","confirmLoading","Typography","Paragraph","layout","Item","Alert","role","limit","React","constructor","args","state","error","componentDidCatch","errorInfo","this","setState","console","renderErrorMessage","render","classNames","wrapper","href","Utils","getSupportPageUrl","target","marginLeft","EditableContext","EditableCell","handleKeyPress","event","recordKey","cancel","editing","dataIndex","record","Consumer","formRef","ref","style","margin","initialValue","Input","onKeyDown","EditableTable","super","columns","initColumns","col","editable","isEditing","editingKey","isRequestPending","Spinner","edit","TrashIcon","deletingKey","current","validateFields","data","r","onSaveEdit","delete","async","onDelete","Provider","LegacyTable","dataSource","tableLayout","pagination","locale","emptyText","scroll","y","okText","cancelText","onOk","EditableFormTable","EditableTagsTableViewImpl","Component","tableColumns","getData","sortBy","getVisibleTagValues","getTagNamesAsSet","tagNameValidator","rule","callback","has","handleSaveEdit","handleDeleteTag","handleAddTag","innerRef","_Fragment","Spacer","onFinish","rules","required","validator","htmlType","sm","EditableTagsTableView","injectIntl","CopyButton","copyText","showLabel","buttonProps","showTooltip","setShowTooltip","LegacyTooltip","handleClick","navigator","clipboard","writeText","setTimeout","onMouseLeave","handleMouseLeave","RequestStateWrapper","shouldRender","shouldRenderError","getErrorRequests","requests","requestIdsWith404sToIgnore","includes","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","getDerivedStateFromProps","nextProps","every","active","requestErrors","getRenderedContent","customSpinner","permissionDeniedView","suppressErrorThrow","customRequestErrorHandlerFn","permissionDeniedErrors","failedRequest","PERMISSION_DENIED","shouldOptimisticallyRender","triggerError","defaultProps","Error","connect","mapStateToProps","ownProps","getApis","requestIds","Descriptions","instanceStyles","descriptionsArea","autoFitArea","label","labelSize","span","descriptionItem","Text","color","colon","columnCount","gridTemplateColumns","columnGap","rowGap","marginBottom","lg","gridGap","gridColumn","Prompt","when","block","UNSAFE_NavigationContext","window","confirm","getReactMdeIcon","TooltipIcon","EditableNoteImpl","defaultMarkdown","selectedTab","defaultSelectedTab","converter","handleMdeValueChange","handleTabChange","handleSubmitClick","onSubmit","Promise","resolve","handleCancelClick","componentDidUpdate","prevProps","contentHasChanged","renderActions","saveText","getSanitizedHtmlContent","sanitized","showEditor","htmlContent","ReactMde","minEditorHeight","maxEditorHeight","minPreviewHeight","childProps","toolbarCommands","onTabChange","generateMarkdownPreview","getIcon","HTMLNoteContent","content","position","colors","textPrimary","SvgIcon","dangerouslySetInnerHTML","__html","EditableNote","showImmediately","spinner","alt","src","immediate","marginTop","opacity","top","left","animation","keyframes","animationDelay","KeyValueTagFullViewModal","tagKey","isKeyValueTagFullViewModalVisible","setIsKeyValueTagFullViewModalVisible","backgroundColor","backgroundPrimary","whiteSpace","wordBreak","tagValue","CopyIcon","getTruncatedStyles","shouldTruncate","overflow","textOverflow","textWrap","isClosable","enableFullViewModal","charLimit","maxWidth","shouldTruncateKey","shouldTruncateValue","fullLength","isKeyLonger","shorterLength","getKeyAndValueComplexTruncation","allowFullViewModal","fullViewModalLabel","Tag","bold"],"sourceRoot":""}