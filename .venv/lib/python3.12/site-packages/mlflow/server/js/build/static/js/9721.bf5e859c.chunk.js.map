{"version":3,"file":"static/js/9721.bf5e859c.chunk.js","mappings":"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","sources":["experiment-tracking/components/ExperimentSourceTypeIcon.tsx","common/static/icon-visible-fill.svg","experiment-tracking/components/experiment-page/utils/persistSearchFacets.serializers.ts","experiment-tracking/components/experiment-page/hooks/useExperimentPageSearchFacets.tsx","experiment-tracking/utils/IsUCModelName.ts","experiment-tracking/components/experiment-page/components/runs/cells/SourceCellRenderer.tsx","common/static/registered-model-grey-ok.svg","experiment-tracking/components/experiment-page/hooks/useToggleRowVisibilityCallback.tsx","experiment-tracking/components/runs-charts/hooks/useRunsHighlightTableRow.tsx","experiment-tracking/components/experiment-page/components/runs/cells/ColumnHeaderCell.tsx","experiment-tracking/components/experiment-page/components/runs/cells/DateCellRenderer.tsx","common/components/TrimmedText.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RunDescriptionCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/ExperimentNameCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/ModelsCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/ModelsHeaderCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/VersionCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RunVisibilityControlButton.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTableHeaderContext.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RowActionsCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RowActionsHeaderCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/GroupParentCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RunNameCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/LoadMoreRowRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/DatasetsCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/AggregateMetricValueCell.tsx","experiment-tracking/components/experiment-page/utils/experimentPage.column-utils.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsEmptyTable.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTableAddColumnCTA.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTableStatusBar.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentTableSelectRowHandler.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTable.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelRegisteredVersions.tsx","common/components/PreviewSidebar.tsx","../node_modules/@tanstack/query-core/src/infiniteQueryObserver.ts","experiment-tracking/hooks/logged-models/useSearchLoggedModelsQuery.tsx","../node_modules/@tanstack/react-query/src/useInfiniteQuery.ts","common/components/ag-grid/AgGridLoader.tsx","experiment-tracking/components/runs-charts/components/RunsChartsFullScreenModal.tsx","experiment-tracking/components/RunStatusIcon.tsx","experiment-tracking/components/experiment-page/models/ExperimentPageSearchFacetsState.tsx"],"sourcesContent":["import { FileCodeIcon, FolderBranchIcon, NotebookIcon, WorkflowsIcon } from '@databricks/design-system';\nimport { SourceType } from '../sdk/MlflowEnums';\n\n/**\n * Displays an icon corresponding to the source type of an experiment run.\n */\nexport const ExperimentSourceTypeIcon = ({\n  sourceType,\n  className,\n}: {\n  sourceType: SourceType | string;\n  className?: string;\n}) => {\n  if (sourceType === SourceType.NOTEBOOK) {\n    return <NotebookIcon className={className} />;\n  } else if (sourceType === SourceType.LOCAL) {\n    return <FileCodeIcon className={className} />;\n  } else if (sourceType === SourceType.PROJECT) {\n    return <FolderBranchIcon className={className} />;\n  } else if (sourceType === SourceType.JOB) {\n    return <WorkflowsIcon className={className} />;\n  }\n  return null;\n};\n","var _path, _circle;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgIconVisibleFill({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8 3C3.45 3 1.4375 6.33333 1 8C1.4375 9.66667 3.45 13 8 13C12.55 13 14.5625 9.66667 15 8C14.5625 6.33333 12.55 3 8 3Z\",\n    fill: \"currentColor\",\n    stroke: \"currentColor\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 8,\n    cy: 8,\n    r: 2.25,\n    fill: \"currentColor\",\n    stroke: \"white\",\n    strokeWidth: 1.5\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgIconVisibleFill);\nexport default __webpack_public_path__ + \"static/media/icon-visible-fill.8d34cd35303828fdfc15154f5536e63b.svg\";\nexport { ForwardRef as ReactComponent };","import { isArray } from 'lodash';\nimport { atobUtf8, btoaUtf8 } from '../../../../common/utils/StringUtils';\nimport type { ExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\nimport type { ExperimentPageUIState } from '../models/ExperimentPageUIState';\n\ntype PersistSearchSerializeFunctions<Serialized = any, Unserialized = any> = {\n  serializeLocalStorage?(input: Unserialized): Serialized;\n  serializeQueryString?(input: Unserialized): Serialized;\n  deserializeLocalStorage?(input: Serialized): Unserialized;\n  deserializeQueryString?(input: Serialized): Unserialized;\n};\n\n/**\n * \"Flattens\" the strings array, i.e. merges it into a single value\n */\nconst flattenString = (input: string | string[]) => (isArray(input) ? input.join() : input);\n\n/**\n * All known field serialization and deserialization mechanisms used in search facets state persisting mechanism.\n */\nconst persistSearchStateFieldSerializers: Record<string, PersistSearchSerializeFunctions> = {\n  /**\n   * In rare cases, search filter might contain commas that interfere with `querystring` library\n   * parsing causing it to return array instead of string. Since it's difficult to selectively\n   * change `querystring`'s parsing action, we are making sure that the parsed values are always strings.\n   */\n  searchFilter: {\n    deserializeLocalStorage: flattenString,\n    deserializeQueryString: flattenString,\n  },\n  orderByAsc: {\n    serializeQueryString(input: boolean) {\n      return input.toString();\n    },\n    deserializeQueryString(input: string) {\n      return input === 'true';\n    },\n  },\n  datasetsFilter: {\n    serializeQueryString(inputs: ExperimentPageSearchFacetsState['datasetsFilter']) {\n      const inputsWithoutExperimentId = inputs.map(({ name, digest, context }) => ({\n        name,\n        digest,\n        context,\n      }));\n      return btoaUtf8(JSON.stringify(inputsWithoutExperimentId));\n    },\n    deserializeQueryString(input: string): ExperimentPageSearchFacetsState['datasetsFilter'] {\n      try {\n        // Process the URL defensively against intended and unintended malformation\n        const parsedResult = JSON.parse(atobUtf8(input));\n        if (!Array.isArray(parsedResult)) {\n          return [];\n        }\n        return parsedResult;\n      } catch {\n        return [];\n      }\n    },\n  },\n  /**\n   * Array of visible configured charts are serialized into base64-encoded JSON when put into query string\n   */\n  compareRunCharts: {\n    serializeQueryString(input: ExperimentPageUIState['compareRunCharts']) {\n      return btoaUtf8(JSON.stringify(input));\n    },\n    deserializeQueryString(input: string): ExperimentPageUIState['compareRunCharts'] {\n      try {\n        // Process the URL defensively against intended and unintended malformation\n        const parsedResult = JSON.parse(atobUtf8(input));\n        if (!Array.isArray(parsedResult)) {\n          return undefined;\n        }\n        return parsedResult;\n      } catch {\n        return undefined;\n      }\n    },\n  },\n  /**\n   * For \"compareRunsMode\", we will always save \"undefined\" value to local storage so users will\n   * get back to default view after visiting the view once more.\n   */\n  compareRunsMode: {\n    serializeLocalStorage() {\n      return undefined;\n    },\n  },\n};\n\ntype StateKey = keyof Partial<ExperimentPageSearchFacetsState>;\n\n/**\n * Consumes an object with persistable search facets and transforms relevant fields\n * with the registered serialization functions specific to query string.\n * Example scenario: serializing an array of visible configured charts into base64-encoded JSON.\n */\nexport const serializeFieldsToQueryString = (input: Partial<ExperimentPageSearchFacetsState>) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const serializeFn = persistSearchStateFieldSerializers[field]?.serializeQueryString;\n    if (serializeFn) {\n      resultObject[field] = serializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with search facets extracted from query string and transforms relevant fields\n * with the registered deserialization functions. Example scenario: deserializing an array of\n * visible configured charts from base64-encoded JSON.\n */\nexport const deserializeFieldsFromQueryString = (\n  input: Partial<ExperimentPageSearchFacetsState> | Record<string, any>,\n) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const deserializeFn = persistSearchStateFieldSerializers[field]?.deserializeQueryString;\n    if (deserializeFn) {\n      resultObject[field] = deserializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with persistable search facets and transforms relevant fields\n * with the registered serialization functions specific to local storage.\n * Example scenario: serializing an array of visible configured charts into base64-encoded JSON.\n */\nexport const serializeFieldsToLocalStorage = (input: Partial<ExperimentPageSearchFacetsState>) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const serializeFn = persistSearchStateFieldSerializers[field]?.serializeLocalStorage;\n    if (serializeFn) {\n      resultObject[field] = serializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n\n/**\n * Consumes an object with search facets extracted from local storage and transforms relevant fields\n * with the registered deserialization functions. Example scenario: deserializing an array of\n * visible configured charts from base64-encoded JSON.\n */\nexport const deserializeFieldsFromLocalStorage = (\n  input: Partial<ExperimentPageSearchFacetsState> | Record<string, any>,\n) => {\n  const resultObject: Partial<Record<StateKey, any>> = { ...input };\n  for (const field of Object.keys(resultObject) as StateKey[]) {\n    const deserializeFn = persistSearchStateFieldSerializers[field]?.deserializeLocalStorage;\n    if (deserializeFn) {\n      resultObject[field] = deserializeFn(resultObject[field]);\n    }\n  }\n  return resultObject;\n};\n","import { assign, entries, isNil, keys, omitBy, pick } from 'lodash';\nimport { useMemo } from 'react';\nimport type { NavigateOptions } from '../../../../common/utils/RoutingUtils';\nimport { useParams, useSearchParams } from '../../../../common/utils/RoutingUtils';\nimport type { ExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\nimport { createExperimentPageSearchFacetsState } from '../models/ExperimentPageSearchFacetsState';\nimport {\n  deserializeFieldsFromQueryString,\n  serializeFieldsToQueryString,\n} from '../utils/persistSearchFacets.serializers';\n\nexport const EXPERIMENT_PAGE_QUERY_PARAM_KEYS = [\n  'searchFilter',\n  'orderByKey',\n  'orderByAsc',\n  'startTime',\n  'lifecycleFilter',\n  'modelVersionFilter',\n  'datasetsFilter',\n];\n\nexport const EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW = 'isPreview';\n\nexport type ExperimentPageQueryParams = any;\n\nexport type ExperimentQueryParamsSearchFacets = ExperimentPageSearchFacetsState & {\n  experimentIds?: string[];\n};\n\nconst getComparedExperimentIds = (comparedExperimentIds: string): string[] => {\n  try {\n    return comparedExperimentIds ? JSON.parse(comparedExperimentIds) : [];\n  } catch {\n    return [];\n  }\n};\n\nexport const useExperimentPageSearchFacets = (): [ExperimentQueryParamsSearchFacets | null, string[], boolean] => {\n  const [queryParams] = useSearchParams();\n\n  // Pick only the keys we care about\n  const pickedValues = useMemo(\n    () => pick(Object.fromEntries(queryParams.entries()), EXPERIMENT_PAGE_QUERY_PARAM_KEYS),\n    [queryParams],\n  );\n\n  // Check if the page is in preview mode. If so, it should not be persisted until explicitly changed\n  const isPreview = queryParams.get(EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW) === 'true';\n\n  // Destructure to get raw values\n  const { searchFilter, orderByKey, orderByAsc, startTime, lifecycleFilter, modelVersionFilter, datasetsFilter } =\n    pickedValues;\n\n  const areValuesEmpty = keys(pickedValues).length < 1;\n\n  const { experimentId } = useParams<{ experimentId: string }>();\n  const queryParamsExperimentIds = queryParams.get('experiments');\n\n  // Calculate experiment IDs\n  const experimentIds = useMemo(() => {\n    if (experimentId) {\n      return [experimentId];\n    }\n    if (queryParamsExperimentIds) {\n      return getComparedExperimentIds(queryParamsExperimentIds);\n    }\n    return [];\n  }, [experimentId, queryParamsExperimentIds]);\n\n  // Calculate and memoize search facets\n  const searchFacets = useMemo(() => {\n    if (areValuesEmpty) {\n      return null;\n    }\n    const deserializedFields = deserializeFieldsFromQueryString(\n      omitBy(\n        {\n          searchFilter,\n          orderByKey,\n          orderByAsc,\n          startTime,\n          lifecycleFilter,\n          modelVersionFilter,\n          datasetsFilter,\n        },\n        isNil,\n      ),\n    ) as ExperimentPageSearchFacetsState;\n\n    // If not all fields are provided, fill the gaps with default values\n    return assign(createExperimentPageSearchFacetsState(), deserializedFields);\n  }, [\n    // Use exact values to avoid unnecessary re-renders\n    searchFilter,\n    orderByKey,\n    orderByAsc,\n    startTime,\n    lifecycleFilter,\n    modelVersionFilter,\n    datasetsFilter,\n    areValuesEmpty,\n  ]);\n\n  return [searchFacets, experimentIds, isPreview];\n};\n\nexport const useUpdateExperimentPageSearchFacets = () => {\n  const [, setParams] = useSearchParams();\n\n  return (partialFacets: Partial<ExperimentPageSearchFacetsState>, options?: NavigateOptions) => {\n    const newParams = serializeFieldsToQueryString(partialFacets);\n    setParams((currentParams) => {\n      entries(newParams).forEach(([key, value]) => {\n        currentParams.set(key, value);\n      });\n      currentParams.delete(EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW);\n      return currentParams;\n    }, options);\n  };\n};\n","/**\n * Checks if a given model name is a valid UC entity name.\n * A valid UC entity name follows the pattern: \"catalog.schema.model\".\n * This is used to distinguish from other registries model names which should not contain dots.\n */\nexport const isUCModelName = (name: string) => Boolean(name.match(/^[^. /]+\\.[^. /]+\\.[^. /]+$/));\n","import React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport type { RunRowType } from '../../../utils/experimentPage.row-types';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentSourceTypeIcon } from '../../../../ExperimentSourceTypeIcon';\n\nexport const SourceCellRenderer = React.memo(({ value: tags }: { value: RunRowType['tags'] }) => {\n  const { theme } = useDesignSystemTheme();\n  if (!tags) {\n    return <>-</>;\n  }\n  const sourceType = tags[Utils.sourceTypeTag]?.value || '';\n\n  const sourceLink = Utils.renderSource(tags || {}, undefined, undefined);\n  return sourceLink ? (\n    <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n      <ExperimentSourceTypeIcon sourceType={sourceType} css={{ color: theme.colors.textSecondary }} />\n      <span css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>{sourceLink}</span>\n    </div>\n  ) : (\n    <>-</>\n  );\n});\n","var _path, _g, _path2, _path3, _defs;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgRegisteredModelGreyOk({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 19,\n    height: 16,\n    viewBox: \"0 0 19 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip0_0_3)\"\n  }, /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"mask0_0_3\",\n    style: {\n      maskType: \"luminance\"\n    },\n    maskUnits: \"userSpaceOnUse\",\n    x: 0,\n    y: 0,\n    width: 16,\n    height: 16\n  }, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16 0H0V16H16V0Z\",\n    fill: \"white\"\n  }))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    mask: \"url(#mask0_0_3)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M2.75 3.49999C2.05964 3.49999 1.5 4.05963 1.5 4.74999C1.5 5.44034 2.05964 5.99999 2.75 5.99999C3.44036 5.99999 4 5.44034 4 4.74999C4 4.05963 3.44036 3.49999 2.75 3.49999ZM0 4.74999C0 3.2312 1.23122 1.99999 2.75 1.99999C3.77682 1.99999 4.6722 2.56276 5.14452 3.39669L9.51655 2.44626C9.66772 1.0704 10.8338 0 12.25 0C13.7688 0 15 1.23122 15 2.75C15 3.87686 14.3222 4.84541 13.3521 5.27025L13.6341 7.52661C14.9711 7.71349 16 8.86158 16 10.25C16 11.7688 14.7687 13 13.25 13C12.3895 13 11.6214 12.6048 11.1172 11.9861L8.49749 13.1322C8.49913 13.1713 8.49997 13.2105 8.49997 13.25C8.49996 14.7688 7.26875 16 5.74997 16C4.23118 16 2.99997 14.7688 2.99996 13.25C2.99997 12.3569 3.42568 11.5633 4.08524 11.0609L3.01322 7.48755C2.92659 7.49578 2.83878 7.49999 2.75 7.49999C1.23122 7.49999 0 6.26877 0 4.74999ZM5.46534 5.18782C5.48277 5.07884 5.4938 4.96773 5.49804 4.85488L9.76409 3.92748C10.1528 4.74671 10.9346 5.34321 11.8658 5.47338L12.1478 7.72974C11.7709 7.89483 11.438 8.14204 11.1719 8.44873L5.46534 5.18782ZM4.82802 6.55126C4.70399 6.69422 4.56546 6.82424 4.41471 6.93906L5.48674 10.5124C5.57337 10.5042 5.66118 10.5 5.74997 10.5C6.69483 10.5 7.52839 10.9765 8.02345 11.7023L10.5231 10.6087C10.5079 10.4913 10.5 10.3716 10.5 10.25C10.5 10.101 10.5118 9.95475 10.5346 9.81218L4.82802 6.55126ZM12 10.25C12 9.55963 12.5596 8.99999 13.25 8.99999C13.9403 8.99999 14.5 9.55963 14.5 10.25C14.5 10.9403 13.9403 11.5 13.25 11.5C12.5596 11.5 12 10.9403 12 10.25ZM5.74997 12C5.05961 12 4.49997 12.5596 4.49997 13.25C4.49997 13.9403 5.05961 14.5 5.74997 14.5C6.44032 14.5 6.99997 13.9403 6.99997 13.25C6.99997 12.5596 6.44032 12 5.74997 12ZM11 2.75C11 2.05964 11.5596 1.5 12.25 1.5C12.9403 1.5 13.5 2.05964 13.5 2.75C13.5 3.44036 12.9403 4 12.25 4C11.5596 4 11 3.44036 11 2.75Z\",\n    fill: \"currentColor\"\n  }))), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13.5 14C15.433 14 17 12.433 17 10.5C17 8.567 15.433 7 13.5 7C11.567 7 10 8.567 10 10.5C10 12.433 11.567 14 13.5 14Z\",\n    fill: \"white\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M11.125 11C11.125 9.41218 12.4122 8.125 14 8.125C15.5878 8.125 16.875 9.41218 16.875 11C16.875 12.5878 15.5878 13.875 14 13.875C12.4122 13.875 11.125 12.5878 11.125 11ZM14 6.625C11.5838 6.625 9.625 8.58375 9.625 11C9.625 13.4162 11.5838 15.375 14 15.375C16.4162 15.375 18.375 13.4162 18.375 11C18.375 8.58375 16.4162 6.625 14 6.625ZM14.0303 12.5303L16.0303 10.5303L14.9697 9.46967L13.5 10.9393L13.0303 10.4697L11.9697 11.5303L12.9697 12.5303L13.5 13.0607L14.0303 12.5303Z\",\n    fill: \"#3CAA60\"\n  }))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip0_0_3\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 19,\n    height: 16,\n    fill: \"white\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgRegisteredModelGreyOk);\nexport default __webpack_public_path__ + \"static/media/registered-model-grey-ok.8274b58d39504c8d1b8c358aa1c9aa35.svg\";\nexport { ForwardRef as ReactComponent };","import { useCallback, useRef } from 'react';\nimport { useUpdateExperimentViewUIState } from '../contexts/ExperimentPageUIStateContext';\nimport { RUNS_VISIBILITY_MODE } from '../models/ExperimentPageUIState';\nimport type { RunRowType } from '../utils/experimentPage.row-types';\nimport {\n  shouldEnableToggleIndividualRunsInGroups,\n  shouldUseRunRowsVisibilityMap,\n} from '../../../../common/utils/FeatureUtils';\n\nexport const useToggleRowVisibilityCallback = (tableRows: RunRowType[], useGroupedValuesInCharts = true) => {\n  const updateUIState = useUpdateExperimentViewUIState();\n\n  // We're going to use current state of the table rows to determine which rows are hidden.\n  // Since we're interested only in the latest data, we avoid using state here to avoid unnecessary re-renders.\n  const immediateTableRows = useRef(tableRows);\n  immediateTableRows.current = tableRows;\n\n  const toggleRowUsingVisibilityMap = useCallback(\n    (mode: RUNS_VISIBILITY_MODE, groupOrRunUuid?: string, isCurrentlyVisible?: boolean) => {\n      updateUIState((currentUIState) => {\n        // If user has toggled a run or a group manually, we need to update the visibility map\n        if (mode === RUNS_VISIBILITY_MODE.CUSTOM && groupOrRunUuid) {\n          const newRunsVisibilityMap = {\n            ...currentUIState.runsVisibilityMap,\n          };\n\n          // Check if the toggles row is a run group\n          const currentToggledGroupInfo = immediateTableRows.current.find(\n            ({ rowUuid, groupParentInfo }) => rowUuid === groupOrRunUuid && groupParentInfo,\n          )?.groupParentInfo;\n\n          // If we're toggling a group and we're not using grouped values in charts,\n          // then toggle all runs in the group\n          if (\n            currentToggledGroupInfo &&\n            shouldEnableToggleIndividualRunsInGroups() &&\n            useGroupedValuesInCharts === false\n          ) {\n            for (const runUuid of currentToggledGroupInfo.runUuids) {\n              newRunsVisibilityMap[runUuid] = !isCurrentlyVisible;\n            }\n          } else {\n            newRunsVisibilityMap[groupOrRunUuid] = !isCurrentlyVisible;\n          }\n\n          return {\n            ...currentUIState,\n            runsVisibilityMap: newRunsVisibilityMap,\n          };\n        }\n        // Otherwise, we're toggling a predefined visibility mode\n        // and clearing the visibility map\n        if (\n          [\n            RUNS_VISIBILITY_MODE.SHOWALL,\n            RUNS_VISIBILITY_MODE.HIDEALL,\n            RUNS_VISIBILITY_MODE.FIRST_10_RUNS,\n            RUNS_VISIBILITY_MODE.FIRST_20_RUNS,\n            RUNS_VISIBILITY_MODE.HIDE_FINISHED_RUNS,\n          ].includes(mode)\n        ) {\n          return {\n            ...currentUIState,\n            runsHiddenMode: mode,\n            runsHidden: [],\n            runsVisibilityMap: {},\n          };\n        }\n\n        return currentUIState;\n      });\n    },\n    [updateUIState, useGroupedValuesInCharts],\n  );\n\n  /**\n   * @deprecated `toggleRowUsingVisibilityMap` replaces this function.\n   * This one should be removed after ramping up `runsVisibility` field.\n   */\n  const toggleRowVisibility = useCallback(\n    (mode: RUNS_VISIBILITY_MODE, groupOrRunUuid?: string) => {\n      updateUIState((currentUIState) => {\n        if (mode === RUNS_VISIBILITY_MODE.SHOWALL) {\n          // Case #1: Showing all runs\n          return {\n            ...currentUIState,\n            runsHiddenMode: RUNS_VISIBILITY_MODE.SHOWALL,\n            runsHidden: [],\n          };\n        } else if (mode === RUNS_VISIBILITY_MODE.HIDEALL) {\n          // Case #2: Hiding all runs\n          return {\n            ...currentUIState,\n            runsHiddenMode: RUNS_VISIBILITY_MODE.HIDEALL,\n            runsHidden: [],\n          };\n        } else if (mode === RUNS_VISIBILITY_MODE.FIRST_10_RUNS) {\n          // Case #3: Showing only first 10 runs\n          return {\n            ...currentUIState,\n            runsHiddenMode: RUNS_VISIBILITY_MODE.FIRST_10_RUNS,\n            runsHidden: [],\n          };\n        } else if (mode === RUNS_VISIBILITY_MODE.FIRST_20_RUNS) {\n          // Case #4: Showing only first 20 runs\n          return {\n            ...currentUIState,\n            runsHiddenMode: RUNS_VISIBILITY_MODE.FIRST_20_RUNS,\n            runsHidden: [],\n          };\n        } else if (mode === RUNS_VISIBILITY_MODE.HIDE_FINISHED_RUNS) {\n          // Case #5: Hiding finished runs\n          return {\n            ...currentUIState,\n            runsHiddenMode: RUNS_VISIBILITY_MODE.HIDE_FINISHED_RUNS,\n            runsHidden: [],\n          };\n        }\n\n        // Case #6: Custom visibility mode enabled by manually toggling visibility of a run or a group\n        if (groupOrRunUuid) {\n          // Determine which runs are hidden at the moment\n          const currentlyHiddenRows = immediateTableRows.current\n            .filter(({ hidden }) => hidden)\n            .map(({ groupParentInfo, rowUuid, runUuid }) => (groupParentInfo ? rowUuid : runUuid));\n\n          // Check if the toggles row is a run group\n          const currentToggledGroupInfo = immediateTableRows.current.find(\n            ({ rowUuid, groupParentInfo }) => rowUuid === groupOrRunUuid && groupParentInfo,\n          )?.groupParentInfo;\n\n          // If we're toggling a group and we're not using grouped values in charts,\n          // then toggle all runs in the group\n          if (\n            currentToggledGroupInfo &&\n            shouldEnableToggleIndividualRunsInGroups() &&\n            useGroupedValuesInCharts === false\n          ) {\n            let newHiddenRows: string[] = [];\n\n            // Depending on the current state of the group, we either show all runs or hide all runs\n            if (currentToggledGroupInfo.allRunsHidden) {\n              newHiddenRows = currentlyHiddenRows.filter(\n                (currentGroupOrRunUuid) => !currentToggledGroupInfo.runUuids.includes(currentGroupOrRunUuid),\n              );\n            } else {\n              newHiddenRows = currentlyHiddenRows.concat(\n                currentToggledGroupInfo.runUuids.filter((runUuid) => !currentlyHiddenRows.includes(runUuid)),\n              );\n            }\n            return {\n              ...currentUIState,\n              // Set mode to \"custom\"\n              runsHiddenMode: RUNS_VISIBILITY_MODE.CUSTOM,\n              runsHidden: newHiddenRows,\n            };\n          }\n\n          // Toggle visibility of a run/group by either adding or removing from the array\n          const newHiddenRows = currentlyHiddenRows.includes(groupOrRunUuid)\n            ? currentlyHiddenRows.filter((currentGroupOrRunUuid) => currentGroupOrRunUuid !== groupOrRunUuid)\n            : [...currentlyHiddenRows, groupOrRunUuid];\n\n          return {\n            ...currentUIState,\n            // Set mode to \"custom\"\n            runsHiddenMode: RUNS_VISIBILITY_MODE.CUSTOM,\n            runsHidden: newHiddenRows,\n          };\n        }\n\n        return currentUIState;\n      });\n    },\n    [updateUIState, useGroupedValuesInCharts],\n  );\n\n  return shouldUseRunRowsVisibilityMap() ? toggleRowUsingVisibilityMap : toggleRowVisibility;\n};\n","import { type RefObject, useCallback, useEffect } from 'react';\nimport { ChartsTraceHighlightSource, useRunsChartTraceHighlight } from './useRunsChartTraceHighlight';\nimport type { CellMouseOverEvent } from '@ag-grid-community/core';\n\nconst DEFAULT_HIGH_LIGHT_CLASS_NAME = 'is-highlighted';\n\n/**\n * Helper hook adding support for useRunsChartTraceSetHighlight() logic to a ag-grid table rows\n */\nexport const useRunsHighlightTableRow = (\n  /**\n   * Reference to the container element of the table.\n   */\n  containerElementRef: RefObject<HTMLDivElement>,\n  /**\n   * Class name to be added to the highlighted row.\n   */\n  highlightedClassName = DEFAULT_HIGH_LIGHT_CLASS_NAME,\n  /**\n   * Additional selector prefix to be used to find the row element.\n   */\n  findInFlexColumns = false,\n  /**\n   * Optional function to extract the row UUID from the table data, used in row hover callback.\n   */\n  getRowUuid?: (data: any) => string | undefined,\n) => {\n  const { onHighlightChange, highlightDataTrace } = useRunsChartTraceHighlight();\n  /**\n   * Listener function that highlights a row in the table by adding a class to it.\n   */\n  const highlightFn = useCallback(\n    (rowUuid: string | null, source?: ChartsTraceHighlightSource) => {\n      // First, quickly remove the highlight class from the previous highlighted row\n      const existingHighlightedRowElement = containerElementRef.current?.querySelector(`.${highlightedClassName}`);\n\n      const additionalSelectorPrefix = findInFlexColumns ? '.ag-center-cols-viewport' : '';\n\n      // Find the new row element and add the highlight class to it\n      const rowElement = containerElementRef.current?.querySelector(\n        `${additionalSelectorPrefix} .ag-row[row-id=\"${rowUuid}\"]`,\n      );\n      if (existingHighlightedRowElement && existingHighlightedRowElement !== rowElement) {\n        existingHighlightedRowElement.classList.remove(highlightedClassName);\n      }\n\n      // Do not highlight the row if the source of highlight event is the table itself\n      if (source === ChartsTraceHighlightSource.TABLE) {\n        return;\n      }\n\n      rowElement && rowElement.classList.add(highlightedClassName);\n    },\n    [containerElementRef, highlightedClassName, findInFlexColumns],\n  );\n\n  // Subscribe to the highlight change event\n  useEffect(() => onHighlightChange(highlightFn), [highlightFn, onHighlightChange]);\n\n  // Create event handlers for table cell mouse over and out events\n  const cellMouseOverHandler = useCallback(\n    ({ data }: CellMouseOverEvent) => {\n      const isGroupRow = typeof data === 'object' && 'groupParentInfo' in data;\n      // Extract the trace UUID from the data\n      // Use runUuid for non-group rows and rowUuid for group rows\n      const dataTraceUuid = getRowUuid ? getRowUuid({ data }) : isGroupRow ? data.rowUuid : data.runUuid;\n\n      highlightDataTrace(dataTraceUuid, {\n        source: ChartsTraceHighlightSource.TABLE,\n      });\n    },\n    [highlightDataTrace, getRowUuid],\n  );\n\n  const cellMouseOutHandler = useCallback(() => highlightDataTrace(null), [highlightDataTrace]);\n\n  return { cellMouseOverHandler, cellMouseOutHandler };\n};\n","import { SortAscendingIcon, SortDescendingIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { useUpdateExperimentPageSearchFacets } from '../../../hooks/useExperimentPageSearchFacets';\n\nexport interface ColumnHeaderCellProps {\n  enableSorting: boolean;\n  displayName: string;\n  canonicalSortKey: string;\n  context: {\n    orderByKey: string;\n    orderByAsc: boolean;\n  };\n}\n\nexport const ColumnHeaderCell = ({\n  enableSorting,\n  canonicalSortKey,\n  displayName,\n  context: tableContext,\n}: ColumnHeaderCellProps) => {\n  const { orderByKey, orderByAsc } = tableContext || {};\n  const updateSearchFacets = useUpdateExperimentPageSearchFacets();\n  const selectedCanonicalSortKey = canonicalSortKey;\n\n  const handleSortBy = () => {\n    let newOrderByAsc = !orderByAsc;\n\n    // If the new sortKey is not equal to the previous sortKey, reset the orderByAsc\n    if (selectedCanonicalSortKey !== orderByKey) {\n      newOrderByAsc = false;\n    }\n    updateSearchFacets({ orderByKey: selectedCanonicalSortKey, orderByAsc: newOrderByAsc });\n  };\n\n  const { theme } = useDesignSystemTheme();\n  const isOrderedByClassName = 'is-ordered-by';\n\n  return (\n    <div\n      role=\"columnheader\"\n      css={{\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      }}\n    >\n      <div\n        css={{\n          height: '100%',\n          width: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          overflow: 'hidden',\n          paddingLeft: theme.spacing.xs + theme.spacing.sm,\n          paddingRight: theme.spacing.xs + theme.spacing.sm,\n          gap: theme.spacing.sm,\n          svg: {\n            color: theme.colors.textSecondary,\n          },\n          '&:hover': {\n            color: enableSorting ? theme.colors.actionTertiaryTextHover : 'unset',\n            svg: {\n              color: theme.colors.actionTertiaryTextHover,\n            },\n          },\n        }}\n        className={selectedCanonicalSortKey === orderByKey ? isOrderedByClassName : ''}\n        onClick={enableSorting ? handleSortBy : undefined}\n      >\n        <span data-testid={`sort-header-${displayName}`}>{displayName}</span>\n        {enableSorting && selectedCanonicalSortKey === orderByKey ? (\n          orderByAsc ? (\n            <SortAscendingIcon />\n          ) : (\n            <SortDescendingIcon />\n          )\n        ) : null}\n      </div>\n    </div>\n  );\n};\n","import type { Theme } from '@emotion/react';\nimport React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport type { RunRowDateAndNestInfo } from '../../../utils/experimentPage.row-types';\nimport { RunStatusIcon } from '../../../../RunStatusIcon';\nimport { useIntl } from 'react-intl';\n\nexport interface DateCellRendererProps {\n  value: RunRowDateAndNestInfo;\n}\n\nexport const DateCellRenderer = React.memo(({ value }: DateCellRendererProps) => {\n  const { startTime, referenceTime, runStatus } = value || {};\n  const intl = useIntl();\n  if (!startTime) {\n    return <>-</>;\n  }\n\n  return (\n    <span css={styles.cellWrapper} title={Utils.formatTimestamp(startTime, intl)}>\n      <RunStatusIcon status={runStatus} />\n      {Utils.timeSinceStr(startTime, referenceTime)}\n    </span>\n  );\n});\n\nconst styles = {\n  cellWrapper: (theme: Theme) => ({\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing.sm,\n  }),\n};\n","import React, { useState } from 'react';\nimport { Button } from '@databricks/design-system';\n\ntype Props = {\n  text: string;\n  maxSize: number;\n  className?: string;\n  allowShowMore?: boolean;\n  dataTestId?: string;\n};\n\nexport const TrimmedText = ({ text, maxSize, className, allowShowMore = false, dataTestId }: Props) => {\n  if (text.length <= maxSize) {\n    return (\n      <span className={className} data-testid={dataTestId}>\n        {text}\n      </span>\n    );\n  }\n  const trimmedText = `${text.substr(0, maxSize)}...`;\n  // Reported during ESLint upgrade\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [showMore, setShowMore] = useState(false);\n  return (\n    <span className={className} data-testid={dataTestId}>\n      {showMore ? text : trimmedText}\n      {allowShowMore && (\n        <Button\n          componentId=\"codegen_mlflow_app_src_common_components_trimmedtext.tsx_30\"\n          type=\"link\"\n          onClick={() => setShowMore(!showMore)}\n          size=\"small\"\n          css={styles.expandButton}\n          data-testid=\"trimmed-text-button\"\n        >\n          {showMore ? 'collapse' : 'expand'}\n        </Button>\n      )}\n    </span>\n  );\n};\n\nconst styles = {\n  expandButton: {\n    display: 'inline-block',\n  },\n};\n","import React from 'react';\nimport { LegacyTooltip } from '@databricks/design-system';\nimport Utils from '../../../../../../common/utils/Utils';\nimport type { RunRowType } from '../../../utils/experimentPage.row-types';\nimport { TrimmedText } from '../../../../../../common/components/TrimmedText';\n\nexport const RunDescriptionCellRenderer = React.memo(({ value }: { value: RunRowType['tags'] }) => {\n  const description = Utils.getRunDescriptionFromTags(value) || '-';\n  return (\n    <>\n      <LegacyTooltip title={description}>\n        <span>\n          <TrimmedText text={description} maxSize={50} />\n        </span>\n      </LegacyTooltip>\n    </>\n  );\n});\n","import React from 'react';\nimport { Link } from '../../../../../../common/utils/RoutingUtils';\nimport Routes from '../../../../../routes';\nimport type { RunRowType } from '../../../utils/experimentPage.row-types';\n\nexport interface ExperimentNameCellRendererProps {\n  value: {\n    name: string;\n    basename: string;\n  };\n  data: RunRowType;\n}\n\nexport const ExperimentNameCellRenderer = React.memo(({ data, value }: ExperimentNameCellRendererProps) =>\n  !data.experimentId ? null : (\n    <Link to={Routes.getExperimentPageRoute(data.experimentId)} title={value.name}>\n      {value.basename}\n    </Link>\n  ),\n);\n","import React, { useMemo } from 'react';\nimport { ModelsIcon, Overflow, Tag, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { ModelRegistryRoutes } from '../../../../../../model-registry/routes';\nimport Routes from '../../../../../routes';\nimport type { RunRowModelsInfo } from '../../../utils/experimentPage.row-types';\nimport { Link } from '../../../../../../common/utils/RoutingUtils';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../../../../common/static/registered-model-grey-ok.svg';\nimport type { LoggedModelProto } from '../../../../../types';\nimport { FormattedMessage } from 'react-intl';\nimport { useExperimentLoggedModelRegisteredVersions } from '../../../../experiment-logged-models/hooks/useExperimentLoggedModelRegisteredVersions';\nimport { isEmpty, uniqBy, values } from 'lodash';\nimport { isUCModelName } from '../../../../../utils/IsUCModelName';\nimport {\n  shouldUnifyLoggedModelsAndRegisteredModels,\n  shouldUseGetLoggedModelsBatchAPI,\n} from '../../../../../../common/utils/FeatureUtils';\n\nconst EMPTY_CELL_PLACEHOLDER = '-';\n\nexport interface ModelsCellRendererProps {\n  value: RunRowModelsInfo;\n}\n\n/**\n * Backfill Typescript type for the value returned from Utils.mergeLoggedAndRegisteredModels\n */\ninterface CombinedModelType {\n  registeredModelName?: string;\n  isUc?: boolean;\n  registeredModelVersion?: string;\n  artifactPath?: string;\n  flavors?: string[];\n  originalLoggedModel?: LoggedModelProto;\n}\n\n/**\n * Icon, label and link for a single model\n */\nconst ModelLink = ({\n  model: { isUc, registeredModelName, registeredModelVersion, flavors, artifactPath, originalLoggedModel } = {},\n  experimentId,\n  runUuid,\n}: {\n  model?: CombinedModelType;\n  experimentId: string;\n  runUuid: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  // Renders a model name based on whether it's a registered model or not\n  const renderModelName = () => {\n    let tooltipBody: React.ReactNode = `${registeredModelName} v${registeredModelVersion}`;\n\n    // If the model is a registered model coming from V3 logged model, we need to show the original logged model name\n    if (\n      registeredModelName &&\n      registeredModelVersion &&\n      originalLoggedModel &&\n      shouldUnifyLoggedModelsAndRegisteredModels()\n    ) {\n      const loggedModelExperimentId = originalLoggedModel.info?.experiment_id;\n      const loggedModelId = originalLoggedModel.info?.model_id;\n      if (loggedModelExperimentId && loggedModelId) {\n        tooltipBody = (\n          <FormattedMessage\n            defaultMessage=\"Original logged model: {originalModelLink}\"\n            description=\"Tooltip text with link to the original logged model\"\n            values={{\n              originalModelLink: (\n                <Link\n                  to={Routes.getExperimentLoggedModelDetailsPage(loggedModelExperimentId, loggedModelId)}\n                  css={{ color: 'inherit', textDecoration: 'underline' }}\n                >\n                  {originalLoggedModel.info?.name}\n                </Link>\n              ),\n            }}\n          />\n        );\n      }\n    }\n    if (registeredModelName) {\n      return (\n        <LegacyTooltip title={tooltipBody} placement=\"topLeft\">\n          <span css={{ verticalAlign: 'middle' }}>{registeredModelName}</span>{' '}\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_modelscellrenderer.tsx_49\"\n            css={{ marginRight: 0, verticalAlign: 'middle' }}\n          >\n            v{registeredModelVersion}\n          </Tag>\n        </LegacyTooltip>\n      );\n    }\n\n    const firstFlavorName = flavors?.[0];\n\n    return (\n      firstFlavorName || (\n        <FormattedMessage\n          defaultMessage=\"Model\"\n          description=\"Experiment page > runs table > models column > default label for no specific model\"\n        />\n      )\n    );\n  };\n\n  // Renders a link to either the model registry or the run artifacts page\n  const renderModelLink = () => {\n    if (registeredModelName && registeredModelVersion) {\n      return ModelRegistryRoutes.getModelVersionPageRoute(registeredModelName, registeredModelVersion);\n    }\n    return Routes.getRunPageRoute(experimentId, runUuid, artifactPath);\n  };\n\n  // Renders an icon based on whether it's a registered model or not\n  const renderModelIcon = () => {\n    if (registeredModelName) {\n      return <RegisteredModelOkIcon css={{ color: theme.colors.actionPrimaryBackgroundDefault }} />;\n    }\n    return <ModelsIcon css={{ color: theme.colors.actionPrimaryBackgroundDefault }} />;\n  };\n\n  return (\n    <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs, overflow: 'hidden' }}>\n      <div css={{ width: 20, display: 'flex', alignItems: 'center', justifyContent: 'flex-start', flexShrink: 0 }}>\n        {renderModelIcon()}\n      </div>\n      <Link\n        to={renderModelLink()}\n        target=\"_blank\"\n        css={{ textOverflow: 'ellipsis', overflow: 'hidden', cursor: 'pointer' }}\n      >\n        {renderModelName()}\n      </Link>\n    </div>\n  );\n};\n\nconst LoggedModelV3Link = ({ model }: { model: LoggedModelProto }) => {\n  const { theme } = useDesignSystemTheme();\n\n  if (!model.info?.model_id || !model.info?.experiment_id) {\n    return null;\n  }\n  return (\n    <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs, overflow: 'hidden' }}>\n      <div css={{ width: 20, display: 'flex', alignItems: 'center', justifyContent: 'flex-start', flexShrink: 0 }}>\n        <ModelsIcon css={{ color: theme.colors.actionPrimaryBackgroundDefault }} />\n      </div>\n      <Link\n        to={Routes.getExperimentLoggedModelDetailsPage(model.info.experiment_id, model.info.model_id)}\n        target=\"_blank\"\n        css={{ textOverflow: 'ellipsis', overflow: 'hidden', cursor: 'pointer' }}\n      >\n        {model.info.name}\n      </Link>\n    </div>\n  );\n};\n\n/**\n * This component renders combined set of models, based on provided models payload.\n * The models are sourced from:\n * - `registeredModels` containing WMR and UC model versions associated with the run, populated by API call\n * - `loggedModels` containing legacy (pre-V3) logged models associated with the run, listed in run's tag\n * - `loggedModelsV3` containing V3 logged models associated with the runs inputs and outputs, populated by API call\n * In the component, we also resolve registered model versions for V3 logged models based on loged model's tags\n */\nexport const ModelsCellRenderer = React.memo((props: ModelsCellRendererProps) => {\n  const { registeredModels = [], loggedModels = [], loggedModelsV3, experimentId, runUuid } = props.value || {};\n\n  // First, we merge legacy logged models and registered models.\n  const modelsLegacy: CombinedModelType[] = Utils.mergeLoggedAndRegisteredModels(\n    loggedModels,\n    registeredModels,\n  ) as any[];\n\n  // Next, registered model versions are resolved from V3 logged models' tags\n  const { modelVersions: registeredModelVersions } = useExperimentLoggedModelRegisteredVersions({\n    loggedModels: loggedModelsV3 || [],\n  });\n\n  // We create a map of registered model versions by their source logged model.\n  // This allows to unfurl logged model to registered model versions while hiding the original logged model.\n  const registeredModelVersionsByLoggedModel = useMemo(() => {\n    if (!shouldUseGetLoggedModelsBatchAPI()) {\n      return {};\n    }\n    const map: Record<string, CombinedModelType[]> = {};\n    registeredModelVersions.forEach((modelVersion) => {\n      const loggedModelId = modelVersion.sourceLoggedModel?.info?.model_id;\n      if (loggedModelId) {\n        const registeredModels = map[loggedModelId] || [];\n        const name = modelVersion.displayedName ?? undefined;\n        registeredModels.push({\n          registeredModelName: name,\n          registeredModelVersion: modelVersion.version ?? undefined,\n          isUc: isUCModelName(name ?? ''),\n          artifactPath: modelVersion.sourceLoggedModel?.info?.artifact_uri ?? '',\n          flavors: [],\n          originalLoggedModel: modelVersion.sourceLoggedModel,\n        });\n        map[loggedModelId] = registeredModels;\n      }\n    });\n    return map;\n  }, [registeredModelVersions]);\n\n  // Merge legacy models with registered model versions from V3 logged models.\n  const registeredModelsToDisplay = useMemo(() => {\n    const allModels = [...modelsLegacy, ...Array.from(values(registeredModelVersionsByLoggedModel)).flat()];\n    // Remove duplicates (it's not impossible to reference the same model version twice in a single logged model)\n    return uniqBy(allModels, (model) =>\n      JSON.stringify(\n        model.registeredModelName && model.registeredModelVersion\n          ? [model.registeredModelName, model.registeredModelVersion?.toString()]\n          : [model.artifactPath],\n      ),\n    );\n  }, [modelsLegacy, registeredModelVersionsByLoggedModel]);\n\n  const containsModels = !isEmpty(registeredModelsToDisplay) || !isEmpty(loggedModelsV3);\n\n  if (!props.value) {\n    return <>{EMPTY_CELL_PLACEHOLDER}</>;\n  }\n\n  if (containsModels) {\n    return (\n      // <Overflow /> component does not ideally fit within ag-grid cell so we need to override its styles a bit\n      <div css={{ width: '100%', '&>div': { maxWidth: '100%', display: 'flex' } }}>\n        <Overflow>\n          {registeredModelsToDisplay.map((model, index) => (\n            <ModelLink model={model} key={model.artifactPath || index} experimentId={experimentId} runUuid={runUuid} />\n          ))}\n          {loggedModelsV3?.map((model, index) => {\n            // Display logged model only if it does not have registered model versions associated with it.\n            const modelId = model.info?.model_id;\n            const loggedModelRegisteredVersions = modelId ? registeredModelVersionsByLoggedModel[modelId] : [];\n            if (!isEmpty(loggedModelRegisteredVersions)) {\n              return null;\n            }\n\n            return <LoggedModelV3Link key={model.info?.model_id ?? index} model={model} />;\n          })}\n        </Overflow>\n      </div>\n    );\n  }\n  return <>{EMPTY_CELL_PLACEHOLDER}</>;\n});\n","import React from 'react';\nimport {\n  SortAscendingIcon,\n  SortDescendingIcon,\n  LegacyTooltip,\n  useDesignSystemTheme,\n  InfoTooltip,\n} from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ATTRIBUTE_COLUMN_LABELS } from '../../../../../constants';\nimport {\n  shouldUnifyLoggedModelsAndRegisteredModels,\n  shouldUseGetLoggedModelsBatchAPI,\n} from '../../../../../../common/utils/FeatureUtils';\n\nexport const ModelsHeaderCellRenderer = React.memo(() => {\n  const { theme } = useDesignSystemTheme();\n\n  // Check if we are using:\n  // - unified (registered and logged) models\n  // - models based on run's inputs and outputs\n  // We'll use it to display better tooltip\n  const isUsingUnifiedModels = shouldUnifyLoggedModelsAndRegisteredModels() && shouldUseGetLoggedModelsBatchAPI();\n\n  return (\n    <div\n      role=\"columnheader\"\n      css={{\n        height: '100%',\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        padding: '0 12px',\n        gap: theme.spacing.xs,\n      }}\n    >\n      {isUsingUnifiedModels ? (\n        <>\n          {ATTRIBUTE_COLUMN_LABELS.MODELS}\n          <InfoTooltip\n            componentId=\"mlflow.experiment_view_runs_table.column_header.models.tooltip\"\n            content={\n              <FormattedMessage\n                defaultMessage=\"This column contains all models logged or evaluated by the run. Click into an individual run to see more detailed information about all models associated with it.\"\n                description='A descriptive tooltip for the \"Models\" column header in the runs table on the MLflow experiment detail page'\n              />\n            }\n          />\n        </>\n      ) : (\n        <LegacyTooltip\n          title={\n            <FormattedMessage\n              defaultMessage=\"Click into an individual run to see all models associated with it\"\n              description='MLflow experiment detail page > runs table > tooltip on ML \"Models\" column header'\n            />\n          }\n        >\n          {ATTRIBUTE_COLUMN_LABELS.MODELS}\n        </LegacyTooltip>\n      )}\n    </div>\n  );\n});\n","import React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport type { RunRowVersionInfo } from '../../../utils/experimentPage.row-types';\n\nexport const VersionCellRenderer = React.memo(({ value }: { value?: RunRowVersionInfo }) => {\n  if (!value) {\n    return <>-</>;\n  }\n  const {\n    // Run row version object parameters\n    version,\n    name,\n    type,\n  } = value;\n\n  return (\n    Utils.renderSourceVersion(\n      // Using function from utils to render the source link\n      version,\n      name,\n      type,\n    ) || <>-</>\n  );\n});\n","import { Icon, LegacyTooltip, VisibleOffIcon, useDesignSystemTheme, visuallyHidden } from '@databricks/design-system';\nimport { RUNS_VISIBILITY_MODE } from '../../../models/ExperimentPageUIState';\nimport { ReactComponent as VisibleFillIcon } from '../../../../../../common/static/icon-visible-fill.svg';\nimport type { Theme } from '@emotion/react';\n\nconst VisibleIcon = () => <Icon component={VisibleFillIcon} />;\n\ninterface RunVisibilityControlButtonProps {\n  className?: string;\n  runUuid: string;\n  rowHidden: boolean;\n  buttonHidden: boolean;\n  disabled: boolean;\n  onClick: (runUuidOrToggle: string | RUNS_VISIBILITY_MODE, runUuid?: string, isRowVisible?: boolean) => void;\n  label: React.ReactNode;\n}\n\n// Mouse enter/leave delays passed to tooltips are set to 0 so swift toggling/pinning runs is not hampered\nconst MOUSE_DELAYS = { mouseEnterDelay: 0, mouseLeaveDelay: 0 };\n\nexport const RunVisibilityControlButton = ({\n  runUuid,\n  className,\n  rowHidden,\n  buttonHidden,\n  disabled,\n  onClick,\n  label,\n}: RunVisibilityControlButtonProps) => {\n  const { theme } = useDesignSystemTheme();\n  if (buttonHidden) {\n    return <div className={className} css={[styles.button(theme)]} />;\n  }\n  if (disabled) {\n    return (\n      <VisibleOffIcon\n        className={className}\n        css={[\n          styles.button(theme),\n          {\n            opacity: 0.25,\n            color: theme.colors.grey400,\n          },\n        ]}\n      />\n    );\n  }\n  return (\n    <LegacyTooltip dangerouslySetAntdProps={MOUSE_DELAYS} placement=\"right\" title={label}>\n      <label className={className} css={styles.button(theme)}>\n        <span css={visuallyHidden}>{label}</span>\n        <input\n          type=\"checkbox\"\n          className=\"is-visibility-toggle-checkbox\"\n          checked={!rowHidden}\n          onChange={() => {\n            if (runUuid) {\n              const isRowVisible = !rowHidden;\n              onClick(RUNS_VISIBILITY_MODE.CUSTOM, runUuid, isRowVisible);\n            }\n          }}\n        />\n        {!rowHidden ? <VisibleIcon /> : <VisibleOffIcon />}\n      </label>\n    </LegacyTooltip>\n  );\n};\n\nconst styles = {\n  button: (theme: Theme) => ({\n    width: theme.general.iconFontSize,\n    color: theme.colors.grey400,\n    '.ag-row:hover &': {\n      color: theme.colors.grey500,\n    },\n  }),\n};\n","import React, { useMemo } from 'react';\nimport { RUNS_VISIBILITY_MODE } from '../../models/ExperimentPageUIState';\n\nconst ExperimentViewRunsTableHeaderContext = React.createContext({\n  runsHiddenMode: RUNS_VISIBILITY_MODE.FIRST_10_RUNS,\n  useGroupedValuesInCharts: true,\n  usingCustomVisibility: false,\n  allRunsHidden: false,\n});\n\n/**\n * A tiny context that passes the current runs hidden mode to the header cell renderer.\n *\n * This is needed because ag-grid context is unreliable and does not always update when the\n * runs hidden mode changes. The solution below is way more performant than recreating column definitions\n * based on a new value.\n */\nexport const ExperimentViewRunsTableHeaderContextProvider = ({\n  children,\n  runsHiddenMode,\n  useGroupedValuesInCharts,\n  usingCustomVisibility,\n  allRunsHidden,\n}: {\n  children: React.ReactNode;\n  runsHiddenMode: RUNS_VISIBILITY_MODE;\n  useGroupedValuesInCharts?: boolean;\n  /**\n   * Whether the user is using custom visibility settings (at least one row is configured manually)\n   */\n  usingCustomVisibility?: boolean;\n  /**\n   * Whether all runs are hidden\n   */\n  allRunsHidden?: boolean;\n}) => {\n  const contextValue = useMemo(\n    () => ({\n      runsHiddenMode,\n      useGroupedValuesInCharts: useGroupedValuesInCharts ?? true,\n      usingCustomVisibility: usingCustomVisibility ?? false,\n      allRunsHidden: allRunsHidden ?? false,\n    }),\n    [runsHiddenMode, useGroupedValuesInCharts, usingCustomVisibility, allRunsHidden],\n  );\n  return (\n    <ExperimentViewRunsTableHeaderContext.Provider value={contextValue}>\n      {children}\n    </ExperimentViewRunsTableHeaderContext.Provider>\n  );\n};\n\nexport const useExperimentViewRunsTableHeaderContext = () => React.useContext(ExperimentViewRunsTableHeaderContext);\n","import {\n  PinIcon,\n  PinFillIcon,\n  LegacyTooltip,\n  VisibleIcon as VisibleHollowIcon,\n  VisibleOffIcon,\n  useDesignSystemTheme,\n  Icon,\n  visuallyHidden,\n} from '@databricks/design-system';\nimport type { SuppressKeyboardEventParams } from '@ag-grid-community/core';\n\n// TODO: Import this icon from design system when added\nimport { ReactComponent as VisibleFillIcon } from '../../../../../../common/static/icon-visible-fill.svg';\nimport type { Theme } from '@emotion/react';\nimport React, { useMemo } from 'react';\nimport { FormattedMessage, defineMessages } from 'react-intl';\nimport type { RunRowType } from '../../../utils/experimentPage.row-types';\nimport { RunRowVisibilityControl } from '../../../utils/experimentPage.row-types';\nimport { shouldEnableToggleIndividualRunsInGroups } from '../../../../../../common/utils/FeatureUtils';\nimport { useUpdateExperimentViewUIState } from '../../../contexts/ExperimentPageUIStateContext';\nimport type { RUNS_VISIBILITY_MODE } from '../../../models/ExperimentPageUIState';\nimport { isRemainingRunsGroup } from '../../../utils/experimentPage.group-row-utils';\nimport { RunVisibilityControlButton } from './RunVisibilityControlButton';\nimport { useExperimentViewRunsTableHeaderContext } from '../ExperimentViewRunsTableHeaderContext';\n\nconst labels = {\n  visibility: {\n    groups: defineMessages({\n      unhide: {\n        defaultMessage: 'Unhide group',\n        description: 'A tooltip for the visibility icon button in the runs table next to the hidden run group',\n      },\n      hide: {\n        defaultMessage: 'Hide group',\n        description: 'A tooltip for the visibility icon button in the runs table next to the visible run group',\n      },\n    }),\n    runs: defineMessages({\n      unhide: {\n        defaultMessage: 'Unhide run',\n        description: 'A tooltip for the visibility icon button in the runs table next to the hidden run',\n      },\n      hide: {\n        defaultMessage: 'Hide run',\n        description: 'A tooltip for the visibility icon button in the runs table next to the visible run',\n      },\n    }),\n  },\n  pinning: {\n    groups: defineMessages({\n      unpin: {\n        defaultMessage: 'Unpin group',\n        description: 'A tooltip for the pin icon button in the runs table next to the pinned run group',\n      },\n      pin: {\n        defaultMessage: 'Pin group',\n        description: 'A tooltip for the pin icon button in the runs table next to the not pinned run group',\n      },\n    }),\n    runs: defineMessages({\n      unpin: {\n        defaultMessage: 'Unpin run',\n        description: 'A tooltip for the pin icon button in the runs table next to the pinned run',\n      },\n      pin: {\n        defaultMessage: 'Pin run',\n        description: 'A tooltip for the pin icon button in the runs table next to the not pinned run',\n      },\n    }),\n  },\n};\n\n// Mouse enter/leave delays passed to tooltips are set to 0 so swift toggling/pinning runs is not hampered\nconst MOUSE_DELAYS = { mouseEnterDelay: 0, mouseLeaveDelay: 0 };\n\nexport const RowActionsCellRenderer = React.memo(\n  (props: {\n    data: RunRowType;\n    value: { pinned: boolean; hidden: boolean };\n    onTogglePin: (runUuid: string) => void;\n    onToggleVisibility: (runUuidOrToggle: string | RUNS_VISIBILITY_MODE, runUuid?: string) => void;\n  }) => {\n    const updateUIState = useUpdateExperimentViewUIState();\n    const { theme } = useDesignSystemTheme();\n    const { useGroupedValuesInCharts } = useExperimentViewRunsTableHeaderContext();\n\n    const { groupParentInfo, runDateAndNestInfo, visibilityControl } = props.data;\n    const { belongsToGroup } = runDateAndNestInfo || {};\n    const isGroupRow = Boolean(groupParentInfo);\n    const isVisibilityButtonDisabled =\n      shouldEnableToggleIndividualRunsInGroups() && visibilityControl === RunRowVisibilityControl.Disabled;\n    const { pinned, hidden } = props.value;\n    const { runUuid, rowUuid } = props.data;\n\n    // If a row is a run group, we use its rowUuid for setting visibility.\n    // If this is a run, use runUuid.\n    const runUuidToToggle = groupParentInfo ? rowUuid : runUuid;\n\n    const isRowHidden = (() => {\n      // If \"Use grouping from the runs table in charts\" option is off and we're displaying a group,\n      // we should check if all runs in the group are hidden in order to determine visibility toggle.\n      if (shouldEnableToggleIndividualRunsInGroups() && useGroupedValuesInCharts === false && groupParentInfo) {\n        return Boolean(groupParentInfo.allRunsHidden);\n      }\n\n      // Otherwise, we should use the hidden flag from the row itself.\n      return hidden;\n    })();\n\n    const visibilityMessageDescriptor = isGroupRow\n      ? isRowHidden\n        ? labels.visibility.groups.unhide\n        : labels.visibility.groups.hide\n      : isRowHidden\n      ? labels.visibility.runs.unhide\n      : labels.visibility.runs.hide;\n\n    const pinningMessageDescriptor = isGroupRow\n      ? pinned\n        ? labels.pinning.groups.unpin\n        : labels.pinning.groups.pin\n      : pinned\n      ? labels.pinning.runs.unpin\n      : labels.pinning.runs.pin;\n\n    const isVisibilityButtonHidden = useMemo(() => {\n      if (shouldEnableToggleIndividualRunsInGroups()) {\n        return visibilityControl === RunRowVisibilityControl.Hidden;\n      }\n      return !((groupParentInfo && !isRemainingRunsGroup(groupParentInfo)) || (Boolean(runUuid) && !belongsToGroup));\n    }, [groupParentInfo, belongsToGroup, runUuid, visibilityControl]);\n\n    return (\n      <div css={styles.actionsContainer}>\n        <RunVisibilityControlButton\n          rowHidden={isRowHidden}\n          buttonHidden={isVisibilityButtonHidden}\n          disabled={isVisibilityButtonDisabled}\n          label={<FormattedMessage {...visibilityMessageDescriptor} />}\n          onClick={props.onToggleVisibility}\n          runUuid={runUuidToToggle}\n          css={[\n            styles.actionCheckbox(theme),\n            // We show this button only in the runs compare mode\n            styles.showOnlyInCompareMode,\n          ]}\n        />\n        {((props.data.pinnable && runUuid) || groupParentInfo) && (\n          <LegacyTooltip\n            dangerouslySetAntdProps={MOUSE_DELAYS}\n            placement=\"right\"\n            // We have to force remount of the tooltip with every rerender, otherwise it will jump\n            // around when the row order changes.\n            key={Math.random()}\n            title={<FormattedMessage {...pinningMessageDescriptor} />}\n          >\n            <label css={styles.actionCheckbox(theme)} className=\"is-pin-toggle\" data-testid=\"column-pin-toggle\">\n              <span css={visuallyHidden}>\n                <FormattedMessage {...pinningMessageDescriptor} />\n              </span>\n              <input\n                type=\"checkbox\"\n                checked={pinned}\n                onChange={() => {\n                  const uuidToPin = groupParentInfo ? props.data.rowUuid : runUuid;\n                  updateUIState((existingState) => {\n                    if (uuidToPin) {\n                      return {\n                        ...existingState,\n                        runsPinned: !existingState.runsPinned.includes(uuidToPin)\n                          ? [...existingState.runsPinned, uuidToPin]\n                          : existingState.runsPinned.filter((r) => r !== uuidToPin),\n                      };\n                    }\n                    return existingState;\n                  });\n                }}\n              />\n              {pinned ? <PinFillIcon /> : <PinIcon />}\n            </label>\n          </LegacyTooltip>\n        )}\n      </div>\n    );\n  },\n  (prevProps, nextProps) =>\n    prevProps.value.hidden === nextProps.value.hidden &&\n    prevProps.value.pinned === nextProps.value.pinned &&\n    prevProps.data.visibilityControl === nextProps.data.visibilityControl &&\n    prevProps.data.groupParentInfo?.allRunsHidden === nextProps.data.groupParentInfo?.allRunsHidden,\n);\n\n/**\n * A utility function that enables custom keyboard navigation for the row actions cell renderer by providing\n * conditional suppression of default events.\n */\nexport const RowActionsCellRendererSuppressKeyboardEvents = ({ event }: SuppressKeyboardEventParams) => {\n  if (\n    event.key === 'Tab' &&\n    event.target instanceof HTMLElement &&\n    // Let's suppress the default action if the focus is on cell or on visibility toggle checkbox, allowing\n    // tab to move to the next focusable element.\n    (event.target.classList.contains('ag-cell') || event.target.classList.contains('is-visibility-toggle-checkbox'))\n  ) {\n    return true;\n  }\n  return false;\n};\n\nconst styles = {\n  actionsContainer: {\n    display: 'flex',\n    gap: 18, // In design there's 20 px of gutter, it's minus 2 px due to pin icon's internal padding\n  },\n  showOnlyInCompareMode: {\n    display: 'none',\n    '.is-table-comparing-runs-mode &': {\n      display: 'flex',\n    },\n  },\n  actionCheckbox: (theme: Theme) => ({\n    input: { width: 0, appearance: 'none' as const },\n    cursor: 'pointer',\n    display: 'flex',\n    svg: {\n      width: theme.general.iconFontSize,\n      height: theme.general.iconFontSize,\n      cursor: 'pointer',\n    },\n    // Styling for the pin button - it's transparent when unpinned and not hovered\n    '&.is-pin-toggle svg': {\n      color: 'transparent',\n      '.ag-row:hover &': {\n        color: theme.colors.grey500,\n      },\n    },\n    '& input:checked + span svg': {\n      color: theme.colors.grey500,\n    },\n    '& input:focus-visible + span svg': {\n      color: theme.colors.grey500,\n    },\n  }),\n};\n","import { DashIcon, DropdownMenu, Icon, VisibleOffIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport type { Theme } from '@emotion/react';\nimport React, { useEffect } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RUNS_VISIBILITY_MODE } from '@mlflow/mlflow/src/experiment-tracking/components/experiment-page/models/ExperimentPageUIState';\n// TODO: Import this icon from design system when added\nimport { ReactComponent as VisibleFillIcon } from '../../../../../../common/static/icon-visible-fill.svg';\nimport { useExperimentViewRunsTableHeaderContext } from '../ExperimentViewRunsTableHeaderContext';\n\nconst VisibleIcon = () => <Icon component={VisibleFillIcon} />;\n\nconst RowActionsHeaderCellRendererV2 = React.memo(\n  ({\n    onToggleVisibility,\n  }: {\n    onToggleVisibility: (mode: RUNS_VISIBILITY_MODE | string, runOrGroupUuid?: string) => void;\n  }) => {\n    const { theme } = useDesignSystemTheme();\n    const intl = useIntl();\n    const { runsHiddenMode, usingCustomVisibility, allRunsHidden } = useExperimentViewRunsTableHeaderContext();\n\n    return (\n      <DropdownMenu.Root modal={false}>\n        <DropdownMenu.Trigger asChild>\n          <button\n            css={[\n              styles.actionButton(theme),\n              // We show this button only in the runs compare mode\n              styles.showOnlyInCompareMode,\n            ]}\n            data-testid=\"experiment-view-runs-visibility-column-header\"\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Toggle visibility of runs',\n              description: 'Experiment page > runs table > toggle visibility of runs > accessible label',\n            })}\n          >\n            {runsHiddenMode === RUNS_VISIBILITY_MODE.HIDEALL || allRunsHidden ? <VisibleOffIcon /> : <VisibleIcon />}\n          </button>\n        </DropdownMenu.Trigger>\n\n        <DropdownMenu.Content>\n          <DropdownMenu.RadioGroup\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_rowactionsheadercellrenderer.tsx_52\"\n            value={runsHiddenMode}\n            onValueChange={(e) => onToggleVisibility(e)}\n          >\n            <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.FIRST_10_RUNS}>\n              {/* Dropdown menu does not support indeterminate state, so we're doing it manually */}\n              <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n              <FormattedMessage\n                defaultMessage=\"Show first 10\"\n                description=\"Menu option for showing only 10 first runs in the experiment view runs compare mode\"\n              />\n            </DropdownMenu.RadioItem>\n            <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.FIRST_20_RUNS}>\n              <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n              <FormattedMessage\n                defaultMessage=\"Show first 20\"\n                description=\"Menu option for showing only 10 first runs in the experiment view runs compare mode\"\n              />\n            </DropdownMenu.RadioItem>\n            <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.SHOWALL}>\n              <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n              <FormattedMessage\n                defaultMessage=\"Show all runs\"\n                description=\"Menu option for revealing all hidden runs in the experiment view runs compare mode\"\n              />\n            </DropdownMenu.RadioItem>\n            <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.HIDEALL}>\n              <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n              <FormattedMessage\n                defaultMessage=\"Hide all runs\"\n                description=\"Menu option for revealing all hidden runs in the experiment view runs compare mode\"\n              />\n            </DropdownMenu.RadioItem>\n            <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.HIDE_FINISHED_RUNS}>\n              <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n              <FormattedMessage\n                defaultMessage=\"Hide finished runs\"\n                description=\"Menu option for hiding all finished runs in the experiment view runs compare mode\"\n              />\n            </DropdownMenu.RadioItem>\n          </DropdownMenu.RadioGroup>\n        </DropdownMenu.Content>\n      </DropdownMenu.Root>\n    );\n  },\n);\n\n/**\n * A component used to render \"eye\" icon in the table header used to hide/show all runs\n */\nexport const RowActionsHeaderCellRenderer = React.memo(\n  (props: {\n    allRunsHidden?: boolean;\n    usingCustomVisibility?: boolean;\n    onToggleVisibility: (runUuidOrToggle: string) => void;\n    eGridHeader?: HTMLElement;\n  }) => {\n    const intl = useIntl();\n\n    // Since ag-grid does not add accessible labels to its checkboxes, we do it manually.\n    // This is executed once per table lifetime.\n    useEffect(() => {\n      // Find a checkbox in the header\n      const selectAllCheckbox = props.eGridHeader?.querySelector('input');\n\n      // If found, assign aria-label attribute\n      if (selectAllCheckbox) {\n        selectAllCheckbox.ariaLabel = intl.formatMessage({\n          defaultMessage: 'Select all runs',\n          description: 'Experiment page > runs table > select all rows > accessible label',\n        });\n      }\n    }, [props.eGridHeader, intl]);\n\n    return <RowActionsHeaderCellRendererV2 {...props} />;\n  },\n);\n\nconst styles = {\n  actionButton: (theme: Theme) => ({\n    background: 'transparent',\n    border: 'none',\n    cursor: 'pointer',\n    padding: '8px',\n    // When visibility icon is next to the ag-grid checkbox, remove the bonus padding\n    '.ag-checkbox:not(.ag-hidden) + &': { padding: '0 1px' },\n    svg: {\n      width: theme.general.iconFontSize,\n      height: theme.general.iconFontSize,\n      cursor: 'pointer',\n      color: theme.colors.grey500,\n    },\n  }),\n  showOnlyInCompareMode: {\n    display: 'none',\n    '.is-table-comparing-runs-mode &': {\n      display: 'flex',\n    },\n  },\n};\n","import type { ICellRendererParams } from '@ag-grid-community/core';\nimport type { RunRowType } from '../../../utils/experimentPage.row-types';\nimport {\n  Button,\n  ChevronDownIcon,\n  ChevronRightIcon,\n  NewWindowIcon,\n  Tag,\n  Tooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport {\n  createSearchFilterFromRunGroupInfo,\n  getRunGroupDisplayName,\n  isRemainingRunsGroup,\n} from '../../../utils/experimentPage.group-row-utils';\nimport { useUpdateExperimentViewUIState } from '../../../contexts/ExperimentPageUIStateContext';\nimport { useCallback, useMemo } from 'react';\nimport { RunColorPill } from '../../RunColorPill';\nimport invariant from 'invariant';\nimport { FormattedMessage } from 'react-intl';\nimport { useGetExperimentRunColor, useSaveExperimentRunColor } from '../../../hooks/useExperimentRunColor';\nimport { useExperimentViewRunsTableHeaderContext } from '../ExperimentViewRunsTableHeaderContext';\nimport { shouldEnableToggleIndividualRunsInGroups } from '../../../../../../common/utils/FeatureUtils';\nimport type { To } from '../../../../../../common/utils/RoutingUtils';\nimport { Link, useLocation } from '../../../../../../common/utils/RoutingUtils';\nimport { EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW } from '../../../hooks/useExperimentPageSearchFacets';\n\nexport interface GroupParentCellRendererProps extends ICellRendererParams {\n  data: RunRowType;\n  isComparingRuns?: boolean;\n}\n\nexport const GroupParentCellRenderer = ({ data, isComparingRuns }: GroupParentCellRendererProps) => {\n  const groupParentInfo = data.groupParentInfo;\n  const hidden = data.hidden;\n  invariant(groupParentInfo, 'groupParentInfo should be defined');\n  const { theme } = useDesignSystemTheme();\n  const location = useLocation();\n\n  const { useGroupedValuesInCharts } = useExperimentViewRunsTableHeaderContext();\n  const getRunColor = useGetExperimentRunColor();\n  const saveRunColor = useSaveExperimentRunColor();\n  const updateUIState = useUpdateExperimentViewUIState();\n  const onExpandToggle = useCallback(\n    (groupId: string, doOpen: boolean) => {\n      updateUIState((current) => {\n        const { groupsExpanded } = current;\n        return {\n          ...current,\n          groupsExpanded: { ...groupsExpanded, [groupId]: doOpen },\n        };\n      });\n    },\n    [updateUIState],\n  );\n\n  const groupName = getRunGroupDisplayName(groupParentInfo);\n  const groupIsDisplayedInCharts = useMemo(() => {\n    if (shouldEnableToggleIndividualRunsInGroups()) {\n      return useGroupedValuesInCharts && !isRemainingRunsGroup(groupParentInfo);\n    }\n\n    return !isRemainingRunsGroup(groupParentInfo);\n  }, [groupParentInfo, useGroupedValuesInCharts]);\n\n  const urlToRunUuidsFilter = useMemo(() => {\n    const filter = createSearchFilterFromRunGroupInfo(groupParentInfo);\n\n    const searchParams = new URLSearchParams(location.search);\n    searchParams.set('searchFilter', filter);\n    searchParams.set(EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW, 'true');\n    const destination: To = {\n      ...location,\n      search: searchParams.toString(),\n    };\n\n    return destination;\n  }, [groupParentInfo, location]);\n\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.sm, alignItems: 'center' }}>\n      {groupParentInfo.expanderOpen ? (\n        <ChevronDownIcon\n          role=\"button\"\n          onClick={() => {\n            onExpandToggle(groupParentInfo.groupId, false);\n          }}\n        />\n      ) : (\n        <ChevronRightIcon\n          role=\"button\"\n          onClick={() => {\n            onExpandToggle(groupParentInfo.groupId, true);\n          }}\n        />\n      )}\n      {/* Display color pill only when it's displayed in chart area */}\n      {groupIsDisplayedInCharts && (\n        <RunColorPill\n          color={getRunColor(groupParentInfo.groupId)}\n          hidden={isComparingRuns && hidden}\n          onChangeColor={(colorValue) => {\n            saveRunColor({ groupUuid: groupParentInfo.groupId, colorValue });\n          }}\n        />\n      )}\n      <div\n        css={{\n          display: 'inline-flex',\n          gap: theme.spacing.sm,\n          alignItems: 'center',\n          overflow: 'hidden',\n          textOverflow: 'ellipsis',\n        }}\n      >\n        {isRemainingRunsGroup(groupParentInfo) ? (\n          <FormattedMessage\n            defaultMessage=\"Additional runs\"\n            description=\"Experiment page > grouped runs table > label for group with additional, ungrouped runs\"\n          />\n        ) : (\n          <span title={groupName} css={{ overflow: 'hidden', textOverflow: 'ellipsis' }}>\n            <FormattedMessage\n              defaultMessage=\"Group: {groupName}\"\n              description=\"Experiment page > grouped runs table > run group header label\"\n              values={{ groupName }}\n            />\n          </span>\n        )}\n        <Tag\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_groupparentcellrenderer.tsx_109\"\n          css={{ marginLeft: 0, marginRight: 0 }}\n        >\n          {groupParentInfo.runUuids.length}\n        </Tag>\n        <Tooltip\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_groupparentcellrenderer.tsx_136\"\n          content={\n            <FormattedMessage\n              defaultMessage=\"Open runs in this group in the new tab\"\n              description=\"Experiment page > grouped runs table > tooltip for a button that opens runs in a group in a new tab\"\n            />\n          }\n        >\n          <Link\n            to={urlToRunUuidsFilter}\n            target=\"_blank\"\n            css={{\n              marginLeft: -theme.spacing.xs,\n              display: 'none',\n              '.ag-row-hover &': {\n                display: 'inline-flex',\n              },\n            }}\n          >\n            <Button\n              type=\"link\"\n              componentId=\"mlflow.experiment_page.grouped_runs.open_runs_in_new_tab\"\n              size=\"small\"\n              icon={<NewWindowIcon css={{ svg: { width: 12, height: 12 } }} />}\n            />\n          </Link>\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n","import type { ICellRendererParams } from '@ag-grid-community/core';\nimport { Button, MinusSquareIcon, PlusSquareIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport type { Theme } from '@emotion/react';\nimport React, { useMemo } from 'react';\nimport { Link } from '../../../../../../common/utils/RoutingUtils';\nimport Routes from '../../../../../routes';\nimport type { RunRowType } from '../../../utils/experimentPage.row-types';\nimport { GroupParentCellRenderer } from './GroupParentCellRenderer';\nimport invariant from 'invariant';\nimport { RunColorPill } from '../../RunColorPill';\nimport { shouldEnableToggleIndividualRunsInGroups } from '../../../../../../common/utils/FeatureUtils';\nimport { useGetExperimentRunColor, useSaveExperimentRunColor } from '../../../hooks/useExperimentRunColor';\nimport { useExperimentViewRunsTableHeaderContext } from '../ExperimentViewRunsTableHeaderContext';\n\nexport interface RunNameCellRendererProps extends ICellRendererParams {\n  data: RunRowType;\n  isComparingRuns?: boolean;\n  onExpand: (runUuid: string, childrenIds?: string[]) => void;\n}\n\nexport const RunNameCellRenderer = React.memo((props: RunNameCellRendererProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  const saveRunColor = useSaveExperimentRunColor();\n  const getRunColor = useGetExperimentRunColor();\n  const { useGroupedValuesInCharts } = useExperimentViewRunsTableHeaderContext();\n\n  // If we're rendering a group row, use relevant component\n  if (props.data.groupParentInfo) {\n    return <GroupParentCellRenderer {...props} />;\n  }\n  const { onExpand, data } = props;\n  const { runName, experimentId, runUuid, runDateAndNestInfo, hidden } = data;\n\n  // If we are not rendering a group, assert existence of necessary fields\n  invariant(experimentId, 'experimentId should be set for run rows');\n  invariant(runUuid, 'runUuid should be set for run rows');\n  invariant(runDateAndNestInfo, 'runDateAndNestInfo should be set for run rows');\n\n  const { hasExpander, expanderOpen, childrenIds, level, belongsToGroup } = runDateAndNestInfo;\n\n  const renderingAsParent = !isNaN(level) && hasExpander;\n  const hideRunColorControl = (() => {\n    if (shouldEnableToggleIndividualRunsInGroups()) {\n      return belongsToGroup && useGroupedValuesInCharts;\n    }\n    return belongsToGroup;\n  })();\n\n  return (\n    <div css={styles.cellWrapper}>\n      <div css={styles.expanderWrapper}>\n        <div\n          css={styles.nestLevel(theme)}\n          style={{\n            width: (level + 1) * theme.spacing.lg,\n          }}\n        >\n          {renderingAsParent && (\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_runnamecellrenderer.tsx_46\"\n              css={styles.expanderButton}\n              size=\"small\"\n              onClick={() => {\n                onExpand(runUuid, childrenIds);\n              }}\n              key={'Expander-' + runUuid}\n              type=\"link\"\n              icon={expanderOpen ? <MinusSquareIcon /> : <PlusSquareIcon />}\n            />\n          )}\n        </div>\n      </div>\n      <div css={styles.runLink}>\n        {hideRunColorControl ? (\n          // Render empty color pills for grouped runs\n          <div css={{ width: 12, height: 12, flexShrink: 0 }} />\n        ) : (\n          <RunColorPill\n            color={getRunColor(runUuid)}\n            hidden={props.isComparingRuns && hidden}\n            data-testid=\"experiment-view-table-run-color\"\n            onChangeColor={(colorValue) => saveRunColor({ runUuid, colorValue })}\n          />\n        )}\n        <Link to={Routes.getRunPageRoute(experimentId, runUuid)} css={styles.runLink} tabIndex={0}>\n          <span css={styles.runName}>{runName}</span>\n        </Link>\n      </div>\n    </div>\n  );\n});\n\nconst styles = {\n  link: (theme: Theme) => ({\n    display: 'inline-block',\n    minWidth: theme.typography.fontSizeBase,\n    minHeight: theme.typography.fontSizeBase,\n  }),\n  cellWrapper: {\n    display: 'flex',\n  },\n  expanderButton: {\n    svg: {\n      width: 12,\n      height: 12,\n    },\n  },\n  runLink: {\n    overflow: 'hidden',\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n    '&:focus-visible': {\n      textDecoration: 'underline',\n    },\n  },\n  runName: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n  expanderWrapper: {\n    display: 'none',\n    '.ag-grid-expanders-visible &': {\n      display: 'block',\n    },\n  },\n  nestLevel: (theme: Theme) => ({\n    display: 'flex',\n    justifyContent: 'flex-end',\n    height: theme.spacing.lg,\n  }),\n};\n","import type { ICellRendererParams } from '@ag-grid-community/core';\nimport { Button } from '@databricks/design-system';\nimport { uniqueId } from 'lodash';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport const createLoadMoreRow = () => ({\n  runUuid: '',\n  rowUuid: uniqueId('load_more'),\n  isLoadMoreRow: true,\n});\n\n/**\n * A cell renderer for special type of full width rows housing \"Load more\"\n * button displayed at the bottom of the grid\n */\nexport const LoadMoreRowRenderer = React.memo(\n  ({ loadMoreRunsFunc }: ICellRendererParams & { loadMoreRunsFunc: () => void }) => (\n    <div css={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 32 }}>\n      <Button\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_loadmorerowrenderer.tsx_20\"\n        type=\"primary\"\n        onClick={loadMoreRunsFunc}\n        size=\"small\"\n      >\n        <FormattedMessage defaultMessage=\"Load more\" description=\"Load more button text to load more experiment runs\" />\n      </Button>\n    </div>\n  ),\n);\n","import { throttle } from 'lodash';\nimport { Button, Popover, TableIcon, Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport React, { useRef, useEffect, useState, useMemo } from 'react';\nimport { MLFLOW_RUN_DATASET_CONTEXT_TAG } from '../../../../../constants';\nimport type { RunDatasetWithTags } from '../../../../../types';\nimport type { RunRowType } from '../../../utils/experimentPage.row-types';\nimport { EXPERIMENT_RUNS_TABLE_ROW_HEIGHT } from '../../../utils/experimentPage.common-utils';\nimport type { SuppressKeyboardEventParams } from '@ag-grid-community/core';\nconst MAX_DATASETS_VISIBLE = 3;\n\n/**\n * Local component, used to render a single dataset within a cell\n * or a context menu\n */\nconst SingleDataset = ({\n  datasetWithTags,\n  onDatasetSelected,\n  appendComma = false,\n  inPopover = false,\n}: {\n  datasetWithTags: RunDatasetWithTags;\n  onDatasetSelected: () => void;\n  appendComma?: boolean;\n  inPopover?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { dataset, tags } = datasetWithTags;\n  if (!dataset) {\n    return null;\n  }\n  const contextTag = tags?.find(({ key }) => key === MLFLOW_RUN_DATASET_CONTEXT_TAG);\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexShrink: 0,\n        alignItems: 'center',\n        overflow: 'hidden',\n        marginRight: theme.spacing.xs,\n      }}\n    >\n      <TableIcon css={{ color: theme.colors.textSecondary, marginRight: theme.spacing.xs }} />{' '}\n      <span\n        css={{ minWidth: 32, marginRight: theme.spacing.xs, flexShrink: 0 }}\n        title={`${dataset.name} (${dataset.digest})`}\n      >\n        {inPopover ? (\n          <Popover.Close asChild>\n            <Button\n              componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_datasetscellrenderer.tsx_49\"\n              type=\"link\"\n              onClick={onDatasetSelected}\n              tabIndex={0}\n            >\n              <span css={{ fontSize: 12 }}>\n                {dataset.name} ({dataset.digest})\n              </span>\n            </Button>\n          </Popover.Close>\n        ) : (\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_datasetscellrenderer.tsx_56\"\n            type=\"link\"\n            onClick={onDatasetSelected}\n            data-testid=\"open-dataset-drawer\"\n            tabIndex={0}\n          >\n            <span>\n              {dataset.name} ({dataset.digest})\n            </span>\n          </Button>\n        )}\n      </span>\n      {contextTag && (\n        <Tag\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_datasetscellrenderer.tsx_75\"\n          css={{ textTransform: 'capitalize', marginRight: theme.spacing.xs }}\n        >\n          <span css={{ fontSize: 12 }}>{contextTag.value}</span>\n        </Tag>\n      )}\n      {appendComma && <>,</>}\n    </div>\n  );\n};\n\nexport interface DatasetsCellRendererProps {\n  value: RunDatasetWithTags[];\n  data: RunRowType;\n  onDatasetSelected: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n  expandRows: boolean;\n}\n\nexport const DatasetsCellRenderer = React.memo(\n  ({ value: datasets, data, onDatasetSelected, expandRows }: DatasetsCellRendererProps) => {\n    const containerElement = useRef<HTMLDivElement>(null);\n    const [datasetsVisible, setDatasetsVisible] = useState(0);\n    const [ellipsisVisible, setEllipsisVisible] = useState(false);\n    const clampedDatasets = useMemo(() => (datasets || []).slice(0, MAX_DATASETS_VISIBLE), [datasets]);\n    const { theme } = useDesignSystemTheme();\n\n    const datasetsLength = (datasets || []).length;\n\n    useEffect(() => {\n      if (!containerElement.current) {\n        return () => {};\n      }\n      const callback: ResizeObserverCallback = throttle(([entry]) => {\n        if (expandRows) {\n          const availableHeight = entry.contentRect.height;\n          let elementsFit = 0;\n          let stackedHeight = 0;\n          for (let i = 0; i < entry.target.children.length; i++) {\n            const item = entry.target.children.item(i) as Element;\n            if (stackedHeight + item.clientHeight > availableHeight) {\n              break;\n            }\n            stackedHeight += item.clientHeight;\n            elementsFit++;\n          }\n          setDatasetsVisible(elementsFit);\n          setEllipsisVisible(elementsFit < datasetsLength);\n        } else {\n          const availableWidth = entry.contentRect.width;\n          if (availableWidth === 0 && datasetsLength) {\n            setDatasetsVisible(0);\n            setEllipsisVisible(true);\n            return;\n          }\n          let elementsFit = 0;\n          let stackedWidth = 0;\n          for (let i = 0; i < entry.target.children.length; i++) {\n            const item = entry.target.children.item(i) as Element;\n            if (stackedWidth + item.clientWidth >= availableWidth) {\n              break;\n            }\n            stackedWidth += item.clientWidth;\n            elementsFit++;\n          }\n          const partiallyVisibleDatasets = Math.min(datasetsLength, elementsFit + 1);\n          setDatasetsVisible(partiallyVisibleDatasets);\n          setEllipsisVisible(elementsFit < datasetsLength);\n        }\n      }, 100);\n\n      const resizeObserver = new ResizeObserver(callback);\n\n      resizeObserver.observe(containerElement.current);\n      return () => resizeObserver.disconnect();\n    }, [expandRows, datasetsLength]);\n\n    const moreItemsToShow = datasetsLength - datasetsVisible;\n    if (!datasets || datasetsLength < 1) {\n      return <>-</>;\n    }\n\n    const datasetsToShow = expandRows ? clampedDatasets : datasets;\n\n    return (\n      <div css={{ display: 'flex' }}>\n        <div\n          css={{\n            overflow: 'hidden',\n            display: 'flex',\n            flexDirection: expandRows ? 'column' : 'row',\n          }}\n          ref={containerElement}\n        >\n          {datasetsToShow.map((datasetWithTags, index) => (\n            <SingleDataset\n              appendComma={expandRows ? false : index < datasetsToShow.length - 1}\n              key={`${datasetWithTags.dataset.name}-${datasetWithTags.dataset.digest}`}\n              datasetWithTags={datasetWithTags}\n              onDatasetSelected={() => onDatasetSelected?.(datasetWithTags, data)}\n            />\n          ))}\n        </div>\n        {(moreItemsToShow > 0 || ellipsisVisible) && (\n          <div css={{ display: 'flex', alignItems: 'flex-end' }}>\n            {!expandRows && ellipsisVisible && (\n              <span css={{ paddingLeft: 0, paddingRight: theme.spacing.xs }}>&hellip;</span>\n            )}\n            {moreItemsToShow > 0 && (\n              <Popover.Root\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_datasetscellrenderer.tsx_184\"\n                modal={false}\n              >\n                <Popover.Trigger asChild>\n                  <Button\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_cells_datasetscellrenderer.tsx_172\"\n                    size=\"small\"\n                    style={{ borderRadius: '8px', width: '40px' }}\n                    tabIndex={0}\n                  >\n                    <Typography.Text color=\"secondary\">+{moreItemsToShow}</Typography.Text>\n                  </Button>\n                </Popover.Trigger>\n                <Popover.Content align=\"start\" css={{ maxHeight: '400px', overflow: 'auto' }}>\n                  {datasets.slice(datasetsLength - moreItemsToShow).map((datasetWithTags) => (\n                    <div\n                      css={{\n                        height: theme.general.heightSm,\n                        display: 'flex',\n                        alignItems: 'center',\n                      }}\n                      key={`${datasetWithTags.dataset.name}-${datasetWithTags.dataset.digest}`}\n                    >\n                      <SingleDataset\n                        datasetWithTags={datasetWithTags}\n                        onDatasetSelected={() => onDatasetSelected?.(datasetWithTags, data)}\n                        inPopover\n                      />\n                    </div>\n                  ))}\n                </Popover.Content>\n              </Popover.Root>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n\nexport const getDatasetsCellHeight = (datasetColumnShown: boolean, row: { data: RunRowType }) => {\n  if (datasetColumnShown) {\n    const { data } = row;\n\n    // Display at least 1, but at most 5 text lines in the cell.\n    const datasetsCount = Math.min(data.datasets?.length || 1, MAX_DATASETS_VISIBLE);\n    return EXPERIMENT_RUNS_TABLE_ROW_HEIGHT * datasetsCount;\n  }\n  return EXPERIMENT_RUNS_TABLE_ROW_HEIGHT;\n};\n\n/**\n * A utility function that enables custom keyboard navigation for the datasets cell renderer by providing\n * conditional suppression of default events.\n *\n * This cell needs specific handling since it's the only one that displays multiple buttons simultaneously.\n */\nexport const DatasetsCellRendererSuppressKeyboardEvents = ({ event }: SuppressKeyboardEventParams) => {\n  return (\n    event.key === 'Tab' &&\n    event.target instanceof HTMLElement &&\n    // Let's suppress the default action if the focus is on cell or on the dataset button, allowing\n    // tab to move to the next focusable element.\n    (event.target.classList.contains('ag-cell') || event.target instanceof HTMLButtonElement)\n  );\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { RunRowType } from '../../../utils/experimentPage.row-types';\n\nexport const AggregateMetricValueCell = ({\n  value,\n  data,\n  valueFormatted,\n}: {\n  value: string;\n  valueFormatted: null | string;\n  data: RunRowType;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  if (data.groupParentInfo?.aggregateFunction) {\n    return (\n      <Typography.Text>\n        {valueFormatted ?? value}{' '}\n        <span css={{ color: theme.colors.textSecondary }}>({data.groupParentInfo.aggregateFunction})</span>\n      </Typography.Text>\n    );\n  }\n  return value;\n};\n","import type {\n  CellClassParams,\n  ColDef,\n  ColGroupDef,\n  ColumnApi,\n  IsFullWidthRowParams,\n  SuppressKeyboardEventParams,\n} from '@ag-grid-community/core';\nimport { Spinner, SpinnerProps, useDesignSystemTheme } from '@databricks/design-system';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport { isEqual } from 'lodash';\nimport Utils from '../../../../common/utils/Utils';\nimport { ATTRIBUTE_COLUMN_LABELS, ATTRIBUTE_COLUMN_SORT_KEY, COLUMN_TYPES } from '../../../constants';\nimport { ColumnHeaderCell } from '../components/runs/cells/ColumnHeaderCell';\nimport { DateCellRenderer } from '../components/runs/cells/DateCellRenderer';\nimport { RunDescriptionCellRenderer } from '../components/runs/cells/RunDescriptionCellRenderer';\nimport { ExperimentNameCellRenderer } from '../components/runs/cells/ExperimentNameCellRenderer';\nimport { ModelsCellRenderer } from '../components/runs/cells/ModelsCellRenderer';\nimport { ModelsHeaderCellRenderer } from '../components/runs/cells/ModelsHeaderCellRenderer';\nimport { SourceCellRenderer } from '../components/runs/cells/SourceCellRenderer';\nimport { VersionCellRenderer } from '../components/runs/cells/VersionCellRenderer';\nimport {\n  EXPERIMENT_FIELD_PREFIX_METRIC,\n  EXPERIMENT_FIELD_PREFIX_PARAM,\n  EXPERIMENT_FIELD_PREFIX_TAG,\n  getQualifiedEntityName,\n  makeCanonicalSortKey,\n} from './experimentPage.common-utils';\nimport { RunRowType } from './experimentPage.row-types';\nimport {\n  RowActionsCellRenderer,\n  RowActionsCellRendererSuppressKeyboardEvents,\n} from '../components/runs/cells/RowActionsCellRenderer';\nimport { RowActionsHeaderCellRenderer } from '../components/runs/cells/RowActionsHeaderCellRenderer';\nimport { RunNameCellRenderer } from '../components/runs/cells/RunNameCellRenderer';\nimport { LoadMoreRowRenderer } from '../components/runs/cells/LoadMoreRowRenderer';\nimport {\n  DatasetsCellRenderer,\n  DatasetsCellRendererSuppressKeyboardEvents,\n} from '../components/runs/cells/DatasetsCellRenderer';\nimport { RunDatasetWithTags } from '../../../types';\nimport { AggregateMetricValueCell } from '../components/runs/cells/AggregateMetricValueCell';\nimport { type RUNS_VISIBILITY_MODE } from '../models/ExperimentPageUIState';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { customMetricBehaviorDefs } from './customMetricBehaviorUtils';\n\nconst cellClassIsOrderedBy = ({ colDef, context }: CellClassParams) => {\n  return context.orderByKey === colDef.headerComponentParams?.canonicalSortKey;\n};\n\n/**\n * Width for \"run name\" column.\n */\nconst RUN_NAME_COLUMN_WIDTH = 190;\n\n/**\n * Width for \"run actions\" column.\n */\nconst BASE_RUN_ACTIONS_COLUMN_WIDTH = 105;\nconst VISIBILITY_TOGGLE_WIDTH = 32;\n\n/**\n * Calculates width for \"actions\" column. \"compactMode\" should be set to true\n * for compare runs mode when checkboxes are hidden.\n */\nconst getActionsColumnWidth = (isComparingRuns?: boolean) => {\n  return isComparingRuns ? BASE_RUN_ACTIONS_COLUMN_WIDTH : BASE_RUN_ACTIONS_COLUMN_WIDTH - VISIBILITY_TOGGLE_WIDTH;\n};\n\n/*\n * Functions used to generate grid field names for params, metrics and prefixes\n */\nexport const createParamFieldName = (key: string) => `${EXPERIMENT_FIELD_PREFIX_PARAM}-${key}`;\nconst createMetricFieldName = (key: string) => `${EXPERIMENT_FIELD_PREFIX_METRIC}-${key}`;\nconst createTagFieldName = (key: string) => `${EXPERIMENT_FIELD_PREFIX_TAG}-${key}`;\n\nconst UntrackedSpinner: React.FC<SpinnerProps> = ({ loading, ...props }) => {\n  return Spinner({ loading: false, ...props });\n};\n\n/**\n * A default listener that suppresses default agGrid keyboard events on the row actions cell renderer.\n * If the focus is on a cell, the tab key should be allowed to navigate to the next focusable element instead of a next cell.\n */\nconst defaultKeyboardNavigationSuppressor = ({ event }: SuppressKeyboardEventParams) =>\n  event.key === 'Tab' && event.target instanceof HTMLElement && event.target.classList.contains('ag-cell');\n\n/**\n * Functions returns all framework components to be used by agGrid\n */\nexport const getFrameworkComponents = () => ({\n  agColumnHeader: ColumnHeaderCell,\n\n  // A workaround for https://github.com/ag-grid/ag-grid/issues/7028.\n  // The page will add an interaction hold directly instead of relying on DuBois' Spinner\n  // to do it.\n  loadingOverlayComponent: UntrackedSpinner,\n\n  /**\n   * We're saving cell renderer component references, otherwise\n   * agGrid will unnecessarily flash cells' content (e.g. when changing sort order)\n   */\n  LoadMoreRowRenderer,\n  SourceCellRenderer,\n  ModelsCellRenderer,\n  ModelsHeaderCellRenderer,\n  VersionCellRenderer,\n  DateCellRenderer,\n  ExperimentNameCellRenderer,\n  RunDescriptionCellRenderer,\n  RowActionsCellRenderer,\n  RowActionsHeaderCellRenderer,\n  RunNameCellRenderer,\n  DatasetsCellRenderer,\n  AggregateMetricValueCell,\n});\n\n/**\n * Certain columns are described as run attributes (opposed to metrics, params etc.), however\n * they actually source their data from the run tags. This objects maps tag names to column identifiers.\n */\nconst TAGS_TO_COLUMNS_MAP = {\n  [ATTRIBUTE_COLUMN_SORT_KEY.USER]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'User'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Run Name'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.SOURCE]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Source'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.VERSION]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Version'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.DESCRIPTION]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Description'),\n};\n\n/**\n * Function returns unique row ID to be used in runs table\n */\nexport const getRowId = ({ data }: { data: RunRowType }) => data.rowUuid;\n\n/**\n * Determines if a data row houses \"load more\" button\n */\nexport const getRowIsLoadMore = ({ rowNode }: IsFullWidthRowParams) => rowNode.data.isLoadMoreRow;\n\n/**\n * Parameters used by `useRunsColumnDefinitions()` hook\n */\nexport interface UseRunsColumnDefinitionsParams {\n  selectedColumns: string[];\n  onExpand: (parentUuid: string, childrenIds: string[]) => void;\n  onTogglePin: (runUuid: string) => void;\n  onToggleVisibility:\n    | ((runUuidOrToggle: string) => void)\n    | ((mode: RUNS_VISIBILITY_MODE, runOrGroupUuid: string) => void);\n  compareExperiments: boolean;\n  metricKeyList: string[];\n  paramKeyList: string[];\n  tagKeyList: string[];\n  columnApi?: ColumnApi;\n  isComparingRuns?: boolean;\n  onDatasetSelected?: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n  expandRows?: boolean;\n  allRunsHidden?: boolean;\n  usingCustomVisibility?: boolean;\n  runsHiddenMode?: RUNS_VISIBILITY_MODE;\n}\n\n/**\n * List of all attribute columns that can be shown/hidden by user\n * - when displaying a single experiment (ADJUSTABLE_ATTRIBUTE_COLUMNS_SINGLE_EXPERIMENT)\n * - when comparing experiments (ADJUSTABLE_ATTRIBUTE_COLUMNS)\n */\n\nexport const getAdjustableAttributeColumns = (isComparingExperiments = false) => {\n  const result = [\n    ATTRIBUTE_COLUMN_LABELS.USER,\n    ATTRIBUTE_COLUMN_LABELS.SOURCE,\n    ATTRIBUTE_COLUMN_LABELS.VERSION,\n    ATTRIBUTE_COLUMN_LABELS.MODELS,\n    ATTRIBUTE_COLUMN_LABELS.DATASET,\n    ATTRIBUTE_COLUMN_LABELS.DESCRIPTION,\n  ];\n\n  if (isComparingExperiments) {\n    result.push(ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME);\n  }\n  return result;\n};\n\n/**\n * This internal hook passes through the list of all metric/param/tag keys.\n * The lists are memoized internally so if somehow a particular param/metric/tag key is not present\n * in the new runs set (e.g. due to reverse sorting), the relevant column will be still displayed.\n * This prevents weirdly disappearing columns on exotic run sets.\n */\nconst useCumulativeColumnKeys = ({\n  paramKeyList,\n  metricKeyList,\n  tagKeyList,\n}: Pick<UseRunsColumnDefinitionsParams, 'tagKeyList' | 'metricKeyList' | 'paramKeyList'>) => {\n  const cachedMetricKeys = useRef<Set<string>>(new Set());\n  const cachedParamKeys = useRef<Set<string>>(new Set());\n  const cachedTagKeys = useRef<Set<string>>(new Set());\n\n  const paramKeys = useMemo(() => {\n    paramKeyList.forEach((key) => cachedParamKeys.current.add(key));\n    return Array.from(cachedParamKeys.current);\n  }, [paramKeyList]);\n\n  const metricKeys = useMemo(() => {\n    metricKeyList.forEach((key) => cachedMetricKeys.current.add(key));\n    return Array.from(cachedMetricKeys.current);\n  }, [metricKeyList]);\n\n  const tagKeys = useMemo(() => {\n    tagKeyList.forEach((key) => cachedTagKeys.current.add(key));\n    return Array.from(cachedTagKeys.current);\n  }, [tagKeyList]);\n\n  const cumulativeColumns = useMemo(\n    () => ({\n      paramKeys,\n      metricKeys,\n      tagKeys,\n    }),\n    [metricKeys, paramKeys, tagKeys],\n  );\n\n  return cumulativeColumns;\n};\n\n/**\n * This hook creates a agGrid-compatible column set definition basing on currently\n * used sort-filter model and provided list of metrics, params and tags.\n *\n * Internally, it reacts to changes to `selectedColumns` and hides/shows relevant columns\n * if necessary.\n *\n * @param params see UseRunsColumnDefinitionsParams\n */\nexport const useRunsColumnDefinitions = ({\n  selectedColumns,\n  compareExperiments,\n  onTogglePin,\n  onToggleVisibility,\n  onExpand,\n  paramKeyList,\n  metricKeyList,\n  tagKeyList,\n  columnApi,\n  onDatasetSelected,\n  isComparingRuns,\n  expandRows,\n  runsHiddenMode,\n}: UseRunsColumnDefinitionsParams) => {\n  const { theme } = useDesignSystemTheme();\n\n  const cumulativeColumns = useCumulativeColumnKeys({\n    metricKeyList,\n    tagKeyList,\n    paramKeyList,\n  });\n\n  // Generate columns differently on super small viewport sizes\n  const usingCompactViewport = useMediaQuery(`(max-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  const columnSet = useMemo(() => {\n    const columns: (ColDef | ColGroupDef)[] = [];\n\n    // Checkbox selection column\n    columns.push({\n      valueGetter: ({ data: { pinned, hidden } }) => ({ pinned, hidden }),\n      checkboxSelection: true,\n      headerComponent: 'RowActionsHeaderCellRenderer',\n      headerComponentParams: { onToggleVisibility },\n      headerCheckboxSelection: true,\n      headerName: '',\n      cellClass: 'is-checkbox-cell',\n      cellRenderer: 'RowActionsCellRenderer',\n      cellRendererParams: { onTogglePin, onToggleVisibility },\n      pinned: usingCompactViewport ? undefined : 'left',\n      minWidth: getActionsColumnWidth(isComparingRuns),\n      width: getActionsColumnWidth(isComparingRuns),\n      maxWidth: getActionsColumnWidth(isComparingRuns),\n      resizable: false,\n      suppressKeyboardEvent: RowActionsCellRendererSuppressKeyboardEvents,\n    });\n\n    const isRunColumnDynamicSized = isComparingRuns;\n\n    // Run name column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.RUN_NAME,\n      colId: isRunColumnDynamicSized ? undefined : TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME],\n      headerTooltip: ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME,\n      pinned: usingCompactViewport ? undefined : 'left',\n      sortable: true,\n      cellRenderer: 'RunNameCellRenderer',\n      cellRendererParams: { onExpand, isComparingRuns },\n      equals: (runA: RunRowType, runB: RunRowType) =>\n        runA?.rowUuid === runB?.rowUuid && runA?.groupParentInfo?.expanderOpen === runB?.groupParentInfo?.expanderOpen,\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n      initialWidth: isRunColumnDynamicSized ? undefined : RUN_NAME_COLUMN_WIDTH,\n      flex: isRunColumnDynamicSized ? 1 : undefined,\n      resizable: !isComparingRuns,\n      suppressKeyboardEvent: defaultKeyboardNavigationSuppressor,\n    });\n\n    // If we are only comparing runs, that's it - we cut off the list after the run name column.\n    // This behavior might be revisited and changed later.\n    if (isComparingRuns) {\n      return columns;\n    }\n\n    // Date and expander selection column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.DATE,\n      headerTooltip: ATTRIBUTE_COLUMN_SORT_KEY.DATE,\n      pinned: usingCompactViewport ? undefined : 'left',\n      sortable: true,\n      field: 'runDateAndNestInfo',\n      cellRenderer: 'DateCellRenderer',\n      cellRendererParams: { onExpand },\n      equals: (dateInfo1, dateInfo2) => isEqual(dateInfo1, dateInfo2),\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.DATE,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n      initialWidth: 150,\n    });\n\n    // Datasets column - guarded by a feature flag\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.DATASET,\n      colId: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.DATASET),\n      headerTooltip: ATTRIBUTE_COLUMN_LABELS.DATASET,\n      sortable: false,\n      field: 'datasets',\n      cellRenderer: 'DatasetsCellRenderer',\n      cellRendererParams: { onDatasetSelected, expandRows },\n      cellClass: 'is-multiline-cell',\n      initialWidth: 300,\n      suppressKeyboardEvent: DatasetsCellRendererSuppressKeyboardEvents,\n    });\n\n    // Duration column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.DURATION,\n      field: 'duration',\n      initialWidth: 80,\n    });\n\n    // Experiment name column\n    if (compareExperiments) {\n      columns.push({\n        headerName: ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME,\n        colId: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME),\n        field: 'experimentName',\n        cellRenderer: 'ExperimentNameCellRenderer',\n        equals: (experimentName1, experimentName2) => isEqual(experimentName1, experimentName2),\n        initialWidth: 140,\n        initialHide: true,\n        suppressKeyboardEvent: defaultKeyboardNavigationSuppressor,\n      });\n    }\n\n    // User column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.USER,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.USER],\n      headerTooltip: ATTRIBUTE_COLUMN_SORT_KEY.USER,\n      field: 'user',\n      sortable: true,\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.USER,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n      initialHide: true,\n    });\n\n    // Source column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.SOURCE,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.SOURCE],\n      field: 'tags',\n      cellRenderer: 'SourceCellRenderer',\n      equals: (tags1 = {}, tags2 = {}) => Utils.getSourceName(tags1) === Utils.getSourceName(tags2),\n      sortable: true,\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.SOURCE,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n      initialHide: true,\n      suppressKeyboardEvent: defaultKeyboardNavigationSuppressor,\n    });\n\n    // Version column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.VERSION,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.VERSION],\n      field: 'version',\n      cellRenderer: 'VersionCellRenderer',\n      equals: (version1 = {}, version2 = {}) => isEqual(version1, version2),\n      sortable: true,\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.VERSION,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n      initialHide: true,\n    });\n\n    // Models column\n    columns.push({\n      headerComponent: 'ModelsHeaderCellRenderer',\n      colId: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.MODELS),\n      field: 'models',\n      cellRenderer: 'ModelsCellRenderer',\n      initialWidth: 200,\n      equals: (models1 = {}, models2 = {}) => isEqual(models1, models2),\n      initialHide: true,\n      suppressKeyboardEvent: defaultKeyboardNavigationSuppressor,\n    });\n\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.DESCRIPTION,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.DESCRIPTION],\n      field: 'tags',\n      cellRenderer: 'RunDescriptionCellRenderer',\n      initialWidth: 300,\n      initialHide: true,\n      sortable: true,\n      headerComponentParams: {\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.DESCRIPTION,\n      },\n      cellClassRules: {\n        'is-ordered-by': cellClassIsOrderedBy,\n      },\n    });\n\n    const { metricKeys, paramKeys, tagKeys } = cumulativeColumns;\n\n    // Metrics columns\n    if (metricKeys.length) {\n      columns.push({\n        headerName: 'Metrics',\n        groupId: COLUMN_TYPES.METRICS,\n        children: metricKeys.map((metricKey) => {\n          const canonicalSortKey = makeCanonicalSortKey(COLUMN_TYPES.METRICS, metricKey);\n          const customMetricColumnDef = customMetricBehaviorDefs[metricKey];\n          const displayName = customMetricColumnDef?.displayName ?? metricKey;\n          const fieldName = createMetricFieldName(metricKey);\n          const tooltip = getQualifiedEntityName(COLUMN_TYPES.METRICS, metricKey);\n          return {\n            headerName: displayName,\n            colId: canonicalSortKey,\n            headerTooltip: tooltip,\n            field: fieldName,\n            tooltipValueGetter: (params) => {\n              return params.data?.[fieldName];\n            },\n            initialWidth: customMetricColumnDef?.initialColumnWidth ?? 100,\n            initialHide: true,\n            sortable: true,\n            headerComponentParams: {\n              canonicalSortKey,\n            },\n            valueFormatter: customMetricColumnDef?.valueFormatter,\n            cellRendererSelector: ({ data: { groupParentInfo } }) =>\n              groupParentInfo ? { component: 'AggregateMetricValueCell' } : undefined,\n            cellClassRules: {\n              'is-previewable-cell': () => true,\n              'is-ordered-by': cellClassIsOrderedBy,\n            },\n          };\n        }),\n      });\n    }\n\n    // Parameter columns\n    if (paramKeys.length) {\n      columns.push({\n        headerName: 'Parameters',\n        groupId: COLUMN_TYPES.PARAMS,\n        children: paramKeys.map((paramKey) => {\n          const canonicalSortKey = makeCanonicalSortKey(COLUMN_TYPES.PARAMS, paramKey);\n          return {\n            colId: canonicalSortKey,\n            headerName: paramKey,\n            headerTooltip: getQualifiedEntityName(COLUMN_TYPES.PARAMS, paramKey),\n            field: createParamFieldName(paramKey),\n            tooltipField: createParamFieldName(paramKey),\n            initialHide: true,\n            initialWidth: 100,\n            sortable: true,\n            headerComponentParams: {\n              canonicalSortKey,\n            },\n            cellClassRules: {\n              'is-previewable-cell': () => true,\n              'is-ordered-by': cellClassIsOrderedBy,\n            },\n          };\n        }),\n      });\n    }\n\n    // Tags columns\n    if (tagKeys.length) {\n      columns.push({\n        headerName: 'Tags',\n        colId: COLUMN_TYPES.TAGS,\n        children: tagKeys.map((tagKey) => {\n          const canonicalSortKey = makeCanonicalSortKey(COLUMN_TYPES.TAGS, tagKey);\n          return {\n            colId: canonicalSortKey,\n            headerName: tagKey,\n            initialHide: true,\n            initialWidth: 100,\n            headerTooltip: getQualifiedEntityName(COLUMN_TYPES.TAGS, tagKey),\n            field: createTagFieldName(tagKey),\n            tooltipField: createTagFieldName(tagKey),\n          };\n        }),\n      });\n    }\n\n    return columns;\n  }, [\n    onTogglePin,\n    onToggleVisibility,\n    onExpand,\n    compareExperiments,\n    cumulativeColumns,\n    isComparingRuns,\n    onDatasetSelected,\n    expandRows,\n    usingCompactViewport,\n  ]);\n\n  const canonicalSortKeys = useMemo(\n    () => [\n      ...getAdjustableAttributeColumns(true).map((key) => makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, key)),\n      ...cumulativeColumns.paramKeys.map((key) => makeCanonicalSortKey(COLUMN_TYPES.PARAMS, key)),\n      ...cumulativeColumns.metricKeys.map((key) => makeCanonicalSortKey(COLUMN_TYPES.METRICS, key)),\n      ...cumulativeColumns.tagKeys.map((key) => makeCanonicalSortKey(COLUMN_TYPES.TAGS, key)),\n    ],\n    [cumulativeColumns],\n  );\n\n  useEffect(() => {\n    if (!columnApi || isComparingRuns) {\n      return;\n    }\n    for (const canonicalKey of canonicalSortKeys) {\n      const visible = selectedColumns.includes(canonicalKey);\n      columnApi.setColumnVisible(canonicalKey, visible);\n    }\n  }, [selectedColumns, columnApi, canonicalSortKeys, isComparingRuns]);\n\n  return columnSet;\n};\n\nexport const EXPERIMENTS_DEFAULT_COLUMN_SETUP = {\n  initialWidth: 100,\n  autoSizePadding: 0,\n  headerComponentParams: { menuIcon: 'fa-bars' },\n  resizable: true,\n  filter: true,\n  suppressMenu: true,\n  suppressMovable: true,\n};\n","import { BeakerIcon, Button, Empty, FilterIcon } from '@databricks/design-system';\nimport type { Theme } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\nimport { LoggingRunsDocUrl } from '../../../../../common/constants';\n\n/**\n * This component displays information about no results being displayed in runs tample,\n * either due to no runs recorded in an experiment at all or due to currently used filters.\n */\nexport const ExperimentViewRunsEmptyTable = ({\n  isFiltered,\n  onClearFilters,\n}: {\n  onClearFilters: () => void;\n  isFiltered: boolean;\n}) => {\n  const getLearnMoreLinkUrl = () => LoggingRunsDocUrl;\n\n  return (\n    <div css={styles.noResultsWrapper}>\n      <div css={styles.noResults}>\n        {isFiltered ? (\n          <Empty\n            button={\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunsemptytable.tsx_35\"\n                type=\"primary\"\n                onClick={onClearFilters}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Clear filters\"\n                  description=\"Label for a button that clears all filters, visible on a experiment runs page next to a empty state when all runs have been filtered out\"\n                />\n              </Button>\n            }\n            description={\n              <FormattedMessage\n                defaultMessage=\"All runs in this experiment have been filtered. Change or clear filters to view runs.\"\n                description=\"Empty state description text for experiment runs page when all runs have been filtered out\"\n              />\n            }\n            title={\n              <FormattedMessage\n                defaultMessage=\"All runs are filtered\"\n                description=\"Empty state title text for experiment runs page when all runs have been filtered out\"\n              />\n            }\n            image={<FilterIcon />}\n          />\n        ) : (\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No runs have been logged yet. <link>Learn more</link> about how to create ML model training runs in this experiment.\"\n                description=\"Empty state description text for experiment runs page when no runs are logged in the experiment\"\n                values={{\n                  link: (chunks: any) => (\n                    <a target=\"_blank\" href={getLearnMoreLinkUrl()} rel=\"noreferrer\">\n                      {chunks}\n                    </a>\n                  ),\n                }}\n              />\n            }\n            title={\n              <FormattedMessage\n                defaultMessage=\"No runs logged\"\n                description=\"Empty state title text for experiment runs page when no runs are logged in the experiment\"\n              />\n            }\n            image={<BeakerIcon />}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n  noResults: {\n    maxWidth: 360,\n  },\n  noResultsWrapper: (theme: Theme) => ({\n    marginTop: theme.spacing.lg,\n    inset: 0,\n    backgroundColor: theme.colors.backgroundPrimary,\n    position: 'absolute' as const,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  }),\n};\n","import { Button, PlusCircleIcon } from '@databricks/design-system';\nimport type { Theme } from '@emotion/react';\nimport { useCallback, useEffect, useRef } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * Width of the CTA column\n */\nconst COLUMN_CTA_WIDTH = 180;\n\n/**\n * CSS classes used internally\n */\nconst CLASS_OUT_OF_VIEWPORT = 'is-out-of-viewport';\nconst CLASS_IS_HIDDEN = 'is-hidden';\nconst CLASS_IS_MINIMIZED = 'is-minimized';\n\n/**\n * List all necessary agGrid sub-element classes\n */\nconst AG_GRID_CLS = {\n  ROOT: '.ag-root',\n  LEFT_COLS_CONTAINER: '.ag-pinned-left-cols-container',\n  FULL_WIDTH_ROW: '.ag-full-width-row',\n  COLS_CONTAINER: '.ag-center-cols-container',\n  HEADER: '.ag-header',\n  BODY_VIEWPORT: '.ag-body-viewport',\n};\n\ninterface ExperimentViewRunsTableAddColumnCTAProps {\n  onClick: () => void;\n  gridContainerElement: HTMLElement | null;\n  isInitialized: boolean;\n  visible?: boolean;\n  moreRunsAvailable?: boolean;\n  moreAvailableRunsTableColumnCount?: number;\n}\n\n/**\n * Component displaying dynamic table column with \"add metrics and parameters\" CTA.\n *\n * Sample usage:\n *\n * const [gridInitialized, setGridInitialized] = useState(false);\n *\n * return (\n *   <div ref={containerElement}>\n *     <AgGrid onGridReady={() => setGridInitialized(true)} {...} />\n *     <ExperimentViewRunsTableAddColumnCTA\n *       gridContainerElement={containerElement.current}\n *       isInitialized={gridInitialized}\n *       onAddColumnClicked={onAddColumnClicked}\n *       visible={!isLoading}\n *       moreAvailableRunsTableColumnCount={3}\n *     />\n *   </div>\n * );\n */\nexport const ExperimentViewRunsTableAddColumnCTA = ({\n  onClick,\n  gridContainerElement,\n  isInitialized,\n  visible,\n  moreRunsAvailable,\n  moreAvailableRunsTableColumnCount = 0,\n}: ExperimentViewRunsTableAddColumnCTAProps) => {\n  const ctaRef = useRef<HTMLDivElement>(null);\n\n  const savedContainerRef = useRef<HTMLElement>();\n  const immediateMoreRunsAvailable = useRef<boolean>(Boolean(moreRunsAvailable));\n\n  // Save immediate value of \"moreRunsAvailable\" so the fresh version\n  // will be accessible within the resize observer\n  useEffect(() => {\n    immediateMoreRunsAvailable.current = Boolean(moreRunsAvailable);\n  }, [moreRunsAvailable]);\n\n  const initialize = useCallback((containerElement: HTMLElement) => {\n    if (!ctaRef.current || !window.ResizeObserver || !containerElement) {\n      return undefined;\n    }\n\n    const targetElement = ctaRef.current;\n\n    /**\n     * On initialization, first gather all the agGrid sub-elements\n     */\n    const rootElement = containerElement.querySelector(AG_GRID_CLS.ROOT);\n    const refLeftElem = containerElement.querySelector(AG_GRID_CLS.LEFT_COLS_CONTAINER);\n    const refCenterElem = containerElement.querySelector(AG_GRID_CLS.COLS_CONTAINER);\n    const refHeaderElem = containerElement.querySelector(AG_GRID_CLS.HEADER);\n    const refBodyViewport = containerElement.querySelector(AG_GRID_CLS.BODY_VIEWPORT);\n\n    /**\n     * Initialize variables used for position calculation\n     */\n    let gridAreaWidth = 0;\n    let leftColContainerWidth = 0;\n    let leftColContainerHeight = 0;\n    let centerColContainerWidth = 0;\n    let colContainerHeight = 0;\n    let headerHeight = 0;\n\n    /**\n     * Execute only if all elements are in place\n     */\n    if (refLeftElem && refCenterElem && refHeaderElem && rootElement && refBodyViewport) {\n      /**\n       * Hook up an resize observer\n       */\n      const resizeObserver = new ResizeObserver((entries) => {\n        /**\n         * For every changed element, gather the exact dimensions\n         */\n        for (const entry of entries) {\n          if (entry.target === rootElement) {\n            gridAreaWidth = entry.contentRect.width;\n          }\n          if (entry.target === refLeftElem) {\n            leftColContainerWidth = entry.contentRect.width;\n            leftColContainerHeight = entry.contentRect.height;\n          }\n          if (entry.target === refBodyViewport) {\n            colContainerHeight = entry.contentRect.height;\n          }\n          if (entry.target === refHeaderElem) {\n            headerHeight = entry.contentRect.height;\n          }\n          if (entry.target === refCenterElem) {\n            centerColContainerWidth = entry.contentRect.width;\n          }\n        }\n\n        /**\n         * Our \"left\" position will be offset by column container widths\n         */\n        const calculatedLeft = leftColContainerWidth + centerColContainerWidth;\n\n        /**\n         * Our \"top\"  position will be offset by the header height\n         */\n        const calculatedTop = headerHeight;\n\n        /**\n         * If the column is out of viewport (expanding out of the root element),\n         * add proper CSS class to hide it\n         */\n        const isOutOfViewport = calculatedLeft + COLUMN_CTA_WIDTH >= gridAreaWidth;\n        isOutOfViewport\n          ? savedContainerRef.current?.classList.add(CLASS_OUT_OF_VIEWPORT)\n          : savedContainerRef.current?.classList.remove(CLASS_OUT_OF_VIEWPORT);\n\n        // Check if \"load more\" button is visible\n        const loadMoreRowHeight = immediateMoreRunsAvailable.current ? 32 : 0;\n\n        // If the visible row set takes only portion of the table height-wise (leftColContainerHeight < colContainerHeight),\n        // let's contract our CTA a little so \"load more\" button will fit in. If it takes whole area, do not reduce its height.\n        const calculatedHeight =\n          leftColContainerHeight < colContainerHeight ? leftColContainerHeight - loadMoreRowHeight : colContainerHeight;\n\n        /**\n         * If the available height is too low, add a class that indicates\n         * that we should display minimized version\n         */\n        const shouldBeMinimized = calculatedHeight < 100;\n        shouldBeMinimized\n          ? savedContainerRef.current?.classList.add(CLASS_IS_MINIMIZED)\n          : savedContainerRef.current?.classList.remove(CLASS_IS_MINIMIZED);\n\n        /**\n         * Finally, set proper values as CSS transform property. Use 3d transform\n         * to ensure hardware acceleration.\n         */\n        targetElement.style.transform = `translate3d(${calculatedLeft}px, ${calculatedTop}px, 0)`;\n\n        /**\n         * Set target height and add 1px to accomodate the border.\n         */\n        targetElement.style.height = `${calculatedHeight + 1}px`;\n      });\n\n      /**\n       * Setup observer with all the necessary elements.\n       */\n      resizeObserver.observe(refLeftElem);\n      resizeObserver.observe(refCenterElem);\n      resizeObserver.observe(refHeaderElem);\n      resizeObserver.observe(rootElement);\n      resizeObserver.observe(refBodyViewport);\n\n      /**\n       * After cleanup, disconnect the observer.\n       */\n      return () => resizeObserver.disconnect();\n    }\n    return undefined;\n  }, []);\n\n  useEffect(() => {\n    if (isInitialized && gridContainerElement) {\n      savedContainerRef.current = gridContainerElement;\n      initialize(gridContainerElement);\n    }\n  }, [initialize, isInitialized, gridContainerElement]);\n\n  /**\n   * This component works only if ResizeObserver is supported by the browser.\n   * If it's not supported, return nothing.\n   */\n  if (!window.ResizeObserver) {\n    return null;\n  }\n\n  return (\n    <div ref={ctaRef} css={styles.columnContainer} className={visible ? '' : CLASS_IS_HIDDEN}>\n      {visible && (\n        <div css={styles.buttonContainer}>\n          <Button\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_experimentviewrunstableaddcolumncta.tsx_218\"\n            css={styles.button}\n            type=\"link\"\n            onClick={onClick}\n          >\n            <PlusCircleIcon css={styles.buttonIcon} />\n            <div css={styles.caption}>\n              <FormattedMessage\n                defaultMessage=\"Show more columns {count, select, 0 {} other {({count} total)}}\"\n                description=\"Label for a CTA button in experiment runs table which invokes column management dropdown\"\n                values={{\n                  count: moreAvailableRunsTableColumnCount,\n                }}\n              />\n            </div>\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst styles = {\n  columnContainer: (theme: Theme) => ({\n    width: COLUMN_CTA_WIDTH,\n    height: 0,\n    position: 'absolute' as const,\n    border: `1px solid ${theme.colors.borderDecorative}`,\n    borderTop: 0,\n    top: 0,\n    left: 0,\n    willChange: 'transform' as const,\n    transform: 'translate3d(0, 0, 0)',\n    [`.${CLASS_IS_MINIMIZED} &`]: {\n      display: 'flex',\n      alignItems: 'center' as const,\n    },\n    [`&.${CLASS_IS_HIDDEN}, .${CLASS_OUT_OF_VIEWPORT} &`]: {\n      display: 'none',\n    },\n    pointerEvents: 'none' as const,\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  buttonContainer: (theme: Theme) => ({\n    top: 0,\n    paddingLeft: theme.spacing.lg,\n    paddingRight: theme.spacing.lg,\n    width: '100%',\n    [`.${CLASS_IS_MINIMIZED} &`]: {\n      paddingTop: theme.spacing.xs,\n    },\n    pointerEvents: 'all' as const,\n  }),\n  button: { whiteSpace: 'pre-wrap' as const, width: '100%' },\n  buttonIcon: (theme: Theme) => ({ color: theme.colors.textSecondary }),\n  caption: (theme: Theme) => ({\n    color: theme.colors.textSecondary,\n    [`.${CLASS_IS_MINIMIZED} &`]: {\n      display: 'none',\n    },\n  }),\n};\n","import { Spinner, Typography } from '@databricks/design-system';\nimport type { Theme } from '@emotion/react';\nimport { FormattedMessage } from 'react-intl';\n\ninterface ExperimentViewRunsTableStatusBarProps {\n  isLoading: boolean;\n  allRunsCount: number;\n}\n\n// Strongifies the i18n string, used in <FormattedMessage> below\nconst strong = (text: string) => <strong>{text}</strong>;\n\nexport const ExperimentViewRunsTableStatusBar = ({\n  isLoading,\n  allRunsCount,\n}: ExperimentViewRunsTableStatusBarProps) => (\n  <div css={styles.statusBar}>\n    <Typography.Text size=\"sm\" color={isLoading ? 'secondary' : undefined}>\n      <FormattedMessage\n        // eslint-disable-next-line max-len\n        defaultMessage=\"<strong>{length}</strong> matching {length, plural, =0 {runs} =1 {run} other {runs}}\"\n        // eslint-disable-next-line max-len\n        description=\"Message for displaying how many runs match search criteria on experiment page\"\n        values={{\n          strong,\n          length: allRunsCount,\n        }}\n      />\n    </Typography.Text>\n    {isLoading && <Spinner size=\"small\" />}\n  </div>\n);\n\nconst styles = {\n  statusBar: (theme: Theme) => ({\n    height: 28,\n    display: 'flex',\n    gap: 8,\n    marginTop: -1,\n    position: 'relative' as const,\n    alignItems: 'center',\n    borderTop: `1px solid ${theme.colors.border}`,\n  }),\n};\n","import type { GridApi, RowSelectedEvent, SelectionChangedEvent } from '@ag-grid-community/core';\nimport { useCallback, useRef } from 'react';\nimport type { ExperimentPageViewState } from '../models/ExperimentPageViewState';\nimport type { RunRowType } from '../utils/experimentPage.row-types';\nimport { uniqBy } from 'lodash';\n\n/**\n * Helper function that select particular run rows in the ag-grid.\n */\nconst agGridSelectRunRows = (runUuids: string[], isSelected: boolean, gridApi: GridApi) => {\n  gridApi.forEachNode((node) => {\n    if (node.data?.isLoadMoreRow) {\n      return;\n    }\n    const { runInfo, runDateAndNestInfo: childRunDateInfo } = node.data as RunRowType;\n\n    if (!runInfo) {\n      return;\n    }\n\n    const childrenRunUuid = runInfo.runUuid;\n    if (runUuids.includes(childrenRunUuid)) {\n      // If we found children being parents, mark their children\n      // to be selected as well.\n      if (childRunDateInfo?.childrenIds) {\n        runUuids.push(...childRunDateInfo.childrenIds);\n      }\n\n      node.setSelected(isSelected, false, true);\n    }\n  });\n};\n\n/**\n * Helper function that select particular group rows in the ag-grid.\n */\nconst agGridSelectGroupRows = (rowData: RunRowType[], gridApi: GridApi) => {\n  gridApi.forEachNode((node) => {\n    const data: RunRowType = node.data;\n    if (!data.groupParentInfo) {\n      return;\n    }\n\n    // If all runs belonging to the group are selected, select the group\n    if (data.groupParentInfo.runUuids.every((runUuid) => rowData.some((row) => row.runUuid === runUuid))) {\n      node.setSelected(true, false, true);\n    }\n\n    // If none of the runs belonging to the group are selected, deselect the group\n    if (!data.groupParentInfo.runUuids.some((runUuid) => rowData.some((row) => row.runUuid === runUuid))) {\n      node.setSelected(false, false, true);\n    }\n  });\n};\n\n/**\n * Returns handlers for row selection in the experiment runs table.\n * Supports groups, nested runs and regular flat hierarchy.\n */\nexport const useExperimentTableSelectRowHandler = (\n  updateViewState: (newPartialViewState: Partial<ExperimentPageViewState>) => void,\n) => {\n  const onSelectionChange = useCallback(\n    ({ api }: SelectionChangedEvent) => {\n      const selectedUUIDs: string[] = api\n        .getSelectedRows()\n        // Filter out \"load more\" and group rows\n        .filter((row) => row.runInfo)\n        .map(({ runInfo }) => runInfo.runUuid);\n      updateViewState({\n        runsSelected: selectedUUIDs.reduce((aggregate, curr) => ({ ...aggregate, [curr]: true }), {}),\n      });\n    },\n    [updateViewState],\n  );\n\n  const handleRowSelected = useCallback((event: RowSelectedEvent) => {\n    // Let's check if the actual number of selected rows have changed\n    // to avoid empty runs\n    const isSelected = Boolean(event.node.isSelected());\n\n    // We will continue only if the selected row has properly set runDateInfo\n    const { runDateAndNestInfo, runInfo, groupParentInfo } = event.data as RunRowType;\n\n    if (groupParentInfo) {\n      agGridSelectRunRows(groupParentInfo.runUuids, isSelected, event.api);\n    }\n\n    if (!runDateAndNestInfo) {\n      return;\n    }\n    const { isParent, expanderOpen, childrenIds } = runDateAndNestInfo;\n\n    // We will continue only if the selected row is a parent containing\n    // children and is actually expanded\n    if (isParent && expanderOpen && childrenIds) {\n      const childrenIdsToSelect = childrenIds;\n      agGridSelectRunRows(childrenIdsToSelect, isSelected, event.api);\n    } else if (runInfo) {\n      // If we are selecting a run row, we need to select other runs with the same UUID\n      agGridSelectRunRows([runInfo.runUuid], isSelected, event.api);\n\n      // Next, we need to (de)select the group row if all runs belonging to the group are (de)selected\n      const selectedRunRows = uniqBy(\n        event.api.getSelectedRows().filter((row) => Boolean(row.runUuid)),\n        'runUuid',\n      );\n      agGridSelectGroupRows(selectedRunRows, event.api);\n    }\n  }, []);\n\n  return { handleRowSelected, onSelectionChange };\n};\n","import type { CellClickedEvent, ColumnApi, GridApi, GridReadyEvent } from '@ag-grid-community/core';\nimport type { Theme } from '@emotion/react';\nimport { type CSSObject, Interpolation } from '@emotion/react';\nimport cx from 'classnames';\nimport React, { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { MLFlowAgGridLoader } from '../../../../../common/components/ag-grid/AgGridLoader';\nimport Utils from '../../../../../common/utils/Utils';\nimport type {\n  ExperimentEntity,\n  UpdateExperimentViewStateFn,\n  RunDatasetWithTags,\n  ExperimentViewRunsCompareMode,\n} from '../../../../types';\n\nimport { isSearchFacetsFilterUsed } from '../../utils/experimentPage.fetch-utils';\nimport type { ExperimentPageViewState } from '../../models/ExperimentPageViewState';\nimport {\n  EXPERIMENTS_DEFAULT_COLUMN_SETUP,\n  getFrameworkComponents,\n  getRowIsLoadMore,\n  getRowId,\n  useRunsColumnDefinitions,\n  getAdjustableAttributeColumns,\n} from '../../utils/experimentPage.column-utils';\nimport { makeCanonicalSortKey, extractCanonicalSortKey } from '../../utils/experimentPage.common-utils';\nimport { EXPERIMENT_RUNS_TABLE_ROW_HEIGHT } from '../../utils/experimentPage.common-utils';\nimport type { RunRowType } from '../../utils/experimentPage.row-types';\nimport type { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { createLoadMoreRow } from './cells/LoadMoreRowRenderer';\nimport { ExperimentViewRunsEmptyTable } from './ExperimentViewRunsEmptyTable';\nimport { ExperimentViewRunsTableAddColumnCTA } from './ExperimentViewRunsTableAddColumnCTA';\nimport { ExperimentViewRunsTableStatusBar } from './ExperimentViewRunsTableStatusBar';\nimport { shouldUseRunRowsVisibilityMap } from '../../../../../common/utils/FeatureUtils';\nimport { getDatasetsCellHeight } from './cells/DatasetsCellRenderer';\nimport { PreviewSidebar } from '../../../../../common/components/PreviewSidebar';\nimport { ATTRIBUTE_COLUMN_LABELS, COLUMN_TYPES } from '../../../../constants';\nimport { Empty, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport type { ExperimentPageUIState } from '../../models/ExperimentPageUIState';\nimport { useUpdateExperimentViewUIState } from '../../contexts/ExperimentPageUIStateContext';\nimport { useUpdateExperimentPageSearchFacets } from '../../hooks/useExperimentPageSearchFacets';\nimport type { ExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { createExperimentPageSearchFacetsState } from '../../models/ExperimentPageSearchFacetsState';\nimport { useExperimentTableSelectRowHandler } from '../../hooks/useExperimentTableSelectRowHandler';\nimport { useToggleRowVisibilityCallback } from '../../hooks/useToggleRowVisibilityCallback';\nimport { ExperimentViewRunsTableHeaderContextProvider } from './ExperimentViewRunsTableHeaderContext';\nimport { useRunsHighlightTableRow } from '../../../runs-charts/hooks/useRunsHighlightTableRow';\nimport { isEmpty } from 'lodash';\n\nconst ROW_BUFFER = 101; // How many rows to keep rendered, even ones not visible\nconst LARGE_COLUMN_COUNT_THRESHOLD = 1000; // Threshold to determine if we should optimize column rendering\n\nexport interface ExperimentViewRunsTableProps {\n  /**\n   * Actual set of prepared row data to be rendered\n   */\n  rowsData: RunRowType[];\n\n  /**\n   * Helper data set with metric, param and tag keys\n   */\n  runsData: ExperimentRunsSelectorResult;\n\n  experiments: ExperimentEntity[];\n  searchFacetsState: ExperimentPageSearchFacetsState;\n  viewState: ExperimentPageViewState;\n  updateViewState: UpdateExperimentViewStateFn;\n  isLoading: boolean;\n  moreRunsAvailable: boolean;\n  onAddColumnClicked: () => void;\n  loadMoreRunsFunc: () => void;\n  onDatasetSelected?: (dataset: RunDatasetWithTags, run: RunRowType) => void;\n  expandRows: boolean;\n  uiState: ExperimentPageUIState;\n  compareRunsMode: ExperimentViewRunsCompareMode;\n}\n\nexport const ExperimentViewRunsTable = React.memo(\n  // eslint-disable-next-line complexity\n  ({\n    experiments,\n    searchFacetsState,\n    runsData,\n    isLoading,\n    moreRunsAvailable,\n    updateViewState,\n    onAddColumnClicked,\n    rowsData,\n    loadMoreRunsFunc,\n    onDatasetSelected,\n    expandRows,\n    viewState,\n    uiState,\n    compareRunsMode,\n  }: ExperimentViewRunsTableProps) => {\n    const { theme } = useDesignSystemTheme();\n    const updateUIState = useUpdateExperimentViewUIState();\n    const setUrlSearchFacets = useUpdateExperimentPageSearchFacets();\n\n    const { orderByKey, orderByAsc } = searchFacetsState;\n\n    // If using new view state model, use `uiState` instead of `searchFacetsState`\n    const {\n      // Get relevant column and run info from persisted UI state\n      selectedColumns,\n      runsPinned,\n      runsHidden,\n      runListHidden,\n    } = uiState;\n\n    const isComparingRuns = compareRunsMode !== 'TABLE';\n\n    // Determine if we should optimize by filtering columns based on count\n    const shouldOptimize = useMemo(() => {\n      const tagKeysCount = Utils.getVisibleTagKeyList(runsData.tagsList).length;\n      const totalCount = runsData.metricKeyList.length + runsData.paramKeyList.length + tagKeysCount;\n      return totalCount > LARGE_COLUMN_COUNT_THRESHOLD; // Only optimize when there are more than certain number of columns\n    }, [runsData]);\n\n    // Use the original data\n    const { paramKeyList, metricKeyList, tagsList } = runsData;\n\n    // Conditionally filter keys only when there are more than 1000 metrics+params+tags\n    const { filteredMetricKeyList, filteredParamKeyList, filteredTagsList } = useMemo(() => {\n      if (shouldOptimize && !isComparingRuns) {\n        const filteredMetricKeyList: string[] = [];\n        const filteredParamKeyList: string[] = [];\n        const filteredTagsList: any[] = [];\n\n        for (const column of selectedColumns) {\n          if (column.startsWith(COLUMN_TYPES.METRICS)) {\n            filteredMetricKeyList.push(extractCanonicalSortKey(column, COLUMN_TYPES.METRICS));\n          } else if (column.startsWith(COLUMN_TYPES.PARAMS)) {\n            filteredParamKeyList.push(extractCanonicalSortKey(column, COLUMN_TYPES.PARAMS));\n          } else if (column.startsWith(COLUMN_TYPES.TAGS)) {\n            const tagKey = extractCanonicalSortKey(column, COLUMN_TYPES.TAGS);\n            filteredTagsList.push({\n              [tagKey]: {\n                key: tagKey,\n                // value is unused\n                value: null,\n              },\n            });\n          }\n        }\n\n        return {\n          filteredMetricKeyList,\n          filteredParamKeyList,\n          filteredTagsList,\n        };\n      }\n      return {\n        filteredMetricKeyList: metricKeyList,\n        filteredParamKeyList: paramKeyList,\n        filteredTagsList: tagsList,\n      };\n    }, [selectedColumns, shouldOptimize, isComparingRuns, metricKeyList, paramKeyList, tagsList]);\n\n    const [gridApi, setGridApi] = useState<GridApi>();\n    const [columnApi, setColumnApi] = useState<ColumnApi>();\n    const prevSelectRunUuids = useRef<string[]>([]);\n\n    const filteredTagKeys = useMemo(() => Utils.getVisibleTagKeyList(filteredTagsList), [filteredTagsList]);\n\n    const containerElement = useRef<HTMLDivElement>(null);\n    // Flag indicating if there are any rows that can be expanded\n    const expandersVisible = useMemo(() => rowsData.some((row) => row.runDateAndNestInfo?.hasExpander), [rowsData]);\n\n    const toggleRowExpanded = useCallback(\n      (parentId: string) =>\n        updateUIState(({ runsExpanded: currentRunsExpanded, ...state }: ExperimentPageUIState) => ({\n          ...state,\n          runsExpanded: { ...currentRunsExpanded, [parentId]: !currentRunsExpanded[parentId] },\n        })),\n      [updateUIState],\n    );\n\n    const togglePinnedRow = useCallback(\n      (uuid: string) => {\n        updateUIState((existingFacets: ExperimentPageUIState) => ({\n          ...existingFacets,\n          runsPinned: !existingFacets.runsPinned.includes(uuid)\n            ? [...existingFacets.runsPinned, uuid]\n            : existingFacets.runsPinned.filter((r) => r !== uuid),\n        }));\n      },\n      [updateUIState],\n    );\n\n    // A modern version of row visibility toggle function, supports \"show all\", \"show first n runs\" options\n    const toggleRowVisibility = useToggleRowVisibilityCallback(rowsData, uiState.useGroupedValuesInCharts);\n\n    const gridReadyHandler = useCallback((params: GridReadyEvent) => {\n      setGridApi(params.api);\n      setColumnApi(params.columnApi);\n    }, []);\n\n    const { handleRowSelected, onSelectionChange } = useExperimentTableSelectRowHandler(updateViewState);\n\n    const allRunsHidden = useMemo(() => {\n      if (shouldUseRunRowsVisibilityMap()) {\n        return rowsData.every((row) => row.hidden);\n      }\n      return runsData.runInfos.every(({ runUuid }) => runsHidden.includes(runUuid));\n    }, [runsData, rowsData, runsHidden]);\n\n    // Check if at least one run has custom visibility settings\n    const usingCustomVisibility = shouldUseRunRowsVisibilityMap() && !isEmpty(uiState.runsVisibilityMap);\n\n    const columnDefs = useRunsColumnDefinitions({\n      selectedColumns,\n      onExpand: toggleRowExpanded,\n      compareExperiments: experiments.length > 1,\n      onTogglePin: togglePinnedRow,\n      onToggleVisibility: toggleRowVisibility,\n      metricKeyList: filteredMetricKeyList,\n      paramKeyList: filteredParamKeyList,\n      tagKeyList: filteredTagKeys,\n      columnApi,\n      isComparingRuns,\n      onDatasetSelected,\n      expandRows,\n      runsHiddenMode: uiState.runsHiddenMode,\n    });\n\n    const gridSizeHandler = useCallback(\n      (api: GridApi) => {\n        if (api && isComparingRuns) {\n          try {\n            api.sizeColumnsToFit();\n          } catch {\n            // ag-grid occasionally throws an error when trying to size columns while its internal ref is lost\n            // We can't do much about it, so the exception is consumed\n          }\n        }\n      },\n      [isComparingRuns],\n    );\n\n    useEffect(() => {\n      if (!gridApi) {\n        return;\n      }\n\n      if (isLoading) {\n        gridApi.showLoadingOverlay();\n      } else {\n        gridApi.hideOverlay();\n\n        // If there are more runs available in the API, append\n        // additional special row that will display \"Load more\" button\n        if (rowsData.length && moreRunsAvailable) {\n          gridApi.setRowData([...rowsData, createLoadMoreRow()]);\n          gridSizeHandler(gridApi);\n          return;\n        }\n\n        gridApi.setRowData(rowsData);\n        gridSizeHandler(gridApi);\n      }\n    }, [gridApi, rowsData, isLoading, moreRunsAvailable, loadMoreRunsFunc, gridSizeHandler]);\n\n    // Count all columns available for selection\n    const allAvailableColumnsCount = useMemo(() => {\n      const attributeColumnCount = getAdjustableAttributeColumns(experiments.length > 1).length;\n\n      const valuesColumnCount = metricKeyList.length + paramKeyList.length + filteredTagKeys.length;\n\n      return attributeColumnCount + valuesColumnCount;\n    }, [experiments.length, filteredTagKeys.length, metricKeyList.length, paramKeyList.length]);\n\n    const hasSelectedAllColumns = selectedColumns.length >= allAvailableColumnsCount;\n\n    const moreAvailableRunsTableColumnCount = Math.max(0, allAvailableColumnsCount - selectedColumns.length);\n\n    const allRunsCount = useMemo(\n      () =>\n        runsData.runInfos.filter(\n          (r) => runsPinned.includes(r.runUuid) || runsData.runUuidsMatchingFilter.includes(r.runUuid),\n        ).length,\n      [runsData, runsPinned],\n    );\n\n    useLayoutEffect(() => {\n      if (!gridApi) {\n        return;\n      }\n      // Each time we switch to \"compare runs\" mode, we should\n      // maximize columns so \"run name\" column will take up all remaining space\n      if (isComparingRuns) {\n        // Selection feature is not supported in compare runs mode so we should deselect all\n        gridApi.deselectAll();\n        gridApi.sizeColumnsToFit();\n      }\n      gridApi.resetRowHeights();\n    }, [gridApi, isComparingRuns]);\n\n    /**\n     * Function used by ag-grid to calculate each row's height.\n     * In this case, it's based on a datasets cell size.\n     */\n\n    const rowHeightGetterFn = useCallback(\n      // if is comparing runs, use the default row height\n      (row: { data: RunRowType }) => {\n        if (isComparingRuns || !expandRows) {\n          return EXPERIMENT_RUNS_TABLE_ROW_HEIGHT;\n        }\n        const datasetColumnId = makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.DATASET);\n        const datasetColumnShown = selectedColumns.includes(datasetColumnId);\n        // if not comparing runs, use the datasets cell height\n        return getDatasetsCellHeight(datasetColumnShown, row);\n      },\n      [selectedColumns, isComparingRuns, expandRows],\n    );\n\n    useEffect(() => {\n      // Enabling certain columns (datasets) will change our row height calculation,\n      // let's recalculate them\n      gridApi?.resetRowHeights();\n    }, [gridApi, selectedColumns, expandRows]);\n\n    const [sidebarPreviewData, setSidebarPreviewData] = useState<{\n      value: string;\n      header: string;\n    } | null>(null);\n\n    const handleCellClicked = useCallback(\n      ({ column, data, value }: CellClickedEvent) => {\n        const columnGroupId = column.getParent()?.getGroupId();\n        const shouldInvokePreviewSidebar =\n          columnGroupId === COLUMN_TYPES.METRICS || columnGroupId === COLUMN_TYPES.PARAMS;\n\n        if (shouldInvokePreviewSidebar) {\n          setSidebarPreviewData({\n            value,\n            header: `Run name: ${data.runName}, Column name: ${column.getColDef().headerTooltip}`,\n          });\n          updateViewState({ previewPaneVisible: true });\n        }\n      },\n      [updateViewState],\n    );\n\n    const displayAddColumnsCTA = !hasSelectedAllColumns && !isComparingRuns && rowsData.length > 0;\n    const displayPreviewSidebar = !isComparingRuns && viewState.previewPaneVisible;\n    const displayRunsTable = !runListHidden || !isComparingRuns;\n    const displayStatusBar = !runListHidden;\n    const displayEmptyState = rowsData.length < 1 && !isLoading && displayRunsTable;\n\n    const tableContext = useMemo(() => ({ orderByAsc, orderByKey }), [orderByAsc, orderByKey]);\n\n    const { cellMouseOverHandler, cellMouseOutHandler } = useRunsHighlightTableRow(containerElement);\n\n    const gridStyles = useExperimentAgGridTableStyles();\n\n    return (\n      <div\n        css={(theme) => ({\n          display: 'grid',\n          flex: 1,\n          gridTemplateColumns: displayPreviewSidebar ? '1fr auto' : '1fr',\n          borderTop: `1px solid ${theme.colors.border}`,\n        })}\n        className={isComparingRuns ? 'is-table-comparing-runs-mode' : undefined}\n      >\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            position: 'relative',\n          }}\n        >\n          <div\n            ref={containerElement}\n            className={cx('ag-theme-balham ag-grid-sticky', {\n              'ag-grid-expanders-visible': expandersVisible,\n              'is-table-comparing-runs-mode': isComparingRuns,\n            })}\n            css={[gridStyles, { display: displayRunsTable ? 'block' : 'hidden', height: '100%' }]}\n            aria-hidden={!displayRunsTable}\n          >\n            <ExperimentViewRunsTableHeaderContextProvider\n              runsHiddenMode={uiState.runsHiddenMode}\n              usingCustomVisibility={usingCustomVisibility}\n              useGroupedValuesInCharts={Boolean(uiState.groupBy) && uiState.useGroupedValuesInCharts}\n              allRunsHidden={allRunsHidden}\n            >\n              <MLFlowAgGridLoader\n                context={tableContext}\n                defaultColDef={EXPERIMENTS_DEFAULT_COLUMN_SETUP}\n                columnDefs={columnDefs}\n                rowSelection=\"multiple\"\n                onGridReady={gridReadyHandler}\n                onSelectionChanged={onSelectionChange}\n                getRowHeight={rowHeightGetterFn}\n                headerHeight={EXPERIMENT_RUNS_TABLE_ROW_HEIGHT}\n                onRowSelected={handleRowSelected}\n                suppressRowClickSelection\n                suppressColumnMoveAnimation\n                suppressScrollOnNewData\n                isFullWidthRow={getRowIsLoadMore}\n                fullWidthCellRenderer=\"LoadMoreRowRenderer\"\n                fullWidthCellRendererParams={{ loadMoreRunsFunc }}\n                suppressFieldDotNotation\n                enableCellTextSelection\n                components={getFrameworkComponents()}\n                suppressNoRowsOverlay\n                loadingOverlayComponent=\"loadingOverlayComponent\"\n                loadingOverlayComponentParams={{ showImmediately: true }}\n                getRowId={getRowId}\n                rowBuffer={ROW_BUFFER}\n                onCellClicked={handleCellClicked}\n                onGridSizeChanged={({ api }) => gridSizeHandler(api)}\n                onCellMouseOver={cellMouseOverHandler}\n                onCellMouseOut={cellMouseOutHandler}\n                maxBlocksInCache={20} // Increased from 10\n                cacheBlockSize={100}\n                maxConcurrentDatasourceRequests={2} // Increased from 1\n                immutableData // Added for better performance\n                getRowNodeId={(data) => data.rowUuid} // Added for better row identification\n                suppressPropertyNamesCheck // Added to reduce overhead\n                suppressAnimationFrame // Added to reduce rendering overhead\n              />\n            </ExperimentViewRunsTableHeaderContextProvider>\n            {displayAddColumnsCTA && (\n              <ExperimentViewRunsTableAddColumnCTA\n                gridContainerElement={containerElement.current}\n                isInitialized={Boolean(gridApi)}\n                onClick={onAddColumnClicked}\n                visible={!isLoading}\n                moreRunsAvailable={moreRunsAvailable}\n                moreAvailableRunsTableColumnCount={moreAvailableRunsTableColumnCount}\n              />\n            )}\n          </div>\n          {displayEmptyState && (\n            <ExperimentViewRunsEmptyTable\n              onClearFilters={() => {\n                setUrlSearchFacets(createExperimentPageSearchFacetsState());\n              }}\n              isFiltered={isSearchFacetsFilterUsed(searchFacetsState)}\n            />\n          )}\n          {displayStatusBar && <ExperimentViewRunsTableStatusBar allRunsCount={allRunsCount} isLoading={isLoading} />}\n        </div>\n        {displayPreviewSidebar && (\n          <PreviewSidebar\n            content={sidebarPreviewData?.value}\n            copyText={sidebarPreviewData?.value}\n            headerText={sidebarPreviewData?.header}\n            onClose={() => updateViewState({ previewPaneVisible: false })}\n            empty={\n              <Empty\n                description={\n                  <FormattedMessage\n                    defaultMessage=\"Select a cell to display preview\"\n                    description=\"Experiment page > table view > preview sidebar > nothing selected\"\n                  />\n                }\n              />\n            }\n          />\n        )}\n      </div>\n    );\n  },\n);\n\n/**\n * Concrete named definitions for colors used in this agGrid\n */\nconst getGridColors = (theme: Theme) => ({\n  rowForeground: theme.colors.textPrimary, // regular row background\n  rowBackground: theme.colors.backgroundPrimary, // regular row background\n  rowBackgroundHover: theme.colors.tableBackgroundUnselectedHover,\n  rowBackgroundSelected: theme.colors.tableBackgroundSelectedDefault,\n  rowBackgroundHoverSelected: theme.colors.tableBackgroundSelectedHover,\n  columnSortedBy: `${theme.colors.blue400}1F`,\n  headerBackground: theme.colors.backgroundSecondary,\n  headerTextColor: theme.colors.textSecondary, // directly from Figma design\n  headerGroupTextColor: theme.colors.textSecondary, // directly from Figma design\n  borderColor: theme.colors.borderDecorative, // border between header and content and scrollable areas\n  headerBorderColor: 'transparent', // borders inside the header\n  checkboxBorderColor: theme.colors.actionDefaultBorderDefault,\n  checkboxBorderColorChecked: theme.colors.backgroundPrimary,\n  checkboxBackgroundColorChecked: theme.colors.actionPrimaryBackgroundDefault,\n  overlayBackground: `${theme.colors.backgroundSecondary}99`, // color for the loading overlay\n});\n\nconst styles = {\n  agGridOverrides: (theme: Theme, usingCustomHeaderComponent = true): CSSObject => {\n    const gridColors = getGridColors(theme);\n    return {\n      height: '100%',\n      position: 'relative',\n      '&.ag-theme-balham': {\n        // Set up internal variable values\n        '--ag-border-color': gridColors.borderColor,\n        '--ag-row-border-color': gridColors.borderColor,\n        '--ag-foreground-color': gridColors.rowForeground,\n        '--ag-background-color': gridColors.rowBackground,\n        '--ag-odd-row-background-color': gridColors.rowBackground,\n        '--ag-row-hover-color': gridColors.rowBackgroundHover,\n        '--ag-selected-row-background-color': gridColors.rowBackgroundSelected,\n        '--ag-header-foreground-color': gridColors.headerTextColor,\n        '--ag-header-background-color': gridColors.headerBackground,\n        '--ag-modal-overlay-background-color': gridColors.overlayBackground,\n\n        // Makes row header sticky\n        '&.ag-grid-sticky .ag-header': {\n          position: 'sticky',\n          top: 0,\n          zIndex: 1,\n        },\n        '&.ag-grid-sticky .ag-root': {\n          overflow: 'visible',\n        },\n        '&.ag-grid-sticky .ag-root-wrapper': {\n          border: '0',\n          borderRadius: '4px',\n          overflow: 'visible',\n        },\n\n        // When scrollbars are forced to be visible in the system, ag-grid will sometimes\n        // display a scrollbar that is not needed. We hide it here on compact mode.\n        '.is-table-comparing-runs-mode & .ag-body-horizontal-scroll.ag-scrollbar-invisible': {\n          display: 'none',\n        },\n\n        // Adds a static line between column group header row and column headers\n        '.ag-header::after': {\n          content: '\"\"',\n          position: 'absolute',\n          top: EXPERIMENT_RUNS_TABLE_ROW_HEIGHT,\n          left: 0,\n          right: 0,\n          height: 1,\n          backgroundColor: gridColors.borderColor,\n        },\n\n        // Line height for cell contents is the row height minus the border\n        '.ag-cell': {\n          // lineHeight: `min(var(--ag-line-height, ${ROW_HEIGHT - 2}px), ${ROW_HEIGHT - 2}px)`,\n          display: 'flex',\n          overflow: 'hidden',\n          '& > .ag-cell-wrapper': {\n            overflow: 'hidden',\n          },\n        },\n\n        // Padding fixes for the header (if custom header component is used)\n        '.ag-header-cell': usingCustomHeaderComponent\n          ? {\n              padding: 0,\n            }\n          : undefined,\n\n        '.ag-header-cell .ag-checkbox': usingCustomHeaderComponent\n          ? {\n              padding: '0 7px',\n              borderLeft: '1px solid transparent', // to match it with the cell sizing\n            }\n          : undefined,\n\n        '.ag-cell.is-ordered-by, .ag-header-cell > .is-ordered-by': {\n          backgroundColor: gridColors.columnSortedBy,\n        },\n        '.ag-header-row': {\n          '--ag-border-color': gridColors.headerBorderColor,\n        },\n        '.ag-header-row.ag-header-row-column-group': {\n          '--ag-header-foreground-color': gridColors.headerGroupTextColor,\n        },\n        '.ag-row.ag-row-selected.ag-row-hover': {\n          backgroundColor: gridColors.rowBackgroundHoverSelected,\n        },\n        '.ag-row.is-highlighted': {\n          backgroundColor: gridColors.rowBackgroundHoverSelected,\n        },\n        // Hides resize guidelines when header is not hovered\n        '.ag-header:not(:hover) .ag-header-cell::after, .ag-header:not(:hover) .ag-header-group-cell::after': {\n          opacity: 0,\n        },\n        '.ag-pinned-left-header': {\n          borderRight: 'none',\n        },\n\n        // Fixed for loading overlay, should be above \"load more\" button\n        '.ag-overlay-loading-wrapper': {\n          paddingTop: theme.spacing.md * 4,\n          alignItems: 'center',\n          zIndex: 2,\n        },\n        '.ag-overlay-loading-wrapper .ag-react-container': {\n          flex: 1,\n        },\n\n        // Adds border after the last column to separate contents from \"Add columns\" CTA\n        '.ag-center-cols-container': {\n          minHeight: 0,\n        },\n\n        '.ag-full-width-row': {\n          borderBottom: 0,\n          backgroundColor: 'transparent',\n          zIndex: 1,\n          '&.ag-row-hover': {\n            backgroundColor: 'transparent',\n          },\n        },\n\n        // Centers vertically and styles the checkbox cell\n        '.is-checkbox-cell': {\n          display: 'flex',\n          alignItems: 'center',\n          paddingLeft: 7, // will end up in 8px due to 1px of transparent border on the left\n          '.is-multiline-cell .ag-cell-value': {\n            height: '100%',\n          },\n        },\n\n        // Change appearance of the previewable cells\n        '.is-previewable-cell': {\n          cursor: 'pointer',\n        },\n\n        // Header checkbox cell will get the same background as header only if it's unchecked\n        '.ag-header-cell .ag-checkbox .ag-input-wrapper:not(.ag-indeterminate):not(.ag-checked)': {\n          '--ag-checkbox-background-color': gridColors.headerBackground,\n        },\n\n        // Distance from the checkbox to other icons (pin, visibility etc.)\n        '.ag-cell-wrapper .ag-selection-checkbox': {\n          marginRight: 20,\n        },\n\n        // Header and cell checkboxes will get same colors from the palette\n        '.is-checkbox-cell, .ag-header-cell .ag-checkbox': {\n          '.ag-checkbox-input-wrapper::after': {\n            color: gridColors.checkboxBorderColor,\n          },\n          '.ag-checkbox-input-wrapper.ag-checked': {\n            '--ag-checkbox-background-color': gridColors.checkboxBackgroundColorChecked,\n            '--ag-checkbox-checked-color': gridColors.checkboxBorderColorChecked,\n            '&::after': {\n              color: gridColors.checkboxBorderColorChecked,\n            },\n          },\n        },\n      },\n    };\n  },\n};\n\n/**\n * Returns common styles to be used in ag-grid powered tables\n */\nexport const useExperimentAgGridTableStyles = ({\n  usingCustomHeaderComponent = true,\n}: { usingCustomHeaderComponent?: boolean } = {}) => {\n  const { theme } = useDesignSystemTheme();\n  return useMemo(() => styles.agGridOverrides(theme, usingCustomHeaderComponent), [theme, usingCustomHeaderComponent]);\n};\n","import { useMemo } from 'react';\nimport { useQueries } from '../../../../common/utils/reactQueryHooks';\nimport type { LoggedModelProto } from '../../../types';\nimport type { RunPageModelVersionSummary } from '../../run-page/hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { createMLflowRoutePath } from '../../../../common/utils/RoutingUtils';\nimport { isUCModelName } from '../../../utils/IsUCModelName';\nconst MODEL_VERSIONS_TAG_NAME = 'mlflow.modelVersions';\n\nconst getUCModelUrl = (name: string, version: string) =>\n  `/explore/data/models/${name.replace(/\\./g, '/')}/version/${version}`;\nconst getWMRModelUrl = (name: string, version: string) => createMLflowRoutePath(`/models/${name}/versions/${version}`);\n\nconst getTagValueForModel = (loggedModel: LoggedModelProto): { name: string; version: string }[] | null => {\n  try {\n    const tagValue = loggedModel.info?.tags?.find((tag) => tag.key === MODEL_VERSIONS_TAG_NAME)?.value;\n\n    if (tagValue) {\n      // Try to parse the tag. If it's malformed, catch and return nothing.\n      return JSON.parse(tagValue);\n    }\n  } catch (e) {\n    return null;\n  }\n  return null;\n};\n\n// Hook for ACL checking logic\nconst useModelVersionsAclCheck = (\n  ucModels: RunPageModelVersionSummary[],\n  checkAcl: boolean,\n): { aclResults: Record<string, boolean>; isLoading: boolean } => {\n  const queries = useMemo(() => {\n    if (!checkAcl || ucModels.length === 0) {\n      return [];\n    }\n    return [];\n  }, [ucModels, checkAcl]);\n\n  const queryResults = useQueries({ queries });\n\n  const { aclResults, isLoading } = useMemo(() => {\n    if (!checkAcl || ucModels.length === 0) {\n      return { aclResults: {}, isLoading: false };\n    }\n\n    const isLoading = queryResults.some((result) => result.isLoading);\n    const aclResults: Record<string, boolean> = {};\n    return { aclResults, isLoading };\n  }, [\n    // prettier-ignore\n    queryResults,\n    checkAcl,\n    ucModels.length,\n  ]);\n\n  return { aclResults, isLoading };\n};\n\nexport interface RunPageModelVersionSummaryWithAccess extends RunPageModelVersionSummary {\n  hasAccess: boolean;\n}\n\nexport interface UseExperimentLoggedModelRegisteredVersionsResult {\n  modelVersions: RunPageModelVersionSummaryWithAccess[];\n  isLoading: boolean;\n}\n\nexport const useExperimentLoggedModelRegisteredVersions = ({\n  loggedModels,\n  checkAcl = false,\n}: {\n  loggedModels: LoggedModelProto[];\n  checkAcl?: boolean;\n}): UseExperimentLoggedModelRegisteredVersionsResult => {\n  // Combined useMemo for parsing tags and creating model versions\n  const { modelVersions, ucModels } = useMemo(() => {\n    const modelVersions = loggedModels.flatMap((loggedModel) => {\n      const modelVersionsInTag = getTagValueForModel(loggedModel) ?? [];\n      return modelVersionsInTag.map((registeredModelEntry) => {\n        const isUCModel = isUCModelName(registeredModelEntry.name);\n        const getUrlFn = isUCModel ? getUCModelUrl : getWMRModelUrl;\n        return {\n          displayedName: registeredModelEntry.name,\n          version: registeredModelEntry.version,\n          link: getUrlFn(registeredModelEntry.name, registeredModelEntry.version),\n          source: null,\n          status: null,\n          sourceLoggedModel: loggedModel,\n        };\n      });\n    });\n\n    const ucModels = modelVersions.filter((model) => model.displayedName && isUCModelName(model.displayedName));\n\n    return { modelVersions, ucModels };\n  }, [loggedModels]);\n\n  const { aclResults, isLoading } = useModelVersionsAclCheck(ucModels, checkAcl);\n\n  // Add hasAccess to each model version\n  const modelVersionsWithAccess = useMemo<RunPageModelVersionSummaryWithAccess[]>(\n    () =>\n      modelVersions.map((modelVersion) => {\n        const displayedName = modelVersion.displayedName;\n        const isUCModel = displayedName && isUCModelName(displayedName);\n\n        let hasAccess = true; // Default for workspace models\n\n        if (checkAcl && isUCModel && displayedName) {\n          // For UC models with ACL check enabled, use the ACL result\n          hasAccess = aclResults[`${displayedName}:${modelVersion.version}`] ?? false;\n        }\n\n        return {\n          ...modelVersion,\n          hasAccess,\n        };\n      }),\n    [modelVersions, checkAcl, aclResults],\n  );\n\n  return {\n    modelVersions: modelVersionsWithAccess,\n    isLoading,\n  };\n};\n","import React from 'react';\nimport { Button, CloseIcon, CopyIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { CopyButton } from '../../shared/building_blocks/CopyButton';\n\nconst PREVIEW_SIDEBAR_WIDTH = 300;\n\n/**\n * Displays a sidebar helpful in expanding textual data in table components.\n * Will be replaced by DuBois standardized component in the future.\n */\nexport const PreviewSidebar = ({\n  content,\n  copyText,\n  headerText,\n  empty,\n  onClose,\n}: {\n  content?: React.ReactNode;\n  copyText?: string;\n  headerText?: string;\n  empty?: React.ReactNode;\n  onClose?: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        width: PREVIEW_SIDEBAR_WIDTH,\n        padding: theme.spacing.sm,\n        paddingRight: 0,\n        borderLeft: `1px solid ${theme.colors.borderDecorative}`,\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n      }}\n      data-testid=\"preview-sidebar-content\"\n    >\n      {content ? (\n        <>\n          <div\n            css={{\n              display: 'grid',\n              gridTemplateColumns: '1fr auto auto',\n              rowGap: theme.spacing.sm,\n              alignItems: 'flex-start',\n              flex: '0 0 auto',\n            }}\n          >\n            {headerText && (\n              <Typography.Title\n                level={4}\n                css={{\n                  overflowX: 'hidden',\n                  overflowY: 'auto',\n                  marginTop: theme.spacing.sm,\n                  marginRight: theme.spacing.xs,\n\n                  // Escape hatch if for some reason title is so long it would consume entire sidebar\n                  maxHeight: 200,\n                }}\n              >\n                {headerText}\n              </Typography.Title>\n            )}\n            {copyText && <CopyButton copyText={copyText} showLabel={false} icon={<CopyIcon />} />}\n            {onClose && (\n              <Button\n                componentId=\"codegen_mlflow_app_src_common_components_previewsidebar.tsx_67\"\n                type=\"primary\"\n                icon={<CloseIcon />}\n                onClick={onClose}\n              />\n            )}\n          </div>\n          <div\n            css={{\n              // Preserve original line breaks\n              whiteSpace: 'pre-wrap',\n              overflowY: 'auto',\n              flex: 1,\n            }}\n          >\n            {content}\n          </div>\n        </>\n      ) : (\n        <div css={{ marginTop: theme.spacing.md }}>{empty}</div>\n      )}\n    </div>\n  );\n};\n","import type {\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions, ObserverFetchOptions } from './queryObserver'\nimport { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage({ pageParam, ...options }: FetchNextPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  }: FetchPreviousPageOptions = {}): Promise<\n    InfiniteQueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>, TQueryKey>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n\n    const { isFetching, isRefetching } = result\n\n    const isFetchingNextPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'forward'\n\n    const isFetchingPreviousPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'backward'\n\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching:\n        isRefetching && !isFetchingNextPage && !isFetchingPreviousPage,\n    }\n  }\n}\n","import { useInfiniteQuery } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { isEmpty, last, uniqBy } from 'lodash';\nimport type { LoggedModelMetricDataset, LoggedModelProto } from '../../types';\nimport { loggedModelsDataRequest } from './request.utils';\nimport { getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\nimport { useMemo } from 'react';\n\ntype UseSearchLoggedModelsQueryResponseType = {\n  models: LoggedModelProto[];\n  next_page_token?: string;\n};\n\nexport const useSearchLoggedModelsQuery = (\n  {\n    experimentIds,\n    orderByAsc,\n    orderByField,\n    searchQuery,\n    selectedFilterDatasets,\n    orderByDatasetName,\n    orderByDatasetDigest,\n  }: {\n    experimentIds?: string[];\n    orderByAsc?: boolean;\n    orderByField?: string;\n    searchQuery?: string;\n    selectedFilterDatasets?: LoggedModelMetricDataset[];\n    orderByDatasetName?: string;\n    orderByDatasetDigest?: string;\n  },\n  {\n    enabled = true,\n  }: {\n    enabled?: boolean;\n  } = {},\n) => {\n  // Uniquely identify the query by the experiment IDs, order by, filter query and datasets, and order by asc\n  const queryKey = [\n    'SEARCH_LOGGED_MODELS',\n    JSON.stringify(experimentIds),\n    orderByField,\n    orderByAsc,\n    searchQuery,\n    JSON.stringify(selectedFilterDatasets),\n    orderByDatasetName,\n    orderByDatasetDigest,\n  ];\n\n  const { data, isLoading, isFetching, fetchNextPage, refetch, error } = useInfiniteQuery<\n    UseSearchLoggedModelsQueryResponseType,\n    Error\n  >({\n    queryKey,\n    queryFn: async ({ pageParam }) => {\n      const requestBody = {\n        experiment_ids: experimentIds,\n        order_by: [\n          {\n            field_name: orderByField ?? 'creation_time',\n            ascending: orderByAsc ?? false,\n            dataset_name: orderByDatasetName,\n            dataset_digest: orderByDatasetDigest,\n          },\n        ],\n\n        page_token: pageParam,\n        filter: searchQuery,\n        datasets: !isEmpty(selectedFilterDatasets) ? selectedFilterDatasets : undefined,\n      };\n\n      return loggedModelsDataRequest(getAjaxUrl('ajax-api/2.0/mlflow/logged-models/search'), 'POST', requestBody);\n    },\n    cacheTime: 0,\n    getNextPageParam: (lastPage) => lastPage.next_page_token,\n    refetchOnWindowFocus: false,\n    retry: false,\n    enabled,\n  });\n\n  // Concatenate all the models from all the result pages\n  const modelsData = useMemo(() => data?.pages.flatMap((page) => page?.models).filter(Boolean), [data]);\n\n  // The current page token is the one from the last page\n  const nextPageToken = last(data?.pages)?.next_page_token;\n\n  return {\n    isLoading,\n    isFetching,\n    data: modelsData,\n    nextPageToken,\n    refetch,\n    error,\n    loadMoreResults: fetchNextPage,\n  } as const;\n};\n","import 'client-only'\nimport type {\n  QueryObserver,\n  QueryFunction,\n  QueryKey,\n} from '@tanstack/query-core'\nimport { InfiniteQueryObserver, parseQueryArgs } from '@tanstack/query-core'\nimport type { UseInfiniteQueryOptions, UseInfiniteQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey'\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey' | 'queryFn'\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1:\n    | TQueryKey\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg3?: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >,\n): UseInfiniteQueryResult<TData, TError> {\n  const options = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver,\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n","import type { AgGridReactProps, AgReactUiProps } from '@ag-grid-community/react';\nimport { Spinner } from '@databricks/design-system';\nimport React from 'react';\n\nconst MLFlowAgGridImpl = React.lazy(() => import('./AgGrid'));\n\n/**\n * A simple loader that will lazily load MLflow's ag grid implementation.\n * Extracted to a separate module for testing purposes.\n */\nexport const MLFlowAgGridLoader = (props: AgGridReactProps | AgReactUiProps) => (\n  <React.Suspense\n    fallback={\n      <div\n        css={(cssTheme) => ({\n          display: 'flex',\n          justifyContent: 'center',\n          margin: cssTheme.spacing.md,\n        })}\n      >\n        <Spinner />\n      </div>\n    }\n  >\n    <MLFlowAgGridImpl {...props} />\n  </React.Suspense>\n);\n","import type { ReactNode } from 'react';\nimport type { RunsChartsCardConfig } from '../runs-charts.types';\nimport type { RunsChartsRunData } from './RunsCharts.common';\nimport { Modal, useDesignSystemTheme } from '@databricks/design-system';\nimport type { RunsChartsTooltipBodyProps } from '../hooks/useRunsChartsTooltip';\nimport { RunsChartsTooltipWrapper } from '../hooks/useRunsChartsTooltip';\nimport { RunsChartsCard } from './cards/RunsChartsCard';\nimport type { RunsGroupByConfig } from '../../experiment-page/utils/experimentPage.group-row-utils';\nimport type { RunsChartsGlobalLineChartConfig } from '../../experiment-page/models/ExperimentPageUIState';\n\nexport const RunsChartsFullScreenModal = <TContext,>({\n  chartData,\n  isMetricHistoryLoading = false,\n  groupBy,\n  fullScreenChart,\n  onCancel,\n  tooltipContextValue,\n  tooltipComponent,\n  autoRefreshEnabled,\n  globalLineChartConfig,\n}: {\n  chartData: RunsChartsRunData[];\n  isMetricHistoryLoading?: boolean;\n  groupBy: RunsGroupByConfig | null;\n  autoRefreshEnabled?: boolean;\n  fullScreenChart:\n    | {\n        config: RunsChartsCardConfig;\n        title: string | ReactNode;\n        subtitle: ReactNode;\n      }\n    | undefined;\n  onCancel: () => void;\n  tooltipContextValue: TContext;\n  tooltipComponent: React.ComponentType<React.PropsWithChildren<RunsChartsTooltipBodyProps<TContext>>>;\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n}) => {\n  const { theme, getPrefixedClassName } = useDesignSystemTheme();\n\n  const emptyReorderProps = {\n    canMoveDown: false,\n    canMoveUp: false,\n    onMoveDown: () => {},\n    onMoveUp: () => {},\n    onReorderWith: () => {},\n  };\n\n  const emptyConfigureProps = {\n    onRemoveChart: () => {},\n    onReorderCharts: () => {},\n    onStartEditChart: () => {},\n    setFullScreenChart: () => {},\n  };\n\n  if (!fullScreenChart) {\n    return null;\n  }\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsfullscreenmodal.tsx_53\"\n      visible\n      onCancel={onCancel}\n      title={\n        <div css={{ display: 'flex', flexDirection: 'column' }}>\n          {fullScreenChart.title}\n          <span\n            css={{\n              color: theme.colors.textSecondary,\n              fontSize: theme.typography.fontSizeSm,\n              marginRight: theme.spacing.xs,\n            }}\n          >\n            {fullScreenChart.subtitle}\n          </span>\n        </div>\n      }\n      footer={null}\n      verticalSizing=\"maxed_out\"\n      dangerouslySetAntdProps={{ width: '95%' }}\n      css={{\n        [`.${getPrefixedClassName('modal-body')}`]: {\n          flex: 1,\n        },\n      }}\n    >\n      <RunsChartsTooltipWrapper contextData={tooltipContextValue} component={tooltipComponent}>\n        <RunsChartsCard\n          cardConfig={fullScreenChart.config}\n          chartRunData={chartData}\n          groupBy={groupBy}\n          index={0}\n          sectionIndex={0}\n          fullScreen\n          autoRefreshEnabled={autoRefreshEnabled}\n          globalLineChartConfig={globalLineChartConfig}\n          {...emptyConfigureProps}\n          {...emptyReorderProps}\n        />\n      </RunsChartsTooltipWrapper>\n    </Modal>\n  );\n};\n","import { CheckCircleIcon, ClockIcon, XCircleIcon, useDesignSystemTheme } from '@databricks/design-system';\n\nconst ErrorIcon = () => {\n  const { theme } = useDesignSystemTheme();\n  return <XCircleIcon css={{ color: theme.colors.textValidationDanger }} />;\n};\n\nconst FinishedIcon = () => {\n  const { theme } = useDesignSystemTheme();\n  return <CheckCircleIcon css={{ color: theme.colors.textValidationSuccess }} />;\n};\n\nexport const RunStatusIcon = ({ status }: { status: string }) => {\n  switch (status) {\n    case 'FAILED':\n    case 'KILLED':\n      return <ErrorIcon />;\n    case 'FINISHED':\n      return <FinishedIcon />;\n    case 'SCHEDULED':\n    case 'RUNNING':\n      return <ClockIcon />; // This one is the same color as the link\n    default:\n      return null;\n  }\n};\n","import {\n  DEFAULT_LIFECYCLE_FILTER,\n  DEFAULT_MODEL_VERSION_FILTER,\n  DEFAULT_ORDER_BY_ASC,\n  DEFAULT_ORDER_BY_KEY,\n  DEFAULT_START_TIME,\n} from '../../../constants';\nimport type { DatasetSummary, LIFECYCLE_FILTER, MODEL_VERSION_FILTER } from '../../../types';\n\n/**\n * Defines persistable model representing sort and filter values\n * used by runs table and controls\n */\nexport interface ExperimentPageSearchFacetsState {\n  /**\n   * SQL-like query string used to filter runs, e.g. \"params.alpha = '0.5'\"\n   */\n  searchFilter: string;\n\n  /**\n   * Canonical order_by key like \"params.`alpha`\". May be null to indicate the table\n   * should use the natural row ordering provided by the server.\n   */\n  orderByKey: string;\n\n  /**\n   * Whether the order imposed by orderByKey should be ascending or descending.\n   */\n  orderByAsc: boolean;\n\n  /**\n   * Filter key to show results based on start time\n   */\n  startTime: string;\n\n  /**\n   * Lifecycle filter of runs to display\n   */\n  lifecycleFilter: LIFECYCLE_FILTER;\n\n  /**\n   * Datasets filter of runs to display\n   */\n  datasetsFilter: DatasetSummary[];\n\n  /**\n   * Filter of model versions to display\n   */\n  modelVersionFilter: MODEL_VERSION_FILTER;\n}\n\n/**\n * Defines default experiment page search facets state.\n */\nexport const createExperimentPageSearchFacetsState = (): ExperimentPageSearchFacetsState => ({\n  searchFilter: '',\n  orderByKey: DEFAULT_ORDER_BY_KEY,\n  orderByAsc: DEFAULT_ORDER_BY_ASC,\n  startTime: DEFAULT_START_TIME,\n  lifecycleFilter: DEFAULT_LIFECYCLE_FILTER,\n  datasetsFilter: [],\n  modelVersionFilter: DEFAULT_MODEL_VERSION_FILTER,\n});\n"],"names":["ExperimentSourceTypeIcon","sourceType","className","SourceType","NOTEBOOK","_jsx","NotebookIcon","LOCAL","FileCodeIcon","PROJECT","FolderBranchIcon","JOB","WorkflowsIcon","_path","_circle","_extends","Object","assign","bind","n","e","arguments","length","t","r","hasOwnProperty","call","apply","SvgIconVisibleFill","title","titleId","props","svgRef","width","height","viewBox","fill","xmlns","ref","id","d","stroke","cx","cy","strokeWidth","ForwardRef","flattenString","input","isArray","join","persistSearchStateFieldSerializers","searchFilter","deserializeLocalStorage","deserializeQueryString","orderByAsc","serializeQueryString","toString","datasetsFilter","inputs","inputsWithoutExperimentId","map","name","digest","context","btoaUtf8","JSON","stringify","parsedResult","parse","atobUtf8","Array","compareRunCharts","compareRunsMode","serializeLocalStorage","EXPERIMENT_PAGE_QUERY_PARAM_KEYS","EXPERIMENT_PAGE_QUERY_PARAM_IS_PREVIEW","useExperimentPageSearchFacets","queryParams","useSearchParams","pickedValues","useMemo","pick","fromEntries","entries","isPreview","get","orderByKey","startTime","lifecycleFilter","modelVersionFilter","areValuesEmpty","keys","experimentId","useParams","queryParamsExperimentIds","experimentIds","comparedExperimentIds","getComparedExperimentIds","deserializedFields","resultObject","field","_persistSearchStateFi2","deserializeFn","deserializeFieldsFromQueryString","omitBy","isNil","createExperimentPageSearchFacetsState","useUpdateExperimentPageSearchFacets","setParams","partialFacets","options","newParams","_persistSearchStateFi","serializeFn","serializeFieldsToQueryString","currentParams","forEach","key","value","set","delete","isUCModelName","Boolean","match","_ref","styles","SourceCellRenderer","React","tags","_tags$Utils$sourceTyp","theme","useDesignSystemTheme","_Fragment","children","Utils","sourceTypeTag","sourceLink","renderSource","undefined","_jsxs","css","_css","display","gap","spacing","xs","alignItems","color","colors","textSecondary","_g","_path2","_path3","_defs","SvgRegisteredModelGreyOk","clipPath","style","maskType","maskUnits","x","y","mask","fillRule","clipRule","useToggleRowVisibilityCallback","tableRows","useGroupedValuesInCharts","updateUIState","useUpdateExperimentViewUIState","immediateTableRows","useRef","current","toggleRowUsingVisibilityMap","useCallback","mode","groupOrRunUuid","isCurrentlyVisible","currentUIState","RUNS_VISIBILITY_MODE","CUSTOM","_immediateTableRows$c","newRunsVisibilityMap","runsVisibilityMap","currentToggledGroupInfo","find","rowUuid","groupParentInfo","shouldEnableToggleIndividualRunsInGroups","runUuid","runUuids","SHOWALL","HIDEALL","FIRST_10_RUNS","FIRST_20_RUNS","HIDE_FINISHED_RUNS","includes","runsHiddenMode","runsHidden","toggleRowVisibility","_immediateTableRows$c2","currentlyHiddenRows","filter","hidden","newHiddenRows","allRunsHidden","currentGroupOrRunUuid","concat","shouldUseRunRowsVisibilityMap","useRunsHighlightTableRow","containerElementRef","highlightedClassName","findInFlexColumns","getRowUuid","onHighlightChange","highlightDataTrace","useRunsChartTraceHighlight","highlightFn","source","_containerElementRef$","_containerElementRef$2","existingHighlightedRowElement","querySelector","additionalSelectorPrefix","rowElement","classList","remove","ChartsTraceHighlightSource","TABLE","add","useEffect","cellMouseOverHandler","data","isGroupRow","dataTraceUuid","cellMouseOutHandler","ColumnHeaderCell","enableSorting","canonicalSortKey","displayName","tableContext","updateSearchFacets","selectedCanonicalSortKey","role","overflow","paddingLeft","sm","paddingRight","svg","actionTertiaryTextHover","onClick","handleSortBy","newOrderByAsc","SortAscendingIcon","SortDescendingIcon","DateCellRenderer","referenceTime","runStatus","intl","useIntl","cellWrapper","formatTimestamp","RunStatusIcon","status","timeSinceStr","TrimmedText","text","maxSize","allowShowMore","dataTestId","trimmedText","substr","showMore","setShowMore","useState","Button","componentId","type","size","expandButton","RunDescriptionCellRenderer","description","getRunDescriptionFromTags","LegacyTooltip","ExperimentNameCellRenderer","Link","to","Routes","getExperimentPageRoute","basename","_ref2","_ref3","_ref4","_ref5","ModelLink","model","isUc","registeredModelName","registeredModelVersion","flavors","artifactPath","originalLoggedModel","RegisteredModelOkIcon","actionPrimaryBackgroundDefault","ModelsIcon","ModelRegistryRoutes","getModelVersionPageRoute","getRunPageRoute","target","renderModelName","tooltipBody","shouldUnifyLoggedModelsAndRegisteredModels","_originalLoggedModel$","_originalLoggedModel$2","loggedModelExperimentId","info","experiment_id","loggedModelId","model_id","_originalLoggedModel$3","FormattedMessage","defaultMessage","values","originalModelLink","getExperimentLoggedModelDetailsPage","placement","Tag","_ref6","_ref7","LoggedModelV3Link","_model$info","_model$info2","_ref8","ModelsCellRenderer","registeredModels","loggedModels","loggedModelsV3","modelsLegacy","mergeLoggedAndRegisteredModels","modelVersions","registeredModelVersions","useExperimentLoggedModelRegisteredVersions","registeredModelVersionsByLoggedModel","shouldUseGetLoggedModelsBatchAPI","modelVersion","_modelVersion$sourceL","_modelVersion$sourceL2","sourceLoggedModel","_modelVersion$display","_modelVersion$version","_modelVersion$sourceL3","_modelVersion$sourceL4","_modelVersion$sourceL5","displayedName","push","version","artifact_uri","registeredModelsToDisplay","allModels","from","flat","uniqBy","_model$registeredMode","containsModels","isEmpty","Overflow","index","_model$info3","_model$info$model_id","_model$info4","modelId","loggedModelRegisteredVersions","ModelsHeaderCellRenderer","isUsingUnifiedModels","padding","ATTRIBUTE_COLUMN_LABELS","MODELS","InfoTooltip","content","VersionCellRenderer","renderSourceVersion","VisibleIcon","Icon","component","VisibleFillIcon","MOUSE_DELAYS","mouseEnterDelay","mouseLeaveDelay","RunVisibilityControlButton","rowHidden","buttonHidden","disabled","label","button","VisibleOffIcon","opacity","grey400","dangerouslySetAntdProps","visuallyHidden","checked","onChange","isRowVisible","general","iconFontSize","grey500","ExperimentViewRunsTableHeaderContext","usingCustomVisibility","ExperimentViewRunsTableHeaderContextProvider","contextValue","Provider","useExperimentViewRunsTableHeaderContext","labels","visibility","groups","defineMessages","unhide","hide","runs","pinning","unpin","pin","RowActionsCellRenderer","runDateAndNestInfo","visibilityControl","belongsToGroup","isVisibilityButtonDisabled","RunRowVisibilityControl","Disabled","pinned","runUuidToToggle","isRowHidden","visibilityMessageDescriptor","pinningMessageDescriptor","isVisibilityButtonHidden","Hidden","isRemainingRunsGroup","actionsContainer","onToggleVisibility","actionCheckbox","showOnlyInCompareMode","pinnable","uuidToPin","existingState","runsPinned","PinFillIcon","PinIcon","Math","random","prevProps","nextProps","_prevProps$data$group","_nextProps$data$group","RowActionsCellRendererSuppressKeyboardEvents","event","HTMLElement","contains","appearance","cursor","RowActionsHeaderCellRendererV2","DropdownMenu","Root","modal","Trigger","asChild","actionButton","formatMessage","Content","RadioGroup","onValueChange","RadioItem","ItemIndicator","DashIcon","RowActionsHeaderCellRenderer","_props$eGridHeader","selectAllCheckbox","eGridHeader","ariaLabel","background","border","GroupParentCellRenderer","isComparingRuns","invariant","location","useLocation","getRunColor","useGetExperimentRunColor","saveRunColor","useSaveExperimentRunColor","onExpandToggle","groupId","doOpen","groupsExpanded","groupName","getRunGroupDisplayName","groupIsDisplayedInCharts","urlToRunUuidsFilter","createSearchFilterFromRunGroupInfo","searchParams","URLSearchParams","search","expanderOpen","ChevronDownIcon","ChevronRightIcon","RunColorPill","onChangeColor","colorValue","groupUuid","textOverflow","Tooltip","marginLeft","icon","NewWindowIcon","RunNameCellRenderer","onExpand","runName","hasExpander","childrenIds","level","renderingAsParent","isNaN","hideRunColorControl","expanderWrapper","nestLevel","lg","expanderButton","MinusSquareIcon","PlusSquareIcon","runLink","tabIndex","link","minWidth","typography","fontSizeBase","minHeight","textDecoration","justifyContent","LoadMoreRowRenderer","loadMoreRunsFunc","SingleDataset","datasetWithTags","onDatasetSelected","appendComma","inPopover","dataset","contextTag","MLFLOW_RUN_DATASET_CONTEXT_TAG","flexShrink","marginRight","TableIcon","Popover","Close","textTransform","DatasetsCellRenderer","datasets","expandRows","containerElement","datasetsVisible","setDatasetsVisible","ellipsisVisible","setEllipsisVisible","clampedDatasets","slice","datasetsLength","callback","throttle","entry","availableHeight","contentRect","elementsFit","stackedHeight","i","item","clientHeight","availableWidth","stackedWidth","clientWidth","partiallyVisibleDatasets","min","resizeObserver","ResizeObserver","observe","disconnect","moreItemsToShow","datasetsToShow","flexDirection","borderRadius","Typography","Text","align","heightSm","DatasetsCellRendererSuppressKeyboardEvents","HTMLButtonElement","AggregateMetricValueCell","valueFormatted","_data$groupParentInfo","aggregateFunction","cellClassIsOrderedBy","colDef","_colDef$headerCompone","headerComponentParams","getActionsColumnWidth","BASE_RUN_ACTIONS_COLUMN_WIDTH","createParamFieldName","EXPERIMENT_FIELD_PREFIX_PARAM","createTagFieldName","EXPERIMENT_FIELD_PREFIX_TAG","UntrackedSpinner","loading","Spinner","defaultKeyboardNavigationSuppressor","TAGS_TO_COLUMNS_MAP","ATTRIBUTE_COLUMN_SORT_KEY","USER","makeCanonicalSortKey","COLUMN_TYPES","ATTRIBUTES","RUN_NAME","SOURCE","VERSION","DESCRIPTION","getRowId","getRowIsLoadMore","rowNode","isLoadMoreRow","getAdjustableAttributeColumns","isComparingExperiments","result","DATASET","EXPERIMENT_NAME","useRunsColumnDefinitions","selectedColumns","compareExperiments","onTogglePin","paramKeyList","metricKeyList","tagKeyList","columnApi","cumulativeColumns","useCumulativeColumnKeys","cachedMetricKeys","Set","cachedParamKeys","cachedTagKeys","paramKeys","metricKeys","tagKeys","usingCompactViewport","useMediaQuery","responsive","breakpoints","columnSet","columns","valueGetter","checkboxSelection","headerComponent","headerCheckboxSelection","headerName","cellClass","cellRenderer","cellRendererParams","maxWidth","resizable","suppressKeyboardEvent","isRunColumnDynamicSized","colId","headerTooltip","sortable","equals","runA","runB","_runA$groupParentInfo","_runB$groupParentInfo","cellClassRules","initialWidth","flex","DATE","dateInfo1","dateInfo2","isEqual","DURATION","experimentName1","experimentName2","initialHide","tags1","tags2","getSourceName","version1","version2","models1","models2","METRICS","metricKey","_customMetricColumnDe","_customMetricColumnDe2","customMetricColumnDef","customMetricBehaviorDefs","fieldName","EXPERIMENT_FIELD_PREFIX_METRIC","getQualifiedEntityName","tooltipValueGetter","params","_params$data","initialColumnWidth","valueFormatter","cellRendererSelector","is-previewable-cell","PARAMS","paramKey","tooltipField","TAGS","tagKey","canonicalSortKeys","canonicalKey","visible","setColumnVisible","EXPERIMENTS_DEFAULT_COLUMN_SETUP","autoSizePadding","menuIcon","suppressMenu","suppressMovable","ExperimentViewRunsEmptyTable","isFiltered","onClearFilters","noResultsWrapper","noResults","Empty","image","FilterIcon","chunks","href","LoggingRunsDocUrl","rel","BeakerIcon","marginTop","inset","backgroundColor","backgroundPrimary","position","CLASS_OUT_OF_VIEWPORT","CLASS_IS_HIDDEN","CLASS_IS_MINIMIZED","AG_GRID_CLS","ExperimentViewRunsTableAddColumnCTA","gridContainerElement","isInitialized","moreRunsAvailable","moreAvailableRunsTableColumnCount","ctaRef","savedContainerRef","immediateMoreRunsAvailable","initialize","window","targetElement","rootElement","refLeftElem","refCenterElem","refHeaderElem","refBodyViewport","gridAreaWidth","leftColContainerWidth","leftColContainerHeight","centerColContainerWidth","colContainerHeight","headerHeight","_savedContainerRef$cu","_savedContainerRef$cu2","_savedContainerRef$cu3","_savedContainerRef$cu4","calculatedLeft","calculatedTop","loadMoreRowHeight","calculatedHeight","transform","columnContainer","buttonContainer","PlusCircleIcon","buttonIcon","caption","count","borderDecorative","borderTop","top","left","willChange","pointerEvents","paddingTop","whiteSpace","strong","ExperimentViewRunsTableStatusBar","isLoading","allRunsCount","statusBar","agGridSelectRunRows","isSelected","gridApi","forEachNode","node","_node$data","runInfo","childRunDateInfo","childrenRunUuid","setSelected","ExperimentViewRunsTable","experiments","searchFacetsState","runsData","updateViewState","onAddColumnClicked","rowsData","viewState","uiState","setUrlSearchFacets","runListHidden","shouldOptimize","tagKeysCount","getVisibleTagKeyList","tagsList","filteredMetricKeyList","filteredParamKeyList","filteredTagsList","column","startsWith","extractCanonicalSortKey","setGridApi","setColumnApi","filteredTagKeys","expandersVisible","some","row","_row$runDateAndNestIn","toggleRowExpanded","parentId","runsExpanded","currentRunsExpanded","state","togglePinnedRow","uuid","existingFacets","gridReadyHandler","api","handleRowSelected","onSelectionChange","selectedUUIDs","getSelectedRows","runsSelected","reduce","aggregate","curr","isParent","selectedRunRows","rowData","every","agGridSelectGroupRows","useExperimentTableSelectRowHandler","runInfos","columnDefs","gridSizeHandler","sizeColumnsToFit","showLoadingOverlay","hideOverlay","setRowData","uniqueId","allAvailableColumnsCount","hasSelectedAllColumns","max","runUuidsMatchingFilter","useLayoutEffect","deselectAll","resetRowHeights","rowHeightGetterFn","EXPERIMENT_RUNS_TABLE_ROW_HEIGHT","datasetColumnId","getDatasetsCellHeight","datasetColumnShown","_data$datasets","datasetsCount","sidebarPreviewData","setSidebarPreviewData","handleCellClicked","_column$getParent","columnGroupId","getParent","getGroupId","header","getColDef","previewPaneVisible","displayAddColumnsCTA","displayPreviewSidebar","displayRunsTable","displayStatusBar","displayEmptyState","gridStyles","useExperimentAgGridTableStyles","gridTemplateColumns","groupBy","MLFlowAgGridLoader","defaultColDef","rowSelection","onGridReady","onSelectionChanged","getRowHeight","onRowSelected","suppressRowClickSelection","suppressColumnMoveAnimation","suppressScrollOnNewData","isFullWidthRow","fullWidthCellRenderer","fullWidthCellRendererParams","suppressFieldDotNotation","enableCellTextSelection","components","agColumnHeader","loadingOverlayComponent","suppressNoRowsOverlay","loadingOverlayComponentParams","showImmediately","rowBuffer","onCellClicked","onGridSizeChanged","onCellMouseOver","onCellMouseOut","maxBlocksInCache","cacheBlockSize","maxConcurrentDatasourceRequests","immutableData","getRowNodeId","suppressPropertyNamesCheck","suppressAnimationFrame","isSearchFacetsFilterUsed","PreviewSidebar","copyText","headerText","onClose","empty","agGridOverrides","usingCustomHeaderComponent","gridColors","rowForeground","textPrimary","rowBackground","rowBackgroundHover","tableBackgroundUnselectedHover","rowBackgroundSelected","tableBackgroundSelectedDefault","rowBackgroundHoverSelected","tableBackgroundSelectedHover","columnSortedBy","blue400","headerBackground","backgroundSecondary","headerTextColor","headerGroupTextColor","borderColor","headerBorderColor","checkboxBorderColor","actionDefaultBorderDefault","checkboxBorderColorChecked","checkboxBackgroundColorChecked","overlayBackground","getGridColors","zIndex","right","borderLeft","borderRight","md","borderBottom","getUCModelUrl","replace","getWMRModelUrl","createMLflowRoutePath","checkAcl","ucModels","flatMap","loggedModel","_getTagValueForModel","modelVersionsInTag","_loggedModel$info","_loggedModel$info$tag","_loggedModel$info$tag2","tagValue","tag","getTagValueForModel","registeredModelEntry","getUrlFn","aclResults","useModelVersionsAclCheck","queries","queryResults","useQueries","isUCModel","hasAccess","_aclResults","rowGap","Title","overflowX","overflowY","maxHeight","CopyButton","showLabel","CopyIcon","CloseIcon","InfiniteQueryObserver","QueryObserver","constructor","client","super","bindMethods","this","fetchNextPage","fetchPreviousPage","setOptions","notifyOptions","behavior","infiniteQueryBehavior","getOptimisticResult","pageParam","fetch","meta","fetchMore","direction","createResult","query","_state$fetchMeta","_state$fetchMeta$fetc","_state$fetchMeta2","_state$fetchMeta2$fet","_state$data","_state$data2","isFetching","isRefetching","isFetchingNextPage","fetchMeta","isFetchingPreviousPage","hasNextPage","pages","hasPreviousPage","useSearchLoggedModelsQuery","orderByField","searchQuery","selectedFilterDatasets","orderByDatasetName","orderByDatasetDigest","enabled","_last","queryKey","refetch","error","arg1","arg2","arg3","parseQueryArgs","useBaseQuery","useInfiniteQuery","queryFn","async","requestBody","experiment_ids","order_by","field_name","ascending","dataset_name","dataset_digest","page_token","loggedModelsDataRequest","getAjaxUrl","cacheTime","getNextPageParam","lastPage","next_page_token","refetchOnWindowFocus","retry","page","models","nextPageToken","last","loadMoreResults","MLFlowAgGridImpl","fallback","cssTheme","margin","RunsChartsFullScreenModal","chartData","isMetricHistoryLoading","fullScreenChart","onCancel","tooltipContextValue","tooltipComponent","autoRefreshEnabled","globalLineChartConfig","getPrefixedClassName","Modal","fontSize","fontSizeSm","subtitle","footer","verticalSizing","RunsChartsTooltipWrapper","contextData","RunsChartsCard","cardConfig","config","chartRunData","sectionIndex","fullScreen","onRemoveChart","onReorderCharts","onStartEditChart","setFullScreenChart","canMoveDown","canMoveUp","onMoveDown","onMoveUp","onReorderWith","ErrorIcon","XCircleIcon","textValidationDanger","FinishedIcon","CheckCircleIcon","textValidationSuccess","ClockIcon","DEFAULT_ORDER_BY_KEY","DEFAULT_ORDER_BY_ASC","DEFAULT_START_TIME","DEFAULT_LIFECYCLE_FILTER","DEFAULT_MODEL_VERSION_FILTER"],"sourceRoot":""}