{"version":3,"file":"static/js/1240.bbfffe0d.chunk.js","mappings":"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","sources":["shared/web-shared/copy/CopyActionButton.tsx","common/components/error-boundaries/SectionErrorBoundary.tsx","shared/building_blocks/Image.tsx","experiment-tracking/components/runs-charts/components/charts/ImageGridPlot.common.tsx","common/components/RequestStateWrapper.tsx","shared/web-shared/snippet/actions/SnippetActionButton.tsx","shared/web-shared/snippet/actions/SnippetCopyAction.tsx","shared/web-shared/snippet/index.tsx","common/components/Spinner.tsx"],"sourcesContent":["import React from 'react';\n\nimport type { ButtonProps, TooltipProps } from '@databricks/design-system';\nimport { Button, Tooltip } from '@databricks/design-system';\n\nimport { useCopyController } from './useCopyController';\n\nexport interface CopyActionButtonProps {\n  buttonProps?: Partial<ButtonProps>;\n  componentId?: string;\n  copyText: string;\n  copyTooltip?: string;\n  isInsideInputGroup?: boolean;\n  onCopy?: () => void;\n  tooltipProps?: Partial<TooltipProps>;\n}\n\nexport function CopyActionButton({\n  buttonProps,\n  componentId,\n  copyText,\n  copyTooltip,\n  isInsideInputGroup = false,\n  onCopy,\n  tooltipProps,\n}: CopyActionButtonProps) {\n  const { actionIcon, copy, handleTooltipOpenChange, tooltipOpen, tooltipMessage } = useCopyController(\n    copyText,\n    copyTooltip,\n    onCopy,\n  );\n\n  const button = (\n    <Button\n      aria-label={tooltipMessage}\n      componentId={componentId ?? 'codegen_web-shared_src_copy_copyactionbutton.tsx_17'}\n      icon={actionIcon}\n      onClick={copy}\n      size=\"small\"\n      {...buttonProps}\n    />\n  );\n\n  const inputGroupButton = (\n    <Button\n      aria-label={tooltipMessage}\n      componentId={componentId ?? 'codegen_web-shared_src_copy_copyactionbutton.tsx_17'}\n      onClick={copy}\n      {...buttonProps}\n    >\n      {actionIcon}\n    </Button>\n  );\n\n  return (\n    <Tooltip\n      componentId={\n        componentId ? `${componentId}-tooltip` : 'codegen_web-shared_src_copy_copyactionbutton.tsx_17-tooltip'\n      }\n      content={tooltipMessage}\n      onOpenChange={handleTooltipOpenChange}\n      open={tooltipOpen}\n      {...tooltipProps}\n    >\n      {isInsideInputGroup ? inputGroupButton : button}\n    </Tooltip>\n  );\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport Utils from '../../utils/Utils';\n\ntype Props = {\n  showServerError?: boolean;\n};\n\ntype State = any;\n\nexport class SectionErrorBoundary extends React.Component<Props, State> {\n  state = { error: null };\n\n  componentDidCatch(error: any, errorInfo: any) {\n    this.setState({ error });\n    // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n    console.error(error, errorInfo);\n  }\n\n  renderErrorMessage(error: any) {\n    return this.props.showServerError ? <div>Error message: {error.message}</div> : '';\n  }\n\n  render() {\n    const { children } = this.props;\n    const { error } = this.state;\n    if (error) {\n      return (\n        <div>\n          <p>\n            <i\n              data-testid=\"icon-fail\"\n              className=\"fa fa-exclamation-triangle mlflow-icon-fail\"\n              css={classNames.wrapper}\n            />\n            <span> Something went wrong with this section. </span>\n            <span>If this error persists, please report an issue </span>\n            {/* Reported during ESLint upgrade */}\n            {/* eslint-disable-next-line react/jsx-no-target-blank */}\n            <a href={Utils.getSupportPageUrl()} target=\"_blank\">\n              here\n            </a>\n            .{this.renderErrorMessage(error)}\n          </p>\n        </div>\n      );\n    }\n\n    return children;\n  }\n}\n\nconst classNames = {\n  wrapper: {\n    marginLeft: -2, // to align the failure icon with the collapsable section caret toggle\n  },\n};\n","import {\n  ArrowLeftIcon,\n  ArrowRightIcon,\n  CloseIcon,\n  DesignSystemContext,\n  RedoIcon,\n  UndoIcon,\n  ZoomInIcon,\n  ZoomOutIcon,\n} from '@databricks/design-system';\nimport { useContext } from 'react';\nimport RcImage from 'rc-image';\nimport './Image.css';\nimport { MLflowImagePreviewContainer } from '../../common/components/DesignSystemContainer';\n\nconst icons = {\n  rotateLeft: <UndoIcon />,\n  rotateRight: <RedoIcon />,\n  zoomIn: <ZoomInIcon />,\n  zoomOut: <ZoomOutIcon />,\n  close: <CloseIcon />,\n  left: <ArrowLeftIcon />,\n  right: <ArrowRightIcon />,\n};\n\nexport const ImagePreviewGroup = ({\n  children,\n  visible,\n  onVisibleChange,\n}: {\n  children: React.ReactNode;\n  visible: boolean;\n  onVisibleChange: (v: boolean) => void;\n}) => {\n  const { getImagePreviewPopupContainer } = useContext(MLflowImagePreviewContainer);\n\n  return (\n    <RcImage.PreviewGroup\n      icons={icons}\n      preview={{\n        visible: visible,\n        getContainer: getImagePreviewPopupContainer,\n        onVisibleChange: (v) => onVisibleChange(v),\n      }}\n    >\n      {children}\n    </RcImage.PreviewGroup>\n  );\n};\n\nexport { RcImage as Image };\n","import { ImageIcon, Spinner } from '@databricks/design-system';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { getArtifactLocationUrl } from '@mlflow/mlflow/src/common/utils/ArtifactUtils';\nimport type { ImageEntity } from '@mlflow/mlflow/src/experiment-tracking/types';\nimport { useState, useEffect } from 'react';\nimport { Typography } from '@databricks/design-system';\nimport { ImagePreviewGroup, Image } from '../../../../../shared/building_blocks/Image';\n\n/**\n * Despite image size being dynamic, we want to set a minimum size for the grid images.\n */\nexport const MIN_GRID_IMAGE_SIZE = 200;\n\ntype ImagePlotProps = {\n  imageUrl: string;\n  compressedImageUrl: string;\n  imageSize?: number;\n  maxImageSize?: number;\n};\n\nexport const ImagePlot = ({ imageUrl, compressedImageUrl, imageSize, maxImageSize }: ImagePlotProps) => {\n  const [previewVisible, setPreviewVisible] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  const [imageLoading, setImageLoading] = useState(true);\n\n  useEffect(() => {\n    // Load the image in the memory (should reuse the same request) in order to get the loading state\n    setImageLoading(true);\n    const img = new window.Image();\n    img.onload = () => setImageLoading(false);\n    img.onerror = () => setImageLoading(false);\n    img.src = compressedImageUrl;\n    return () => {\n      img.src = '';\n    };\n  }, [compressedImageUrl]);\n\n  return (\n    <div css={{ width: imageSize || '100%', height: imageSize || '100%' }}>\n      <div css={{ display: 'contents' }}>\n        {compressedImageUrl === undefined || imageLoading ? (\n          <div\n            css={{\n              width: '100%',\n              backgroundColor: theme.colors.backgroundSecondary,\n              display: 'flex',\n              aspectRatio: '1',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <Spinner />\n          </div>\n        ) : (\n          <div\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              width: imageSize || '100%',\n              aspectRatio: '1',\n              maxWidth: maxImageSize,\n              maxHeight: maxImageSize,\n              backgroundColor: theme.colors.backgroundSecondary,\n              '.rc-image': {\n                cursor: 'pointer',\n              },\n            }}\n          >\n            <ImagePreviewGroup visible={previewVisible} onVisibleChange={setPreviewVisible}>\n              <Image\n                src={compressedImageUrl}\n                preview={{ src: imageUrl }}\n                style={{ maxWidth: maxImageSize || '100%', maxHeight: maxImageSize || '100%' }}\n              />\n            </ImagePreviewGroup>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const ImagePlotWithHistory = ({\n  metadataByStep,\n  imageSize,\n  step,\n  runUuid,\n}: {\n  metadataByStep: Record<number, ImageEntity>;\n  imageSize?: number;\n  step: number;\n  runUuid: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  if (metadataByStep[step] === undefined) {\n    return (\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          textAlign: 'center',\n          width: imageSize,\n          backgroundColor: theme.colors.backgroundSecondary,\n          padding: theme.spacing.md,\n          aspectRatio: '1',\n        }}\n      >\n        <ImageIcon />\n        <FormattedMessage\n          defaultMessage=\"No image logged at this step\"\n          description=\"Experiment tracking > runs charts > charts > image plot with history > no image text\"\n        />\n      </div>\n    );\n  }\n  return (\n    <ImagePlot\n      imageUrl={getArtifactLocationUrl(metadataByStep[step].filepath, runUuid)}\n      compressedImageUrl={getArtifactLocationUrl(metadataByStep[step].compressed_filepath, runUuid)}\n      imageSize={imageSize}\n    />\n  );\n};\n\nexport const EmptyImageGridPlot = () => {\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%',\n        width: '100%',\n        fontSize: 16,\n      }}\n    >\n      <Typography.Title css={{ marginTop: 16 }} color=\"secondary\" level={3}>\n        Compare logged images\n      </Typography.Title>\n      <Typography.Text css={{ marginBottom: 16 }} color=\"secondary\">\n        Use the image grid chart to compare logged images across runs.\n      </Typography.Text>\n    </div>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getApis } from '../../experiment-tracking/reducers/Reducers';\nimport { Spinner } from './Spinner';\nimport { ErrorCodes } from '../constants';\nimport type { ErrorWrapper } from '../utils/ErrorWrapper';\nimport type { ReduxState } from '../../redux-types';\n\nexport const DEFAULT_ERROR_MESSAGE = 'A request error occurred.';\n\ntype RequestStateWrapperProps = {\n  children?: React.ReactNode;\n  customSpinner?: React.ReactNode;\n  shouldOptimisticallyRender?: boolean;\n  requests: any[];\n  requestIds?: string[];\n  requestIdsWith404sToIgnore?: string[];\n  description?: any; // TODO: PropTypes.oneOf(Object.values(LoadingDescription))\n  permissionDeniedView?: React.ReactNode;\n  suppressErrorThrow?: boolean;\n  customRequestErrorHandlerFn?: (\n    failedRequests: {\n      id: string;\n      active?: boolean;\n      error: Error | ErrorWrapper;\n    }[],\n  ) => void;\n};\n\ntype RequestStateWrapperState = any;\n\nexport class RequestStateWrapper extends Component<RequestStateWrapperProps, RequestStateWrapperState> {\n  static defaultProps = {\n    requests: [],\n    requestIdsWith404sToIgnore: [],\n    shouldOptimisticallyRender: false,\n  };\n\n  state = {\n    shouldRender: false,\n    shouldRenderError: false,\n  };\n\n  static getErrorRequests(requests: any, requestIdsWith404sToIgnore: any) {\n    return requests.filter((r: any) => {\n      if (r.error !== undefined) {\n        return !(\n          requestIdsWith404sToIgnore &&\n          requestIdsWith404sToIgnore.includes(r.id) &&\n          r.error.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n        );\n      }\n      return false;\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps: any) {\n    const shouldRender = nextProps.requests.length\n      ? nextProps.requests.every((r: any) => r && r.active === false)\n      : false;\n\n    const requestErrors = RequestStateWrapper.getErrorRequests(\n      nextProps.requests,\n      nextProps.requestIdsWith404sToIgnore,\n    );\n\n    return {\n      shouldRender,\n      shouldRenderError: requestErrors.length > 0,\n      requestErrors,\n    };\n  }\n\n  getRenderedContent() {\n    const { children, requests, customSpinner, permissionDeniedView, suppressErrorThrow, customRequestErrorHandlerFn } =\n      this.props;\n    // @ts-expect-error TS(2339): Property 'requestErrors' does not exist on type '{... Remove this comment to see the full error message\n    const { shouldRender, shouldRenderError, requestErrors } = this.state;\n    const permissionDeniedErrors = requestErrors.filter((failedRequest: any) => {\n      return failedRequest.error.getErrorCode() === ErrorCodes.PERMISSION_DENIED;\n    });\n\n    if (typeof children === 'function') {\n      return children(!shouldRender, shouldRenderError, requests, requestErrors);\n    } else if (shouldRender || shouldRenderError || this.props.shouldOptimisticallyRender) {\n      if (permissionDeniedErrors.length > 0 && permissionDeniedView) {\n        return permissionDeniedView;\n      }\n      if (shouldRenderError && !suppressErrorThrow) {\n        customRequestErrorHandlerFn ? customRequestErrorHandlerFn(requestErrors) : triggerError(requestErrors);\n      }\n\n      return children;\n    }\n\n    return customSpinner || <Spinner />;\n  }\n\n  render() {\n    return this.getRenderedContent();\n  }\n}\n\nexport const triggerError = (requests: any) => {\n  // This triggers the OOPS error boundary.\n  // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n  console.error('ERROR', requests);\n  throw Error(`${DEFAULT_ERROR_MESSAGE}: ${requests.error}`);\n};\n\nconst mapStateToProps = (state: ReduxState, ownProps: Omit<RequestStateWrapperProps, 'requests'>) => ({\n  requests: getApis(ownProps.requestIds, state),\n});\n\nexport default connect(mapStateToProps)(RequestStateWrapper);\n","import { css } from '@emotion/react';\nimport type { ReactNode } from 'react';\nimport React from 'react';\n\nimport type { ButtonProps } from '@databricks/design-system';\nimport { Button, LegacyTooltip } from '@databricks/design-system';\n\ntype SnippetActionButtonProps = Pick<ButtonProps, 'icon' | 'onClick' | 'href' | 'rel' | 'target'> & {\n  tooltipMessage: NonNullable<ReactNode>;\n};\n\nexport default function SnippetActionButton({ tooltipMessage, ...buttonProps }: SnippetActionButtonProps) {\n  const style = css({\n    zIndex: 1, // required for action buttons to be visible and float\n  });\n  return (\n    <LegacyTooltip title={tooltipMessage}>\n      <Button\n        componentId=\"codegen_web-shared_src_snippet_actions_snippetactionbutton.tsx_33\"\n        {...buttonProps}\n        css={style}\n      />\n    </LegacyTooltip>\n  );\n}\n","import React from 'react';\n\nimport type { ButtonProps } from '@databricks/design-system';\nimport { useCopyController } from '@databricks/web-shared/copy';\n\nimport SnippetActionButton from './SnippetActionButton';\n\nexport interface SnippetCopyActionProps extends ButtonProps {\n  /**\n   * The text to be copied into clipboard when action button is clicked.\n   */\n  copyText: string;\n  onClick?: (e: React.MouseEvent) => void;\n}\n\nexport function SnippetCopyAction({ copyText, onClick, ...props }: SnippetCopyActionProps) {\n  const { actionIcon, tooltipMessage, copy } = useCopyController(copyText);\n\n  return (\n    <SnippetActionButton\n      tooltipMessage={tooltipMessage}\n      icon={actionIcon}\n      onClick={(e) => {\n        copy();\n        onClick?.(e);\n      }}\n      {...props}\n    />\n  );\n}\n","import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport go from 'react-syntax-highlighter/dist/cjs/languages/prism/go';\nimport java from 'react-syntax-highlighter/dist/cjs/languages/prism/java';\nimport javascript from 'react-syntax-highlighter/dist/cjs/languages/prism/javascript';\nimport json from 'react-syntax-highlighter/dist/cjs/languages/prism/json';\nimport python from 'react-syntax-highlighter/dist/cjs/languages/prism/python';\nimport yaml from 'react-syntax-highlighter/dist/cjs/languages/prism/yaml';\nimport sql from 'react-syntax-highlighter/dist/cjs/languages/prism/sql';\n\nSyntaxHighlighter.registerLanguage('sql', sql);\nSyntaxHighlighter.registerLanguage('java', java);\nSyntaxHighlighter.registerLanguage('python', python);\nSyntaxHighlighter.registerLanguage('go', go);\nSyntaxHighlighter.registerLanguage('javascript', javascript);\nSyntaxHighlighter.registerLanguage('yaml', yaml);\nSyntaxHighlighter.registerLanguage('json', json);\n\nimport duotoneDarkStyle from './theme/databricks-duotone-dark';\nimport lightStyle from './theme/databricks-light';\nimport type { CSSProperties, ReactNode } from 'react';\nimport { pick } from 'lodash';\nexport type CodeSnippetTheme = 'duotoneDark' | 'light';\nexport const buttonBackgroundColorDark = 'rgba(140, 203, 255, 0)';\nexport const buttonColorDark = 'rgba(255, 255, 255, 0.84)';\nexport const buttonHoverColorDark = '#8ccbffcc';\nexport const buttonHoverBackgroundColorDark = 'rgba(140, 203, 255, 0.08)';\nexport const duboisAlertBackgroundColor = '#fff0f0';\nexport const snippetPadding = '24px';\nconst themesStyles: Record<CodeSnippetTheme, any> = {\n  light: lightStyle,\n  duotoneDark: duotoneDarkStyle,\n};\n\nexport type CodeSnippetLanguage = 'sql' | 'java' | 'python' | 'javascript' | 'go' | 'yaml' | 'text' | 'json';\n\nexport interface CodeSnippetProps {\n  /**\n   * The code string\n   */\n  children: string;\n  /**\n   * The actions that are displayed on the right top corner of the component\n   *  see `./actions` for built-in actions\n   */\n  actions?: NonNullable<ReactNode> | NonNullable<ReactNode>[];\n  /**\n   * The theme, default theme is `light`\n   */\n  theme?: CodeSnippetTheme;\n  /**\n   * Language of the code (`children`)\n   */\n  language: CodeSnippetLanguage;\n  /**\n   * Custom styles (passed to the internal `<pre>`)\n   */\n  style?: CSSProperties;\n  /**\n   * Whether to show line numbers on the left or not\n   */\n  showLineNumbers?: boolean;\n  /**\n   * Custom styles for line numbers\n   */\n  lineNumberStyle?: CSSProperties;\n  /**\n   * Boolean to specify whether to style the <code> block with white-space: pre-wrap or white-space: pre\n   */\n  wrapLongLines?: boolean;\n  /**\n   * Boolean that determines whether or not each line of code should be wrapped in a parent element\n   */\n  wrapLines?: boolean;\n  /**\n   * Props to pass to the line elements\n   */\n  lineProps?: React.HTMLProps<HTMLElement> | undefined;\n  /**\n   * Custom tag to use for the `<pre>` element\n   */\n  PreTag?: keyof JSX.IntrinsicElements | React.ComponentType<React.PropsWithChildren<any>> | undefined;\n}\n\n/**\n * `CodeSnippet` is used for highlighting code, use this instead of\n */\nexport function CodeSnippet({\n  theme = 'light',\n  language,\n  actions,\n  style,\n  children,\n  showLineNumbers,\n  lineNumberStyle,\n  wrapLongLines,\n  wrapLines,\n  PreTag,\n}: CodeSnippetProps) {\n  const customStyle = {\n    border: 'none',\n    borderRadius: 0,\n    margin: 0,\n    padding: snippetPadding,\n    ...style,\n  };\n  return (\n    <SyntaxHighlighter\n      showLineNumbers={showLineNumbers}\n      lineNumberStyle={lineNumberStyle}\n      language={language}\n      style={themesStyles[theme]}\n      customStyle={customStyle}\n      codeTagProps={{\n        style: pick(style, 'backgroundColor'),\n      }}\n      wrapLongLines={wrapLongLines}\n      wrapLines={wrapLines}\n      PreTag={PreTag}\n    >\n      {children}\n    </SyntaxHighlighter>\n  );\n}\n\nexport * from './actions/SnippetCopyAction';\n","import spinner from '../static/mlflow-spinner.png';\nimport type { Interpolation, Theme } from '@emotion/react';\nimport { keyframes } from '@emotion/react';\n\ntype Props = {\n  showImmediately?: boolean;\n};\n\nexport function Spinner({ showImmediately }: Props) {\n  return (\n    <div css={(theme) => styles.spinner(theme, showImmediately)}>\n      <img alt=\"Page loading...\" src={spinner} />\n    </div>\n  );\n}\n\nconst styles = {\n  spinner: (theme: Theme, immediate?: boolean): Interpolation<Theme> => ({\n    width: 100,\n    marginTop: 100,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n\n    img: {\n      position: 'absolute',\n      opacity: 0,\n      top: '50%',\n      left: '50%',\n      width: theme.general.heightBase * 2,\n      height: theme.general.heightBase * 2,\n      marginTop: -theme.general.heightBase,\n      marginLeft: -theme.general.heightBase,\n      animation: `${keyframes`\n          0% {\n            opacity: 1;\n          }\n          100% {\n            opacity: 1;\n            -webkit-transform: rotate(360deg);\n                transform: rotate(360deg);\n            }\n          `} 3s linear infinite`,\n      animationDelay: immediate ? '0s' : '0.5s',\n    },\n  }),\n};\n"],"names":["CopyActionButton","buttonProps","componentId","copyText","copyTooltip","isInsideInputGroup","onCopy","tooltipProps","actionIcon","copy","handleTooltipOpenChange","tooltipOpen","tooltipMessage","useCopyController","button","_jsx","Button","icon","onClick","size","inputGroupButton","children","Tooltip","content","onOpenChange","open","SectionErrorBoundary","React","constructor","args","state","error","componentDidCatch","errorInfo","this","setState","console","renderErrorMessage","props","showServerError","_jsxs","message","render","className","css","classNames","wrapper","href","Utils","getSupportPageUrl","target","marginLeft","icons","rotateLeft","UndoIcon","rotateRight","RedoIcon","zoomIn","ZoomInIcon","zoomOut","ZoomOutIcon","close","CloseIcon","left","ArrowLeftIcon","right","ArrowRightIcon","ImagePreviewGroup","visible","onVisibleChange","getImagePreviewPopupContainer","useContext","MLflowImagePreviewContainer","RcImage","PreviewGroup","preview","getContainer","v","MIN_GRID_IMAGE_SIZE","_ref","name","styles","ImagePlot","imageUrl","compressedImageUrl","imageSize","maxImageSize","previewVisible","setPreviewVisible","useState","theme","useDesignSystemTheme","imageLoading","setImageLoading","useEffect","img","window","Image","onload","onerror","src","_css","width","height","undefined","backgroundColor","colors","backgroundSecondary","display","aspectRatio","justifyContent","alignItems","Spinner","maxWidth","maxHeight","cursor","style","ImagePlotWithHistory","metadataByStep","step","runUuid","flexDirection","textAlign","padding","spacing","md","ImageIcon","FormattedMessage","id","defaultMessage","getArtifactLocationUrl","filepath","compressed_filepath","_ref2","_ref3","_ref4","EmptyImageGridPlot","Typography","Title","color","level","Text","RequestStateWrapper","Component","shouldRender","shouldRenderError","getErrorRequests","requests","requestIdsWith404sToIgnore","filter","r","includes","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","getDerivedStateFromProps","nextProps","length","every","active","requestErrors","getRenderedContent","customSpinner","permissionDeniedView","suppressErrorThrow","customRequestErrorHandlerFn","permissionDeniedErrors","failedRequest","PERMISSION_DENIED","shouldOptimisticallyRender","triggerError","defaultProps","Error","connect","mapStateToProps","ownProps","getApis","requestIds","SnippetActionButton","LegacyTooltip","title","SnippetCopyAction","e","SyntaxHighlighter","registerLanguage","sql","java","python","go","javascript","yaml","json","snippetPadding","themesStyles","light","lightStyle","duotoneDark","duotoneDarkStyle","CodeSnippet","language","actions","showLineNumbers","lineNumberStyle","wrapLongLines","wrapLines","PreTag","customStyle","border","borderRadius","margin","codeTagProps","pick","showImmediately","spinner","alt","immediate","marginTop","marginRight","position","opacity","top","general","heightBase","animation","keyframes","animationDelay"],"sourceRoot":""}