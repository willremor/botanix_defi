{"version":3,"file":"static/js/4461.04f6dccc.chunk.js","mappings":"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","sources":["common/components/error-boundaries/SectionErrorBoundary.tsx","shared/building_blocks/PreviewBadge.tsx","common/components/PageContainer.tsx","experiment-tracking/components/NotFoundPage.tsx","common/components/RequestStateWrapper.tsx","shared/building_blocks/PageHeader.tsx","experiment-tracking/components/MetricView.tsx","experiment-tracking/components/MetricPage.tsx","common/components/Spinner.tsx"],"sourcesContent":["/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport Utils from '../../utils/Utils';\n\ntype Props = {\n  showServerError?: boolean;\n};\n\ntype State = any;\n\nexport class SectionErrorBoundary extends React.Component<Props, State> {\n  state = { error: null };\n\n  componentDidCatch(error: any, errorInfo: any) {\n    this.setState({ error });\n    // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n    console.error(error, errorInfo);\n  }\n\n  renderErrorMessage(error: any) {\n    return this.props.showServerError ? <div>Error message: {error.message}</div> : '';\n  }\n\n  render() {\n    const { children } = this.props;\n    const { error } = this.state;\n    if (error) {\n      return (\n        <div>\n          <p>\n            <i\n              data-testid=\"icon-fail\"\n              className=\"fa fa-exclamation-triangle mlflow-icon-fail\"\n              css={classNames.wrapper}\n            />\n            <span> Something went wrong with this section. </span>\n            <span>If this error persists, please report an issue </span>\n            {/* Reported during ESLint upgrade */}\n            {/* eslint-disable-next-line react/jsx-no-target-blank */}\n            <a href={Utils.getSupportPageUrl()} target=\"_blank\">\n              here\n            </a>\n            .{this.renderErrorMessage(error)}\n          </p>\n        </div>\n      );\n    }\n\n    return children;\n  }\n}\n\nconst classNames = {\n  wrapper: {\n    marginLeft: -2, // to align the failure icon with the collapsable section caret toggle\n  },\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Tag, useDesignSystemTheme } from '@databricks/design-system';\nexport const PreviewBadge = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_shared_building_blocks_previewbadge.tsx_14\"\n      className={className}\n      css={{ marginLeft: theme.spacing.xs }}\n      color=\"turquoise\"\n    >\n      <FormattedMessage\n        defaultMessage=\"Experimental\"\n        description=\"Experimental badge shown for features which are experimental\"\n      />\n    </Tag>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { PageWrapper, Spacer } from '@databricks/design-system';\n\ntype OwnProps = {\n  usesFullHeight?: boolean;\n  children?: React.ReactNode;\n};\n\n// @ts-expect-error TS(2565): Property 'defaultProps' is used before being assig... Remove this comment to see the full error message\ntype Props = OwnProps & typeof PageContainer.defaultProps;\n\nexport function PageContainer(props: Props) {\n  const { usesFullHeight, ...restProps } = props;\n  return (\n    // @ts-expect-error TS(2322): Type '{ height: string; display: string; flexDirec... Remove this comment to see the full error message\n    <PageWrapper css={usesFullHeight ? styles.useFullHeightLayout : styles.wrapper}>\n      {/* @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message */}\n      <Spacer css={styles.fixedSpacer} />\n      {usesFullHeight ? props.children : <div {...restProps} css={styles.container} />}\n    </PageWrapper>\n  );\n}\n\nPageContainer.defaultProps = {\n  usesFullHeight: false,\n};\n\nconst styles = {\n  useFullHeightLayout: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    '&:last-child': {\n      flexGrow: 1,\n    },\n  },\n  wrapper: { flex: 1 },\n  fixedSpacer: {\n    // Ensure spacer's fixed height regardless of flex\n    flexShrink: 0,\n  },\n  container: {\n    width: '100%',\n    flexGrow: 1,\n    paddingBottom: 24,\n  },\n};\n","import React, { Component } from 'react';\n\nclass NotFoundPage extends Component {\n  render() {\n    return <div>Resource not found.</div>;\n  }\n}\n\nexport default NotFoundPage;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getApis } from '../../experiment-tracking/reducers/Reducers';\nimport { Spinner } from './Spinner';\nimport { ErrorCodes } from '../constants';\nimport type { ErrorWrapper } from '../utils/ErrorWrapper';\nimport type { ReduxState } from '../../redux-types';\n\nexport const DEFAULT_ERROR_MESSAGE = 'A request error occurred.';\n\ntype RequestStateWrapperProps = {\n  children?: React.ReactNode;\n  customSpinner?: React.ReactNode;\n  shouldOptimisticallyRender?: boolean;\n  requests: any[];\n  requestIds?: string[];\n  requestIdsWith404sToIgnore?: string[];\n  description?: any; // TODO: PropTypes.oneOf(Object.values(LoadingDescription))\n  permissionDeniedView?: React.ReactNode;\n  suppressErrorThrow?: boolean;\n  customRequestErrorHandlerFn?: (\n    failedRequests: {\n      id: string;\n      active?: boolean;\n      error: Error | ErrorWrapper;\n    }[],\n  ) => void;\n};\n\ntype RequestStateWrapperState = any;\n\nexport class RequestStateWrapper extends Component<RequestStateWrapperProps, RequestStateWrapperState> {\n  static defaultProps = {\n    requests: [],\n    requestIdsWith404sToIgnore: [],\n    shouldOptimisticallyRender: false,\n  };\n\n  state = {\n    shouldRender: false,\n    shouldRenderError: false,\n  };\n\n  static getErrorRequests(requests: any, requestIdsWith404sToIgnore: any) {\n    return requests.filter((r: any) => {\n      if (r.error !== undefined) {\n        return !(\n          requestIdsWith404sToIgnore &&\n          requestIdsWith404sToIgnore.includes(r.id) &&\n          r.error.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n        );\n      }\n      return false;\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps: any) {\n    const shouldRender = nextProps.requests.length\n      ? nextProps.requests.every((r: any) => r && r.active === false)\n      : false;\n\n    const requestErrors = RequestStateWrapper.getErrorRequests(\n      nextProps.requests,\n      nextProps.requestIdsWith404sToIgnore,\n    );\n\n    return {\n      shouldRender,\n      shouldRenderError: requestErrors.length > 0,\n      requestErrors,\n    };\n  }\n\n  getRenderedContent() {\n    const { children, requests, customSpinner, permissionDeniedView, suppressErrorThrow, customRequestErrorHandlerFn } =\n      this.props;\n    // @ts-expect-error TS(2339): Property 'requestErrors' does not exist on type '{... Remove this comment to see the full error message\n    const { shouldRender, shouldRenderError, requestErrors } = this.state;\n    const permissionDeniedErrors = requestErrors.filter((failedRequest: any) => {\n      return failedRequest.error.getErrorCode() === ErrorCodes.PERMISSION_DENIED;\n    });\n\n    if (typeof children === 'function') {\n      return children(!shouldRender, shouldRenderError, requests, requestErrors);\n    } else if (shouldRender || shouldRenderError || this.props.shouldOptimisticallyRender) {\n      if (permissionDeniedErrors.length > 0 && permissionDeniedView) {\n        return permissionDeniedView;\n      }\n      if (shouldRenderError && !suppressErrorThrow) {\n        customRequestErrorHandlerFn ? customRequestErrorHandlerFn(requestErrors) : triggerError(requestErrors);\n      }\n\n      return children;\n    }\n\n    return customSpinner || <Spinner />;\n  }\n\n  render() {\n    return this.getRenderedContent();\n  }\n}\n\nexport const triggerError = (requests: any) => {\n  // This triggers the OOPS error boundary.\n  // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n  console.error('ERROR', requests);\n  throw Error(`${DEFAULT_ERROR_MESSAGE}: ${requests.error}`);\n};\n\nconst mapStateToProps = (state: ReduxState, ownProps: Omit<RequestStateWrapperProps, 'requests'>) => ({\n  requests: getApis(ownProps.requestIds, state),\n});\n\nexport default connect(mapStateToProps)(RequestStateWrapper);\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport {\n  Breadcrumb,\n  Button,\n  Spacer,\n  Dropdown,\n  Menu,\n  Header,\n  OverflowIcon,\n  useDesignSystemTheme,\n  type HeaderProps,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { PreviewBadge } from './PreviewBadge';\n\ntype OverflowMenuProps = {\n  menu?: {\n    id: string;\n    itemName: React.ReactNode;\n    onClick?: (...args: any[]) => any;\n    href?: string;\n  }[];\n};\n\nexport function OverflowMenu({ menu }: OverflowMenuProps) {\n  const overflowMenu = (\n    <Menu>\n      {/* @ts-expect-error TS(2532): Object is possibly 'undefined'. */}\n      {menu.map(({ id, itemName, onClick, href, ...otherProps }) => (\n        // @ts-expect-error TS(2769): No overload matches this call.\n        <Menu.Item key={id} onClick={onClick} href={href} data-testid={id} {...otherProps}>\n          {itemName}\n        </Menu.Item>\n      ))}\n    </Menu>\n  );\n\n  // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n  return menu.length > 0 ? (\n    <Dropdown overlay={overflowMenu} trigger={['click']} placement=\"bottomLeft\" arrow>\n      <Button\n        componentId=\"codegen_mlflow_app_src_shared_building_blocks_pageheader.tsx_54\"\n        icon={<OverflowIcon />}\n        data-testid=\"overflow-menu-trigger\"\n        aria-label=\"Open header dropdown menu\"\n      />\n    </Dropdown>\n  ) : null;\n}\n\ntype PageHeaderProps = Pick<HeaderProps, 'dangerouslyAppendEmotionCSS'> & {\n  title: React.ReactNode;\n  breadcrumbs?: React.ReactNode[];\n  preview?: boolean;\n  feedbackOrigin?: string;\n  infoPopover?: React.ReactNode;\n  children?: React.ReactNode;\n  spacerSize?: 'xs' | 'sm' | 'md' | 'lg';\n  hideSpacer?: boolean;\n  titleAddOns?: React.ReactNode | React.ReactNode[];\n};\n\n/**\n * A page header that includes:\n *   - title,\n *   - optional breadcrumb content,\n *   - optional preview mark,\n *   - optional feedback origin: shows the \"Send feedback\" button when not empty, and\n *   - optional info popover, safe to have link inside.\n */\nexport function PageHeader(props: PageHeaderProps) {\n  const {\n    title, // required\n    breadcrumbs = [],\n    titleAddOns = [],\n    preview,\n    children,\n    spacerSize,\n    hideSpacer = false,\n    dangerouslyAppendEmotionCSS,\n  } = props;\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  return (\n    <>\n      <Header\n        breadcrumbs={\n          breadcrumbs.length > 0 && (\n            <Breadcrumb includeTrailingCaret>\n              {breadcrumbs.map((b, i) => (\n                <Breadcrumb.Item key={i}>{b}</Breadcrumb.Item>\n              ))}\n            </Breadcrumb>\n          )\n        }\n        buttons={children}\n        title={title}\n        // prettier-ignore\n        titleAddOns={\n          <>\n            {preview && <PreviewBadge css={{ marginLeft: 0 }} />}\n            {titleAddOns}\n          </>\n        }\n        dangerouslyAppendEmotionCSS={dangerouslyAppendEmotionCSS}\n      />\n      <Spacer\n        // @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message\n        css={{\n          // Ensure spacer's fixed height\n          flexShrink: 0,\n          ...(hideSpacer ? { display: 'none' } : {}),\n        }}\n        size={spacerSize}\n      />\n    </>\n  );\n}\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\nimport Utils from '../../common/utils/Utils';\nimport './MetricView.css';\nimport { getExperiment, getRunInfo } from '../reducers/Reducers';\nimport MetricsPlotPanel from './MetricsPlotPanel';\nimport { Link } from '../../common/utils/RoutingUtils';\nimport type { Location } from '../../common/utils/RoutingUtils';\nimport { PageHeader } from '../../shared/building_blocks/PageHeader';\nimport Routes from '../routes';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\n\ntype MetricViewImplProps = {\n  experiments: any[]; // TODO: PropTypes.instanceOf(Experiment)\n  experimentIds: string[];\n  comparedExperimentIds?: string[];\n  hasComparedExperimentsBefore?: boolean;\n  runUuids: string[];\n  runNames: string[];\n  metricKey: string;\n  location: Location;\n};\n\nexport class MetricViewImpl extends Component<MetricViewImplProps> {\n  getCompareRunsPageText(numRuns: any, numExperiments: any) {\n    return numExperiments > 1 ? (\n      <FormattedMessage\n        defaultMessage=\"Comparing {numRuns} Runs from {numExperiments} Experiments\"\n        // eslint-disable-next-line max-len\n        description=\"Breadcrumb title for compare runs page with multiple experiments\"\n        values={{ numRuns, numExperiments }}\n      />\n    ) : (\n      <FormattedMessage\n        defaultMessage=\"Comparing {numRuns} Runs from 1 Experiment\"\n        description=\"Breadcrumb title for compare runs page with single experiment\"\n        values={{ numRuns }}\n      />\n    );\n  }\n\n  hasMultipleExperiments() {\n    return this.props.experimentIds.length > 1;\n  }\n\n  getRunPageLink() {\n    const { experimentIds, runUuids, runNames } = this.props;\n\n    if (!runUuids || runUuids.length === 0) {\n      return null;\n    }\n\n    if (runUuids.length === 1) {\n      return <Link to={Routes.getRunPageRoute(experimentIds[0], runUuids[0])}>{runNames[0]}</Link>;\n    }\n\n    const text = this.getCompareRunsPageText(runUuids.length, experimentIds.length);\n    return <Link to={Routes.getCompareRunPageRoute(runUuids, experimentIds)}>{text}</Link>;\n  }\n\n  getCompareExperimentsPageLinkText(numExperiments: any) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"Displaying Runs from {numExperiments} Experiments\"\n        // eslint-disable-next-line max-len\n        description=\"Breadcrumb nav item to link to the compare-experiments page on compare runs page\"\n        values={{ numExperiments }}\n      />\n    );\n  }\n\n  getExperimentPageLink() {\n    const { comparedExperimentIds, hasComparedExperimentsBefore, experimentIds, experiments } = this.props;\n\n    if (hasComparedExperimentsBefore && comparedExperimentIds) {\n      const text = this.getCompareExperimentsPageLinkText(comparedExperimentIds.length);\n      return <Link to={Routes.getCompareExperimentsPageRoute(comparedExperimentIds)}>{text}</Link>;\n    }\n\n    if (this.hasMultipleExperiments()) {\n      const text = this.getCompareExperimentsPageLinkText(experimentIds.length);\n      return <Link to={Routes.getCompareExperimentsPageRoute(experimentIds)}>{text}</Link>;\n    }\n\n    return <Link to={Routes.getExperimentPageRoute(experimentIds[0])}>{experiments[0].name}</Link>;\n  }\n\n  render() {\n    const { experimentIds, runUuids, metricKey, location } = this.props;\n    const { selectedMetricKeys } = Utils.getMetricPlotStateFromUrl(location.search);\n    const title =\n      selectedMetricKeys.length > 1 ? (\n        <FormattedMessage defaultMessage=\"Metrics\" description=\"Title for metrics page\" />\n      ) : (\n        selectedMetricKeys[0]\n      );\n    const breadcrumbs = [this.getExperimentPageLink(), this.getRunPageLink()];\n    return (\n      <div>\n        <PageHeader title={title} breadcrumbs={breadcrumbs} hideSpacer />\n        <MetricsPlotPanel {...{ experimentIds, runUuids, metricKey }} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const { comparedExperimentIds, hasComparedExperimentsBefore } = state.compareExperiments;\n  const { experimentIds, runUuids } = ownProps;\n  const experiments =\n    experimentIds !== null ? experimentIds.map((experimentId: any) => getExperiment(experimentId, state)) : null;\n  const runNames = runUuids.map((runUuid: any) => {\n    const runInfo = getRunInfo(runUuid, state);\n    return Utils.getRunDisplayName(runInfo, runUuid);\n  });\n  return { experiments, runNames, comparedExperimentIds, hasComparedExperimentsBefore };\n};\n\nexport const MetricView = withRouterNext(connect(mapStateToProps)(MetricViewImpl));\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport qs from 'qs';\nimport { getExperimentApi, getRunApi } from '../actions';\nimport RequestStateWrapper from '../../common/components/RequestStateWrapper';\nimport NotFoundPage from './NotFoundPage';\nimport { MetricView } from './MetricView';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport { PageContainer } from '../../common/components/PageContainer';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\nimport type { WithRouterNextProps } from '../../common/utils/withRouterNext';\nimport { withErrorBoundary } from '../../common/utils/withErrorBoundary';\nimport ErrorUtils from '../../common/utils/ErrorUtils';\nimport Utils from '../../common/utils/Utils';\nimport { FormattedMessage, injectIntl, type IntlShape } from 'react-intl';\nimport { ErrorWrapper } from '../../common/utils/ErrorWrapper';\nimport { DangerIcon, Empty } from '@databricks/design-system';\n\ntype MetricPageImplProps = {\n  runUuids: string[];\n  metricKey: string;\n  experimentIds?: string[];\n  dispatch: (...args: any[]) => any;\n  loadError?: unknown;\n  intl: IntlShape;\n};\n\nexport class MetricPageImpl extends Component<MetricPageImplProps> {\n  requestIds: any;\n\n  constructor(props: MetricPageImplProps) {\n    super(props);\n    this.requestIds = [];\n  }\n\n  fetchExperiments() {\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    return this.props.experimentIds.map((experimentId) => {\n      const experimentRequestId = getUUID();\n      this.props.dispatch(getExperimentApi(experimentId, experimentRequestId)).catch((e: Error | ErrorWrapper) => {\n        if (e instanceof ErrorWrapper) {\n          // Async API errors are handled by the RequestStateWrapper\n          return;\n        }\n        throw e;\n      });\n      return experimentRequestId;\n    });\n  }\n\n  componentDidMount() {\n    if (this.props.loadError instanceof Error) {\n      const message = this.props.intl.formatMessage({\n        defaultMessage: 'Error during metric page load: invalid URL',\n        description: 'Error message when loading metric page fails',\n      });\n      throw new Error(message);\n    }\n    if (this.props.experimentIds !== null) {\n      const getExperimentsRequestIds = this.fetchExperiments();\n      this.requestIds.push(...getExperimentsRequestIds);\n    }\n    this.props.runUuids.forEach((runUuid) => {\n      // Fetch tags for each run. TODO: it'd be nice if we could just fetch the tags directly\n      const getRunRequestId = getUUID();\n      this.requestIds.push(getRunRequestId);\n      this.props.dispatch(getRunApi(runUuid, getRunRequestId)).catch((e: Error | ErrorWrapper) => {\n        if (e instanceof ErrorWrapper) {\n          // Async API errors are handled by the RequestStateWrapper\n          return;\n        }\n        throw e;\n      });\n    });\n  }\n\n  renderPageContent() {\n    const { runUuids } = this.props;\n    return runUuids.length >= 1 ? (\n      <MetricView\n        runUuids={this.props.runUuids}\n        metricKey={this.props.metricKey}\n        experimentIds={this.props.experimentIds}\n      />\n    ) : (\n      <NotFoundPage />\n    );\n  }\n\n  render() {\n    return (\n      <PageContainer>\n        <RequestStateWrapper\n          requestIds={this.requestIds}\n          // eslint-disable-next-line no-trailing-spaces\n          customRequestErrorHandlerFn={(failedRequests) => {\n            const firstFoundError = failedRequests.find((request) => request.error)?.error;\n            if (firstFoundError instanceof ErrorWrapper) {\n              // Extract and throw actual Error based on the ErrorWrapper\n              throw firstFoundError.translateToErrorInstance();\n            }\n            if (firstFoundError) {\n              throw firstFoundError;\n            }\n          }}\n        >\n          {this.renderPageContent()}\n        </RequestStateWrapper>\n      </PageContainer>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: WithRouterNextProps<{ metricKey: string }>) => {\n  const { location } = ownProps;\n  const searchValues = qs.parse(location.search);\n  try {\n    // @ts-expect-error TS(2345): Argument of type 'string | string[] | ParsedQs | P... Remove this comment to see the full error message\n    const runUuids = JSON.parse(searchValues['?runs']);\n    // @ts-expect-error TS(2345): Argument of type 'string | string[] | ParsedQs | P... Remove this comment to see the full error message\n    const metricKey = JSON.parse(searchValues['metric']);\n    let experimentIds = null;\n    if (searchValues.hasOwnProperty('experiments')) {\n      // @ts-expect-error TS(2345): Argument of type 'string | string[] | ParsedQs | P... Remove this comment to see the full error message\n      experimentIds = JSON.parse(searchValues['experiments']);\n    }\n\n    return {\n      runUuids,\n      metricKey,\n      experimentIds,\n    };\n  } catch (e) {\n    return {\n      runUuids: [],\n      metricKey: '',\n      experimentIds: [],\n      loadError: e,\n    };\n  }\n};\n\nconst MetricPageWithRouter = withRouterNext(connect(mapStateToProps)(injectIntl(MetricPageImpl)));\n\nconst MetricPageErrorPage = ({ error }: { error: Error }) => (\n  <div css={{ height: '100%', alignItems: 'center', justifyContent: 'center', display: 'flex' }}>\n    <Empty\n      title={\n        <FormattedMessage\n          defaultMessage=\"Error while loading metric page\"\n          description=\"Title of the error state on the metric page\"\n        />\n      }\n      description={error.message}\n      image={<DangerIcon />}\n    />\n  </div>\n);\n\nexport const MetricPage = withErrorBoundary(\n  ErrorUtils.mlflowServices.EXPERIMENTS,\n  MetricPageWithRouter,\n  undefined,\n  MetricPageErrorPage,\n);\n\nexport default MetricPage;\n","import spinner from '../static/mlflow-spinner.png';\nimport type { Interpolation, Theme } from '@emotion/react';\nimport { keyframes } from '@emotion/react';\n\ntype Props = {\n  showImmediately?: boolean;\n};\n\nexport function Spinner({ showImmediately }: Props) {\n  return (\n    <div css={(theme) => styles.spinner(theme, showImmediately)}>\n      <img alt=\"Page loading...\" src={spinner} />\n    </div>\n  );\n}\n\nconst styles = {\n  spinner: (theme: Theme, immediate?: boolean): Interpolation<Theme> => ({\n    width: 100,\n    marginTop: 100,\n    marginLeft: 'auto',\n    marginRight: 'auto',\n\n    img: {\n      position: 'absolute',\n      opacity: 0,\n      top: '50%',\n      left: '50%',\n      width: theme.general.heightBase * 2,\n      height: theme.general.heightBase * 2,\n      marginTop: -theme.general.heightBase,\n      marginLeft: -theme.general.heightBase,\n      animation: `${keyframes`\n          0% {\n            opacity: 1;\n          }\n          100% {\n            opacity: 1;\n            -webkit-transform: rotate(360deg);\n                transform: rotate(360deg);\n            }\n          `} 3s linear infinite`,\n      animationDelay: immediate ? '0s' : '0.5s',\n    },\n  }),\n};\n"],"names":["SectionErrorBoundary","React","constructor","args","state","error","componentDidCatch","errorInfo","this","setState","console","renderErrorMessage","props","showServerError","_jsxs","children","message","render","_jsx","className","css","classNames","wrapper","href","Utils","getSupportPageUrl","target","marginLeft","PreviewBadge","theme","useDesignSystemTheme","Tag","componentId","_css","spacing","xs","color","FormattedMessage","id","defaultMessage","PageContainer","usesFullHeight","restProps","PageWrapper","styles","useFullHeightLayout","Spacer","fixedSpacer","container","defaultProps","height","display","flexDirection","flexGrow","flex","flexShrink","width","paddingBottom","NotFoundPage","Component","RequestStateWrapper","shouldRender","shouldRenderError","getErrorRequests","requests","requestIdsWith404sToIgnore","filter","r","undefined","includes","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","getDerivedStateFromProps","nextProps","length","every","active","requestErrors","getRenderedContent","customSpinner","permissionDeniedView","suppressErrorThrow","customRequestErrorHandlerFn","permissionDeniedErrors","failedRequest","PERMISSION_DENIED","shouldOptimisticallyRender","triggerError","Spinner","Error","connect","mapStateToProps","ownProps","getApis","requestIds","OverflowMenu","menu","overflowMenu","Menu","map","itemName","onClick","otherProps","Item","Dropdown","overlay","trigger","placement","arrow","Button","icon","OverflowIcon","_ref","name","PageHeader","title","breadcrumbs","titleAddOns","preview","spacerSize","hideSpacer","dangerouslyAppendEmotionCSS","useIntl","_Fragment","Header","Breadcrumb","includeTrailingCaret","b","i","buttons","size","MetricViewImpl","getCompareRunsPageText","numRuns","numExperiments","values","hasMultipleExperiments","experimentIds","getRunPageLink","runUuids","runNames","Link","to","Routes","getRunPageRoute","text","getCompareRunPageRoute","getCompareExperimentsPageLinkText","getExperimentPageLink","comparedExperimentIds","hasComparedExperimentsBefore","experiments","getCompareExperimentsPageRoute","getExperimentPageRoute","metricKey","location","selectedMetricKeys","getMetricPlotStateFromUrl","search","MetricsPlotPanel","MetricView","withRouterNext","compareExperiments","experimentId","getExperiment","runUuid","runInfo","getRunInfo","getRunDisplayName","MetricPageImpl","super","fetchExperiments","experimentRequestId","getUUID","dispatch","getExperimentApi","catch","e","ErrorWrapper","componentDidMount","loadError","intl","formatMessage","getExperimentsRequestIds","push","forEach","getRunRequestId","getRunApi","renderPageContent","failedRequests","_failedRequests$find","firstFoundError","find","request","translateToErrorInstance","MetricPageWithRouter","searchValues","qs","JSON","parse","hasOwnProperty","injectIntl","MetricPage","withErrorBoundary","ErrorUtils","mlflowServices","EXPERIMENTS","MetricPageErrorPage","Empty","description","image","DangerIcon","showImmediately","spinner","alt","src","immediate","marginTop","marginRight","img","position","opacity","top","left","general","heightBase","animation","keyframes","animationDelay"],"sourceRoot":""}