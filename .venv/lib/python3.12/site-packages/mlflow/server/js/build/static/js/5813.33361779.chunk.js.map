{"version":3,"file":"static/js/5813.33361779.chunk.js","mappings":"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","sources":["experiment-tracking/components/experiment-page/components/traces-v3/utils/dateUtils.ts","experiment-tracking/hooks/useMonitoringFilters.tsx","experiment-tracking/components/traces/quickstart/TraceTableQuickstart.utils.tsx","experiment-tracking/components/traces/quickstart/TraceTableGenericQuickstart.tsx","experiment-tracking/components/traces/quickstart/TracesViewTableNoTracesQuickstart.tsx","experiment-tracking/components/traces/quickstart/TracesViewTableNoTracesQuickstartContext.tsx","experiment-tracking/hooks/useMonitoringConfig.tsx","experiment-tracking/components/experiment-page/components/traces-v3/TracesV3EmptyState.tsx","experiment-tracking/components/experiment-page/components/traces-v3/TracesV3Logs.tsx","experiment-tracking/components/experiment-page/components/traces-v3/hooks/useSetInitialTimeFilter.ts"],"sourcesContent":["import type { START_TIME_LABEL } from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringFilters';\nimport type { IntlShape } from 'react-intl';\n\nexport type TimeBucket = 'SECOND' | 'MINUTE' | 'HOUR' | 'DAY' | 'WEEK' | 'MONTH';\n\nexport interface NamedDateFilter {\n  key: START_TIME_LABEL;\n  label: string;\n}\n\nexport function getNamedDateFilters(intl: IntlShape): NamedDateFilter[] {\n  return [\n    {\n      key: 'LAST_HOUR',\n      label: intl.formatMessage({\n        defaultMessage: 'Last hour',\n        description: 'Option for the start select dropdown to filter runs from the last hour',\n      }),\n    },\n    {\n      key: 'LAST_24_HOURS',\n      label: intl.formatMessage({\n        defaultMessage: 'Last 24 hours',\n        description: 'Option for the start select dropdown to filter runs from the last 24 hours',\n      }),\n    },\n    {\n      key: 'LAST_7_DAYS',\n      label: intl.formatMessage({\n        defaultMessage: 'Last 7 days',\n        description: 'Option for the start select dropdown to filter runs from the last 7 days',\n      }),\n    },\n    {\n      key: 'LAST_30_DAYS',\n      label: intl.formatMessage({\n        defaultMessage: 'Last 30 days',\n        description: 'Option for the start select dropdown to filter runs from the last 30 days',\n      }),\n    },\n    {\n      key: 'LAST_YEAR',\n      label: intl.formatMessage({\n        defaultMessage: 'Last year',\n        description: 'Option for the start select dropdown to filter runs since the last 1 year',\n      }),\n    },\n    {\n      key: 'ALL',\n      label: intl.formatMessage({\n        defaultMessage: 'All',\n        description: 'Option for the start select dropdown to filter runs from the beginning of time',\n      }),\n    },\n    {\n      key: 'CUSTOM',\n      label: intl.formatMessage({\n        defaultMessage: 'Custom',\n        description: 'Option for the start select dropdown to filter runs with a custom time range',\n      }),\n    },\n  ];\n}\n","import { useCallback, useMemo } from 'react';\nimport { useSearchParams } from '../../common/utils/RoutingUtils';\nimport { useMonitoringConfig } from './useMonitoringConfig';\n\nexport const START_TIME_LABEL_QUERY_PARAM_KEY = 'startTimeLabel';\nconst START_TIME_QUERY_PARAM_KEY = 'startTime';\nconst END_TIME_QUERY_PARAM_KEY = 'endTime';\n\nexport type START_TIME_LABEL =\n  | 'LAST_HOUR'\n  | 'LAST_24_HOURS'\n  | 'LAST_7_DAYS'\n  | 'LAST_30_DAYS'\n  | 'LAST_YEAR'\n  | 'ALL'\n  | 'CUSTOM';\nexport const DEFAULT_START_TIME_LABEL: START_TIME_LABEL = 'LAST_7_DAYS';\n\nexport interface MonitoringFilters {\n  startTimeLabel?: START_TIME_LABEL;\n  startTime?: string;\n  endTime?: string;\n}\n\n/**\n * Query param-powered hook that returns the monitoring filters from the URL.\n */\nexport const useMonitoringFilters = () => {\n  const monitoringConfig = useMonitoringConfig();\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const startTimeLabel =\n    (searchParams.get(START_TIME_LABEL_QUERY_PARAM_KEY) as START_TIME_LABEL | undefined) || DEFAULT_START_TIME_LABEL;\n  let startTime = searchParams.get(START_TIME_QUERY_PARAM_KEY) || undefined;\n  let endTime = searchParams.get(END_TIME_QUERY_PARAM_KEY) ?? undefined;\n  if (startTimeLabel !== 'CUSTOM') {\n    const absoluteStartEndTime = getAbsoluteStartEndTime(monitoringConfig.dateNow, { startTimeLabel });\n    startTime = absoluteStartEndTime.startTime;\n    endTime = absoluteStartEndTime.endTime;\n  } else {\n    startTime = searchParams.get(START_TIME_QUERY_PARAM_KEY) || undefined;\n    endTime = searchParams.get(END_TIME_QUERY_PARAM_KEY) ?? undefined;\n  }\n\n  const monitoringFilters = useMemo<MonitoringFilters>(\n    () => ({\n      startTimeLabel,\n      startTime,\n      endTime,\n    }),\n    [startTimeLabel, startTime, endTime],\n  );\n\n  const setMonitoringFilters = useCallback(\n    (monitoringFilters: MonitoringFilters | undefined, replace = false) => {\n      setSearchParams(\n        (params) => {\n          if (monitoringFilters?.startTime === undefined) {\n            params.delete(START_TIME_QUERY_PARAM_KEY);\n          } else if (monitoringFilters.startTimeLabel === 'CUSTOM') {\n            params.set(START_TIME_QUERY_PARAM_KEY, monitoringFilters.startTime);\n          }\n          if (monitoringFilters?.endTime === undefined) {\n            params.delete(END_TIME_QUERY_PARAM_KEY);\n          } else if (monitoringFilters.startTimeLabel === 'CUSTOM') {\n            params.set(END_TIME_QUERY_PARAM_KEY, monitoringFilters.endTime);\n          }\n          if (monitoringFilters?.startTimeLabel === undefined) {\n            params.delete(START_TIME_LABEL_QUERY_PARAM_KEY);\n          } else {\n            params.set(START_TIME_LABEL_QUERY_PARAM_KEY, monitoringFilters.startTimeLabel);\n          }\n          return params;\n        },\n        { replace },\n      );\n    },\n    [setSearchParams],\n  );\n\n  return [monitoringFilters, setMonitoringFilters] as const;\n};\n\nexport function getAbsoluteStartEndTime(\n  dateNow: Date,\n  monitoringFilters: MonitoringFilters,\n): {\n  startTime: string | undefined;\n  endTime: string | undefined;\n} {\n  if (monitoringFilters.startTimeLabel && monitoringFilters.startTimeLabel !== 'CUSTOM') {\n    return startTimeLabelToStartEndTime(dateNow, monitoringFilters.startTimeLabel);\n  }\n  return {\n    startTime: monitoringFilters.startTime,\n    endTime: monitoringFilters.endTime,\n  };\n}\n\nexport function startTimeLabelToStartEndTime(\n  dateNow: Date,\n  startTimeLabel: START_TIME_LABEL,\n): {\n  startTime: string | undefined;\n  endTime: string | undefined;\n} {\n  switch (startTimeLabel) {\n    case 'LAST_HOUR':\n      return {\n        startTime: new Date(new Date(dateNow).setUTCHours(new Date().getUTCHours() - 1)).toISOString(),\n        endTime: dateNow.toISOString(),\n      };\n    case 'LAST_24_HOURS':\n      return {\n        startTime: new Date(new Date(dateNow).setUTCDate(new Date().getUTCDate() - 1)).toISOString(),\n        endTime: dateNow.toISOString(),\n      };\n    case 'LAST_7_DAYS':\n      return {\n        startTime: new Date(new Date(dateNow).setUTCDate(new Date().getUTCDate() - 7)).toISOString(),\n        endTime: dateNow.toISOString(),\n      };\n    case 'LAST_30_DAYS':\n      return {\n        startTime: new Date(new Date(dateNow).setUTCDate(new Date().getUTCDate() - 30)).toISOString(),\n        endTime: dateNow.toISOString(),\n      };\n    case 'LAST_YEAR':\n      return {\n        startTime: new Date(new Date(dateNow).setUTCFullYear(new Date().getUTCFullYear() - 1)).toISOString(),\n        endTime: dateNow.toISOString(),\n      };\n    case 'ALL':\n      return {\n        startTime: undefined,\n        endTime: dateNow.toISOString(),\n      };\n    default:\n      throw new Error(`Unexpected start time label: ${startTimeLabel}`);\n  }\n}\n","import { Typography } from '@databricks/design-system';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport type QUICKSTART_FLAVOR =\n  | 'openai'\n  | 'langchain'\n  | 'llama_index'\n  | 'dspy'\n  | 'crewai'\n  | 'autogen'\n  | 'anthropic'\n  | 'bedrock'\n  | 'litellm'\n  | 'gemini'\n  | 'custom';\n\nexport const QUICKSTART_CONTENT: Record<\n  QUICKSTART_FLAVOR,\n  {\n    minVersion: string;\n    getContent: (baseComponentId?: string) => React.ReactNode;\n    getCodeSource: () => string;\n  }\n> = {\n  openai: {\n    minVersion: '2.15.1',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for OpenAI API calls by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the OpenAI package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.openai.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () =>\n      `from openai import OpenAI\n\nmlflow.openai.autolog()\n\n# Ensure that the \"OPENAI_API_KEY\" environment variable is set\nclient = OpenAI()\n\nmessages = [\n  {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n  {\"role\": \"user\", \"content\": \"Hello!\"}\n]\n\n# Inputs and outputs of the API request will be logged in a trace\nclient.chat.completions.create(model=\"gpt-4o-mini\", messages=messages)`,\n  },\n  langchain: {\n    // the autologging integration was really introduced in\n    // 2.14.0, but it does not support newer versions of langchain\n    // so effectively that version will not work with the code snippet\n    minVersion: '2.17.2',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for LangChain or LangGraph invocations by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the LangChain/LangGraph package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.langchain.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () =>\n      `from langchain_openai import OpenAI\nfrom langchain_core.prompts import PromptTemplate\n\nmlflow.langchain.autolog()\n\n# Ensure that the \"OPENAI_API_KEY\" environment variable is set\nllm = OpenAI()\nprompt = PromptTemplate.from_template(\"Answer the following question: {question}\")\nchain = prompt | llm\n\n# Invoking the chain will cause a trace to be logged\nchain.invoke(\"What is MLflow?\")`,\n  },\n  llama_index: {\n    minVersion: '2.15.1',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for LlamaIndex queries by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the LlamaIndex package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.llama_index.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () =>\n      `from llama_index.core import Document, VectorStoreIndex\n\nmlflow.llama_index.autolog()\n\n# Ensure that the \"OPENAI_API_KEY\" environment variable is set\nindex = VectorStoreIndex.from_documents([Document.example()])\nquery_engine = index.as_query_engine()\n\n# Querying the engine will cause a trace to be logged\nquery_engine.query(\"What is LlamaIndex?\")`,\n  },\n  dspy: {\n    minVersion: '2.18.0',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for DSPy executions by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the DSPy package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.dspy.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () =>\n      `import dspy\n\nmlflow.dspy.autolog()\n\n# Configure the LLM to use. Please ensure that\n# the OPENAI_API_KEY environment variable is set\nlm = dspy.LM(\"openai/gpt-4o-mini\")\ndspy.configure(lm=lm)\n\n# Define a simple chain-of-thought model and run it\nmath = dspy.ChainOfThought(\"question -> answer: float\")\nquestion = \"Two dice are tossed. What is the probability that the sum equals two?\"\n\n# All intermediate outputs from the execution will be logged\nmath(question=question)`,\n  },\n  crewai: {\n    minVersion: '2.19.0',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for CrewAI executions by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the CrewAI package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.crewai.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () => `from crewai import Agent, Crew, Process, Task\n\nmlflow.crewai.autolog()\n\ncity_selection_agent = Agent(\n    role=\"City selection expert\",\n    goal=\"Select the best city based on weather, season, and prices\",\n    backstory=\"An expert in analyzing travel data to pick ideal destinations\",\n    allow_delegation=True,\n    verbose=True,\n)\n\nlocal_expert = Agent(\n    role=\"Local expert\",\n    goal=\"Provide the best insights about the selected city\",\n    backstory=\"A local guide with extensive information about the city\",\n    verbose=True,\n)\n  \nplan_trip = Task(\n    name=\"Plan a trip\",\n    description=\"\"\"Plan a trip to a city based on weather, prices, and best local attractions. \n    Please consult with a local expert when researching things to do.\"\"\",\n    expected_output=\"A short summary of the trip destination and key things to do\",\n    agent=city_selection_agent,\n)\n\ncrew = Crew(\n  agents=[\n    city_selection_agent,\n    local_expert,\n  ],\n  tasks=[plan_trip],\n  process=Process.sequential\n)\n\n# Ensure the \"OPENAI_API_KEY\" environment variable is set\n# before kicking off the crew. All intermediate agent outputs\n# will be logged in the resulting trace.\ncrew.kickoff()`,\n  },\n  autogen: {\n    minVersion: '2.16.2',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for AutoGen conversations by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the AutoGen package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.autogen.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () =>\n      `import os\nfrom autogen import AssistantAgent, UserProxyAgent\n\nmlflow.autogen.autolog()\n\n# Ensure that the \"OPENAI_API_KEY\" environment variable is set\nllm_config = { \"model\": \"gpt-4o-mini\", \"api_key\": os.environ[\"OPENAI_API_KEY\"] }\nassistant = AssistantAgent(\"assistant\", llm_config = llm_config)\nuser_proxy = UserProxyAgent(\"user_proxy\", code_execution_config = False)\n\n# All intermediate executions within the chat session will be logged\nuser_proxy.initiate_chat(assistant, message = \"What is MLflow?\", max_turns = 1)`,\n  },\n  anthropic: {\n    minVersion: '2.19.0',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for Anthropic API calls by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the Anthropic package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.anthropic.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () => `import os\nimport anthropic\n\n# Enable auto-tracing for Anthropic\nmlflow.anthropic.autolog()\n\n# Configure your API key (please ensure that the \"ANTHROPIC_API_KEY\" environment variable is set)\nclient = anthropic.Anthropic(api_key=os.environ[\"ANTHROPIC_API_KEY\"])\n\n# Inputs and outputs of API calls will be logged as a trace\nmessage = client.messages.create(\n    model=\"claude-3-5-sonnet-20241022\",\n    max_tokens=1024,\n    messages=[\n        {\"role\": \"user\", \"content\": \"Hello, Claude\"},\n    ],\n)`,\n  },\n  bedrock: {\n    minVersion: '2.20.0',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for Bedrock conversations by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the Bedrock package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.bedrock.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () => `import boto3\n\nmlflow.bedrock.autolog()\n\n# Ensure that your boto3 client has the necessary auth information\nbedrock = boto3.client(\n    service_name=\"bedrock-runtime\",\n    region_name=\"<REPLACE_WITH_YOUR_AWS_REGION>\",\n)\n\nmodel = \"anthropic.claude-3-5-sonnet-20241022-v2:0\"\nmessages = [{ \"role\": \"user\", \"content\": [{\"text\": \"Hello!\"}]}]\n\n# All intermediate executions within the chat session will be logged\nbedrock.converse(modelId=model, messages=messages)`,\n  },\n  litellm: {\n    minVersion: '2.18.0',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for LiteLLM API calls by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for the LiteLLM package using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.litellm.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () => `import litellm\n\nmlflow.litellm.autolog()\n\n# Ensure that the \"OPENAI_API_KEY\" environment variable is set\nmessages = [{\"role\": \"user\", \"content\": \"Hello!\"}]\n\n# Inputs and outputs of the API request will be logged in a trace\nlitellm.completion(model=\"gpt-4o-mini\", messages=messages)`,\n  },\n  gemini: {\n    minVersion: '2.18.0',\n    getContent: () => (\n      <FormattedMessage\n        defaultMessage=\"Automatically log traces for Gemini conversations by calling the {code} function. For example:\"\n        description=\"Description of how to log traces for API calls to Google's Gemini API using MLflow autologging. This message is followed by a code example.\"\n        values={{\n          code: <code>mlflow.gemini.autolog()</code>,\n        }}\n      />\n    ),\n    getCodeSource: () => `import google.genai as genai\n\nmlflow.gemini.autolog()\n\n# Replace \"GEMINI_API_KEY\" with your API key\nclient = genai.Client(api_key=\"GEMINI_API_KEY\")\n\n# Inputs and outputs of the API request will be logged in a trace\nclient.models.generate_content(model=\"gemini-1.5-flash\", contents=\"Hello!\")`,\n  },\n  custom: {\n    minVersion: '2.14.3',\n    getContent: (baseComponentId) => (\n      <>\n        <Typography.Paragraph css={{ maxWidth: 800 }}>\n          <FormattedMessage\n            defaultMessage=\"To manually instrument your own traces, the most convenient method is to use the {code} function decorator. This will cause the inputs and outputs of the function to be captured in the trace.\"\n            description=\"Description of how to log custom code traces using MLflow. This message is followed by a code example.\"\n            values={{\n              code: <code>@mlflow.trace</code>,\n            }}\n          />\n        </Typography.Paragraph>\n        <Typography.Paragraph css={{ maxWidth: 800 }}>\n          <FormattedMessage\n            defaultMessage=\"For more complex use cases, MLflow also provides granular APIs that can be used to control tracing behavior. For more information, please visit the <a>official documentation</a> on fluent and client APIs for MLflow Tracing.\"\n            description=\"Explanation of alternative APIs for custom tracing in MLflow. The link leads to the MLflow documentation for the user to learn more.\"\n            values={{\n              a: (text: string) => (\n                <Typography.Link\n                  title=\"official documentation\"\n                  componentId={`${baseComponentId}.traces_table.custom_tracing_docs_link`}\n                  href=\"https://mlflow.org/docs/latest/llms/tracing/index.html#tracing-fluent-apis\"\n                  openInNewTab\n                >\n                  {text}\n                </Typography.Link>\n              ),\n            }}\n          />\n        </Typography.Paragraph>\n      </>\n    ),\n    getCodeSource: () =>\n      `@mlflow.trace\ndef foo(a):\nreturn a + bar(a)\n\n# Various attributes can be passed to the decorator\n# to modify the information contained in the span\n@mlflow.trace(name = \"custom_name\", attributes = { \"key\": \"value\" })\ndef bar(b):\nreturn b + 1\n\n# Invoking the traced function will cause a trace to be logged\nfoo(1)`,\n  },\n};\n","import { CopyIcon, Typography, useDesignSystemTheme, Alert } from '@databricks/design-system';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\n\nimport { QUICKSTART_CONTENT } from './TraceTableQuickstart.utils';\nimport { FormattedMessage } from 'react-intl';\nimport { useTracesViewTableNoTracesQuickstartContext } from './TracesViewTableNoTracesQuickstartContext';\n\nexport const TraceTableGenericQuickstart = ({\n  flavorName,\n  baseComponentId,\n}: {\n  flavorName: keyof typeof QUICKSTART_CONTENT;\n  baseComponentId: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { getContent, getCodeSource, minVersion } = QUICKSTART_CONTENT[flavorName];\n  const { displayVersionWarnings = true } = useTracesViewTableNoTracesQuickstartContext();\n  const content = getContent(baseComponentId);\n  const versionCheck = `import mlflow\nfrom packaging.version import Version\n\nassert Version(mlflow.__version__) >= Version(\"${minVersion}\"), (\n  \"This feature requires MLflow version ${minVersion} or newer. \"\n  \"Please run '%pip install -U mlflow' in a notebook cell, \"\n  \"and restart the kernel when the command finishes.\"\n)\n\n`;\n\n  const code = versionCheck + getCodeSource();\n\n  const alertContent = (\n    <FormattedMessage\n      defaultMessage=\"This example requires MLflow version {minVersion} or newer. Please run {installCommand} in a notebook cell if your MLflow version is older than this, and restart the kernel when the command finishes.\"\n      description=\"Alert description informing the user of how to upgrade MLflow to the minimum required version\"\n      values={{\n        minVersion,\n        installCommand: <Typography.Text code>%pip install -U mlflow</Typography.Text>,\n      }}\n    />\n  );\n\n  return (\n    <div>\n      {displayVersionWarnings && (\n        <Alert\n          componentId={`${baseComponentId}.traces_table.${flavorName}_quickstart_alert`}\n          css={{ marginBottom: theme.spacing.md, maxWidth: 800 }}\n          closable={false}\n          message={\n            <FormattedMessage\n              defaultMessage=\"Requires MLflow >= {minVersion}\"\n              description=\"Alert title informing the user of the minimum required MLflow version to run the code example\"\n              values={{ minVersion }}\n            />\n          }\n          description={alertContent}\n          type=\"info\"\n        />\n      )}\n      <Typography.Text css={{ maxWidth: 800 }}>{content}</Typography.Text>\n      <div css={{ position: 'relative', width: 'min-content' }}>\n        <CopyButton\n          componentId={`${baseComponentId}.traces_table.${flavorName}_quickstart_snippet_copy`}\n          css={{ zIndex: 1, position: 'absolute', top: theme.spacing.xs, right: theme.spacing.xs }}\n          showLabel={false}\n          copyText={code}\n          icon={<CopyIcon />}\n        />\n        <CodeSnippet\n          showLineNumbers\n          theme={theme.isDarkMode ? 'duotoneDark' : 'light'}\n          style={{\n            padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n            marginTop: theme.spacing.md,\n          }}\n          language=\"python\"\n        >\n          {code}\n        </CodeSnippet>\n      </div>\n    </div>\n  );\n};\n","import { Header, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { isNil } from 'lodash';\nimport { TraceTableGenericQuickstart } from './TraceTableGenericQuickstart';\nimport { useTracesViewTableNoTracesQuickstartContext } from './TracesViewTableNoTracesQuickstartContext';\n\nexport const TracesViewTableNoTracesQuickstart = ({\n  baseComponentId,\n  runUuid,\n}: {\n  baseComponentId: string;\n  runUuid?: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { introductionText } = useTracesViewTableNoTracesQuickstartContext();\n\n  return (\n    <div css={{ overflow: 'auto', paddingBottom: theme.spacing.lg }}>\n      <Header\n        title={\n          <FormattedMessage\n            defaultMessage=\"No traces recorded\"\n            description=\"Message displayed when there are no traces logged to the experiment\"\n          />\n        }\n        titleElementLevel={3}\n      />\n      <Typography.Text\n        css={{\n          display: 'block',\n          marginTop: theme.spacing.md,\n          marginBottom: theme.spacing.md,\n          maxWidth: 800,\n        }}\n      >\n        {introductionText ? (\n          introductionText\n        ) : (\n          <FormattedMessage\n            defaultMessage=\"This tab displays all the traces logged to this {isRun, select, true {run} other {experiment}}. Follow the steps below to log your first trace. For more information about MLflow Tracing, visit the <a>MLflow documentation</a>.\"\n            description=\"Message that explains the function of the 'Traces' tab in the MLflow UI. This message is followed by a tutorial explaining how to get started with MLflow Tracing.\"\n            values={{\n              isRun: !isNil(runUuid),\n              a: (text: string) => (\n                <Typography.Link\n                  componentId={`${baseComponentId}.traces_table.quickstart_docs_link`}\n                  href=\"https://mlflow.org/docs/latest/llms/tracing/index.html\"\n                  openInNewTab\n                >\n                  {text}\n                </Typography.Link>\n              ),\n            }}\n          />\n        )}\n      </Typography.Text>\n      <TraceTableGenericQuickstart flavorName=\"custom\" baseComponentId={baseComponentId} />\n    </div>\n  );\n};\n","import React, { createContext, type ReactNode, useContext } from 'react';\n\nconst TracesViewTableNoTracesQuickstartContext = createContext<{\n  introductionText?: ReactNode;\n  displayVersionWarnings?: boolean;\n}>({});\n\n/**\n * Allows to alter default behavior of a quickstart tutorial for logging traces\n */\nexport const TracesViewTableNoTracesQuickstartContextProvider = ({\n  children,\n  introductionText,\n  displayVersionWarnings,\n}: {\n  children: ReactNode;\n  introductionText?: ReactNode;\n  displayVersionWarnings?: boolean;\n}) => {\n  return (\n    <TracesViewTableNoTracesQuickstartContext.Provider value={{ introductionText, displayVersionWarnings }}>\n      {children}\n    </TracesViewTableNoTracesQuickstartContext.Provider>\n  );\n};\n\nexport const useTracesViewTableNoTracesQuickstartContext = () => useContext(TracesViewTableNoTracesQuickstartContext);\n","import { merge } from 'lodash';\nimport type { ReactNode } from 'react';\nimport React, { createContext, useContext, useMemo, useCallback } from 'react';\n\n// A global config that is used as a context for monitoring components.\nexport interface MonitoringConfig {\n  dateNow: Date;\n  lastRefreshTime: number;\n  refresh: () => void;\n}\n\n// Define a default configuration\nconst getDefaultConfig = (): MonitoringConfig => {\n  return {\n    dateNow: new Date(),\n    lastRefreshTime: Date.now(),\n    refresh: () => {},\n  };\n};\n\n// Create the context with a default value\nconst MonitoringConfigContext = createContext<MonitoringConfig>(getDefaultConfig());\n\ninterface MonitoringConfigProviderProps {\n  config?: Partial<MonitoringConfig>;\n  children: ReactNode;\n}\n\nexport const MonitoringConfigProvider: React.FC<React.PropsWithChildren<MonitoringConfigProviderProps>> = ({\n  config,\n  children,\n}) => {\n  const defaultConfig = getDefaultConfig();\n  // Remove undefined values from the config object\n\n  const mergedConfig = merge({}, defaultConfig, config);\n\n  const [lastRefreshTime, setLastRefreshTime] = React.useState(mergedConfig.lastRefreshTime);\n\n  // Derive dateNow from lastRefreshTime\n  const dateNow = useMemo(() => new Date(lastRefreshTime), [lastRefreshTime]);\n\n  // Single refresh method\n  const refresh = useCallback(() => {\n    setLastRefreshTime(Date.now());\n  }, []);\n\n  return (\n    <MonitoringConfigContext.Provider\n      value={{\n        ...mergedConfig,\n        dateNow,\n        lastRefreshTime,\n        refresh,\n      }}\n    >\n      {children}\n    </MonitoringConfigContext.Provider>\n  );\n};\n\nexport const useMonitoringConfig = (): MonitoringConfig => {\n  const context = useContext(MonitoringConfigContext);\n\n  if (!context) {\n    return getDefaultConfig(); // Fallback to defaults if no provider is found\n  }\n\n  return context;\n};\n","import { useMonitoringFilters } from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringFilters';\nimport { useSearchMlflowTraces } from '@databricks/web-shared/genai-traces-table';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { Button, DangerIcon, Empty, ParagraphSkeleton, SearchIcon } from '@databricks/design-system';\nimport { getNamedDateFilters } from './utils/dateUtils';\nimport { useGetExperimentQuery } from '@mlflow/mlflow/src/experiment-tracking/hooks/useExperimentQuery';\nimport { useMemo } from 'react';\nimport { useIntl } from '@databricks/i18n';\nimport { getExperimentKindFromTags } from '@mlflow/mlflow/src/experiment-tracking/utils/ExperimentKindUtils';\nimport { ExperimentKind } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { TracesViewTableNoTracesQuickstart } from '../../../traces/quickstart/TracesViewTableNoTracesQuickstart';\n\nexport const TracesV3EmptyState = (props: { experimentIds: string[]; loggedModelId?: string }) => {\n  const { experimentIds, loggedModelId } = props;\n\n  const intl = useIntl();\n\n  const {\n    data: traces,\n    isLoading,\n    error,\n  } = useSearchMlflowTraces({\n    experimentId: experimentIds[0],\n    pageSize: 1,\n    limit: 1,\n    ...(loggedModelId ? { filterByLoggedModelId: loggedModelId } : {}),\n  });\n\n  // check experiment tags to see if it's genai or custom\n  const { data: experimentEntity, loading: isExperimentLoading } = useGetExperimentQuery({\n    experimentId: experimentIds[0],\n  });\n  const experiment = experimentEntity;\n  const experimentKind = getExperimentKindFromTags(experiment?.tags);\n\n  const isGenAIExperiment =\n    experimentKind === ExperimentKind.GENAI_DEVELOPMENT || experimentKind === ExperimentKind.GENAI_DEVELOPMENT_INFERRED;\n\n  const hasMoreTraces = traces && traces.length > 0;\n\n  const [monitoringFilters, setMonitoringFilters] = useMonitoringFilters();\n\n  const namedDateFilters = useMemo(() => getNamedDateFilters(intl), [intl]);\n\n  const button = (\n    <Button componentId=\"traces-v3-empty-state-button\" onClick={() => setMonitoringFilters({ startTimeLabel: 'ALL' })}>\n      <FormattedMessage defaultMessage=\"View All\" description=\"View all traces button\" />\n    </Button>\n  );\n\n  if (isLoading || isExperimentLoading) {\n    return (\n      <>\n        {[...Array(10).keys()].map((i) => (\n          <ParagraphSkeleton label=\"Loading...\" key={i} seed={`s-${i}`} />\n        ))}\n      </>\n    );\n  }\n\n  if (error) {\n    return (\n      <Empty\n        image={<DangerIcon />}\n        title={\n          <FormattedMessage defaultMessage=\"Fetching traces failed\" description=\"Fetching traces failed message\" />\n        }\n        description={String(error)}\n      />\n    );\n  }\n\n  if (hasMoreTraces) {\n    const image = <SearchIcon />;\n    const description = (\n      <FormattedMessage\n        defaultMessage='Some traces are hidden by your time range filter: \"{filterLabel}\"'\n        description=\"Message shown when traces are hidden by time filter\"\n        values={{\n          filterLabel: (\n            <strong>\n              {namedDateFilters.find((namedDateFilter) => namedDateFilter.key === monitoringFilters.startTimeLabel)\n                ?.label || ''}\n            </strong>\n          ),\n        }}\n      />\n    );\n    return (\n      <Empty\n        title={<FormattedMessage defaultMessage=\"No traces found\" description=\"No traces found message\" />}\n        description={description}\n        button={button}\n        image={image}\n      />\n    );\n  }\n  return <TracesViewTableNoTracesQuickstart baseComponentId=\"mlflow.traces\" />;\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { Empty, ParagraphSkeleton, DangerIcon } from '@databricks/design-system';\nimport type { TracesTableColumn, TraceActions } from '@databricks/web-shared/genai-traces-table';\nimport {\n  EXECUTION_DURATION_COLUMN_ID,\n  GenAiTracesMarkdownConverterProvider,\n  GenAITracesTableBodyContainer,\n  GenAITracesTableToolbar,\n  REQUEST_TIME_COLUMN_ID,\n  STATE_COLUMN_ID,\n  RESPONSE_COLUMN_ID,\n  TracesTableColumnType,\n  useSearchMlflowTraces,\n  useSelectedColumns,\n  getEvalTabTotalTracesLimit,\n  GenAITracesTableProvider,\n  useFilters,\n  getTracesTagKeys,\n  useTableSort,\n  useMlflowTracesTableMetadata,\n  TOKENS_COLUMN_ID,\n  invalidateMlflowSearchTracesCache,\n} from '@databricks/web-shared/genai-traces-table';\nimport { useMarkdownConverter } from '@mlflow/mlflow/src/common/utils/MarkdownUtils';\nimport { shouldEnableTraceInsights } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { useDeleteTracesMutation } from '../../../evaluations/hooks/useDeleteTraces';\nimport { useEditExperimentTraceTags } from '../../../traces/hooks/useEditExperimentTraceTags';\nimport { useIntl } from '@databricks/i18n';\nimport { getTrace } from '@mlflow/mlflow/src/experiment-tracking/utils/TraceUtils';\nimport { TracesV3EmptyState } from './TracesV3EmptyState';\nimport { useQueryClient } from '@databricks/web-shared/query-client';\nimport { useSetInitialTimeFilter } from './hooks/useSetInitialTimeFilter';\n\nconst TracesV3LogsImpl = React.memo(\n  ({\n    experimentId,\n    endpointName,\n    timeRange,\n    loggedModelId,\n  }: {\n    experimentId: string;\n    endpointName: string;\n    timeRange?: { startTime: string | undefined; endTime: string | undefined };\n    loggedModelId?: string;\n  }) => {\n    const makeHtmlFromMarkdown = useMarkdownConverter();\n    const intl = useIntl();\n    const enableTraceInsights = shouldEnableTraceInsights();\n\n    // Get metadata\n    const {\n      assessmentInfos,\n      allColumns,\n      totalCount,\n      isLoading: isMetadataLoading,\n      error: metadataError,\n      isEmpty,\n      tableFilterOptions,\n    } = useMlflowTracesTableMetadata({\n      experimentId,\n      timeRange,\n      filterByLoggedModelId: loggedModelId,\n    });\n\n    // Setup table states\n    const [searchQuery, setSearchQuery] = useState<string>('');\n    const [filters, setFilters] = useFilters();\n    const queryClient = useQueryClient();\n\n    const defaultSelectedColumns = useCallback((columns: TracesTableColumn[]) => {\n      return columns.filter(\n        (col) =>\n          col.type === TracesTableColumnType.ASSESSMENT ||\n          col.type === TracesTableColumnType.EXPECTATION ||\n          col.type === TracesTableColumnType.INPUT ||\n          (col.type === TracesTableColumnType.TRACE_INFO &&\n            [\n              EXECUTION_DURATION_COLUMN_ID,\n              RESPONSE_COLUMN_ID,\n              REQUEST_TIME_COLUMN_ID,\n              STATE_COLUMN_ID,\n              TOKENS_COLUMN_ID,\n            ].includes(col.id)) ||\n          col.type === TracesTableColumnType.INTERNAL_MONITOR_REQUEST_TIME,\n      );\n    }, []);\n\n    const { selectedColumns, toggleColumns, setSelectedColumns } = useSelectedColumns(\n      experimentId,\n      allColumns,\n      defaultSelectedColumns,\n    );\n\n    const [tableSort, setTableSort] = useTableSort(selectedColumns, {\n      key: REQUEST_TIME_COLUMN_ID,\n      type: TracesTableColumnType.TRACE_INFO,\n      asc: false,\n    });\n\n    // Set the initial time filter when there are no traces\n    const { isInitialTimeFilterLoading } = useSetInitialTimeFilter({\n      experimentId,\n      isTracesEmpty: isEmpty,\n      isTraceMetadataLoading: isMetadataLoading,\n    });\n\n    // Get traces data\n    const {\n      data: traceInfos,\n      isLoading: traceInfosLoading,\n      error: traceInfosError,\n    } = useSearchMlflowTraces({\n      experimentId,\n      currentRunDisplayName: endpointName,\n      searchQuery,\n      filters,\n      timeRange,\n      filterByLoggedModelId: loggedModelId,\n      tableSort,\n    });\n\n    const deleteTracesMutation = useDeleteTracesMutation();\n\n    // TODO: We should update this to use web-shared/unified-tagging components for the\n    // tag editor and react-query mutations for the apis.\n    const { showEditTagsModalForTrace, EditTagsModal } = useEditExperimentTraceTags({\n      onSuccess: () => invalidateMlflowSearchTracesCache({ queryClient }),\n      existingTagKeys: getTracesTagKeys(traceInfos || []),\n      useV3Apis: true,\n    });\n\n    const traceActions: TraceActions = useMemo(() => {\n      return {\n        deleteTracesAction: {\n          deleteTraces: (experimentId: string, traceIds: string[]) =>\n            deleteTracesMutation.mutateAsync({ experimentId, traceRequestIds: traceIds }),\n        },\n        exportToEvals: {\n          exportToEvalsInstanceEnabled: true,\n          getTrace,\n        },\n        editTags: {\n          showEditTagsModalForTrace,\n          EditTagsModal,\n        },\n      };\n    }, [deleteTracesMutation, showEditTagsModalForTrace, EditTagsModal]);\n\n    const countInfo = useMemo(() => {\n      return {\n        currentCount: traceInfos?.length,\n        logCountLoading: traceInfosLoading,\n        totalCount: totalCount,\n        maxAllowedCount: getEvalTabTotalTracesLimit(),\n      };\n    }, [traceInfos, totalCount, traceInfosLoading]);\n\n    const isTableLoading = traceInfosLoading || isInitialTimeFilterLoading || isMetadataLoading;\n    const tableError = traceInfosError || metadataError;\n    const isTableEmpty = isEmpty && !isTableLoading && !tableError;\n\n    // Helper function to render the main content based on current state\n    const renderMainContent = () => {\n      // If isEmpty and not enableTraceInsights, show empty state without navigation\n      if (!enableTraceInsights && isTableEmpty) {\n        return <TracesV3EmptyState experimentIds={[experimentId]} loggedModelId={loggedModelId} />;\n      }\n      // Default traces view with optional navigation\n      return (\n        <div\n          css={{\n            display: 'flex',\n            flex: 1,\n            overflow: 'hidden',\n          }}\n        >\n          <div\n            css={{\n              display: 'flex',\n              flex: 1,\n              overflow: 'hidden',\n            }}\n          >\n            {isTableLoading ? (\n              <div\n                css={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  width: '100%',\n                  gap: '8px',\n                  padding: '16px',\n                }}\n              >\n                {[...Array(10).keys()].map((i) => (\n                  <ParagraphSkeleton label=\"Loading...\" key={i} seed={`s-${i}`} />\n                ))}\n              </div>\n            ) : tableError ? (\n              <div\n                css={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  width: '100%',\n                  height: '100%',\n                }}\n              >\n                <Empty\n                  image={<DangerIcon />}\n                  title={intl.formatMessage({\n                    defaultMessage: 'Fetching traces failed',\n                    description: 'Evaluation review > evaluations list > error state title',\n                  })}\n                  description={tableError.message}\n                />\n              </div>\n            ) : (\n              <GenAiTracesMarkdownConverterProvider makeHtml={makeHtmlFromMarkdown}>\n                <GenAITracesTableBodyContainer\n                  experimentId={experimentId}\n                  allColumns={allColumns}\n                  currentTraceInfoV3={traceInfos || []}\n                  currentRunDisplayName={endpointName}\n                  getTrace={getTrace}\n                  assessmentInfos={assessmentInfos}\n                  setFilters={setFilters}\n                  filters={filters}\n                  selectedColumns={selectedColumns}\n                  tableSort={tableSort}\n                />\n              </GenAiTracesMarkdownConverterProvider>\n            )}\n          </div>\n        </div>\n      );\n    };\n\n    // Early return for empty state without insights\n    if (!enableTraceInsights && isTableEmpty) {\n      return <TracesV3EmptyState experimentIds={[experimentId]} loggedModelId={loggedModelId} />;\n    }\n\n    // Single unified layout with toolbar and content\n    return (\n      <GenAITracesTableProvider>\n        <div\n          css={{\n            overflowY: 'hidden',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <GenAITracesTableToolbar\n            experimentId={experimentId}\n            searchQuery={searchQuery}\n            setSearchQuery={setSearchQuery}\n            filters={filters}\n            setFilters={setFilters}\n            assessmentInfos={assessmentInfos}\n            traceInfos={traceInfos}\n            tableFilterOptions={tableFilterOptions}\n            countInfo={countInfo}\n            traceActions={traceActions}\n            tableSort={tableSort}\n            setTableSort={setTableSort}\n            allColumns={allColumns}\n            selectedColumns={selectedColumns}\n            toggleColumns={toggleColumns}\n            setSelectedColumns={setSelectedColumns}\n            isMetadataLoading={isMetadataLoading}\n            metadataError={metadataError}\n          />\n          {renderMainContent()}\n        </div>\n      </GenAITracesTableProvider>\n    );\n  },\n);\n\nexport const TracesV3Logs = TracesV3LogsImpl;\n","import { useEffect } from 'react';\nimport { useSearchParams } from '../../../../../../common/utils/RoutingUtils';\nimport { useSearchMlflowTraces } from '@databricks/web-shared/genai-traces-table';\nimport { REQUEST_TIME_COLUMN_ID, TracesTableColumnType } from '@databricks/web-shared/genai-traces-table';\nimport { useMonitoringFilters } from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringFilters';\nimport { START_TIME_LABEL_QUERY_PARAM_KEY } from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringFilters';\n\nconst DEFAULT_EMPTY_CHECK_PAGE_SIZE = 500;\n\n/**\n * Hook for setting the default time filter when there are no traces using the default time filter.\n */\nexport const useSetInitialTimeFilter = ({\n  experimentId,\n  isTracesEmpty,\n  isTraceMetadataLoading,\n}: {\n  experimentId: string;\n  isTracesEmpty: boolean;\n  isTraceMetadataLoading: boolean;\n}) => {\n  const [searchParams] = useSearchParams();\n  const [monitoringFilters, setMonitoringFilters] = useMonitoringFilters();\n\n  // Additional hook for fetching traces when there is no time range filters set in the\n  // url params and no traces.\n  const shouldFetchForEmptyCheck =\n    isTracesEmpty && !isTraceMetadataLoading && !searchParams.has(START_TIME_LABEL_QUERY_PARAM_KEY);\n\n  const { data: emptyCheckTraces, isLoading: emptyCheckLoading } = useSearchMlflowTraces({\n    experimentId,\n    tableSort: {\n      key: REQUEST_TIME_COLUMN_ID,\n      type: TracesTableColumnType.TRACE_INFO,\n      asc: false,\n    },\n    disabled: !shouldFetchForEmptyCheck,\n    limit: DEFAULT_EMPTY_CHECK_PAGE_SIZE,\n    pageSize: DEFAULT_EMPTY_CHECK_PAGE_SIZE,\n  });\n\n  // Set monitoring filters based on oldest trace from empty check\n  if (shouldFetchForEmptyCheck && emptyCheckTraces && emptyCheckTraces.length > 0 && !emptyCheckLoading) {\n    // Since traces are sorted in descending order (newest first), the oldest trace is the last one while newest is the first one\n    const oldestTrace = emptyCheckTraces[emptyCheckTraces.length - 1];\n\n    setMonitoringFilters({\n      startTimeLabel: 'CUSTOM',\n      startTime: oldestTrace.request_time,\n      endTime: new Date().toISOString(),\n    });\n  }\n\n  // Return loading state so component can show loading skeleton\n  const isInitialTimeFilterLoading = shouldFetchForEmptyCheck && emptyCheckLoading;\n\n  return {\n    isInitialTimeFilterLoading,\n  };\n};\n"],"names":["getNamedDateFilters","intl","key","label","formatMessage","id","defaultMessage","START_TIME_LABEL_QUERY_PARAM_KEY","START_TIME_QUERY_PARAM_KEY","END_TIME_QUERY_PARAM_KEY","DEFAULT_START_TIME_LABEL","useMonitoringFilters","_searchParams$get","monitoringConfig","useMonitoringConfig","searchParams","setSearchParams","useSearchParams","startTimeLabel","get","startTime","undefined","endTime","absoluteStartEndTime","getAbsoluteStartEndTime","dateNow","_searchParams$get2","monitoringFilters","useMemo","setMonitoringFilters","useCallback","replace","params","delete","set","Date","setUTCHours","getUTCHours","toISOString","setUTCDate","getUTCDate","setUTCFullYear","getUTCFullYear","Error","startTimeLabelToStartEndTime","_ref","name","styles","_ref2","QUICKSTART_CONTENT","openai","minVersion","getContent","_jsx","FormattedMessage","values","code","children","getCodeSource","langchain","llama_index","dspy","crewai","autogen","anthropic","bedrock","litellm","gemini","custom","baseComponentId","_jsxs","_Fragment","Typography","Paragraph","css","a","text","Link","title","componentId","href","openInNewTab","TraceTableGenericQuickstart","flavorName","theme","useDesignSystemTheme","displayVersionWarnings","useTracesViewTableNoTracesQuickstartContext","content","alertContent","installCommand","Text","Alert","_css","marginBottom","spacing","md","maxWidth","closable","message","description","type","CopyButton","zIndex","position","top","xs","right","showLabel","copyText","icon","CopyIcon","CodeSnippet","showLineNumbers","isDarkMode","style","padding","sm","marginTop","language","TracesViewTableNoTracesQuickstart","runUuid","introductionText","overflow","paddingBottom","lg","Header","titleElementLevel","display","isRun","isNil","TracesViewTableNoTracesQuickstartContext","createContext","TracesViewTableNoTracesQuickstartContextProvider","Provider","value","useContext","getDefaultConfig","lastRefreshTime","now","refresh","MonitoringConfigContext","MonitoringConfigProvider","config","defaultConfig","mergedConfig","merge","setLastRefreshTime","React","context","TracesV3EmptyState","props","experimentIds","loggedModelId","useIntl","data","traces","isLoading","error","useSearchMlflowTraces","experimentId","pageSize","limit","filterByLoggedModelId","experimentEntity","loading","isExperimentLoading","useGetExperimentQuery","experiment","experimentKind","getExperimentKindFromTags","tags","hasMoreTraces","ExperimentKind","GENAI_DEVELOPMENT","GENAI_DEVELOPMENT_INFERRED","length","namedDateFilters","button","Button","onClick","Array","keys","map","i","ParagraphSkeleton","seed","Empty","image","DangerIcon","String","_namedDateFilters$fin","SearchIcon","filterLabel","find","namedDateFilter","_ref3","_ref4","_ref5","TracesV3Logs","endpointName","timeRange","makeHtmlFromMarkdown","useMarkdownConverter","enableTraceInsights","shouldEnableTraceInsights","assessmentInfos","allColumns","totalCount","isMetadataLoading","metadataError","isEmpty","tableFilterOptions","useMlflowTracesTableMetadata","searchQuery","setSearchQuery","useState","filters","setFilters","useFilters","queryClient","useQueryClient","defaultSelectedColumns","columns","filter","col","TracesTableColumnType","ASSESSMENT","EXPECTATION","INPUT","TRACE_INFO","EXECUTION_DURATION_COLUMN_ID","RESPONSE_COLUMN_ID","REQUEST_TIME_COLUMN_ID","STATE_COLUMN_ID","TOKENS_COLUMN_ID","includes","INTERNAL_MONITOR_REQUEST_TIME","selectedColumns","toggleColumns","setSelectedColumns","useSelectedColumns","tableSort","setTableSort","useTableSort","asc","isInitialTimeFilterLoading","useSetInitialTimeFilter","isTracesEmpty","isTraceMetadataLoading","shouldFetchForEmptyCheck","has","emptyCheckTraces","emptyCheckLoading","disabled","request_time","traceInfos","traceInfosLoading","traceInfosError","currentRunDisplayName","deleteTracesMutation","useDeleteTracesMutation","showEditTagsModalForTrace","EditTagsModal","useEditExperimentTraceTags","onSuccess","invalidateMlflowSearchTracesCache","existingTagKeys","getTracesTagKeys","useV3Apis","traceActions","deleteTracesAction","deleteTraces","traceIds","mutateAsync","traceRequestIds","exportToEvals","exportToEvalsInstanceEnabled","getTrace","editTags","countInfo","currentCount","logCountLoading","maxAllowedCount","getEvalTabTotalTracesLimit","isTableLoading","tableError","isTableEmpty","GenAITracesTableProvider","GenAITracesTableToolbar","GenAiTracesMarkdownConverterProvider","makeHtml","GenAITracesTableBodyContainer","currentTraceInfoV3"],"sourceRoot":""}