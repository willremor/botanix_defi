{"version":3,"file":"static/js/3835.5817b6a4.chunk.js","mappings":"kTAeA,MA6CMA,GAA0BC,EAAAA,EAAAA,IAC9BC,EAAAA,EAAAA,KAAQ,CAACC,EAAmBC,KACnB,CAAEC,QAASF,EAAMG,SAASC,eAAeH,EAASI,OAAOC,YADlEP,EA9CyBQ,IACzB,MAAM,QAAED,IAAYE,EAAAA,EAAAA,MACbC,EAAOC,IAAYC,EAAAA,EAAAA,YACpBC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,MA4BjB,OAzBAC,EAAAA,EAAAA,YAAU,KACRN,OAASO,EAAU,GAClB,CAACX,KAEJU,EAAAA,EAAAA,YAAU,KAER,IAAKT,EAAML,SAAWI,EAAS,CAC7B,MAAMY,GAASC,EAAAA,EAAAA,IAAUb,GACzBY,EAAOE,QAAQC,OAAOC,IACpBC,EAAAA,EAAMC,sBAAsBF,GAC5BZ,EAASY,EAAE,IAEbR,EAASI,EACX,IACC,CAACJ,EAAUR,EAASC,EAAML,WAE7Bc,EAAAA,EAAAA,YAAU,KAAO,IAADS,EACG,QAAjBA,EAAIlB,EAAML,eAAO,IAAAuB,GAAbA,EAAeC,cACjBd,EAASe,EAAAA,GAAOC,gBAAgBrB,EAAML,QAAQwB,aAAcnB,EAAML,QAAQI,SAAU,CAClFuB,SAAS,GAEb,GACC,CAACjB,EAAUL,EAAML,UAGE,OAAb,OAALO,QAAK,IAALA,OAAK,EAALA,EAAOqB,SACFC,EAAAA,EAAAA,GAACC,EAAAA,EAAgB,KAKxBD,EAAAA,EAAAA,GAACE,EAAAA,YAAW,CAAAC,UACVH,EAAAA,EAAAA,GAACI,EAAAA,eAAc,KACH,KAULC,GAAgBC,EAAAA,EAAAA,GAAkBC,EAAAA,EAAWC,eAAeC,aAAc3C,GAEvF,W","sources":["experiment-tracking/components/DirectRunPage.tsx"],"sourcesContent":["import { PageWrapper, LegacySkeleton } from '@databricks/design-system';\nimport { useEffect, useState } from 'react';\nimport { connect, useDispatch } from 'react-redux';\nimport { useParams, useNavigate } from '../../common/utils/RoutingUtils';\nimport type { ErrorWrapper } from '../../common/utils/ErrorWrapper';\nimport Utils from '../../common/utils/Utils';\nimport type { ReduxState } from '../../redux-types';\nimport { getRunApi } from '../actions';\nimport Routes from '../routes';\nimport { PageNotFoundView } from '../../common/components/PageNotFoundView';\nimport type { WithRouterNextProps } from '../../common/utils/withRouterNext';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\nimport { withErrorBoundary } from '../../common/utils/withErrorBoundary';\nimport ErrorUtils from '../../common/utils/ErrorUtils';\n\nconst DirectRunPageImpl = (props: any) => {\n  const { runUuid } = useParams<{ runUuid: string }>();\n  const [error, setError] = useState<ErrorWrapper>();\n  const navigate = useNavigate();\n\n  const dispatch = useDispatch();\n\n  // Reset error after changing requested run\n  useEffect(() => {\n    setError(undefined);\n  }, [runUuid]);\n\n  useEffect(() => {\n    // Start fetching run info if it doesn't exist in the store yet\n    if (!props.runInfo && runUuid) {\n      const action = getRunApi(runUuid);\n      action.payload.catch((e) => {\n        Utils.logErrorAndNotifyUser(e);\n        setError(e);\n      });\n      dispatch(action);\n    }\n  }, [dispatch, runUuid, props.runInfo]);\n\n  useEffect(() => {\n    if (props.runInfo?.experimentId) {\n      navigate(Routes.getRunPageRoute(props.runInfo.experimentId, props.runInfo.runUuid), {\n        replace: true,\n      });\n    }\n  }, [navigate, props.runInfo]);\n\n  // If encountered 404 error, display a proper component\n  if (error?.status === 404) {\n    return <PageNotFoundView />;\n  }\n\n  // If the run is loading, display skeleton\n  return (\n    <PageWrapper>\n      <LegacySkeleton />\n    </PageWrapper>\n  );\n};\n\nconst DirectRunPageWithRouter = withRouterNext(\n  connect((state: ReduxState, ownProps: WithRouterNextProps<{ runUuid: string }>) => {\n    return { runInfo: state.entities.runInfosByUuid[ownProps.params.runUuid] };\n  })(DirectRunPageImpl),\n);\n\nexport const DirectRunPage = withErrorBoundary(ErrorUtils.mlflowServices.RUN_TRACKING, DirectRunPageWithRouter);\n\nexport default DirectRunPage;\n"],"names":["DirectRunPageWithRouter","withRouterNext","connect","state","ownProps","runInfo","entities","runInfosByUuid","params","runUuid","props","useParams","error","setError","useState","navigate","useNavigate","dispatch","useDispatch","useEffect","undefined","action","getRunApi","payload","catch","e","Utils","logErrorAndNotifyUser","_props$runInfo","experimentId","Routes","getRunPageRoute","replace","status","_jsx","PageNotFoundView","PageWrapper","children","LegacySkeleton","DirectRunPage","withErrorBoundary","ErrorUtils","mlflowServices","RUN_TRACKING"],"sourceRoot":""}