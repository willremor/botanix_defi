{"version":3,"file":"static/js/7364.b91e87c1.chunk.js","mappings":"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","sources":["experiment-tracking/components/evaluations/hooks/useCompareToRunUuid.tsx","experiment-tracking/components/evaluations/EvaluationRunCompareSelector.tsx","experiment-tracking/components/evaluations/hooks/useRunLoggedTraceTableArtifacts.tsx","experiment-tracking/components/evaluations/constants.ts","experiment-tracking/components/evaluations/hooks/useSavePendingEvaluationAssessments.tsx","experiment-tracking/components/run-page/hooks/useSearchRunsQuery.tsx","experiment-tracking/components/evaluations/RunViewEvaluationsTabArtifacts.tsx","experiment-tracking/components/evaluations/RunViewEvaluationsTab.tsx"],"sourcesContent":["import { useCallback } from 'react';\nimport { useSearchParams } from '@mlflow/mlflow/src/common/utils/RoutingUtils';\n\nconst QUERY_PARAM_KEY = 'compareToRunUuid';\n\n/**\n * Query param-powered hook that returns the compare to run uuid when comparison is enabled.\n */\nexport const useCompareToRunUuid = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const compareToRunUuid = searchParams.get(QUERY_PARAM_KEY) ?? undefined;\n\n  const setCompareToRunUuid = useCallback(\n    (compareToRunId: string | undefined) => {\n      setSearchParams((params) => {\n        if (compareToRunId === undefined) {\n          params.delete(QUERY_PARAM_KEY);\n          return params;\n        }\n        params.set(QUERY_PARAM_KEY, compareToRunId);\n        return params;\n      });\n    },\n    [setSearchParams],\n  );\n\n  return [compareToRunUuid, setCompareToRunUuid] as const;\n};\n","import {\n  Typography,\n  useDesignSystemTheme,\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListSelectItem,\n  DialogComboboxCustomButtonTriggerWrapper,\n  Button,\n  ChevronDownIcon,\n  XCircleFillIcon,\n} from '@databricks/design-system';\nimport { useCallback, useMemo } from 'react';\nimport { useGetExperimentRunColor } from '../experiment-page/hooks/useExperimentRunColor';\nimport { useIntl } from '@databricks/i18n';\nimport Routes from '../../routes';\nimport {\n  useGenAiExperimentRunsForComparison,\n  COMPARE_TO_RUN_DROPDOWN_COMPONENT_ID,\n} from '@databricks/web-shared/genai-traces-table';\nimport { RunColorPill } from '../experiment-page/components/RunColorPill';\n\nexport const EvaluationRunCompareSelector = ({\n  experimentId,\n  currentRunUuid,\n  setCompareToRunUuid,\n  compareToRunUuid,\n  setCurrentRunUuid: setCurrentRunUuidProp,\n}: {\n  experimentId: string;\n  currentRunUuid?: string;\n  setCompareToRunUuid?: (runUuid: string | undefined) => void;\n  compareToRunUuid?: string;\n  // used in evaluation runs tab\n  setCurrentRunUuid?: (runUuid: string) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  const getRunColor = useGetExperimentRunColor();\n\n  const { runInfos: experimentRunInfos } = useGenAiExperimentRunsForComparison(experimentId);\n\n  const currentRunOptions = useMemo(() => {\n    if (!experimentRunInfos) return undefined;\n    return experimentRunInfos\n      .map((runInfo) => ({\n        key: runInfo.runUuid,\n        value: runInfo.runName ?? runInfo.runUuid,\n      }))\n      .filter((result) => result.key) as {\n      key: string;\n      value: string;\n    }[];\n  }, [experimentRunInfos]);\n\n  const compareToRunOptions = useMemo(() => {\n    if (!experimentRunInfos) return undefined;\n    return experimentRunInfos\n      .filter((runInfo) => runInfo.runUuid !== currentRunUuid)\n      .map((runInfo) => ({\n        key: runInfo.runUuid,\n        value: runInfo.runName ?? runInfo.runUuid,\n      }))\n      .filter((result) => Boolean(result.key)) as {\n      key: string;\n      value: string;\n    }[];\n  }, [experimentRunInfos, currentRunUuid]);\n\n  const currentRunInfo = experimentRunInfos?.find((runInfo) => runInfo.runUuid === currentRunUuid);\n  const compareToRunInfo = experimentRunInfos?.find((runInfo) => runInfo.runUuid === compareToRunUuid);\n\n  const defaultSetCurrentRunUuid = useCallback(\n    (runUuid: string) => {\n      const link = Routes.getRunPageRoute(experimentId, runUuid) + '/evaluations';\n      // Propagate all the current URL query params.\n      const currentParams = new URLSearchParams(window.location.search);\n\n      const newUrl = new URL(link, window.location.origin);\n      currentParams.forEach((value, key) => {\n        newUrl.searchParams.set(key, value);\n      });\n\n      window.location.href = newUrl.toString();\n    },\n    [experimentId],\n  );\n\n  const setCurrentRunUuid = setCurrentRunUuidProp ?? defaultSetCurrentRunUuid;\n\n  if (!currentRunUuid) {\n    return <></>;\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        gap: theme.spacing.sm,\n        alignItems: 'center',\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'flex-start',\n          gap: theme.spacing.sm,\n        }}\n      >\n        <DialogCombobox\n          componentId={COMPARE_TO_RUN_DROPDOWN_COMPONENT_ID}\n          id=\"compare-to-run-combobox\"\n          value={currentRunUuid ? [currentRunUuid] : undefined}\n        >\n          <DialogComboboxCustomButtonTriggerWrapper>\n            <Button\n              endIcon={<ChevronDownIcon />}\n              componentId=\"mlflow.evaluations_review.table_ui.compare_to_run_button\"\n              css={{\n                justifyContent: 'flex-start !important',\n              }}\n            >\n              <div\n                css={{\n                  display: 'flex',\n                  gap: theme.spacing.sm,\n                  alignItems: 'center',\n                  fontSize: `${theme.typography.fontSizeSm}px !important`,\n                }}\n              >\n                <RunColorPill color={getRunColor(currentRunUuid)} />\n                {currentRunInfo?.runName ? (\n                  <Typography.Hint>{currentRunInfo?.runName}</Typography.Hint>\n                ) : (\n                  // eslint-disable-next-line formatjs/enforce-description\n                  intl.formatMessage({ defaultMessage: 'Select baseline run' })\n                )}\n              </div>\n            </Button>\n          </DialogComboboxCustomButtonTriggerWrapper>\n          <DialogComboboxContent>\n            <DialogComboboxOptionList>\n              {(currentRunOptions || []).map((item, i) => (\n                <DialogComboboxOptionListSelectItem\n                  key={i}\n                  value={item.value}\n                  onChange={(e) => setCurrentRunUuid(item.key)}\n                  checked={item.key === currentRunUuid}\n                >\n                  <div\n                    css={{\n                      display: 'flex',\n                      gap: theme.spacing.sm,\n                      alignItems: 'center',\n                    }}\n                  >\n                    <RunColorPill color={getRunColor(item.key)} />\n                    {item.value}\n                  </div>\n                </DialogComboboxOptionListSelectItem>\n              ))}\n            </DialogComboboxOptionList>\n          </DialogComboboxContent>\n        </DialogCombobox>\n      </div>\n      <span css={{}}>\n        {intl.formatMessage({\n          defaultMessage: 'compare to',\n          description: 'Label for \"to\" in compare to, which is split between two dropdowns of two runs to compare',\n        })}\n      </span>\n      {setCompareToRunUuid && (\n        <div\n          css={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n            }}\n          >\n            <DialogCombobox\n              componentId={COMPARE_TO_RUN_DROPDOWN_COMPONENT_ID}\n              id=\"compare-to-run-combobox\"\n              value={compareToRunUuid ? [compareToRunUuid] : undefined}\n            >\n              <DialogComboboxCustomButtonTriggerWrapper>\n                <Button\n                  endIcon={<ChevronDownIcon />}\n                  componentId=\"mlflow.evaluations_review.table_ui.compare_to_run_button\"\n                  css={{\n                    justifyContent: 'flex-start !important',\n                  }}\n                >\n                  <div\n                    css={{\n                      display: 'flex',\n                      gap: theme.spacing.sm,\n                      alignItems: 'center',\n                      fontSize: `${theme.typography.fontSizeSm}px !important`,\n                    }}\n                  >\n                    {compareToRunInfo?.runName ? (\n                      <>\n                        <RunColorPill color={getRunColor(compareToRunUuid)} />\n                        <Typography.Hint>{compareToRunInfo?.runName}</Typography.Hint>\n                      </>\n                    ) : (\n                      <span\n                        css={{\n                          color: theme.colors.textPlaceholder,\n                        }}\n                      >\n                        {/* eslint-disable-next-line formatjs/enforce-description */}\n                        {intl.formatMessage({ defaultMessage: 'baseline run' })}\n                      </span>\n                    )}\n                  </div>\n                </Button>\n              </DialogComboboxCustomButtonTriggerWrapper>\n              <DialogComboboxContent>\n                <DialogComboboxOptionList>\n                  {(compareToRunOptions || []).map((item, i) => (\n                    <DialogComboboxOptionListSelectItem\n                      key={i}\n                      value={item.value}\n                      onChange={(e) => setCompareToRunUuid(item.key)}\n                      checked={item.key === compareToRunUuid}\n                    >\n                      <div\n                        css={{\n                          display: 'flex',\n                          gap: theme.spacing.sm,\n                          alignItems: 'center',\n                        }}\n                      >\n                        <RunColorPill color={getRunColor(item.key)} />\n                        {item.value}\n                      </div>\n                    </DialogComboboxOptionListSelectItem>\n                  ))}\n                </DialogComboboxOptionList>\n              </DialogComboboxContent>\n            </DialogCombobox>\n            {compareToRunInfo?.runName && (\n              <XCircleFillIcon\n                aria-hidden=\"false\"\n                css={{\n                  color: theme.colors.textPlaceholder,\n                  fontSize: theme.typography.fontSizeSm,\n                  marginLeft: theme.spacing.sm,\n\n                  ':hover': {\n                    color: theme.colors.actionTertiaryTextHover,\n                  },\n                }}\n                role=\"button\"\n                onClick={() => {\n                  setCompareToRunUuid(undefined);\n                }}\n                onPointerDownCapture={(e) => {\n                  // Prevents the dropdown from opening when clearing\n                  e.stopPropagation();\n                }}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { intersection } from 'lodash';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport { extractLoggedTablesFromRunTags } from '../../../utils/ArtifactUtils';\nimport { GenAiTraceEvaluationArtifactFile } from '@databricks/web-shared/genai-traces-table';\nimport { useMemo } from 'react';\n\n/**\n * Returns the list of known evaluation table artifacts that are logged for a run based on its tags.\n */\nexport const useRunLoggedTraceTableArtifacts = (runTags?: Record<string, KeyValueEntity>) =>\n  useMemo(() => {\n    if (!runTags) {\n      return [];\n    }\n    return intersection(extractLoggedTablesFromRunTags(runTags), [\n      GenAiTraceEvaluationArtifactFile.Evaluations,\n      GenAiTraceEvaluationArtifactFile.Metrics,\n      GenAiTraceEvaluationArtifactFile.Assessments,\n    ]) as GenAiTraceEvaluationArtifactFile[];\n  }, [runTags]);\n","// Hardcoded file names corresponding to evaluation traces table files defined in MLflow\nexport const EVALUATIONS_ARTIFACT_FILE_NAME = '_evaluations.json';\nexport const METRICS_ARTIFACT_FILE_NAME = '_metrics.json';\nexport const ASSESSMENTS_ARTIFACT_FILE_NAME = '_assessments.json';\nexport const TAGS_ARTIFACT_FILE_NAME = '_tags.json';\n","import { useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport type { ThunkDispatch } from '../../../../redux-types';\nimport { GET_EVALUATION_TABLE_ARTIFACT, uploadArtifactApi } from '../../../actions';\nimport type {\n  RunEvaluationResultAssessment,\n  RunEvaluationResultAssessmentDraft,\n} from '@databricks/web-shared/genai-traces-table';\nimport type { RawEvaluationArtifact } from '../../../sdk/EvaluationArtifactService';\nimport { parseEvaluationTableArtifact } from '../../../sdk/EvaluationArtifactService';\nimport { getArtifactChunkedText, getArtifactLocationUrl } from '../../../../common/utils/ArtifactUtils';\nimport { isArray, isEqual } from 'lodash';\nimport Utils from '../../../../common/utils/Utils';\nimport { fulfilled } from '../../../../common/utils/ActionUtils';\nimport { ASSESSMENTS_ARTIFACT_FILE_NAME } from '../constants';\n\n/**\n * Local utility function to fetch existing raw assessments artifact data.\n */\nconst fetchExistingRawAssessmentsArtifactData = async (runUuid: string): Promise<RawEvaluationArtifact> => {\n  const fullArtifactSrcPath = getArtifactLocationUrl(ASSESSMENTS_ARTIFACT_FILE_NAME, runUuid);\n\n  const fileContents = await getArtifactChunkedText(fullArtifactSrcPath).then((artifactContent) =>\n    JSON.parse(artifactContent),\n  );\n\n  if (!isArray(fileContents.data) || !isArray(fileContents.columns)) {\n    throw new Error('Artifact is malformed and/or not valid JSON');\n  }\n\n  return fileContents;\n};\n\n// We have to keep the list of fields in sync with the schema defined in MLflow.\n// See mlflow/evaluation/utils.py#_get_assessments_dataframe_schema for the schema definition.\nconst assessmentsToEvaluationArtifactJSONRows = (\n  evaluationId: string,\n  assessments: RunEvaluationResultAssessment[],\n): RawEvaluationArtifact['data'] => {\n  return assessments.map((assessment) => {\n    return [\n      evaluationId,\n      assessment.name,\n      {\n        source_type: assessment.source?.sourceType,\n        source_id: assessment.source?.sourceId,\n        source_metadata: assessment.source?.metadata,\n      },\n      assessment.timestamp || null,\n      assessment.booleanValue || null,\n      assessment.numericValue || null,\n      assessment.stringValue || null,\n      assessment.rationale || null,\n      assessment.metadata || null,\n      null, // error_code\n      null, // error_message\n    ];\n  });\n};\n\n/**\n * Iterates through the existing assessments and removes the ones with matching sources from the pending assessments.\n * Accepts the existing assessments artifact and the pending assessments to be saved.\n */\nconst filterExistingAssessmentsBySource = (\n  evaluationId: string,\n  existingAssessmentsArtifact: RawEvaluationArtifact,\n  pendingAssessments: RunEvaluationResultAssessmentDraft[],\n) => {\n  // Parse the existing assessments artifact file\n  const existingAssessmentsFile = parseEvaluationTableArtifact(\n    ASSESSMENTS_ARTIFACT_FILE_NAME,\n    existingAssessmentsArtifact,\n  );\n\n  // Map the sources of the pending assessments to the format of the existing assessments\n  const sourcesInPendingAssessments = pendingAssessments.map(({ name, source }) => ({\n    name,\n    source: source\n      ? {\n          source_type: source.sourceType,\n          source_id: source.sourceId,\n          source_metadata: source.metadata,\n        }\n      : undefined,\n  }));\n\n  // Find the entries in the existing assessments that have the same evaluation_id and source as the pending assessments\n  const entriesToBeRemoved = existingAssessmentsFile.entries.filter(\n    ({ evaluation_id, name, source }) =>\n      evaluationId === evaluation_id &&\n      sourcesInPendingAssessments.find((incomingEntry) => isEqual({ name, source }, incomingEntry)),\n  );\n\n  // Find the indexes of the entries to be removed\n  const indexesToBeRemoved = entriesToBeRemoved.map((entry) => existingAssessmentsFile.entries.indexOf(entry));\n\n  // Remove the entries from the existing assessments\n  return existingAssessmentsArtifact.data.filter((_, index) => !indexesToBeRemoved.includes(index));\n};\n\nexport const useSavePendingEvaluationAssessments = () => {\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const [isSaving, setIsSaving] = useState(false);\n\n  const savePendingAssessments = useCallback(\n    async (runUuid: string, evaluationId: string, pendingAssessmentEntries: RunEvaluationResultAssessmentDraft[]) => {\n      try {\n        setIsSaving(true);\n        // Start with fetching existing state of the data so we have the fresh one\n        const existingAssessmentsArtifact = await fetchExistingRawAssessmentsArtifactData(runUuid);\n\n        // Map the assessments to the JSON file format\n        const newData = assessmentsToEvaluationArtifactJSONRows(evaluationId, pendingAssessmentEntries);\n\n        // Filter out the existing assessments that have the same source as the pending assessments\n        const filteredExistingData = filterExistingAssessmentsBySource(\n          evaluationId,\n          existingAssessmentsArtifact,\n          pendingAssessmentEntries,\n        );\n\n        // Upload the new artifact file. Explicitly \"await\" for the result so we can catch any errors.\n        await dispatch(\n          uploadArtifactApi(runUuid, ASSESSMENTS_ARTIFACT_FILE_NAME, {\n            columns: existingAssessmentsArtifact.columns,\n            data: [...filteredExistingData, ...newData],\n          }),\n        );\n\n        dispatch({\n          type: fulfilled(GET_EVALUATION_TABLE_ARTIFACT),\n          payload: parseEvaluationTableArtifact(ASSESSMENTS_ARTIFACT_FILE_NAME, {\n            columns: existingAssessmentsArtifact.columns,\n            data: [...filteredExistingData, ...newData],\n          }),\n          meta: { runUuid, artifactPath: ASSESSMENTS_ARTIFACT_FILE_NAME },\n        });\n      } catch (e: any) {\n        Utils.logErrorAndNotifyUser(e.message || e);\n        throw e;\n      } finally {\n        setIsSaving(false);\n      }\n    },\n    [dispatch],\n  );\n\n  return { savePendingAssessments, isSaving };\n};\n","import { type ApolloError, type ApolloQueryResult, gql } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { useQuery } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\nimport { first } from 'lodash';\nimport type { SearchRuns } from '../../../../graphql/__generated__/graphql';\n\nconst SEARCH_RUNS_QUERY = gql`\n  query SearchRuns($data: MlflowSearchRunsInput!) {\n    mlflowSearchRuns(input: $data) {\n      apiError {\n        helpUrl\n        code\n        message\n      }\n      runs {\n        info {\n          runName\n          status\n          runUuid\n          experimentId\n          artifactUri\n          endTime\n          lifecycleStage\n          startTime\n          userId\n        }\n        experiment {\n          experimentId\n          name\n          tags {\n            key\n            value\n          }\n          artifactLocation\n          lifecycleStage\n          lastUpdateTime\n        }\n        data {\n          metrics {\n            key\n            value\n            step\n            timestamp\n          }\n          params {\n            key\n            value\n          }\n          tags {\n            key\n            value\n          }\n        }\n        inputs {\n          datasetInputs {\n            dataset {\n              digest\n              name\n              profile\n              schema\n              source\n              sourceType\n            }\n            tags {\n              key\n              value\n            }\n          }\n          modelInputs {\n            modelId\n          }\n        }\n        outputs {\n          modelOutputs {\n            modelId\n            step\n          }\n        }\n        modelVersions {\n          version\n          name\n          creationTimestamp\n          status\n          source\n        }\n      }\n    }\n  }\n`;\n\nexport type UseSearchRunsQueryResponseDataMetrics = NonNullable<\n  NonNullable<NonNullable<UseSearchRunsQueryDataResponseSingleRun>['data']>['metrics']\n>;\nexport type UseSearchRunsQueryDataResponseSingleRun = NonNullable<\n  NonNullable<SearchRuns['mlflowSearchRuns']>['runs']\n>[0];\nexport type UseSearchRunsQueryDataApiError = NonNullable<SearchRuns['mlflowSearchRuns']>['apiError'];\nexport type UseSearchRunsQueryResponse = {\n  data?: UseSearchRunsQueryDataResponseSingleRun;\n  loading: boolean;\n  apolloError?: ApolloError;\n  apiError?: UseSearchRunsQueryDataApiError;\n  refetchRun: () => Promise<ApolloQueryResult<SearchRuns>>;\n};\n\nexport const useSearchRunsQuery = ({\n  filter,\n  experimentIds,\n  disabled = false,\n}: {\n  filter?: string;\n  experimentIds: string[];\n  disabled?: boolean;\n}): UseSearchRunsQueryResponse => {\n  const {\n    data,\n    loading,\n    error: apolloError,\n    refetch,\n  } = useQuery<any, any>(SEARCH_RUNS_QUERY, {\n    variables: {\n      data: {\n        filter,\n        experimentIds,\n      },\n    },\n    skip: disabled,\n  });\n\n  return {\n    loading,\n    data: first(data?.mlflowSearchRuns?.runs ?? []),\n    refetchRun: refetch,\n    apolloError,\n    apiError: data?.mlflowSearchRuns?.apiError,\n  } as const;\n};\n","import { isNil } from 'lodash';\nimport { Empty, LegacySkeleton } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { type KeyValueEntity } from '../../../common/types';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { useCompareToRunUuid } from './hooks/useCompareToRunUuid';\nimport Utils from '@mlflow/mlflow/src/common/utils/Utils';\nimport { EvaluationRunCompareSelector } from './EvaluationRunCompareSelector';\nimport { useSavePendingEvaluationAssessments } from './hooks/useSavePendingEvaluationAssessments';\nimport type {\n  GenAiTraceEvaluationArtifactFile,\n  TracesTableColumn,\n  RunEvaluationTracesDataEntry,\n} from '@databricks/web-shared/genai-traces-table';\nimport {\n  EXECUTION_DURATION_COLUMN_ID,\n  GenAiTracesTable,\n  GenAiTracesMarkdownConverterProvider,\n  STATE_COLUMN_ID,\n  TAGS_COLUMN_ID,\n  TracesTableColumnType,\n  useGenAiTraceEvaluationArtifacts,\n} from '@databricks/web-shared/genai-traces-table';\nimport { useRunLoggedTraceTableArtifacts } from './hooks/useRunLoggedTraceTableArtifacts';\nimport { useMarkdownConverter } from '../../../common/utils/MarkdownUtils';\nimport { getTraceLegacy } from '@mlflow/mlflow/src/experiment-tracking/utils/TraceUtils';\nimport { useSearchRunsQuery } from '../run-page/hooks/useSearchRunsQuery';\n\nexport const RunViewEvaluationsTabArtifacts = ({\n  experimentId,\n  runUuid,\n  runTags,\n  runDisplayName,\n  data,\n}: {\n  experimentId: string;\n  runUuid: string;\n  runTags?: Record<string, KeyValueEntity>;\n  runDisplayName: string;\n  data: RunEvaluationTracesDataEntry[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  // Determine which tables are logged in the run\n  const traceTablesLoggedInRun = useRunLoggedTraceTableArtifacts(runTags);\n\n  const noEvaluationTablesLogged = data?.length === 0;\n\n  const [compareToRunUuid, setCompareToRunUuid] = useCompareToRunUuid();\n\n  const makeHtmlFromMarkdown = useMarkdownConverter();\n  const saveAssessmentsQuery = useSavePendingEvaluationAssessments();\n\n  const {\n    data: compareToRunData,\n    displayName: compareToRunDisplayName,\n    loading: compareToRunLoading,\n  } = useGetCompareToDataWithArtifacts(experimentId, compareToRunUuid, traceTablesLoggedInRun);\n\n  if (compareToRunLoading) {\n    // TODO: Implement proper skeleton for this page\n    return <LegacySkeleton />;\n  }\n\n  const initialSelectedColumns = (allColumns: TracesTableColumn[]) => {\n    return allColumns.filter(\n      (col) =>\n        col.type === TracesTableColumnType.ASSESSMENT ||\n        col.type === TracesTableColumnType.INPUT ||\n        (col.type === TracesTableColumnType.TRACE_INFO &&\n          [EXECUTION_DURATION_COLUMN_ID, STATE_COLUMN_ID, TAGS_COLUMN_ID].includes(col.id)),\n    );\n  };\n\n  /**\n   * Determine whether to render the component from the shared codebase (GenAiTracesTable)\n   * or the legacy one from the local codebase (EvaluationsOverview).\n   */\n  const getOverviewTableComponent = () => {\n    const componentProps = {\n      experimentId,\n      currentRunDisplayName: runDisplayName,\n      currentEvaluationResults: data || [],\n      compareToEvaluationResults: compareToRunData,\n      runUuid,\n      compareToRunUuid,\n      compareToRunDisplayName,\n      compareToRunLoading,\n      saveAssessmentsQuery,\n      getTrace: getTraceLegacy,\n      initialSelectedColumns,\n    } as const;\n    return (\n      <GenAiTracesMarkdownConverterProvider makeHtml={makeHtmlFromMarkdown}>\n        <GenAiTracesTable {...componentProps} />\n      </GenAiTracesMarkdownConverterProvider>\n    );\n  };\n\n  if (noEvaluationTablesLogged) {\n    return (\n      <div css={{ flex: 1, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"No evaluation tables logged\"\n              description=\"Run page > Evaluations tab > No evaluation tables logged\"\n            />\n          }\n          description={null}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      css={{\n        marginTop: theme.spacing.sm,\n        width: '100%',\n        overflowY: 'hidden',\n      }}\n    >\n      <div\n        css={{\n          width: '100%',\n          padding: `${theme.spacing.xs}px 0`,\n        }}\n      >\n        <EvaluationRunCompareSelector\n          experimentId={experimentId}\n          currentRunUuid={runUuid}\n          compareToRunUuid={compareToRunUuid}\n          setCompareToRunUuid={setCompareToRunUuid}\n        />\n      </div>\n      {getOverviewTableComponent()}\n    </div>\n  );\n};\n\nconst useGetCompareToDataWithArtifacts = (\n  experimentId: string,\n  compareToRunUuid: string | undefined,\n  traceTablesLoggedInRun: GenAiTraceEvaluationArtifactFile[],\n): {\n  data: RunEvaluationTracesDataEntry[] | undefined;\n  displayName: string;\n  loading: boolean;\n} => {\n  const { data, isLoading: loading } = useGenAiTraceEvaluationArtifacts(\n    {\n      runUuid: compareToRunUuid || '',\n      artifacts: traceTablesLoggedInRun,\n    },\n    { disabled: isNil(compareToRunUuid) },\n  );\n\n  const { data: runData, loading: runDetailsLoading } = useSearchRunsQuery({\n    experimentIds: [experimentId],\n    filter: `attributes.runId = \"${compareToRunUuid}\"`,\n    disabled: isNil(compareToRunUuid),\n  });\n\n  return {\n    data,\n    displayName: Utils.getRunDisplayName(runData?.info, compareToRunUuid),\n    loading: loading || runDetailsLoading,\n  };\n};\n","import { isNil } from 'lodash';\nimport { ParagraphSkeleton } from '@databricks/design-system';\nimport { type KeyValueEntity } from '../../../common/types';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { useCompareToRunUuid } from './hooks/useCompareToRunUuid';\nimport Utils from '@mlflow/mlflow/src/common/utils/Utils';\nimport { EvaluationRunCompareSelector } from './EvaluationRunCompareSelector';\nimport { getEvalTabTotalTracesLimit } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { getTrace } from '@mlflow/mlflow/src/experiment-tracking/utils/TraceUtils';\nimport type { TracesTableColumn, TraceActions, TraceInfoV3 } from '@databricks/web-shared/genai-traces-table';\nimport {\n  EXECUTION_DURATION_COLUMN_ID,\n  GenAiTracesMarkdownConverterProvider,\n  RUN_EVALUATION_RESULTS_TAB_COMPARE_RUNS,\n  RUN_EVALUATION_RESULTS_TAB_SINGLE_RUN,\n  getTracesTagKeys,\n  STATE_COLUMN_ID,\n  RESPONSE_COLUMN_ID,\n  TracesTableColumnType,\n  useMlflowTracesTableMetadata,\n  useSelectedColumns,\n  useSearchMlflowTraces,\n  GenAITracesTableToolbar,\n  GenAITracesTableProvider,\n  GenAITracesTableBodyContainer,\n  useGenAiTraceEvaluationArtifacts,\n  useFilters,\n  useTableSort,\n  TOKENS_COLUMN_ID,\n  invalidateMlflowSearchTracesCache,\n} from '@databricks/web-shared/genai-traces-table';\nimport { useRunLoggedTraceTableArtifacts } from './hooks/useRunLoggedTraceTableArtifacts';\nimport { useMarkdownConverter } from '../../../common/utils/MarkdownUtils';\nimport { useEditExperimentTraceTags } from '../traces/hooks/useEditExperimentTraceTags';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useDeleteTracesMutation } from './hooks/useDeleteTraces';\nimport { RunViewEvaluationsTabArtifacts } from './RunViewEvaluationsTabArtifacts';\nimport { useGetExperimentRunColor } from '../experiment-page/hooks/useExperimentRunColor';\nimport { useQueryClient } from '@databricks/web-shared/query-client';\nimport { useSearchRunsQuery } from '../run-page/hooks/useSearchRunsQuery';\n\nconst RunViewEvaluationsTabInner = ({\n  experimentId,\n  runUuid,\n  runTags,\n  runDisplayName,\n  setCurrentRunUuid,\n}: {\n  experimentId: string;\n  runUuid: string;\n  runTags?: Record<string, KeyValueEntity>;\n  runDisplayName: string;\n  setCurrentRunUuid?: (runUuid: string) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const makeHtmlFromMarkdown = useMarkdownConverter();\n\n  const [compareToRunUuid, setCompareToRunUuid] = useCompareToRunUuid();\n\n  // Get table metadata\n  const {\n    assessmentInfos,\n    allColumns,\n    totalCount,\n    isLoading: isTableMetadataLoading,\n    error: tableMetadataError,\n    tableFilterOptions,\n  } = useMlflowTracesTableMetadata({\n    experimentId,\n    runUuid,\n    otherRunUuid: compareToRunUuid,\n  });\n\n  // Setup table states\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [filters, setFilters] = useFilters();\n  const getRunColor = useGetExperimentRunColor();\n  const queryClient = useQueryClient();\n\n  const defaultSelectedColumns = useCallback((columns: TracesTableColumn[]) => {\n    return columns.filter(\n      (col) =>\n        col.type === TracesTableColumnType.ASSESSMENT ||\n        col.type === TracesTableColumnType.EXPECTATION ||\n        col.type === TracesTableColumnType.INPUT ||\n        (col.type === TracesTableColumnType.TRACE_INFO &&\n          [EXECUTION_DURATION_COLUMN_ID, RESPONSE_COLUMN_ID, STATE_COLUMN_ID, TOKENS_COLUMN_ID].includes(col.id)),\n    );\n  }, []);\n\n  const { selectedColumns, toggleColumns, setSelectedColumns } = useSelectedColumns(\n    experimentId,\n    allColumns,\n    defaultSelectedColumns,\n    runUuid,\n  );\n\n  const [tableSort, setTableSort] = useTableSort(selectedColumns);\n\n  // Get traces data\n  const {\n    data: traceInfos,\n    isLoading: traceInfosLoading,\n    error: traceInfosError,\n    refetchMlflowTraces,\n  } = useSearchMlflowTraces({\n    experimentId,\n    currentRunDisplayName: runDisplayName,\n    searchQuery,\n    filters,\n    runUuid,\n    tableSort,\n  });\n\n  const deleteTracesMutation = useDeleteTracesMutation();\n\n  const {\n    data: compareToRunData,\n    displayName: compareToRunDisplayName,\n    loading: compareToRunLoading,\n  } = useGetCompareToData(experimentId, compareToRunUuid);\n\n  const countInfo = useMemo(() => {\n    return {\n      currentCount: traceInfos?.length,\n      logCountLoading: traceInfosLoading,\n      totalCount: totalCount,\n      maxAllowedCount: getEvalTabTotalTracesLimit(),\n    };\n  }, [traceInfos, traceInfosLoading, totalCount]);\n\n  // TODO: We should update this to use web-shared/unified-tagging components for the\n  // tag editor and react-query mutations for the apis.\n  const { showEditTagsModalForTrace, EditTagsModal } = useEditExperimentTraceTags({\n    onSuccess: () => invalidateMlflowSearchTracesCache({ queryClient }),\n    existingTagKeys: getTracesTagKeys(traceInfos || []),\n    useV3Apis: true,\n  });\n\n  const traceActions: TraceActions = useMemo(() => {\n    return {\n      deleteTracesAction: {\n        deleteTraces: (experimentId: string, traceIds: string[]) =>\n          deleteTracesMutation.mutateAsync({ experimentId, traceRequestIds: traceIds }),\n      },\n      exportToEvals: {\n        exportToEvalsInstanceEnabled: true,\n        getTrace,\n      },\n      editTags: {\n        showEditTagsModalForTrace,\n        EditTagsModal,\n      },\n    };\n  }, [deleteTracesMutation, showEditTagsModalForTrace, EditTagsModal]);\n\n  const isTableLoading = traceInfosLoading || compareToRunLoading;\n\n  if (isTableMetadataLoading) {\n    return <LoadingSkeleton />;\n  }\n\n  if (tableMetadataError) {\n    return (\n      <div>\n        <pre>{String(tableMetadataError)}</pre>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      css={{\n        marginTop: theme.spacing.sm,\n        width: '100%',\n        overflowY: 'hidden',\n      }}\n    >\n      <div\n        css={{\n          width: '100%',\n          padding: `${theme.spacing.xs}px 0`,\n        }}\n      >\n        <EvaluationRunCompareSelector\n          experimentId={experimentId}\n          currentRunUuid={runUuid}\n          compareToRunUuid={compareToRunUuid}\n          setCompareToRunUuid={setCompareToRunUuid}\n          setCurrentRunUuid={setCurrentRunUuid}\n        />\n      </div>\n      <GenAITracesTableProvider>\n        <div\n          css={{\n            overflowY: 'hidden',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <GenAITracesTableToolbar\n            experimentId={experimentId}\n            searchQuery={searchQuery}\n            setSearchQuery={setSearchQuery}\n            filters={filters}\n            setFilters={setFilters}\n            assessmentInfos={assessmentInfos}\n            countInfo={countInfo}\n            traceActions={traceActions}\n            tableSort={tableSort}\n            setTableSort={setTableSort}\n            allColumns={allColumns}\n            selectedColumns={selectedColumns}\n            setSelectedColumns={setSelectedColumns}\n            toggleColumns={toggleColumns}\n            traceInfos={traceInfos}\n            tableFilterOptions={tableFilterOptions}\n          />\n          {isTableLoading ? (\n            <LoadingSkeleton />\n          ) : traceInfosError ? (\n            <div>\n              <pre>{String(traceInfosError)}</pre>\n            </div>\n          ) : (\n            <GenAiTracesMarkdownConverterProvider makeHtml={makeHtmlFromMarkdown}>\n              <GenAITracesTableBodyContainer\n                experimentId={experimentId}\n                currentRunDisplayName={runDisplayName}\n                compareToRunDisplayName={compareToRunDisplayName}\n                compareToRunUuid={compareToRunUuid}\n                getTrace={getTrace}\n                getRunColor={getRunColor}\n                assessmentInfos={assessmentInfos}\n                setFilters={setFilters}\n                filters={filters}\n                selectedColumns={selectedColumns}\n                allColumns={allColumns}\n                tableSort={tableSort}\n                currentTraceInfoV3={traceInfos || []}\n                compareToTraceInfoV3={compareToRunData}\n                onTraceTagsEdit={showEditTagsModalForTrace}\n              />\n            </GenAiTracesMarkdownConverterProvider>\n          )}\n          {EditTagsModal}\n        </div>\n      </GenAITracesTableProvider>\n    </div>\n  );\n};\n\nexport const RunViewEvaluationsTab = ({\n  experimentId,\n  runUuid,\n  runTags,\n  runDisplayName,\n  setCurrentRunUuid,\n}: {\n  experimentId: string;\n  runUuid: string;\n  runTags?: Record<string, KeyValueEntity>;\n  runDisplayName: string;\n  // used in evaluation runs tab\n  setCurrentRunUuid?: (runUuid: string) => void;\n}) => {\n  // Determine which tables are logged in the run\n  const traceTablesLoggedInRun = useRunLoggedTraceTableArtifacts(runTags);\n  const isArtifactCallEnabled = Boolean(runUuid);\n\n  const { data: artifactData, isLoading: isArtifactLoading } = useGenAiTraceEvaluationArtifacts(\n    {\n      runUuid: runUuid || '',\n      ...{ artifacts: traceTablesLoggedInRun ? traceTablesLoggedInRun : undefined },\n    },\n    { disabled: !isArtifactCallEnabled },\n  );\n\n  if (isArtifactLoading) {\n    return <LoadingSkeleton />;\n  }\n\n  if (!isNil(artifactData) && artifactData.length > 0) {\n    return (\n      <RunViewEvaluationsTabArtifacts\n        experimentId={experimentId}\n        runUuid={runUuid}\n        runDisplayName={runDisplayName}\n        data={artifactData}\n        runTags={runTags}\n      />\n    );\n  }\n\n  return (\n    <RunViewEvaluationsTabInner\n      experimentId={experimentId}\n      runUuid={runUuid}\n      runDisplayName={runDisplayName}\n      setCurrentRunUuid={setCurrentRunUuid}\n    />\n  );\n};\n\nconst LoadingSkeleton = () => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div css={{ display: 'block', marginTop: theme.spacing.md, height: '100%', width: '100%' }}>\n      {[...Array(10).keys()].map((i) => (\n        <ParagraphSkeleton label=\"Loading...\" key={i} seed={`s-${i}`} />\n      ))}\n    </div>\n  );\n};\n\nconst useGetCompareToData = (\n  experimentId: string,\n  compareToRunUuid: string | undefined,\n): {\n  data: TraceInfoV3[] | undefined;\n  displayName: string;\n  loading: boolean;\n} => {\n  const { data: traceInfos, isLoading: traceInfosLoading } = useSearchMlflowTraces({\n    experimentId,\n    currentRunDisplayName: undefined,\n    runUuid: compareToRunUuid,\n    disabled: isNil(compareToRunUuid),\n  });\n\n  const { data: runData, loading: runDetailsLoading } = useSearchRunsQuery({\n    experimentIds: [experimentId],\n    filter: `attributes.runId = \"${compareToRunUuid}\"`,\n    disabled: isNil(compareToRunUuid),\n  });\n\n  return {\n    data: traceInfos,\n    displayName: Utils.getRunDisplayName(runData?.info, compareToRunUuid),\n    loading: traceInfosLoading || runDetailsLoading,\n  };\n};\n"],"names":["QUERY_PARAM_KEY","useCompareToRunUuid","_searchParams$get","searchParams","setSearchParams","useSearchParams","get","undefined","useCallback","compareToRunId","params","delete","set","_ref","name","styles","_ref2","_ref3","_ref4","_ref5","EvaluationRunCompareSelector","experimentId","currentRunUuid","setCompareToRunUuid","compareToRunUuid","setCurrentRunUuid","setCurrentRunUuidProp","theme","useDesignSystemTheme","intl","useIntl","getRunColor","useGetExperimentRunColor","runInfos","experimentRunInfos","useGenAiExperimentRunsForComparison","currentRunOptions","useMemo","map","runInfo","_runInfo$runName","key","runUuid","value","runName","filter","result","compareToRunOptions","_runInfo$runName2","Boolean","currentRunInfo","find","compareToRunInfo","defaultSetCurrentRunUuid","link","Routes","getRunPageRoute","currentParams","URLSearchParams","window","location","search","newUrl","URL","origin","forEach","href","toString","_jsxs","css","_css","display","gap","spacing","sm","alignItems","children","_jsx","justifyContent","DialogCombobox","componentId","COMPARE_TO_RUN_DROPDOWN_COMPONENT_ID","id","DialogComboboxCustomButtonTriggerWrapper","Button","endIcon","ChevronDownIcon","fontSize","typography","fontSizeSm","RunColorPill","color","Typography","Hint","formatMessage","defaultMessage","DialogComboboxContent","DialogComboboxOptionList","item","i","DialogComboboxOptionListSelectItem","onChange","e","checked","_Fragment","colors","textPlaceholder","XCircleFillIcon","marginLeft","actionTertiaryTextHover","role","onClick","onPointerDownCapture","stopPropagation","useRunLoggedTraceTableArtifacts","runTags","intersection","extractLoggedTablesFromRunTags","GenAiTraceEvaluationArtifactFile","Evaluations","Metrics","Assessments","ASSESSMENTS_ARTIFACT_FILE_NAME","useSavePendingEvaluationAssessments","dispatch","useDispatch","isSaving","setIsSaving","useState","savePendingAssessments","async","evaluationId","pendingAssessmentEntries","existingAssessmentsArtifact","fullArtifactSrcPath","getArtifactLocationUrl","fileContents","getArtifactChunkedText","then","artifactContent","JSON","parse","isArray","data","columns","Error","fetchExistingRawAssessmentsArtifactData","newData","assessmentsToEvaluationArtifactJSONRows","assessments","assessment","_assessment$source","_assessment$source2","_assessment$source3","source_type","source","sourceType","source_id","sourceId","source_metadata","metadata","timestamp","booleanValue","numericValue","stringValue","rationale","filteredExistingData","filterExistingAssessmentsBySource","pendingAssessments","existingAssessmentsFile","parseEvaluationTableArtifact","sourcesInPendingAssessments","indexesToBeRemoved","entries","evaluation_id","incomingEntry","isEqual","entry","indexOf","_","index","includes","uploadArtifactApi","type","fulfilled","GET_EVALUATION_TABLE_ARTIFACT","payload","meta","artifactPath","Utils","logErrorAndNotifyUser","message","SEARCH_RUNS_QUERY","gql","useSearchRunsQuery","experimentIds","disabled","_data$mlflowSearchRun","_data$mlflowSearchRun2","_data$mlflowSearchRun3","loading","error","apolloError","refetch","useQuery","variables","skip","first","mlflowSearchRuns","runs","refetchRun","apiError","RunViewEvaluationsTabArtifacts","runDisplayName","traceTablesLoggedInRun","noEvaluationTablesLogged","length","makeHtmlFromMarkdown","useMarkdownConverter","saveAssessmentsQuery","compareToRunData","displayName","compareToRunDisplayName","compareToRunLoading","useGetCompareToDataWithArtifacts","LegacySkeleton","initialSelectedColumns","allColumns","col","TracesTableColumnType","ASSESSMENT","INPUT","TRACE_INFO","EXECUTION_DURATION_COLUMN_ID","STATE_COLUMN_ID","TAGS_COLUMN_ID","Empty","title","FormattedMessage","description","marginTop","width","overflowY","padding","xs","getOverviewTableComponent","componentProps","currentRunDisplayName","currentEvaluationResults","compareToEvaluationResults","getTrace","getTraceLegacy","GenAiTracesMarkdownConverterProvider","makeHtml","GenAiTracesTable","isLoading","useGenAiTraceEvaluationArtifacts","artifacts","isNil","runData","runDetailsLoading","getRunDisplayName","info","RunViewEvaluationsTabInner","assessmentInfos","totalCount","isTableMetadataLoading","tableMetadataError","tableFilterOptions","useMlflowTracesTableMetadata","otherRunUuid","searchQuery","setSearchQuery","filters","setFilters","useFilters","queryClient","useQueryClient","defaultSelectedColumns","EXPECTATION","RESPONSE_COLUMN_ID","TOKENS_COLUMN_ID","selectedColumns","toggleColumns","setSelectedColumns","useSelectedColumns","tableSort","setTableSort","useTableSort","traceInfos","traceInfosLoading","traceInfosError","refetchMlflowTraces","useSearchMlflowTraces","deleteTracesMutation","useDeleteTracesMutation","useGetCompareToData","countInfo","currentCount","logCountLoading","maxAllowedCount","getEvalTabTotalTracesLimit","showEditTagsModalForTrace","EditTagsModal","useEditExperimentTraceTags","onSuccess","invalidateMlflowSearchTracesCache","existingTagKeys","getTracesTagKeys","useV3Apis","traceActions","deleteTracesAction","deleteTraces","traceIds","mutateAsync","traceRequestIds","exportToEvals","exportToEvalsInstanceEnabled","editTags","isTableLoading","LoadingSkeleton","String","GenAITracesTableProvider","GenAITracesTableToolbar","GenAITracesTableBodyContainer","currentTraceInfoV3","compareToTraceInfoV3","onTraceTagsEdit","RunViewEvaluationsTab","isArtifactCallEnabled","artifactData","isArtifactLoading","md","height","Array","keys","ParagraphSkeleton","label","seed"],"sourceRoot":""}