{"version":3,"file":"static/js/4175.8b841372.chunk.js","mappings":"sKAuBO,SAASA,EAAkBC,GAChC,OACW,OAATA,IACAC,EAAAA,EAAAA,IAA0BD,KAC1BE,EAAAA,EAAAA,IAAkBF,GAEX,GAELG,EAAAA,EAAAA,IAAmBH,GACd,OADT,CAGF,C,oSClCA,IAaAI,EAbIC,EAA2B,wCAA/B,SAYIC,EAAgB,IAApBC,IAGIC,EAAM,SAANA,IACF,IAAMC,EAAN,GACAH,EAAAI,SAAsB,SAAAC,EAAAC,GACpB,IATcC,EAAAC,EASVC,EAAUH,EAAdI,wBATcH,EAUCE,EAVDD,EAUWH,EAAzBM,UAVe,IAAAJ,IAAAA,EAAA,SAA4B,IAAAC,IAAAA,EAAA,IAC7CT,EAAAa,MAAW,SAAAC,GAAQ,OAAAN,EAAAM,KAAYL,EAAZK,EAAnB,MAUIR,EAAAM,KAAAF,EACAN,EAAAW,KAAAT,GAJJ,IAQAF,EAAAC,SAAsB,SAAAC,GACpBA,EAAAU,UAAAX,SAAwB,SAAAY,GAAM,OAAAA,EAAGX,EAAHM,KAA9B,GADF,IAIAb,EAAQmB,OAAAC,sBAARhB,EAdF,ECbA,IAAAiB,EAAiC,qBAAXF,OAClBG,EAAAA,gBACAA,EAAAA,UCAW,SAASC,EACtBC,EACAC,QACA,IADAA,IAAAA,EAAc,CAAEC,MAAO,EAAGC,OAAQ,IAClC,IAAAC,EAC8BN,EAAAA,SAAeE,EAAQK,SAA9CC,EADPF,EAAA,GACgBG,EADhBH,EAAA,GAAAI,EAEyBV,EAAAA,WAAiBW,EAAaR,GAAhDZ,EAFPmB,EAAA,GAEaE,EAFbF,EAAA,GAGMG,EAAiBb,EAAAA,QAAa,GAgCpC,OA9BAD,GAA0B,WACpBG,EAAQK,UAAYC,GACtBC,EAAWP,EAAQK,QAEtB,IAEDR,GAA0B,WACxB,GAAIS,IAAYK,EAAeN,QAAS,CACtCM,EAAeN,SAAU,EACzB,IAAMO,EAAON,EAAQlB,wBACrBsB,EAAS,CAAErB,KAAAuB,GACZ,CACF,GAAE,CAACN,IAEJR,EAAAA,WAAgB,WACd,GAAKQ,EAAL,CAIA,IFEFtB,EACAU,EEHQmB,GFER7B,EEF+BsB,EFG/BZ,EEHwC,SAAAL,GACpCqB,EAAS,CAAErB,KAAAA,GACZ,EFGI,CACLyB,QAAA,WACE,IAAIC,EAAJ,IAAerC,EAAAsC,KACXtC,EAAAuC,IAAJjC,GACEN,EAAAwC,IAAAlC,GAAAS,UAAAD,KAAAE,GAEAhB,EAAAyC,IAAAnC,EAAwB,CACtBK,UADsB+B,EAEtBC,gBAFsB,EAGtB5B,UAAW,CAAAC,KAGfqB,GAAcnC,GAZX,EAeL0C,UAAS,WACP,IAAIvC,EAAQL,EAAAwC,IAAZlC,GACA,GAAAD,EAAW,CAET,IAAMwC,EAAQxC,EAAAU,UAAA+B,QAAd9B,GACI6B,GAAJ,GAAgBxC,EAAAU,UAAAgC,OAAAF,EAHP,GAMJxC,EAAAU,UAALiC,QAA6BhD,EAAa,OANjCM,GASJN,EAALsC,MAAyBW,qBAAAnD,EAC1B,CACF,IE3BD,OAFAqC,EAASC,UAEF,WACLD,EAASS,WACV,CAVA,CAWF,GAAE,CAAChB,IAEGjB,CACR,CAED,SAASoB,EAAY1B,EAAO6C,GAC1B,IAAMvC,EAAOuC,EAAOvC,KACpB,OAAIN,EAAMoB,SAAWd,EAAKc,QAAUpB,EAAMmB,QAAUb,EAAKa,MAChDb,EAEFN,CACR,CC/CD,IAAM8C,EAAsB,kBAAM,EAAN,EAEtBC,EAAsB,SAAAP,GAAK,OAAIA,CAAJ,EAE3BQ,EAAqB,SAACC,EAAIC,GAG9B,OAAOD,EAFKC,EAAa,cAAgB,eAG1C,EAEYC,EAAwB,SAAAC,GAMnC,IALA,IAAMC,EAAQC,KAAKC,IAAIH,EAAMC,MAAQD,EAAMI,SAAU,GAC/CC,EAAMH,KAAKI,IAAIN,EAAMK,IAAML,EAAMI,SAAUJ,EAAMnB,KAAO,GAExD0B,EAAM,GAEHC,EAAIP,EAAOO,GAAKH,EAAKG,IAC5BD,EAAIlD,KAAKmD,GAGX,OAAOD,CACR,EAED,SAAgBE,EAATC,GAgBJ,IAAAC,EAAAC,EAAAF,EAfD7B,KAAAA,OAeC,IAAA+B,EAfM,EAeNA,EAAAC,EAAAH,EAdDI,aAAAA,OAcC,IAAAD,EAdcnB,EAcdmB,EAAAE,EAAAL,EAbDN,SAAAA,OAaC,IAAAW,EAbU,EAaVA,EAAAC,EAAAN,EAZDO,aAAAA,OAYC,IAAAD,EAZc,EAYdA,EAAAE,EAAAR,EAXDS,WAAAA,OAWC,IAAAD,EAXY,EAWZA,EAVDE,EAUCV,EAVDU,UACAtB,EASCY,EATDZ,WACAuB,EAQCX,EARDW,WACAC,EAOCZ,EAPDY,YACAxD,EAMC4C,EAND5C,YACAyD,EAKCb,EALDa,gBACAC,EAICd,EAJDc,eAICC,EAAAf,EAHDgB,aAAAA,OAGC,IAAAD,EAHc9B,EAGd8B,EAAAE,EAAAjB,EAFDkB,YAAAA,OAEC,IAAAD,EAFa/B,EAEb+B,EAAAE,EAAAnB,EADDoB,eAAAA,OACC,IAAAD,EADgB9B,EAChB8B,EACKE,EAAUjC,EAAa,QAAU,SACjCkC,EAAYlC,EAAa,aAAe,YAExCmC,EAAYtE,EAAAA,OAAa,CAC7BuE,aAAc,EACdC,aAAc,KANflE,EASuCN,EAAAA,SAAe,GAAhDuE,EATNjE,EAAA,GASoBmE,EATpBnE,EAAA,GAUDgE,EAAU/D,QAAQgE,aAAeA,EAEjC,IAEmBG,GAFMf,GAAe1D,GAEUwD,EAAWtD,GAApDiE,GAETE,EAAU/D,QAAQmE,UAAYA,EAE9B,IAAMC,EAAoB3E,EAAAA,aACxB,SAAA4E,GACMnB,EAAUlD,UACZkD,EAAUlD,QAAQ8D,GAAaO,EAElC,GACD,CAACnB,EAAWY,IAGRQ,EAAqBnB,GAAciB,EAEzCjB,EAAa1D,EAAAA,aACX,SAAA4E,GACEC,EAAmBD,EAAQD,EAC5B,GACD,CAACA,EAAmBE,IAjCrB,IAAAC,EAoCyC9E,EAAAA,SAAe,CAAC,GAAnD+E,EApCND,EAAA,GAoCqBE,EApCrBF,EAAA,GAsCKG,EAAUjF,EAAAA,aAAkB,kBAAMgF,EAAiB,CAAC,EAAxB,GAA4B,IAExDE,EAAiClF,EAAAA,OAAa,IAE9CwE,EAAexE,EAAAA,SAAc,WACjC,IAAM2C,EACJuC,EAA+B3E,QAAQqB,OAAS,EAC5CW,KAAKI,IAALwC,MAAA5C,KAAY2C,EAA+B3E,SAC3C,EACN2E,EAA+B3E,QAAU,GAIzC,IAFA,IAAMiE,EAAeF,EAAU/D,QAAQiE,aAAaY,MAAM,EAAGzC,GAEpDE,EAAIF,EAAKE,EAAI3B,EAAM2B,IAAK,CAC/B,IAAMwC,EAAMtB,EAAalB,GACnByC,EAAeP,EAAcM,GAC7BE,EAAQf,EAAa3B,EAAI,GAAK2B,EAAa3B,EAAI,GAAGH,IAAMY,EACxDkC,EACoB,kBAAjBF,EAA4BA,EAAenC,EAAaN,GAC3D4C,EAAMF,EAAQC,EACpBhB,EAAa3B,GAAK,CAAEpB,MAAOoB,EAAGP,MAAAiD,EAAOrE,KAAAsE,EAAM9C,IAAA+C,EAAKJ,IAAAA,EACjD,CACD,OAAOb,CACR,GAAE,CAACrB,EAAc4B,EAAezB,EAAcpC,EAAM6C,IAE/C2B,IAAa,OAAA1C,EAAAwB,EAAatD,EAAO,SAApB,EAAA8B,EAAwBN,MAAOY,GAAgBE,EAElEc,EAAU/D,QAAQiE,aAAeA,EACjCF,EAAU/D,QAAQmF,UAAYA,EAE9B,IAAMlF,EAAUoD,EAAkBA,EAAgBrD,QAAUkD,EAAUlD,QAEhEoF,EAAoB3F,EAAAA,OAAa6D,GACvC8B,EAAkBpF,QAAUsD,EAE5B9D,GAA0B,WACxB,GAAKS,EAAL,CAMA,IAAMoF,EAAW,SAAAC,GACf,IAAMjB,EAASe,EAAkBpF,QAC7BoF,EAAkBpF,QAAQsF,GAC1BrF,EAAQ6D,GAEZI,EAAgBG,EACjB,EASD,OAPAgB,IAEApF,EAAQsF,iBAAiB,SAAUF,EAAU,CAC3CG,SAAS,EACTC,SAAS,IAGJ,WACLxF,EAAQyF,oBAAoB,SAAUL,EACvC,CAnBA,CAHCnB,EAAgB,EAuBnB,GAAE,CAACjE,EAAS6D,IAlGZ,IAAA6B,EAwQH,SAAAC,GAAmE,IAAzC3B,EAAyC2B,EAAzC3B,aAAcE,EAA2ByB,EAA3BzB,UAAWH,EAAgB4B,EAAhB5B,aAC3CrD,EAAOsD,EAAa5C,OAAS,EAC7BwE,EAAY,SAAA3E,GAAK,OAAI+C,EAAa/C,GAAOa,KAAxB,EAEnBA,EAAQ+D,EAAwB,EAAGnF,EAAMkF,EAAW7B,GACpD7B,EAAMJ,EAEV,KAAOI,EAAMxB,GAAQsD,EAAa9B,GAAKA,IAAM6B,EAAeG,GAC1DhC,IAGF,MAAO,CAAEJ,MAAAA,EAAOI,IAAAA,EACjB,CAhLwB4D,CAAehC,EAAU/D,SAAxC+B,EApGP4D,EAoGO5D,MAAOI,GApGdwD,EAoGcxD,IAET6D,GAAUvG,EAAAA,SACd,kBACEmE,EAAe,CACb7B,MAAAA,EACAI,IAAAA,GACAD,SAAAA,EACAvB,KAAMsD,EAAa5C,QALvB,GAOA,CAACU,EAAOI,GAAKD,EAAU+B,EAAa5C,OAAQuC,IAGxCqC,GAAiBxG,EAAAA,OAAaiE,GACpCuC,GAAejG,QAAU0D,EAEzB,IAAMwC,GAAezG,EAAAA,SAAc,WAGjC,IAFA,IAAMyG,EAAe,GADkBC,EAAA,SAG9BC,EAAOC,GACd,IAAM/D,EAAI0D,GAAQI,GAGZE,EAAIC,EAAAA,EAAA,GAFUtC,EAAa3B,IAEvB,IAERkE,WAAY,SAAA7E,GACV,GAAIA,EAAI,CACN,IAAMoD,EAAekB,GAAejG,QAAQ2B,EAAIC,GAEhD,GAAImD,IAAiBuB,EAAK3F,KAAM,KACtB8F,EAAiB1C,EAAU/D,QAA3BgE,aAEJsC,EAAKvE,MAAQ0E,GACfrC,EAAkBqC,GAAgB1B,EAAeuB,EAAK3F,OAGxDgE,EAA+B3E,QAAQb,KAAKmD,GAE5CmC,GAAiB,SAAAiC,GAAG,IAAAC,EAAA,OAAAJ,EAAAA,EAAA,GACfG,GADe,KAAAC,EAAA,IAEjBL,EAAKxB,KAAMC,EAFM4B,GAAA,GAIrB,CACF,CACF,IAGHT,EAAa/G,KAAKmH,EA/BmB,EAG9BF,EAAI,EAAGC,EAAML,GAAQ3E,OAAQ+E,EAAIC,EAAKD,IAAKD,EAA3CC,GA+BT,OAAOF,CACR,GAAE,CAACF,GAAS5B,EAAmBxC,EAAYqC,IAEtC2C,GAAanH,EAAAA,QAAa,GAEhCD,GAA0B,WACpBoH,GAAW5G,SACbyE,EAAiB,CAAC,GAEpBmC,GAAW5G,SAAU,CACtB,GAAE,CAAC4C,IAEJ,IAAMiE,GAAiBpH,EAAAA,aACrB,SAACqH,EAADC,GAAwC,IAAAC,QAAA,IAAAD,EAAP,CAAC,EAAMA,GAA3BE,MAAAA,OAA2B,IAAAD,EAAnB,QAAmBA,EAAAE,EACFnD,EAAU/D,QAAtCgE,EAD8BkD,EAC9BlD,aAAcG,EADgB+C,EAChB/C,UAER,SAAV8C,IAEAA,EADEH,GAAY9C,EACN,QACC8C,GAAY9C,EAAeG,EAC5B,MAEA,SAIE,UAAV8C,EACF9D,EAAW2D,GACQ,QAAVG,EACT9D,EAAW2D,EAAW3C,GACH,WAAV8C,GACT9D,EAAW2D,EAAW3C,EAAY,EAErC,GACD,CAAChB,IAGGgE,GAAmB1H,EAAAA,aACvB,SAACyB,EAADkG,GAA6C,IAAAC,OAAA,IAAAD,EAAP,CAAC,EAAMA,EAAAE,EAAAD,EAAnCJ,MAAAA,OAAmC,IAAAK,EAA3B,OAA2BA,EAAhBC,E,oIAAgBC,CAAAH,EAAA,WAAAI,EACO1D,EAAU/D,QAApDiE,EADmCwD,EACnCxD,aAAcD,EADqByD,EACrBzD,aAAcG,EADOsD,EACPtD,UAE9BuD,EAAczD,EAAajC,KAAKC,IAAI,EAAGD,KAAKI,IAAIlB,EAAOP,EAAO,KAEpE,GAAK+G,EAAL,CAIA,GAAc,SAAVT,EACF,GAAIS,EAAYvF,KAAO6B,EAAeG,EACpC8C,EAAQ,UACH,MAAIS,EAAY3F,OAASiC,GAG9B,OAFAiD,EAAQ,OAGT,CAGH,IAAMH,EACM,WAAVG,EACIS,EAAY3F,MAAQ2F,EAAY/G,KAAO,EAC7B,QAAVsG,EACAS,EAAYvF,IACZuF,EAAY3F,MAElB8E,GAAeC,EAADP,EAAC,CAAYU,MAAAA,GAAUM,GAnBpC,CAoBF,GACD,CAACV,GAAgBlG,IAGbgH,GAAgBlI,EAAAA,aACpB,WAAa,QAAAmI,EAAAC,UAAAxG,OAATyG,EAAS,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAATF,EAASE,GAAAH,UAAAG,GAMXb,GAAgBvC,WAAhB,EAAoBkD,GACpBvI,uBAAsB,WACpB4H,GAAgBvC,WAAhB,EAAoBkD,EACrB,GACF,GACD,CAACX,KAGH,MAAO,CACLjB,aAAAA,GACAf,UAAAA,EACA0B,eAAAA,GACAc,cAAAA,GACAjD,QAAAA,EAEH,CAED,IAAMoB,EAA0B,SAACmC,EAAKC,EAAMC,EAAiBC,GAC3D,KAAOH,GAAOC,GAAM,CAClB,IAAIG,GAAWJ,EAAMC,GAAQ,EAAK,EAC9BI,EAAeH,EAAgBE,GAEnC,GAAIC,EAAeF,EACjBH,EAAMI,EAAS,MACV,MAAIC,EAAeF,GAGxB,OAAOC,EAFPH,EAAOG,EAAS,CAGjB,CACF,CAED,OAAIJ,EAAM,EACDA,EAAM,EAEN,CAEV,C,oFCvQM,SAASM,EAAaC,EAASC,EAAIC,EAAMzG,GAC9C,MAAM0G,EAAQ1G,EAAMA,EAAM,EAAI2G,OAAOC,kBACrC,IAAIlI,EAAO,EACX,OAGA,SAAe5C,GACb,IAAI+K,EAAAA,EAAAA,IAAc/K,GAEhB,OADAyK,EAAQO,MAAML,GACPM,EAAOjL,GAEhB,OAAO0K,EAAG1K,EACZ,EAGA,SAASiL,EAAOjL,GACd,OAAI+K,EAAAA,EAAAA,IAAc/K,IAAS4C,IAASgI,GAClCH,EAAQS,QAAQlL,GACTiL,IAETR,EAAQU,KAAKR,GACND,EAAG1K,GACZ,CACF,C,8UC5CO,MAAMoL,EAAaC,EAAW,YAcxBC,EAAoBD,EAAW,cAuB/BE,EAAaF,EAAW,uBAa9B,SAASG,EAAaxL,GAC3B,OAGW,OAATA,IAAkBA,EAAO,IAAe,MAATA,EAEnC,CAaO,MAAMyL,EAAaJ,EAAW,MAoBxBK,EAAgBL,EAAW,cAe3BM,EAAmBN,EAAW,kBAiBpC,SAASO,EAAmB5L,GACjC,OAAgB,OAATA,GAAiBA,GAAQ,CAClC,CAWO,SAASC,EAA0BD,GACxC,OAAgB,OAATA,IAAkBA,EAAO,GAAc,KAATA,EACvC,CAiBO,SAAS+K,EAAc/K,GAC5B,OAAiB,IAAVA,IAAyB,IAAVA,GAAwB,KAATA,CACvC,CAuBO,MAAMG,EAAqBkL,EAAW,gBAsBhCnL,EAAoBmL,EAAW,MAQ5C,SAASA,EAAWQ,GAClB,OAUA,SAAe7L,GACb,OAAgB,OAATA,GAAiBA,GAAQ,GAAK6L,EAAMC,KAAKC,OAAOC,aAAahM,GACtE,CACF,C,qCC7NO,SAASqD,EAAO4I,EAAMjI,EAAOkI,EAAQC,GAC1C,MAAM/H,EAAM6H,EAAK3I,OACjB,IAEI8I,EAFAC,EAAa,EAajB,GAPErI,EADEA,EAAQ,GACDA,EAAQI,EAAM,EAAIA,EAAMJ,EAEzBA,EAAQI,EAAMA,EAAMJ,EAE9BkI,EAASA,EAAS,EAAIA,EAAS,EAG3BC,EAAM7I,OAAS,IACjB8I,EAAapC,MAAMsC,KAAKH,GACxBC,EAAWG,QAAQvI,EAAOkI,GAE1BD,EAAK5I,UAAU+I,QAMf,IAHIF,GAAQD,EAAK5I,OAAOW,EAAOkI,GAGxBG,EAAaF,EAAM7I,QACxB8I,EAAaD,EAAMrF,MAAMuF,EAAYA,EAAa,KAClDD,EAAWG,QAAQvI,EAAO,GAE1BiI,EAAK5I,UAAU+I,GACfC,GAAc,IACdrI,GAAS,GAGf,CAkBO,SAAS5C,EAAK6K,EAAME,GACzB,OAAIF,EAAK3I,OAAS,GAChBD,EAAO4I,EAAMA,EAAK3I,OAAQ,EAAG6I,GACtBF,GAEFE,CACT,C,2FC9DO,SAASK,EAAWC,EAAYC,EAAQC,GAE7C,MAAMC,EAAS,GACf,IAAIzJ,GAAS,EAEb,OAASA,EAAQsJ,EAAWnJ,QAAQ,CAClC,MAAMuJ,EAAUJ,EAAWtJ,GAAOqJ,WAE9BK,IAAYD,EAAOE,SAASD,KAC9BH,EAASG,EAAQH,EAAQC,GACzBC,EAAOxL,KAAKyL,GAEhB,CAEA,OAAOH,CACT,C,oECvBO,SAASK,EAAO1C,EAAO2C,GAC5B,MAAMC,EAASlB,OAAO1B,GAEtB,GAAyB,kBAAd2C,EACT,MAAM,IAAIE,UAAU,sBAGtB,IAAIC,EAAQ,EACRhK,EAAQ8J,EAAO7J,QAAQ4J,GAE3B,MAAkB,IAAX7J,GACLgK,IACAhK,EAAQ8J,EAAO7J,QAAQ4J,EAAW7J,EAAQ6J,EAAU1J,QAGtD,OAAO6J,CACT,C,0ECuCO,MA0EMC,EAgBT,SAAUtB,GACR,GAAa,OAATA,QAA0B9I,IAAT8I,EACnB,OAAOpB,EAGT,GAAoB,oBAAToB,EACT,OAAOuB,EAAYvB,GAGrB,GAAoB,kBAATA,EACT,OAAO9B,MAAMsD,QAAQxB,GAe7B,SAAoByB,GAElB,MAAMC,EAAS,GACf,IAAIrK,GAAS,EAEb,OAASA,EAAQoK,EAAMjK,QACrBkK,EAAOrK,GAASiK,EAAQG,EAAMpK,IAGhC,OAAOkK,EAAYI,GAMnB,SAASA,KAAOrB,GACd,IAAIjJ,GAAS,EAEb,OAASA,EAAQqK,EAAOlK,QACtB,GAAIkK,EAAOrK,GAAO0D,MAAM6G,KAAMtB,GAAa,OAAO,EAGpD,OAAO,CACT,CACF,CAvCqCuB,CAAW7B,GA+ChD,SAAsB8B,GACpB,MAAMC,EAAwDD,EAE9D,OAAOP,EAAYS,GAMnB,SAASA,EAAIlN,GACX,MAAMmN,EACoBnN,EAI1B,IAAImG,EAEJ,IAAKA,KAAO6G,EACV,GAAIG,EAAahH,KAAS8G,EAAc9G,GAAM,OAAO,EAGvD,OAAO,CACT,CACF,CAtEwDiH,CAAalC,GAG/D,GAAoB,kBAATA,EACT,OA0ER,SAAqB8B,GACnB,OAAOP,EAAY1C,GAKnB,SAASA,EAAK/J,GACZ,OAAOA,GAAQA,EAAK+J,OAASiD,CAC/B,CACF,CAnFeK,CAAYnC,GAGrB,MAAM,IAAIoC,MAAM,+CAClB,EAuFJ,SAASb,EAAYc,GACnB,OAMA,SAAe9D,EAAOlH,EAAOiL,GAC3B,OAAOC,QACLC,EAAejE,IACb8D,EAAaI,KACXb,KACArD,EACiB,kBAAVlH,EAAqBA,OAAQH,EACpCoL,QAAUpL,GAGlB,CACF,CAEA,SAAS0H,IACP,OAAO,CACT,CAMA,SAAS4D,EAAejE,GACtB,OAAiB,OAAVA,GAAmC,kBAAVA,GAAsB,SAAUA,CAClE,CChNO,SAASmE,EAAeC,EAAMxC,EAAMyC,GACzC,MACMC,EAAUvB,GADCsB,GAAW,CAAC,GACIE,QAAU,IACrCC,EAiIR,SAAiBC,GAEf,MAAMC,EAAS,GAEf,IAAK/E,MAAMsD,QAAQwB,GACjB,MAAM,IAAI5B,UAAU,qDAKtB,MAAMjB,GACH6C,EAAY,IAAM9E,MAAMsD,QAAQwB,EAAY,IACzCA,EACA,CAACA,GAEP,IAAI3L,GAAS,EAEb,OAASA,EAAQ8I,EAAK3I,QAAQ,CAC5B,MAAM0L,EAAQ/C,EAAK9I,GACnB4L,EAAO3N,KAAK,CAAC6N,EAAaD,EAAM,IAAKE,EAAWF,EAAM,KACxD,CAEA,OAAOD,CACT,CAxJgBI,CAAQlD,GACtB,IAAImD,GAAa,EAEjB,OAASA,EAAYP,EAAMvL,SACzB+L,EAAAA,EAAAA,IAAaZ,EAAM,OAAQa,GAI7B,SAASA,EAAQ1O,EAAM2O,GACrB,IAEIC,EAFArM,GAAS,EAIb,OAASA,EAAQoM,EAAQjM,QAAQ,CAC/B,MAAM8K,EAASmB,EAAQpM,GAEjBsM,EAAWD,EAAcA,EAAYE,cAAW1M,EAEtD,GACE2L,EACEP,EACAqB,EAAWA,EAASrM,QAAQgL,QAAUpL,EACtCwM,GAGF,OAGFA,EAAcpB,CAChB,CAEA,GAAIoB,EACF,OAcJ,SAAiB5O,EAAM2O,GACrB,MAAMnB,EAASmB,EAAQA,EAAQjM,OAAS,GAClCqM,EAAOd,EAAMO,GAAW,GACxBQ,EAAUf,EAAMO,GAAW,GACjC,IAAIpL,EAAQ,EAEZ,MACMb,EADWiL,EAAOsB,SACDtM,QAAQxC,GAC/B,IAAIiP,GAAS,EAETC,EAAQ,GAEZH,EAAKI,UAAY,EAEjB,IAAIC,EAAQL,EAAKM,KAAKrP,EAAKyJ,OAE3B,KAAO2F,GAAO,CACZ,MAAME,EAAWF,EAAM7M,MAEjBgN,EAAc,CAClBhN,MAAO6M,EAAM7M,MACbiN,MAAOJ,EAAMI,MACbC,MAAO,IAAId,EAAS3O,IAEtB,IAAIyJ,EAAQuF,KAAWI,EAAOG,GA8B9B,GA5BqB,kBAAV9F,IACTA,EAAQA,EAAM/G,OAAS,EAAI,CAACqH,KAAM,OAAQN,cAASrH,IAIvC,IAAVqH,EAIFsF,EAAKI,UAAYG,EAAW,GAExBlM,IAAUkM,GACZJ,EAAM1O,KAAK,CACTuJ,KAAM,OACNN,MAAOzJ,EAAKyJ,MAAMvD,MAAM9C,EAAOkM,KAI/BlG,MAAMsD,QAAQjD,GAChByF,EAAM1O,QAAQiJ,GACLA,GACTyF,EAAM1O,KAAKiJ,GAGbrG,EAAQkM,EAAWF,EAAM,GAAG1M,OAC5BuM,GAAS,IAGNF,EAAKW,OACR,MAGFN,EAAQL,EAAKM,KAAKrP,EAAKyJ,MACzB,CAEIwF,GACE7L,EAAQpD,EAAKyJ,MAAM/G,QACrBwM,EAAM1O,KAAK,CAACuJ,KAAM,OAAQN,MAAOzJ,EAAKyJ,MAAMvD,MAAM9C,KAGpDoK,EAAOsB,SAASrM,OAAOF,EAAO,KAAM2M,IAEpCA,EAAQ,CAAClP,GAGX,OAAOuC,EAAQ2M,EAAMxM,MACvB,CAtFWiN,CAAQ3P,EAAM2O,EAEzB,CAqFF,CA2CA,SAASN,EAAaU,GACpB,MAAuB,kBAATA,EAAoB,IAAIa,OCxPzB,SAA4BC,GAC1C,GAAsB,kBAAXA,EACV,MAAM,IAAIvD,UAAU,qBAKrB,OAAOuD,EACLb,QAAQ,sBAAuB,QAC/BA,QAAQ,KAAM,QACjB,CD8O+Cc,CAAOf,GAAO,KAAOA,CACpE,CAUA,SAAST,EAAWU,GAClB,MAA0B,oBAAZA,EACVA,EACA,WACE,OAAOA,CACT,CACN,CEnPA,MAAMe,EAAc,WAEdC,EAAiB,CAAC,WAAY,OAAQ,QAAS,SAkErD,SAASC,EAAqBC,GAC5BpD,KAAK1C,MAAM,CAACL,KAAM,OAAQoG,MAAO,KAAMC,IAAK,GAAItB,SAAU,IAAKoB,EACjE,CAMA,SAASG,EAA0BH,GACjCpD,KAAKwD,OAAOlG,MAAMmG,iBAAiB5C,KAAKb,KAAMoD,EAChD,CAMA,SAASM,EAAwBN,GAC/BpD,KAAKwD,OAAO/F,KAAKgG,iBAAiB5C,KAAKb,KAAMoD,EAC/C,CAMA,SAASO,EAAuBP,GAC9BpD,KAAKwD,OAAO/F,KAAKmG,KAAK/C,KAAKb,KAAMoD,GACjC,MAAMlQ,EAAO8M,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,IAC5CiO,EAAAA,EAAAA,IAAqB,SAAd3Q,EAAK+J,MACZ/J,EAAKoQ,IAAM,UAAYtD,KAAK8D,eAAeV,EAC7C,CAMA,SAASW,EAAyBX,GAChCpD,KAAKwD,OAAO/F,KAAKuG,cAAcnD,KAAKb,KAAMoD,EAC5C,CAMA,SAASa,EAAoBb,GAC3BpD,KAAKvC,KAAK2F,EACZ,CAGA,SAASc,EAA6BnD,GACpCD,EACEC,EACA,CACE,CAAC,kDAAmDoD,GACpD,CAAC,oCAAqCC,IAExC,CAAClD,OAAQ,CAAC,OAAQ,kBAEtB,CAYA,SAASiD,EAAQE,EAAGC,EAAUC,EAAQC,EAAMlC,GAC1C,IAAI/E,EAAS,GAGb,IAAKkH,EAASnC,GACZ,OAAO,EAUT,GANI,MAAMlE,KAAKkG,KACbC,EAASD,EAAWC,EACpBD,EAAW,GACX/G,EAAS,YAwDb,SAAyBgH,GACvB,MAAMG,EAAQH,EAAOI,MAAM,KAE3B,GACED,EAAM9O,OAAS,GACd8O,EAAMA,EAAM9O,OAAS,KACnB,IAAIwI,KAAKsG,EAAMA,EAAM9O,OAAS,MAC5B,aAAawI,KAAKsG,EAAMA,EAAM9O,OAAS,MAC3C8O,EAAMA,EAAM9O,OAAS,KACnB,IAAIwI,KAAKsG,EAAMA,EAAM9O,OAAS,MAC5B,aAAawI,KAAKsG,EAAMA,EAAM9O,OAAS,KAE5C,OAAO,EAGT,OAAO,CACT,CArEOgP,CAAgBL,GACnB,OAAO,EAGT,MAAMG,EAuER,SAAkBpB,GAChB,MAAMuB,EAAY,sBAAsBtC,KAAKe,GAE7C,IAAKuB,EACH,MAAO,CAACvB,OAAKhO,GAGfgO,EAAMA,EAAIlK,MAAM,EAAGyL,EAAUpP,OAE7B,IAAIqP,EAAQD,EAAU,GAClBE,EAAoBD,EAAMpP,QAAQ,KACtC,MAAMsP,EAAgB3F,EAAOiE,EAAK,KAClC,IAAI2B,EAAgB5F,EAAOiE,EAAK,KAEhC,MAA8B,IAAvByB,GAA4BC,EAAgBC,GACjD3B,GAAOwB,EAAM1L,MAAM,EAAG2L,EAAoB,GAC1CD,EAAQA,EAAM1L,MAAM2L,EAAoB,GACxCA,EAAoBD,EAAMpP,QAAQ,KAClCuP,IAGF,MAAO,CAAC3B,EAAKwB,EACf,CA7FgBI,CAASX,EAASC,GAEhC,IAAKE,EAAM,GAAI,OAAO,EAGtB,MAAMrD,EAAS,CACbpE,KAAM,OACNoG,MAAO,KACPC,IAAK/F,EAAS+G,EAAWI,EAAM,GAC/B1C,SAAU,CAAC,CAAC/E,KAAM,OAAQN,MAAO2H,EAAWI,EAAM,MAGpD,OAAIA,EAAM,GACD,CAACrD,EAAQ,CAACpE,KAAM,OAAQN,MAAO+H,EAAM,KAGvCrD,CACT,CAUA,SAAS+C,EAAUC,EAAGc,EAAOC,EAAO9C,GAClC,SAEGmC,EAASnC,GAAO,IAEjB,UAAUlE,KAAKgH,KAKV,CACLnI,KAAM,OACNoG,MAAO,KACPC,IAAK,UAAY6B,EAAQ,IAAMC,EAC/BpD,SAAU,CAAC,CAAC/E,KAAM,OAAQN,MAAOwI,EAAQ,IAAMC,IAEnD,CAyDA,SAASX,EAASnC,EAAO+C,GACvB,MAAM/S,EAAOgQ,EAAMI,MAAM4C,WAAWhD,EAAM7M,MAAQ,GAElD,OACmB,IAAhB6M,EAAM7M,QACLjD,EAAAA,EAAAA,IAAkBF,KAClBG,EAAAA,EAAAA,IAAmBH,OACnB+S,GAAkB,KAAT/S,EAEf,C,eCpOA,SAASiT,EAAwBnC,GAC/BpD,KAAK1C,MACH,CAACL,KAAM,qBAAsBuI,WAAY,GAAIJ,MAAO,GAAIpD,SAAU,IAClEoB,EAEJ,CAMA,SAASqC,IACPzF,KAAK0F,QACP,CAMA,SAASC,EAAkCvC,GACzC,MAAMgC,EAAQpF,KAAK4F,SACb1S,EAAO8M,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,IAC5CiO,EAAAA,EAAAA,IAAqB,uBAAd3Q,EAAK+J,MACZ/J,EAAKkS,MAAQA,EACblS,EAAKsS,YAAaK,EAAAA,EAAAA,GAChB7F,KAAK8D,eAAeV,IACpB0C,aACJ,CAMA,SAASC,EAAuB3C,GAC9BpD,KAAKvC,KAAK2F,EACZ,CAMA,SAAS4C,EAAkB5C,GACzBpD,KAAK1C,MAAM,CAACL,KAAM,oBAAqBuI,WAAY,GAAIJ,MAAO,IAAKhC,EACrE,CAMA,SAAS6C,IACPjG,KAAK0F,QACP,CAMA,SAASQ,EAAuB9C,GAC9B,MAAMgC,EAAQpF,KAAK4F,SACb1S,EAAO8M,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,IAC5CiO,EAAAA,EAAAA,IAAqB,sBAAd3Q,EAAK+J,MACZ/J,EAAKkS,MAAQA,EACblS,EAAKsS,YAAaK,EAAAA,EAAAA,GAChB7F,KAAK8D,eAAeV,IACpB0C,aACJ,CAMA,SAASK,EAAiB/C,GACxBpD,KAAKvC,KAAK2F,EACZ,CAMA,SAASgD,EAAkBlT,EAAMmR,EAAGpR,EAAOoT,GACzC,MAAMC,EAAUrT,EAAMsT,cAAcF,GACpC,IAAI1J,EAAQ2J,EAAQE,KAAK,MACzB,MAAM/I,EAAOxK,EAAMqK,MAAM,qBACnBmJ,EAAUxT,EAAMqK,MAAM,aAW5B,OAVAX,GAAS2J,EAAQE,KACfvT,EAAMyT,KAAKzT,EAAM0T,cAAczT,GAAO,IACjCoT,EAAQ/R,UACXqS,OAAQjK,EACRkK,MAAO,OAGXJ,IACAhJ,IACAd,GAAS2J,EAAQE,KAAK,KACf7J,CACT,CAWA,SAASmK,EAAmB5T,EAAMmR,EAAGpR,EAAOoT,GAC1C,MAAMC,EAAUrT,EAAMsT,cAAcF,GACpC,IAAI1J,EAAQ2J,EAAQE,KAAK,MACzB,MAAM/I,EAAOxK,EAAMqK,MAAM,sBACnBmJ,EAAUxT,EAAMqK,MAAM,SAkB5B,OAjBAX,GAAS2J,EAAQE,KACfvT,EAAMyT,KAAKzT,EAAM0T,cAAczT,GAAO,IACjCoT,EAAQ/R,UACXqS,OAAQjK,EACRkK,MAAO,OAGXJ,IACA9J,GAAS2J,EAAQE,KACf,MAAQtT,EAAK8O,UAAY9O,EAAK8O,SAASpM,OAAS,EAAI,IAAM,KAE5D0Q,EAAQS,MAAM,GACdpK,GAAS2J,EAAQE,KACfvT,EAAM+T,YAAY/T,EAAMgU,cAAc/T,EAAMoT,EAAQ/R,WAAY2S,IAElEzJ,IAEOd,CACT,CAGA,SAASuK,EAAIC,EAAM1R,EAAO2R,GACxB,OAAc,IAAV3R,EACK0R,GAGDC,EAAQ,GAAK,QAAUD,CACjC,CAvLAf,EAAkBiB,KA+IlB,WACE,MAAO,GACT,ECzIA,MAAMC,EAAiC,CACrC,WACA,qBACA,iBACA,YACA,aACA,mBA4CF,SAASC,EAAmBnE,GAC1BpD,KAAK1C,MAAM,CAACL,KAAM,SAAU+E,SAAU,IAAKoB,EAC7C,CAMA,SAASoE,EAAkBpE,GACzBpD,KAAKvC,KAAK2F,EACZ,CAMA,SAASqE,EAAavU,EAAMmR,EAAGpR,EAAOoT,GACpC,MAAMC,EAAUrT,EAAMsT,cAAcF,GAC9B5I,EAAOxK,EAAMqK,MAAM,iBACzB,IAAIX,EAAQ2J,EAAQE,KAAK,MAQzB,OAPA7J,GAAS1J,EAAMyU,kBAAkBxU,EAAM,IAClCoT,EAAQ/R,UACXqS,OAAQjK,EACRkK,MAAO,MAETlK,GAAS2J,EAAQE,KAAK,MACtB/I,IACOd,CACT,CCqQA,SAASgL,EAAoBhL,GAC3B,OAAOA,EAAM/G,MACf,CAMA,SAASgS,EAAYjL,GACnB,MAAMrK,EAAwB,kBAAVqK,EAAqBA,EAAMkL,YAAY,GAAK,EAEhE,OAAgB,KAATvV,GAAkC,KAATA,EAC5B,GACS,KAATA,GAAkC,MAATA,EACzB,IACS,KAATA,GAAkC,MAATA,EACzB,IACA,CACN,CC9VA,SAAS4U,EAAIC,EAAM9C,EAAG+C,GACpB,MAAO,KAAOA,EAAQ,GAAK,KAAOD,CACpC,CCRA,SAASW,EAAYnF,EAAOpE,EAAMwJ,GAKhC,GAJoB,kBAATxJ,IACTA,EAAO,CAACA,KAGLA,GAAwB,IAAhBA,EAAK3I,OAChB,OAAOmS,EAGT,IAAItS,GAAS,EAEb,OAASA,EAAQ8I,EAAK3I,QACpB,GAAI+M,EAAMvD,SAASb,EAAK9I,IACtB,OAAO,EAIX,OAAO,CACT,CCzBO,SAASuS,EAAU3D,EAAG4D,EAAIhV,EAAOoT,GACtC,IAAI5Q,GAAS,EAEb,OAASA,EAAQxC,EAAMiV,OAAOtS,QAG5B,GACoC,OAAlC3C,EAAMiV,OAAOzS,GAAO6J,YDbKqD,ECcV1P,EAAM0P,MDdWwF,ECcJlV,EAAMiV,OAAOzS,GDZ3CqS,EAAYnF,EAAOwF,EAAQlF,aAAa,KACvC6E,EAAYnF,EAAOwF,EAAQjF,gBAAgB,ICa1C,MAAO,QAAQ9E,KAAKiI,EAAKO,QAAU,GAAK,IDhBvC,IAAwBjE,EAAOwF,ECoBpC,MAAO,MACT,CC4CA,SAASjB,EAAIC,EAAM9C,EAAG+C,GACpB,OAAQA,EAAQ,GAAK,QAAUD,CACjC,CCpEO,SAASiB,EAAWnV,GACzB,MAAMoV,EAASpV,EAAM+N,QAAQsH,OAAS,IAEtC,GAAe,MAAXD,GAA6B,MAAXA,EACpB,MAAM,IAAI7H,MACR,gCACE6H,EACA,gDAIN,OAAOA,CACT,CCCO,SAASE,EAASrV,EAAMmR,EAAGpR,EAAOoT,GACvC,MAAMgC,ECdD,SAAuBpV,GAC5B,MAAMoV,EAASpV,EAAM+N,QAAQuH,UAAY,IAEzC,GAAe,MAAXF,GAA6B,MAAXA,EACpB,MAAM,IAAI7H,MACR,mCACE6H,EACA,kDAIN,OAAOA,CACT,CDEiBG,CAAcvV,GACvBwK,EAAOxK,EAAMqK,MAAM,YACnBgJ,EAAUrT,EAAMsT,cAAcF,GACpC,IAAI1J,EAAQ2J,EAAQE,KAAK6B,GAUzB,OATA1L,GAAS2J,EAAQE,KACfvT,EAAMyU,kBAAkBxU,EAAM,CAC5B0T,OAAQjK,EACRkK,MAAOwB,KACJ/B,EAAQ/R,aAGfoI,GAAS2J,EAAQE,KAAK6B,GACtB5K,IACOd,CACT,CPNA8K,EAAaJ,KAwEb,WACE,MAAO,GACT,EOhGAkB,EAASlB,KAoCT,SAAsBhD,EAAG4D,EAAIhV,GAC3B,OAAOA,EAAM+N,QAAQuH,UAAY,GACnC,E,eElCO,SAASE,EAAsBvV,EAAMD,GAC1C,IAAIyV,GAAmB,EAcvB,OC0PK,SAAe3H,EAAM4H,EAAeC,EAAkBC,GAE3D,IAAIC,EAEA1K,EAEAwD,EAGuB,oBAAlB+G,GACqB,oBAArBC,GAEPxK,OAAO9I,EACPsM,EAAU+G,EACVG,EAAUF,IAGVxK,EAAOuK,EAEP/G,EAAUgH,EACVE,EAAUD,IAGZlH,EAAAA,EAAAA,IAAaZ,EAAM3C,GAMnB,SAAkBlL,EAAM2O,GACtB,MAAMnB,EAASmB,EAAQA,EAAQjM,OAAS,GAClCH,EAAQiL,EAASA,EAAOsB,SAAStM,QAAQxC,QAAQoC,EACvD,OAAOsM,EAAQ1O,EAAMuC,EAAOiL,EAC9B,GAVmCoI,EAWrC,CDtSEC,CAAM7V,GAAM,SAAUA,GACpB,GACG,UAAWA,GAAQ,WAAWkL,KAAKlL,EAAKyJ,QAC3B,UAAdzJ,EAAK+J,KAGL,OADAyL,GAAmB,EACZM,EAAAA,EAEX,IAEOrI,UACHzN,EAAK+V,OAAS/V,EAAK+V,MAAQ,KAC3BC,EAAAA,EAAAA,GAAShW,KACRD,EAAM+N,QAAQmI,QAAUT,GAE/B,CEvBO,SAASU,EAAKlW,GACnB,OAAOA,EAAKyJ,OAAS,EACvB,CCMO,SAAS0M,EAAMnW,EAAMmR,EAAGpR,EAAOoT,GACpC,MAAMiC,EAAQF,EAAWnV,GACnBqW,EAAmB,MAAVhB,EAAgB,QAAU,aACnC7K,EAAOxK,EAAMqK,MAAM,SACzB,IAAImJ,EAAUxT,EAAMqK,MAAM,SAC1B,MAAMgJ,EAAUrT,EAAMsT,cAAcF,GACpC,IAAI1J,EAAQ2J,EAAQE,KAAK,MAmDzB,OAlDA7J,GAAS2J,EAAQE,KACfvT,EAAMyT,KAAKxT,EAAKqW,IAAK,CAAC3C,OAAQjK,EAAOkK,MAAO,OAAQP,EAAQ/R,aAE9DoI,GAAS2J,EAAQE,KAAK,MAEtBC,KAIIvT,EAAKoQ,KAAOpQ,EAAKmQ,OAEnB,eAAejF,KAAKlL,EAAKoQ,MAEzBmD,EAAUxT,EAAMqK,MAAM,sBACtBX,GAAS2J,EAAQE,KAAK,KACtB7J,GAAS2J,EAAQE,KACfvT,EAAMyT,KAAKxT,EAAKoQ,IAAK,CAACsD,OAAQjK,EAAOkK,MAAO,OAAQP,EAAQ/R,aAE9DoI,GAAS2J,EAAQE,KAAK,OAGtBC,EAAUxT,EAAMqK,MAAM,kBACtBX,GAAS2J,EAAQE,KACfvT,EAAMyT,KAAKxT,EAAKoQ,IAAK,CACnBsD,OAAQjK,EACRkK,MAAO3T,EAAKmQ,MAAQ,IAAM,OACvBiD,EAAQ/R,cAKjBkS,IAEIvT,EAAKmQ,QACPoD,EAAUxT,EAAMqK,MAAM,QAAQgM,KAC9B3M,GAAS2J,EAAQE,KAAK,IAAM8B,GAC5B3L,GAAS2J,EAAQE,KACfvT,EAAMyT,KAAKxT,EAAKmQ,MAAO,CACrBuD,OAAQjK,EACRkK,MAAOyB,KACJhC,EAAQ/R,aAGfoI,GAAS2J,EAAQE,KAAK8B,GACtB7B,KAGF9J,GAAS2J,EAAQE,KAAK,KACtB/I,IAEOd,CACT,CC5DO,SAAS6M,GAAetW,EAAMmR,EAAGpR,EAAOoT,GAC7C,MAAMpJ,EAAO/J,EAAKuW,cACZhM,EAAOxK,EAAMqK,MAAM,kBACzB,IAAImJ,EAAUxT,EAAMqK,MAAM,SAC1B,MAAMgJ,EAAUrT,EAAMsT,cAAcF,GACpC,IAAI1J,EAAQ2J,EAAQE,KAAK,MACzB,MAAM+C,EAAMtW,EAAMyT,KAAKxT,EAAKqW,IAAK,CAC/B3C,OAAQjK,EACRkK,MAAO,OACJP,EAAQ/R,YAEboI,GAAS2J,EAAQE,KAAK+C,EAAM,MAE5B9C,IAEA,MAAM9D,EAAQ1P,EAAM0P,MACpB1P,EAAM0P,MAAQ,GACd8D,EAAUxT,EAAMqK,MAAM,aAKtB,MAAMoM,EAAYzW,EAAMyT,KAAKzT,EAAM0T,cAAczT,GAAO,CACtD0T,OAAQjK,EACRkK,MAAO,OACJP,EAAQ/R,YAeb,OAbAkS,IACAxT,EAAM0P,MAAQA,EACdlF,IAEa,SAATR,GAAoBsM,GAAOA,IAAQG,EAEnB,aAATzM,EAETN,EAAQA,EAAMvD,MAAM,GAAI,GAExBuD,GAAS2J,EAAQE,KAAK,KALtB7J,GAAS2J,EAAQE,KAAKkD,EAAY,KAQ7B/M,CACT,CC3CO,SAASgN,GAAWzW,EAAMmR,EAAGpR,GAClC,IAAI0J,EAAQzJ,EAAKyJ,OAAS,GACtBiN,EAAW,IACXnU,GAAS,EAKb,KAAO,IAAIqN,OAAO,WAAa8G,EAAW,YAAYxL,KAAKzB,IACzDiN,GAAY,IAmBd,IAbE,WAAWxL,KAAKzB,KACd,WAAWyB,KAAKzB,IAAU,WAAWyB,KAAKzB,IAAW,QAAQyB,KAAKzB,MAEpEA,EAAQ,IAAMA,EAAQ,OAUflH,EAAQxC,EAAMiV,OAAOtS,QAAQ,CACpC,MAAMuS,EAAUlV,EAAMiV,OAAOzS,GACvBoU,EAAa5W,EAAM6W,eAAe3B,GAExC,IAAI7F,EAKJ,GAAK6F,EAAQ4B,QAEb,KAAQzH,EAAQuH,EAAWtH,KAAK5F,IAAS,CACvC,IAAI6F,EAAWF,EAAM7M,MAIY,KAA/BkH,EAAM2I,WAAW9C,IACkB,KAAnC7F,EAAM2I,WAAW9C,EAAW,IAE5BA,IAGF7F,EAAQA,EAAMvD,MAAM,EAAGoJ,GAAY,IAAM7F,EAAMvD,MAAMkJ,EAAM7M,MAAQ,EACrE,CACF,CAEA,OAAOmU,EAAWjN,EAAQiN,CAC5B,CCzDO,SAASI,GAAqB9W,EAAMD,GACzC,MAAMgX,GAAMf,EAAAA,EAAAA,GAAShW,GAErB,OAAOyN,SACJ1N,EAAM+N,QAAQkJ,cAEbhX,EAAKoQ,MAEJpQ,EAAKmQ,OAENnQ,EAAK8O,UACoB,IAAzB9O,EAAK8O,SAASpM,QACY,SAA1B1C,EAAK8O,SAAS,GAAG/E,OAEhBgN,IAAQ/W,EAAKoQ,KAAO,UAAY2G,IAAQ/W,EAAKoQ,MAE9C,oBAAoBlF,KAAKlL,EAAKoQ,OAG7B,iBAAiBlF,KAAKlL,EAAKoQ,KAElC,CCbO,SAAS6G,GAAKjX,EAAMmR,EAAGpR,EAAOoT,GACnC,MAAMiC,EAAQF,EAAWnV,GACnBqW,EAAmB,MAAVhB,EAAgB,QAAU,aACnChC,EAAUrT,EAAMsT,cAAcF,GAEpC,IAAI5I,EAEAgJ,EAEJ,GAAIuD,GAAqB9W,EAAMD,GAAQ,CAErC,MAAM0P,EAAQ1P,EAAM0P,MACpB1P,EAAM0P,MAAQ,GACdlF,EAAOxK,EAAMqK,MAAM,YACnB,IAAIX,EAAQ2J,EAAQE,KAAK,KAWzB,OAVA7J,GAAS2J,EAAQE,KACfvT,EAAMyU,kBAAkBxU,EAAM,CAC5B0T,OAAQjK,EACRkK,MAAO,OACJP,EAAQ/R,aAGfoI,GAAS2J,EAAQE,KAAK,KACtB/I,IACAxK,EAAM0P,MAAQA,EACPhG,CACT,CAEAc,EAAOxK,EAAMqK,MAAM,QACnBmJ,EAAUxT,EAAMqK,MAAM,SACtB,IAAIX,EAAQ2J,EAAQE,KAAK,KAsDzB,OArDA7J,GAAS2J,EAAQE,KACfvT,EAAMyU,kBAAkBxU,EAAM,CAC5B0T,OAAQjK,EACRkK,MAAO,QACJP,EAAQ/R,aAGfoI,GAAS2J,EAAQE,KAAK,MACtBC,KAIIvT,EAAKoQ,KAAOpQ,EAAKmQ,OAEnB,eAAejF,KAAKlL,EAAKoQ,MAEzBmD,EAAUxT,EAAMqK,MAAM,sBACtBX,GAAS2J,EAAQE,KAAK,KACtB7J,GAAS2J,EAAQE,KACfvT,EAAMyT,KAAKxT,EAAKoQ,IAAK,CAACsD,OAAQjK,EAAOkK,MAAO,OAAQP,EAAQ/R,aAE9DoI,GAAS2J,EAAQE,KAAK,OAGtBC,EAAUxT,EAAMqK,MAAM,kBACtBX,GAAS2J,EAAQE,KACfvT,EAAMyT,KAAKxT,EAAKoQ,IAAK,CACnBsD,OAAQjK,EACRkK,MAAO3T,EAAKmQ,MAAQ,IAAM,OACvBiD,EAAQ/R,cAKjBkS,IAEIvT,EAAKmQ,QACPoD,EAAUxT,EAAMqK,MAAM,QAAQgM,KAC9B3M,GAAS2J,EAAQE,KAAK,IAAM8B,GAC5B3L,GAAS2J,EAAQE,KACfvT,EAAMyT,KAAKxT,EAAKmQ,MAAO,CACrBuD,OAAQjK,EACRkK,MAAOyB,KACJhC,EAAQ/R,aAGfoI,GAAS2J,EAAQE,KAAK8B,GACtB7B,KAGF9J,GAAS2J,EAAQE,KAAK,KAEtB/I,IACOd,CACT,CCzFO,SAASyN,GAAclX,EAAMmR,EAAGpR,EAAOoT,GAC5C,MAAMpJ,EAAO/J,EAAKuW,cACZhM,EAAOxK,EAAMqK,MAAM,iBACzB,IAAImJ,EAAUxT,EAAMqK,MAAM,SAC1B,MAAMgJ,EAAUrT,EAAMsT,cAAcF,GACpC,IAAI1J,EAAQ2J,EAAQE,KAAK,KACzB,MAAM6D,EAAOpX,EAAMyU,kBAAkBxU,EAAM,CACzC0T,OAAQjK,EACRkK,MAAO,OACJP,EAAQ/R,YAEboI,GAAS2J,EAAQE,KAAK6D,EAAO,MAE7B5D,IAEA,MAAM9D,EAAQ1P,EAAM0P,MACpB1P,EAAM0P,MAAQ,GACd8D,EAAUxT,EAAMqK,MAAM,aAKtB,MAAMoM,EAAYzW,EAAMyT,KAAKzT,EAAM0T,cAAczT,GAAO,CACtD0T,OAAQjK,EACRkK,MAAO,OACJP,EAAQ/R,YAeb,OAbAkS,IACAxT,EAAM0P,MAAQA,EACdlF,IAEa,SAATR,GAAoBoN,GAAQA,IAASX,EAErB,aAATzM,EAETN,EAAQA,EAAMvD,MAAM,GAAI,GAExBuD,GAAS2J,EAAQE,KAAK,KALtB7J,GAAS2J,EAAQE,KAAKkD,EAAY,KAQ7B/M,CACT,CChDO,SAAS2N,GAAYrX,GAC1B,MAAMoV,EAASpV,EAAM+N,QAAQuJ,QAAU,IAEvC,GAAe,MAAXlC,GAA6B,MAAXA,GAA6B,MAAXA,EACtC,MAAM,IAAI7H,MACR,gCACE6H,EACA,qDAIN,OAAOA,CACT,CCZO,SAASmC,GAAUvX,GACxB,MAAMoV,EAASpV,EAAM+N,QAAQyJ,MAAQ,IAErC,GAAe,MAAXpC,GAA6B,MAAXA,GAA6B,MAAXA,EACtC,MAAM,IAAI7H,MACR,gCACE6H,EACA,mDAIN,OAAOA,CACT,CRjBAe,EAAK/B,KAaL,WACE,MAAO,GACT,ECVAgC,EAAMhC,KAwEN,WACE,MAAO,GACT,EC5EAmC,GAAenC,KAuDf,WACE,MAAO,GACT,EC1DAsC,GAAWtC,KAoEX,WACE,MAAO,GACT,EEjEA8C,GAAK9C,KAsGL,SAAkBnU,EAAMmR,EAAGpR,GACzB,OAAO+W,GAAqB9W,EAAMD,GAAS,IAAM,GACnD,EC5GAmX,GAAc/C,KAuDd,WACE,MAAO,GACT,EGCO,MA0EM3H,GAgBT,SAAUtB,GACR,GAAa,OAATA,QAA0B9I,IAAT8I,EACnB,OAAOpB,GAGT,GAAoB,oBAAToB,EACT,OAAOuB,GAAYvB,GAGrB,GAAoB,kBAATA,EACT,OAAO9B,MAAMsD,QAAQxB,GAe7B,SAAoByB,GAElB,MAAMC,EAAS,GACf,IAAIrK,GAAS,EAEb,OAASA,EAAQoK,EAAMjK,QACrBkK,EAAOrK,GAASiK,GAAQG,EAAMpK,IAGhC,OAAOkK,GAAYI,GAMnB,SAASA,KAAOrB,GACd,IAAIjJ,GAAS,EAEb,OAASA,EAAQqK,EAAOlK,QACtB,GAAIkK,EAAOrK,GAAO0D,MAAM6G,KAAMtB,GAAa,OAAO,EAGpD,OAAO,CACT,CACF,CAvCqCuB,CAAW7B,GA+ChD,SAAsB8B,GACpB,MAAMC,EAAwDD,EAE9D,OAAOP,GAAYS,GAMnB,SAASA,EAAIlN,GACX,MAAMmN,EACoBnN,EAI1B,IAAImG,EAEJ,IAAKA,KAAO6G,EACV,GAAIG,EAAahH,KAAS8G,EAAc9G,GAAM,OAAO,EAGvD,OAAO,CACT,CACF,CAtEwDiH,CAAalC,GAG/D,GAAoB,kBAATA,EACT,OA0ER,SAAqB8B,GACnB,OAAOP,GAAY1C,GAKnB,SAASA,EAAK/J,GACZ,OAAOA,GAAQA,EAAK+J,OAASiD,CAC/B,CACF,CAnFeK,CAAYnC,GAGrB,MAAM,IAAIoC,MAAM,+CAClB,EAuFJ,SAASb,GAAYc,GACnB,OAMA,SAAe9D,EAAOlH,EAAOiL,GAC3B,OAAOC,QACLC,GAAejE,IACb8D,EAAaI,KACXb,KACArD,EACiB,kBAAVlH,EAAqBA,OAAQH,EACpCoL,QAAUpL,GAGlB,CACF,CAEA,SAAS0H,KACP,OAAO,CACT,CAMA,SAAS4D,GAAejE,GACtB,OAAiB,OAAVA,GAAmC,kBAAVA,GAAsB,SAAUA,CAClE,CChRO,MAAM+N,GAGThL,GAAQ,CACN,QACA,SACA,WAEA,WACA,oBACA,QACA,iBACA,aAEA,aACA,OACA,gBAEA,oBAEA,oBACA,SACA,OAEA,kBCpBC,SAASiL,GAAOzX,EAAMmR,EAAGpR,EAAOoT,GACrC,MAAMgC,ECdD,SAAqBpV,GAC1B,MAAMoV,EAASpV,EAAM+N,QAAQ2J,QAAU,IAEvC,GAAe,MAAXtC,GAA6B,MAAXA,EACpB,MAAM,IAAI7H,MACR,iCACE6H,EACA,gDAIN,OAAOA,CACT,CDEiBuC,CAAY3X,GACrBwK,EAAOxK,EAAMqK,MAAM,UACnBgJ,EAAUrT,EAAMsT,cAAcF,GACpC,IAAI1J,EAAQ2J,EAAQE,KAAK6B,EAASA,GAUlC,OATA1L,GAAS2J,EAAQE,KACfvT,EAAMyU,kBAAkBxU,EAAM,CAC5B0T,OAAQjK,EACRkK,MAAOwB,KACJ/B,EAAQ/R,aAGfoI,GAAS2J,EAAQE,KAAK6B,EAASA,GAC/B5K,IACOd,CACT,CA5BAgO,GAAOtD,KAoCP,SAAoBhD,EAAG4D,EAAIhV,GACzB,OAAOA,EAAM+N,QAAQ2J,QAAU,GACjC,EExBO,MAAME,GAAS,CACpBC,WtBTK,SAAoB5X,EAAMmR,EAAGpR,EAAOoT,GACzC,MAAM5I,EAAOxK,EAAMqK,MAAM,cACnBgJ,EAAUrT,EAAMsT,cAAcF,GACpCC,EAAQE,KAAK,MACbF,EAAQS,MAAM,GACd,MAAMpK,EAAQ1J,EAAM+T,YAClB/T,EAAMgU,cAAc/T,EAAMoT,EAAQ/R,WAClC2S,GAGF,OADAzJ,IACOd,CACT,EsBDEoO,MAAO/C,EACP1V,KnBPK,SAAcY,EAAMmR,EAAGpR,EAAOoT,GACnC,MAAMgC,EoBXD,SAAoBpV,GACzB,MAAMoV,EAASpV,EAAM+N,QAAQgK,OAAS,IAEtC,GAAe,MAAX3C,GAA6B,MAAXA,EACpB,MAAM,IAAI7H,MACR,+BACE6H,EACA,kDAIN,OAAOA,CACT,CpBDiB4C,CAAWhY,GACpBgX,EAAM/W,EAAKyJ,OAAS,GACpB2M,EAAoB,MAAXjB,EAAiB,cAAgB,QAEhD,GqBdK,SAA8BnV,EAAMD,GACzC,OAAO0N,SACoB,IAAzB1N,EAAM+N,QAAQkK,QACZhY,EAAKyJ,QAEJzJ,EAAKiY,MAEN,WAAW/M,KAAKlL,EAAKyJ,SAEpB,0CAA0CyB,KAAKlL,EAAKyJ,OAE3D,CrBGMyO,CAAqBlY,EAAMD,GAAQ,CACrC,MAAMwK,EAAOxK,EAAMqK,MAAM,gBACnBX,EAAQ1J,EAAM+T,YAAYiD,EAAK/C,GAErC,OADAzJ,IACOd,CACT,CAEA,MAAM2J,EAAUrT,EAAMsT,cAAcF,GAC9BuD,EAAWvB,EAAOgD,OAAO9U,KAAKC,IsBtB/B,SAAuBmG,EAAO2O,GACnC,MAAM/L,EAASlB,OAAO1B,GACtB,IAAIlH,EAAQ8J,EAAO7J,QAAQ4V,GACvBC,EAAW9V,EACXgK,EAAQ,EACRjJ,EAAM,EAEV,GAAyB,kBAAd8U,EACT,MAAM,IAAI9L,UAAU,sBAGtB,MAAkB,IAAX/J,GACDA,IAAU8V,IACN9L,EAAQjJ,IACZA,EAAMiJ,GAGRA,EAAQ,EAGV8L,EAAW9V,EAAQ6V,EAAU1V,OAC7BH,EAAQ8J,EAAO7J,QAAQ4V,EAAWC,GAGpC,OAAO/U,CACT,CtBH0CgV,CAAcvB,EAAK5B,GAAU,EAAG,IAClE5K,EAAOxK,EAAMqK,MAAM,cACzB,IAAIX,EAAQ2J,EAAQE,KAAKoD,GAEzB,GAAI1W,EAAKiY,KAAM,CACb,MAAM1E,EAAUxT,EAAMqK,MAAM,iBAAiBgM,KAC7C3M,GAAS2J,EAAQE,KACfvT,EAAMyT,KAAKxT,EAAKiY,KAAM,CACpBvE,OAAQjK,EACRkK,MAAO,IACP4E,OAAQ,CAAC,QACNnF,EAAQ/R,aAGfkS,GACF,CAEA,GAAIvT,EAAKiY,MAAQjY,EAAKwY,KAAM,CAC1B,MAAMjF,EAAUxT,EAAMqK,MAAM,iBAAiBgM,KAC7C3M,GAAS2J,EAAQE,KAAK,KACtB7J,GAAS2J,EAAQE,KACfvT,EAAMyT,KAAKxT,EAAKwY,KAAM,CACpB9E,OAAQjK,EACRkK,MAAO,KACP4E,OAAQ,CAAC,QACNnF,EAAQ/R,aAGfkS,GACF,CAUA,OARA9J,GAAS2J,EAAQE,KAAK,MAElByD,IACFtN,GAAS2J,EAAQE,KAAKyD,EAAM,OAG9BtN,GAAS2J,EAAQE,KAAKoD,GACtBnM,IACOd,CACT,EmB7CEgP,WIXK,SAAoBzY,EAAMmR,EAAGpR,EAAOoT,GACzC,MAAMiC,EAAQF,EAAWnV,GACnBqW,EAAmB,MAAVhB,EAAgB,QAAU,aACnC7K,EAAOxK,EAAMqK,MAAM,cACzB,IAAImJ,EAAUxT,EAAMqK,MAAM,SAC1B,MAAMgJ,EAAUrT,EAAMsT,cAAcF,GACpC,IAAI1J,EAAQ2J,EAAQE,KAAK,KAsDzB,OArDA7J,GAAS2J,EAAQE,KACfvT,EAAMyT,KAAKzT,EAAM0T,cAAczT,GAAO,CACpC0T,OAAQjK,EACRkK,MAAO,OACJP,EAAQ/R,aAGfoI,GAAS2J,EAAQE,KAAK,OAEtBC,KAIGvT,EAAKoQ,KAEN,eAAelF,KAAKlL,EAAKoQ,MAEzBmD,EAAUxT,EAAMqK,MAAM,sBACtBX,GAAS2J,EAAQE,KAAK,KACtB7J,GAAS2J,EAAQE,KACfvT,EAAMyT,KAAKxT,EAAKoQ,IAAK,CAACsD,OAAQjK,EAAOkK,MAAO,OAAQP,EAAQ/R,aAE9DoI,GAAS2J,EAAQE,KAAK,OAGtBC,EAAUxT,EAAMqK,MAAM,kBACtBX,GAAS2J,EAAQE,KACfvT,EAAMyT,KAAKxT,EAAKoQ,IAAK,CACnBsD,OAAQjK,EACRkK,MAAO3T,EAAKmQ,MAAQ,IAAM,QACvBiD,EAAQ/R,cAKjBkS,IAEIvT,EAAKmQ,QACPoD,EAAUxT,EAAMqK,MAAM,QAAQgM,KAC9B3M,GAAS2J,EAAQE,KAAK,IAAM8B,GAC5B3L,GAAS2J,EAAQE,KACfvT,EAAMyT,KAAKxT,EAAKmQ,MAAO,CACrBuD,OAAQjK,EACRkK,MAAOyB,KACJhC,EAAQ/R,aAGfoI,GAAS2J,EAAQE,KAAK8B,GACtB7B,KAGFhJ,IAEOd,CACT,EJjDE4L,SAAQ,EACRP,UAAS,EACT4D,QKdK,SAAiB1Y,EAAMmR,EAAGpR,EAAOoT,GACtC,MAAMwF,EAAOtV,KAAKC,IAAID,KAAKI,IAAI,EAAGzD,EAAK+V,OAAS,GAAI,GAC9C3C,EAAUrT,EAAMsT,cAAcF,GAEpC,GAAIoC,EAAsBvV,EAAMD,GAAQ,CACtC,MAAMwK,EAAOxK,EAAMqK,MAAM,iBACnBmJ,EAAUxT,EAAMqK,MAAM,YACtBX,EAAQ1J,EAAMyU,kBAAkBxU,EAAM,IACvCoT,EAAQ/R,UACXqS,OAAQ,KACRC,MAAO,OAKT,OAHAJ,IACAhJ,IAGEd,EACA,MACU,IAATkP,EAAa,IAAM,KAAKR,OAEvB1O,EAAM/G,QAGHW,KAAKC,IAAImG,EAAMmP,YAAY,MAAOnP,EAAMmP,YAAY,OAAS,GAGtE,CAEA,MAAMlC,EAAW,IAAIyB,OAAOQ,GACtBpO,EAAOxK,EAAMqK,MAAM,cACnBmJ,EAAUxT,EAAMqK,MAAM,YAM5BgJ,EAAQE,KAAKoD,EAAW,KAExB,IAAIjN,EAAQ1J,EAAMyU,kBAAkBxU,EAAM,CACxC0T,OAAQ,KACRC,MAAO,QACJP,EAAQ/R,YAqBb,MAlBI,SAAS6J,KAAKzB,KAEhBA,EACE,MACAA,EAAM2I,WAAW,GAAG4D,SAAS,IAAI6C,cACjC,IACApP,EAAMvD,MAAM,IAGhBuD,EAAQA,EAAQiN,EAAW,IAAMjN,EAAQiN,EAErC3W,EAAM+N,QAAQgL,WAChBrP,GAAS,IAAMiN,GAGjBnD,IACAhJ,IAEOd,CACT,ELhDEyM,KAAI,EACJC,MAAK,EACLG,eAAc,GACdG,WAAU,GACVQ,KAAI,GACJC,cAAa,GACb7L,KMlBK,SAAcrL,EAAMwN,EAAQzN,EAAOoT,GACxC,MAAM5I,EAAOxK,EAAMqK,MAAM,QACnB2O,EAAgBhZ,EAAMgZ,cAE5B,IAAI1B,EAASrX,EAAKgZ,QCdb,SAA4BjZ,GACjC,MAAMoV,EAASpV,EAAM+N,QAAQmL,eAAiB,IAE9C,GAAe,MAAX9D,GAA6B,MAAXA,EACpB,MAAM,IAAI7H,MACR,gCACE6H,EACA,sDAIN,OAAOA,CACT,CDE8B+D,CAAmBnZ,GAASqX,GAAYrX,GAEpE,MAAMoZ,EAAcnZ,EAAKgZ,QACV,MAAX3B,EACE,IACA,IEjBD,SAA0BtX,GAC/B,MAAMsX,EAASD,GAAYrX,GACrBoZ,EAAcpZ,EAAM+N,QAAQqL,YAElC,IAAKA,EACH,MAAkB,MAAX9B,EAAiB,IAAM,IAGhC,GAAoB,MAAhB8B,GAAuC,MAAhBA,GAAuC,MAAhBA,EAChD,MAAM,IAAI7L,MACR,gCACE6L,EACA,0DAIN,GAAIA,IAAgB9B,EAClB,MAAM,IAAI/J,MACR,uBACE+J,EACA,0BACA8B,EACA,sBAIN,OAAOA,CACT,CFTMC,CAAiBrZ,GACrB,IAAIsZ,KACF7L,IAAUzN,EAAMuZ,iBAAiBjC,IAAWtX,EAAMuZ,eAEpD,IAAKtZ,EAAKgZ,QAAS,CACjB,MAAMO,EAAgBvZ,EAAK8O,SAAW9O,EAAK8O,SAAS,QAAK1M,EAqCzD,GAzBc,MAAXiV,GAA6B,MAAXA,IAEnBkC,GACEA,EAAczK,UAAayK,EAAczK,SAAS,IAEZ,SAAxC/O,EAAM0P,MAAM1P,EAAM0P,MAAM/M,OAAS,IACO,aAAxC3C,EAAM0P,MAAM1P,EAAM0P,MAAM/M,OAAS,IACO,SAAxC3C,EAAM0P,MAAM1P,EAAM0P,MAAM/M,OAAS,IACO,aAAxC3C,EAAM0P,MAAM1P,EAAM0P,MAAM/M,OAAS,IAEiB,IAAlD3C,EAAMyZ,WAAWzZ,EAAMyZ,WAAW9W,OAAS,IACO,IAAlD3C,EAAMyZ,WAAWzZ,EAAMyZ,WAAW9W,OAAS,IACO,IAAlD3C,EAAMyZ,WAAWzZ,EAAMyZ,WAAW9W,OAAS,KAE3C2W,GAAqB,GAWnB/B,GAAUvX,KAAWsX,GAAUkC,EAAe,CAChD,IAAIhX,GAAS,EAEb,OAASA,EAAQvC,EAAK8O,SAASpM,QAAQ,CACrC,MAAMiF,EAAO3H,EAAK8O,SAASvM,GAE3B,GACEoF,GACc,aAAdA,EAAKoC,MACLpC,EAAKmH,UACLnH,EAAKmH,SAAS,IACY,kBAA1BnH,EAAKmH,SAAS,GAAG/E,KACjB,CACAsP,GAAqB,EACrB,KACF,CACF,CACF,CACF,CAEIA,IACFhC,EAAS8B,GAGXpZ,EAAMgZ,cAAgB1B,EACtB,MAAM5N,EAAQ1J,EAAMgU,cAAc/T,EAAMmT,GAIxC,OAHApT,EAAMuZ,eAAiBjC,EACvBtX,EAAMgZ,cAAgBA,EACtBxO,IACOd,CACT,EN/DEgQ,SSpBK,SAAkBzZ,EAAMwN,EAAQzN,EAAOoT,GAC5C,MAAMuG,ECVD,SAA6B3Z,GAClC,MAAM4Z,EAAQ5Z,EAAM+N,QAAQ4L,gBAAkB,MAE9C,GAAc,QAAVC,GAA6B,QAAVA,GAA6B,UAAVA,EACxC,MAAM,IAAIrM,MACR,gCACEqM,EACA,qEAIN,OAAOA,CACT,CDFyBC,CAAoB7Z,GAC3C,IAAIsX,EAAStX,EAAMgZ,eAAiB3B,GAAYrX,GAG5CyN,GAA0B,SAAhBA,EAAOzD,MAAmByD,EAAOwL,UAC7C3B,GAC2B,kBAAjB7J,EAAOpK,OAAsBoK,EAAOpK,OAAS,EACjDoK,EAAOpK,MACP,KACmC,IAAtCrD,EAAM+N,QAAQ+L,oBACX,EACArM,EAAOsB,SAAStM,QAAQxC,IAC5BqX,GAGJ,IAAIrV,EAAOqV,EAAO3U,OAAS,GAGN,QAAnBgX,GACoB,UAAnBA,IACGlM,GAA0B,SAAhBA,EAAOzD,MAAmByD,EAAOsM,QAAW9Z,EAAK8Z,WAE/D9X,EAA6B,EAAtBqB,KAAK0W,KAAK/X,EAAO,IAG1B,MAAMoR,EAAUrT,EAAMsT,cAAcF,GACpCC,EAAQE,KAAK+D,EAAS,IAAIc,OAAOnW,EAAOqV,EAAO3U,SAC/C0Q,EAAQS,MAAM7R,GACd,MAAMuI,EAAOxK,EAAMqK,MAAM,YACnBX,EAAQ1J,EAAM+T,YAClB/T,EAAMgU,cAAc/T,EAAMoT,EAAQ/R,YAQpC,SAAa4S,EAAM1R,EAAO2R,GACxB,GAAI3R,EACF,OAAQ2R,EAAQ,GAAK,IAAIiE,OAAOnW,IAASiS,EAG3C,OAAQC,EAAQmD,EAASA,EAAS,IAAIc,OAAOnW,EAAOqV,EAAO3U,SAAWuR,CACxE,IATA,OAFA1J,IAEOd,CAUT,ETzBEuQ,UWzBK,SAAmBha,EAAMmR,EAAGpR,EAAOoT,GACxC,MAAM5I,EAAOxK,EAAMqK,MAAM,aACnBmJ,EAAUxT,EAAMqK,MAAM,YACtBX,EAAQ1J,EAAMyU,kBAAkBxU,EAAMmT,GAG5C,OAFAI,IACAhJ,IACOd,CACT,EXmBEwQ,KYxBK,SAAcja,EAAMmR,EAAGpR,EAAOoT,GAMnC,OAJoBnT,EAAK8O,SAASxO,MAAK,SAAU4Z,GAC/C,OAAO1C,GAAS0C,EAClB,IACyBna,EAAMyU,kBAAoBzU,EAAMgU,eAC/CpG,KAAK5N,EAAOC,EAAMmT,EAC9B,EZkBEsE,OAAM,GACNN,Ka5BK,SAAcnX,EAAMmR,EAAGpR,EAAOoT,GACnC,OAAOpT,EAAMyT,KAAKxT,EAAKyJ,MAAO0J,EAChC,Eb2BEgH,cc5BK,SAAuBhJ,EAAG4D,EAAIhV,GACnC,MAAM0J,GACJ6N,GAAUvX,IAAUA,EAAM+N,QAAQsM,WAAa,IAAM,KACrDjC,OCTG,SAA6BpY,GAClC,MAAMsa,EAAata,EAAM+N,QAAQwM,gBAAkB,EAEnD,GAAID,EAAa,EACf,MAAM,IAAI/M,MACR,2CACE+M,EACA,wDAIN,OAAOA,CACT,CDHWE,CAAoBxa,IAE7B,OAAOA,EAAM+N,QAAQsM,WAAa3Q,EAAMvD,MAAM,GAAI,GAAKuD,CACzD,GE2CA,SAAS+Q,GAAWtK,GAClB,MAAM5H,EAAQ4H,EAAMuK,QACpB9J,EAAAA,EAAAA,IAAOrI,EAAO,8BACdwE,KAAK1C,MACH,CACEL,KAAM,QACNzB,MAAOA,EAAM0L,KAAI,SAAUkG,GACzB,MAAa,SAANA,EAAe,KAAOA,CAC/B,IACApL,SAAU,IAEZoB,GAEFpD,KAAK4D,KAAKgK,SAAU,CACtB,CAMA,SAASC,GAAUzK,GACjBpD,KAAKvC,KAAK2F,GACVpD,KAAK4D,KAAKgK,aAAUtY,CACtB,CAMA,SAASwY,GAAS1K,GAChBpD,KAAK1C,MAAM,CAACL,KAAM,WAAY+E,SAAU,IAAKoB,EAC/C,CAMA,SAAS3F,GAAK2F,GACZpD,KAAKvC,KAAK2F,EACZ,CAMA,SAAS2K,GAAU3K,GACjBpD,KAAK1C,MAAM,CAACL,KAAM,YAAa+E,SAAU,IAAKoB,EAChD,CAQA,SAAS4K,GAAa5K,GACpB,IAAIzG,EAAQqD,KAAK4F,SAEb5F,KAAK4D,KAAKgK,UACZjR,EAAQA,EAAMuF,QAAQ,aAAcA,KAGtC,MAAMhP,EAAO8M,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,IAC5CiO,EAAAA,EAAAA,IAAqB,eAAd3Q,EAAK+J,MACZ/J,EAAKyJ,MAAQA,EACbqD,KAAKvC,KAAK2F,EACZ,CAOA,SAASlB,GAAQ+L,EAAIC,GAEnB,MAAc,MAAPA,EAAaA,EAAKD,CAC3B,CAWO,SAASE,GAAmBnN,GACjC,MAAMoN,EAAWpN,GAAW,CAAC,EACvBqN,EAAUD,EAASE,iBACnBC,EAAkBH,EAASI,eAC3BC,EAAeL,EAASK,aACxBC,EAASL,EAAU,IAAM,IAE/B,MAAO,CACLnG,OAAQ,CACN,CAAC5I,UAAW,KAAM2D,YAAa,aAC/B,CAAC3D,UAAW,KAAM2D,YAAa,aAG/B,CAAC8G,SAAS,EAAMzK,UAAW,IAAKuH,MAAO,WAEvC,CAACvH,UAAW,IAAK2D,YAAa,aAG9B,CAAC8G,SAAS,EAAMzK,UAAW,IAAKuH,MAAO,KAMvC,CAACkD,SAAS,EAAMzK,UAAW,IAAKuH,MAAO,UAEzC8H,SAAU,CACRhF,WAgHJ,SAA6BzW,EAAMwN,EAAQzN,GACzC,IAAI0J,EAAQiS,GAAgBjF,WAAWzW,EAAMwN,EAAQzN,GAEjDA,EAAM0P,MAAMvD,SAAS,eACvBzC,EAAQA,EAAMuF,QAAQ,MAAO,SAG/B,OAAOvF,CACT,EAvHIkS,MAUJ,SAAqB3b,EAAMmR,EAAGpR,EAAOoT,GACnC,OAAOyI,EAwDT,SAA2B5b,EAAMD,EAAOoT,GACtC,MAAMrE,EAAW9O,EAAK8O,SACtB,IAAIvM,GAAS,EAEb,MAAM4L,EAAS,GACToF,EAAUxT,EAAMqK,MAAM,SAE5B,OAAS7H,EAAQuM,EAASpM,QACxByL,EAAO5L,GAASsZ,EAAqB/M,EAASvM,GAAQxC,EAAOoT,GAK/D,OAFAI,IAEOpF,CACT,CAtEuB2N,CAAkB9b,EAAMD,EAAOoT,GAAOnT,EAAKsI,MAClE,EAXIyT,UAAWC,EACXC,SAoBJ,SAAwBjc,EAAMmR,EAAGpR,EAAOoT,GACtC,MACM1J,EAAQmS,EAAc,CADhBC,EAAqB7b,EAAMD,EAAOoT,KAG9C,OAAO1J,EAAMvD,MAAM,EAAGuD,EAAMjH,QAAQ,MACtC,IAMA,SAASwZ,EAAgBhc,EAAMmR,EAAGpR,EAAOoT,GACvC,MAAM5I,EAAOxK,EAAMqK,MAAM,aACnBmJ,EAAUxT,EAAMqK,MAAM,YACtBX,EAAQ1J,EAAMyU,kBAAkBxU,EAAM,IACvCmT,EACHO,OAAQ8H,EACR7H,MAAO6H,IAIT,OAFAjI,IACAhJ,IACOd,CACT,CAMA,SAASmS,EAAcM,EAAQ5T,GAC7B,OvC5EG,SAAuBqT,EAAO7N,EAAU,CAAC,GAC9C,MAAMxF,GAASwF,EAAQxF,OAAS,IAAI6T,SAC9BZ,EAAezN,EAAQyN,cAAgB9G,EAEvC2H,EAAa,GAEbC,EAAa,GAEbC,EAAa,GAEbC,EAAsB,GAC5B,IAAIC,EAAkB,EAClBC,GAAY,EAIhB,OAASA,EAAWd,EAAMjZ,QAAQ,CAEhC,MAAMga,EAAM,GAENC,EAAQ,GACd,IAAIC,GAAe,EAMnB,IAJIjB,EAAMc,GAAU/Z,OAAS8Z,IAC3BA,EAAkBb,EAAMc,GAAU/Z,UAG3Bka,EAAcjB,EAAMc,GAAU/Z,QAAQ,CAC7C,MAAMma,EA4KO,QADApT,EA3KUkS,EAAMc,GAAUG,UA4KRxa,IAAVqH,EAAsB,GAAK0B,OAAO1B,GA1KvD,IAAgC,IAA5BqE,EAAQuN,gBAA2B,CACrC,MAAMrZ,EAAOuZ,EAAasB,GAC1BF,EAAMC,GAAe5a,QAGkBI,IAArCma,EAAoBK,IACpB5a,EAAOua,EAAoBK,MAE3BL,EAAoBK,GAAe5a,EAEvC,CAEA0a,EAAIlc,KAAKqc,EACX,CAEAR,EAAWI,GAAYC,EACvBJ,EAAWG,GAAYE,CACzB,CAwJF,IAAmBlT,EArJjB,IAAImT,GAAe,EAEnB,GAAqB,kBAAVtU,GAAsB,WAAYA,EAC3C,OAASsU,EAAcJ,GACrBJ,EAAWQ,GAAelI,EAAYpM,EAAMsU,QAEzC,CACL,MAAMxd,EAAOsV,EAAYpM,GAEzB,OAASsU,EAAcJ,GACrBJ,EAAWQ,GAAexd,CAE9B,CAGAwd,GAAe,EAEf,MAAMF,EAAM,GAENC,EAAQ,GAEd,OAASC,EAAcJ,GAAiB,CACtC,MAAMpd,EAAOgd,EAAWQ,GACxB,IAAIlJ,EAAS,GACTC,EAAQ,GAEC,KAATvU,GACFsU,EAAS,IACTC,EAAQ,KACU,MAATvU,EACTsU,EAAS,IACS,MAATtU,IACTuU,EAAQ,KAIV,IAAI3R,GAC0B,IAA5B8L,EAAQuN,gBACJ,EACAhY,KAAKC,IACH,EACAiZ,EAAoBK,GAAelJ,EAAOhR,OAASiR,EAAMjR,QAGjE,MAAMma,EAAOnJ,EAAS,IAAIyE,OAAOnW,GAAQ2R,GAET,IAA5B7F,EAAQuN,kBACVrZ,EAAO0R,EAAOhR,OAASV,EAAO2R,EAAMjR,OAEhCV,EAAOua,EAAoBK,KAC7BL,EAAoBK,GAAe5a,GAGrC2a,EAAMC,GAAe5a,GAGvB0a,EAAIE,GAAeC,CACrB,CAGAR,EAAW5Z,OAAO,EAAG,EAAGia,GACxBJ,EAAW7Z,OAAO,EAAG,EAAGka,GAExBF,GAAY,EAEZ,MAAMK,EAAQ,GAEd,OAASL,EAAWJ,EAAW3Z,QAAQ,CACrC,MAAMga,EAAML,EAAWI,GACjBE,EAAQL,EAAWG,GACzBG,GAAe,EAEf,MAAM3I,EAAO,GAEb,OAAS2I,EAAcJ,GAAiB,CACtC,MAAMK,EAAOH,EAAIE,IAAgB,GACjC,IAAIlJ,EAAS,GACTC,EAAQ,GAEZ,IAAgC,IAA5B7F,EAAQuN,gBAA2B,CACrC,MAAMrZ,EACJua,EAAoBK,IAAgBD,EAAMC,IAAgB,GACtDxd,EAAOgd,EAAWQ,GAEX,MAATxd,EACFsU,EAAS,IAAIyE,OAAOnW,GACF,KAAT5C,EACL4C,EAAO,GACT0R,EAAS,IAAIyE,OAAOnW,EAAO,EAAI,IAC/B2R,EAAQ,IAAIwE,OAAOnW,EAAO,EAAI,MAE9B0R,EAAS,IAAIyE,OAAOnW,EAAO,GAC3B2R,EAAQD,GAGVC,EAAQ,IAAIwE,OAAOnW,EAEvB,EAE+B,IAA3B8L,EAAQiP,gBAA6BH,GACvC3I,EAAKzT,KAAK,MAIU,IAApBsN,EAAQqN,UAGsB,IAA5BrN,EAAQuN,iBAAsC,KAATwB,IACX,IAA3B/O,EAAQiP,iBAA4BH,GAErC3I,EAAKzT,KAAK,MAGoB,IAA5BsN,EAAQuN,iBACVpH,EAAKzT,KAAKkT,GAGZO,EAAKzT,KAAKqc,IAEsB,IAA5B/O,EAAQuN,iBACVpH,EAAKzT,KAAKmT,IAGY,IAApB7F,EAAQqN,SACVlH,EAAKzT,KAAK,MAIe,IAAzBsN,EAAQkP,cACRJ,IAAgBJ,EAAkB,GAElCvI,EAAKzT,KAAK,IAEd,CAEAsc,EAAMtc,MACqB,IAAzBsN,EAAQkP,aACJ/I,EAAKgJ,KAAK,IAAIjO,QAAQ,MAAO,IAC7BiF,EAAKgJ,KAAK,IAElB,CAEA,OAAOH,EAAMG,KAAK,KACpB,CuCrHWC,CAAchB,EAAQ,CAC3B5T,QAEA+S,kBAEAF,UAEAI,gBAEJ,CA4BA,SAASM,EAAqB7b,EAAMD,EAAOoT,GACzC,MAAMrE,EAAW9O,EAAK8O,SACtB,IAAIvM,GAAS,EAEb,MAAM4L,EAAS,GACToF,EAAUxT,EAAMqK,MAAM,YAE5B,OAAS7H,EAAQuM,EAASpM,QAIxByL,EAAO5L,GAASyZ,EAAgBlN,EAASvM,GAAQvC,EAAMD,EAAOoT,GAKhE,OAFAI,IAEOpF,CACT,CAeF,CC3PA,SAASgP,GAAUjN,GAEjB,MAAMlQ,EAAO8M,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,IAC5CiO,EAAAA,EAAAA,IAAqB,aAAd3Q,EAAK+J,MACZ/J,EAAKod,QAAyB,8BAAflN,EAAMnG,IACvB,CAMA,SAASsT,GAA8BnN,GACrC,MAAM1C,EAASV,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GAE9C,GACE8K,GACgB,aAAhBA,EAAOzD,MACmB,mBAAnByD,EAAO4P,QACd,CACA,MAAMpd,EAAO8M,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,IAC5CiO,EAAAA,EAAAA,IAAqB,cAAd3Q,EAAK+J,MACZ,MAAMuT,EAAOtd,EAAK8O,SAAS,GAE3B,GAAIwO,GAAsB,SAAdA,EAAKvT,KAAiB,CAChC,MAAM8E,EAAWrB,EAAOsB,SACxB,IAEIyO,EAFAhb,GAAS,EAIb,OAASA,EAAQsM,EAASnM,QAAQ,CAChC,MAAM8a,EAAU3O,EAAStM,GACzB,GAAqB,cAAjBib,EAAQzT,KAAsB,CAChCwT,EAAkBC,EAClB,KACF,CACF,CAEID,IAAoBvd,IAEtBsd,EAAK7T,MAAQ6T,EAAK7T,MAAMvD,MAAM,GAEJ,IAAtBoX,EAAK7T,MAAM/G,OACb1C,EAAK8O,SAAS+E,QAEd7T,EAAKsP,UACLgO,EAAKhO,UACiC,kBAA/BgO,EAAKhO,SAASlM,MAAMsC,SAE3B4X,EAAKhO,SAASlM,MAAMqa,SACpBH,EAAKhO,SAASlM,MAAMsC,SACpB1F,EAAKsP,SAASlM,MAAQsa,OAAOC,OAAO,CAAC,EAAGL,EAAKhO,SAASlM,QAG5D,CACF,CAEA0J,KAAKvC,KAAK2F,EACZ,CAMA,SAAS0N,GAAyB5d,EAAMwN,EAAQzN,EAAOoT,GACrD,MAAMmK,EAAOtd,EAAK8O,SAAS,GACrB+O,EACoB,mBAAjB7d,EAAKod,SAAyBE,GAAsB,cAAdA,EAAKvT,KAC9C+T,EAAW,KAAO9d,EAAKod,QAAU,IAAM,KAAO,KAC9ChK,EAAUrT,EAAMsT,cAAcF,GAEhC0K,GACFzK,EAAQE,KAAKwK,GAGf,IAAIrU,EAAQiS,GAAgBjC,SAASzZ,EAAMwN,EAAQzN,EAAO,IACrDoT,KACAC,EAAQ/R,YAOb,OAJIwc,IACFpU,EAAQA,EAAMuF,QAAQ,mCASxB,SAAe+L,GACb,OAAOA,EAAK+C,CACd,KAROrU,CAST,C,gBCzHA,MAAMsU,GAAY,CAChBC,SAmaF,SAA2BnU,EAASC,EAAImU,GACtC,IAAIjc,EAAO,EACX,OAYA,SAASkc,EAAgB9e,GACvB,IAAc,KAATA,GAAwB,MAATA,IAAiB4C,EAAO,EAG1C,OAFAA,IACA6H,EAAQS,QAAQlL,GACT8e,EAET,GAAa,KAAT9e,GAAwB,IAAT4C,EAEjB,OADA6H,EAAQS,QAAQlL,GACT+e,EAET,OAAOF,EAAI7e,EACb,EAYA,SAAS+e,EAAe/e,GAEtB,OAAgB,OAATA,EAAgB6e,EAAI7e,GAAQ0K,EAAG1K,EACxC,CACF,EA3cEgf,SAAS,GAEL/M,GAAS,CACb2M,SAqdF,SAAwBnU,EAASC,EAAImU,GAEnC,IAAII,EAEAC,EAEAC,EACJ,OAAOC,EAYP,SAASA,EAAapf,GAIpB,OAAa,KAATA,GAAwB,KAATA,EACVyK,EAAQmD,MAAM4E,GAAO6M,EAAaC,EAAlC7U,CAAuDzK,GAUrD,OAATA,IACAC,EAAAA,EAAAA,IAA0BD,KAC1BE,EAAAA,EAAAA,IAAkBF,IACR,KAATA,IAAeG,EAAAA,EAAAA,IAAmBH,GAE5Bqf,EAAYrf,IAErBmf,GAAO,EACP1U,EAAQS,QAAQlL,GACTof,EACT,CAYA,SAASE,EAAoBtf,GAY3B,OAVa,KAATA,EACFif,GAA0B,GAK1BC,EAA8BD,EAC9BA,OAA0Bjc,GAE5ByH,EAAQS,QAAQlL,GACTof,CACT,CAWA,SAASC,EAAYrf,GAGnB,OAAIkf,GAA+BD,IAA4BE,EACtDN,EAAI7e,GAEN0K,EAAG1K,EACZ,CACF,EA5iBEgf,SAAS,GAEL9M,GAAO,CACX0M,SAsjBF,SAAsBnU,EAASC,GAC7B,IAAI6U,EAAW,EACXC,EAAY,EAChB,OAAOC,EAYP,SAASA,EAAWzf,GAClB,OAAa,KAATA,GACFuf,IACA9U,EAAQS,QAAQlL,GACTyf,GAMI,KAATzf,GAAewf,EAAYD,EACtBG,EAAkB1f,GAOhB,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,MAATA,EAEOyK,EAAQmD,MAAM4E,GAAO9H,EAAIgV,EAAzBjV,CAA4CzK,GAG1C,OAATA,IACAC,EAAAA,EAAAA,IAA0BD,KAC1BE,EAAAA,EAAAA,IAAkBF,GAEX0K,EAAG1K,IAEZyK,EAAQS,QAAQlL,GACTyf,EACT,CAYA,SAASC,EAAkB1f,GAMzB,OAJa,KAATA,GACFwf,IAEF/U,EAAQS,QAAQlL,GACTyf,CACT,CACF,EAroBET,SAAS,GAELxM,GAAQ,CACZoM,SAmpBF,SAAuBnU,EAASC,EAAImU,GAClC,OAAOrM,EAYP,SAASA,EAAMxS,GAEb,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,MAATA,GAEAyK,EAAQS,QAAQlL,GACTwS,GAMI,KAATxS,GACFyK,EAAQS,QAAQlL,GACT2f,GAMI,KAAT3f,GACFyK,EAAQS,QAAQlL,GACT4f,GAIE,KAAT5f,GAES,OAATA,IACAC,EAAAA,EAAAA,IAA0BD,KAC1BE,EAAAA,EAAAA,IAAkBF,GAEX0K,EAAG1K,GAEL6e,EAAI7e,EACb,CAeA,SAAS4f,EAAkB5f,GAGzB,OACW,OAATA,GACS,KAATA,GACS,KAATA,IACAC,EAAAA,EAAAA,IAA0BD,KAC1BE,EAAAA,EAAAA,IAAkBF,GAEX0K,EAAG1K,GAELwS,EAAMxS,EACf,CAYA,SAAS2f,EAAkB3f,GAEzB,OAAOoL,EAAAA,EAAAA,IAAWpL,GAAQ6f,EAAmB7f,GAAQ6e,EAAI7e,EAC3D,CAYA,SAAS6f,EAAmB7f,GAE1B,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACTwS,IAELpH,EAAAA,EAAAA,IAAWpL,IACbyK,EAAQS,QAAQlL,GACT6f,GAIFhB,EAAI7e,EACb,CACF,EAlxBEgf,SAAS,GAELc,GAAsB,CAC1BlB,SAgyBF,SAAqCnU,EAASC,EAAImU,GAChD,OAYA,SAAe7e,GAGb,OADAyK,EAAQS,QAAQlL,GACTuU,CACT,EAYA,SAASA,EAAMvU,GAEb,OAAOsL,EAAAA,EAAAA,IAAkBtL,GAAQ6e,EAAI7e,GAAQ0K,EAAG1K,EAClD,CACF,EAh0BEgf,SAAS,GAELe,GAAc,CAClBnB,SA+MF,SAA6BnU,EAASC,EAAImU,GACxC,MAAMmB,EAAOtS,KACb,OAYA,SAAkB1N,GAChB,GACY,KAATA,GAAwB,MAATA,IACfigB,GAAY1R,KAAKyR,EAAMA,EAAK7N,WAC7B+N,GAAmBF,EAAKtT,QAExB,OAAOmS,EAAI7e,GAMb,OAJAyK,EAAQO,MAAM,mBACdP,EAAQO,MAAM,sBAGPP,EAAQmD,MACb+Q,GACAlU,EAAQ0V,QAAQlO,GAAQxH,EAAQ0V,QAAQjO,GAAMkO,GAAWvB,GACzDA,EAHKpU,CAILzK,EACJ,EAYA,SAASogB,EAASpgB,GAGhB,OAFAyK,EAAQU,KAAK,sBACbV,EAAQU,KAAK,mBACNT,EAAG1K,EACZ,CACF,EA9PEmS,SAAU8N,IAENI,GAAmB,CACvBzB,SAwQF,SAAkCnU,EAASC,EAAImU,GAC7C,MAAMmB,EAAOtS,KACb,IAAI0F,EAAS,GACT+L,GAAO,EACX,OAYA,SAAuBnf,GACrB,IACY,KAATA,GAAwB,MAATA,IAChBsgB,GAAiB/R,KAAKyR,EAAMA,EAAK7N,YAChC+N,GAAmBF,EAAKtT,QAMzB,OAJAjC,EAAQO,MAAM,mBACdP,EAAQO,MAAM,uBACdoI,GAAUrH,OAAOwU,cAAcvgB,GAC/ByK,EAAQS,QAAQlL,GACTwgB,EAET,OAAO3B,EAAI7e,EACb,EAYA,SAASwgB,EAAqBxgB,GAE5B,IAAIoL,EAAAA,EAAAA,IAAWpL,IAASoT,EAAO9P,OAAS,EAItC,OAFA8P,GAAUrH,OAAOwU,cAAcvgB,GAC/ByK,EAAQS,QAAQlL,GACTwgB,EAET,GAAa,KAATxgB,EAAa,CACf,MAAMgS,EAAWoB,EAAOI,cACxB,GAAiB,SAAbxB,GAAoC,UAAbA,EAEzB,OADAvH,EAAQS,QAAQlL,GACTygB,CAEX,CACA,OAAO5B,EAAI7e,EACb,CAYA,SAASygB,EAAsBzgB,GAC7B,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACZmf,EACKuB,GAETvB,GAAO,EACAsB,IAEF5B,EAAI7e,EACb,CAYA,SAAS0gB,EAAc1gB,GAGrB,OAAgB,OAATA,IACLwL,EAAAA,EAAAA,IAAaxL,KACbC,EAAAA,EAAAA,IAA0BD,KAC1BE,EAAAA,EAAAA,IAAkBF,KAClBG,EAAAA,EAAAA,IAAmBH,GACjB6e,EAAI7e,GACJyK,EAAQ0V,QAAQlO,GAAQxH,EAAQ0V,QAAQjO,GAAMyO,GAAgB9B,EAA9DpU,CAAmEzK,EACzE,CAYA,SAAS2gB,EAAc3gB,GAGrB,OAFAyK,EAAQU,KAAK,uBACbV,EAAQU,KAAK,mBACNT,EAAG1K,EACZ,CACF,EA7XEmS,SAAUmO,IAENM,GAAgB,CACpBhC,SAyDF,SAA+BnU,EAASC,EAAImU,GAC1C,MAAMmB,EAAOtS,KAEb,IAAImT,EAEAvP,EACJ,OAYA,SAAetR,GACb,IACG8gB,GAAS9gB,KACT+gB,GAAcxS,KAAKyR,EAAMA,EAAK7N,WAC/B+N,GAAmBF,EAAKtT,QAExB,OAAOmS,EAAI7e,GAIb,OAFAyK,EAAQO,MAAM,mBACdP,EAAQO,MAAM,wBACP6H,EAAM7S,EACf,EAYA,SAAS6S,EAAM7S,GACb,OAAI8gB,GAAS9gB,IACXyK,EAAQS,QAAQlL,GACT6S,GAEI,KAAT7S,GACFyK,EAAQS,QAAQlL,GACTghB,GAEFnC,EAAI7e,EACb,CAgBA,SAASghB,EAAYhhB,GAEnB,OAAa,KAATA,EACKyK,EAAQmD,MACbkS,GACAmB,EACAC,EAHKzW,CAILzK,GAIS,KAATA,GAAwB,KAATA,IAAesL,EAAAA,EAAAA,IAAkBtL,IAClDsR,GAAO,EACP7G,EAAQS,QAAQlL,GACTghB,GASFC,EAAiBjhB,EAC1B,CAYA,SAASkhB,EAAelhB,GAGtB,OAFAyK,EAAQS,QAAQlL,GAChB6gB,GAAM,EACCG,CACT,CAYA,SAASC,EAAiBjhB,GAGxB,OAAIsR,GAAQuP,IAAOzV,EAAAA,EAAAA,IAAW4U,EAAK7N,WACjC1H,EAAQU,KAAK,wBACbV,EAAQU,KAAK,mBACNT,EAAG1K,IAEL6e,EAAI7e,EACb,CACF,EAzLEmS,SAAU4O,IAINhJ,GAAO,CAAC,EAiBd,IAAI/X,GAAO,GAGX,KAAOA,GAAO,KACZ+X,GAAK/X,IAAQ4gB,GACb5gB,KACa,KAATA,GAAaA,GAAO,GACN,KAATA,KAAaA,GAAO,IAgyB/B,SAASigB,GAAYjgB,GACnB,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,MAATA,IACAC,EAAAA,EAAAA,IAA0BD,EAE9B,CAQA,SAASsgB,GAAiBtgB,GACxB,QAAQoL,EAAAA,EAAAA,IAAWpL,EACrB,CAMA,SAAS+gB,GAAc/gB,GAKrB,QAAkB,KAATA,GAAe8gB,GAAS9gB,GACnC,CAMA,SAAS8gB,GAAS9gB,GAChB,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,IACAsL,EAAAA,EAAAA,IAAkBtL,EAEtB,CAMA,SAASkgB,GAAmBxT,GAC1B,IAAIvJ,EAAQuJ,EAAOpJ,OACfyL,GAAS,EACb,KAAO5L,KAAS,CACd,MAAM2N,EAAQpE,EAAOvJ,GAAO,GAC5B,IACkB,cAAf2N,EAAMnG,MAAuC,eAAfmG,EAAMnG,QACpCmG,EAAMqQ,UACP,CACApS,GAAS,EACT,KACF,CAIA,GAAI+B,EAAMsQ,8BAA+B,CACvCrS,GAAS,EACT,KACF,CACF,CAMA,OALIrC,EAAOpJ,OAAS,IAAMyL,IAGxBrC,EAAOA,EAAOpJ,OAAS,GAAG,GAAG8d,+BAAgC,GAExDrS,CACT,CA72BAgJ,GAAK,IAAM6I,GACX7I,GAAK,IAAM6I,GACX7I,GAAK,IAAM6I,GACX7I,GAAK,IAAM6I,GACX7I,GAAK,IAAM,CAAC6I,GAAeP,IAC3BtI,GAAK,KAAO,CAAC6I,GAAeP,IAC5BtI,GAAK,IAAM,CAAC6I,GAAeb,IAC3BhI,GAAK,KAAO,CAAC6I,GAAeb,I,4BCvE5B,MAAMsB,GAAS,CACbzC,SA4eF,SAAwBnU,EAASC,EAAImU,GACnC,MAAMmB,EAAOtS,KACb,OAAOlD,EAAAA,GAAAA,GACLC,GASF,SAAqBzK,GACnB,MAAMshB,EAAOtB,EAAKtT,OAAOsT,EAAKtT,OAAOpJ,OAAS,GAC9C,OAAOge,GACY,gCAAjBA,EAAK,GAAG3W,MACyC,IAAjD2W,EAAK,GAAG9P,eAAe8P,EAAK,IAAI,GAAMhe,OACpCoH,EAAG1K,GACH6e,EAAI7e,EACV,GAdE,8BACA,EAcJ,EA/fEgf,SAAS,GA8CX,SAASuC,GAAiC9W,EAASC,EAAImU,GACrD,MAAMmB,EAAOtS,KACb,IAAIvK,EAAQ6c,EAAKtT,OAAOpJ,OACxB,MAAMke,EAAUxB,EAAKyB,OAAOC,eAAiB1B,EAAKyB,OAAOC,aAAe,IAExE,IAAIC,EAGJ,KAAOxe,KAAS,CACd,MAAM2N,EAAQkP,EAAKtT,OAAOvJ,GAAO,GACjC,GAAmB,eAAf2N,EAAMnG,KAAuB,CAC/BgX,EAAa7Q,EACb,KACF,CAGA,GACiB,oBAAfA,EAAMnG,MACS,cAAfmG,EAAMnG,MACS,UAAfmG,EAAMnG,MACS,UAAfmG,EAAMnG,MACS,SAAfmG,EAAMnG,KAEN,KAEJ,CACA,OAKA,SAAe3K,GACb,IAAK2hB,IAAeA,EAAWR,UAC7B,OAAOtC,EAAI7e,GAEb,MAAM4hB,GAAKrO,EAAAA,EAAAA,GACTyM,EAAKxO,eAAe,CAClBxN,MAAO2d,EAAWvd,IAClBA,IAAK4b,EAAK6B,SAGd,GAA0B,KAAtBD,EAAGrM,YAAY,KAAciM,EAAQ1U,SAAS8U,EAAG9a,MAAM,IACzD,OAAO+X,EAAI7e,GAKb,OAHAyK,EAAQO,MAAM,8BACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,8BACNT,EAAG1K,EACZ,CACF,CAIA,SAAS8hB,GAAkCpV,EAAQC,GACjD,IAEIgV,EAFAxe,EAAQuJ,EAAOpJ,OAKnB,KAAOH,KACL,GAC4B,eAA1BuJ,EAAOvJ,GAAO,GAAGwH,MACI,UAArB+B,EAAOvJ,GAAO,GACd,CACAwe,EAAajV,EAAOvJ,GAAO,GAC3B,KACF,CAGFuJ,EAAOvJ,EAAQ,GAAG,GAAGwH,KAAO,OAC5B+B,EAAOvJ,EAAQ,GAAG,GAAGwH,KAAO,6BAI5B,MAAM4D,EAAO,CACX5D,KAAM,kBACN3G,MAAOsa,OAAOC,OAAO,CAAC,EAAG7R,EAAOvJ,EAAQ,GAAG,GAAGa,OAC9CI,IAAKka,OAAOC,OAAO,CAAC,EAAG7R,EAAOA,EAAOpJ,OAAS,GAAG,GAAGc,MAIhD2R,EAAS,CACbpL,KAAM,wBACN3G,MAAOsa,OAAOC,OAAO,CAAC,EAAG7R,EAAOvJ,EAAQ,GAAG,GAAGiB,KAC9CA,IAAKka,OAAOC,OAAO,CAAC,EAAG7R,EAAOvJ,EAAQ,GAAG,GAAGiB,MAG9C2R,EAAO3R,IAAIia,SACXtI,EAAO3R,IAAIkC,SACXyP,EAAO3R,IAAI2d,eAEX,MAAMtR,EAAS,CACb9F,KAAM,wBACN3G,MAAOsa,OAAOC,OAAO,CAAC,EAAGxI,EAAO3R,KAChCA,IAAKka,OAAOC,OAAO,CAAC,EAAG7R,EAAOA,EAAOpJ,OAAS,GAAG,GAAGU,QAGhDge,EAAQ,CACZrX,KAAM,cACNsX,YAAa,SACbje,MAAOsa,OAAOC,OAAO,CAAC,EAAG9N,EAAOzM,OAChCI,IAAKka,OAAOC,OAAO,CAAC,EAAG9N,EAAOrM,MAI1B8d,EAAc,CAElBxV,EAAOvJ,EAAQ,GACfuJ,EAAOvJ,EAAQ,GACf,CAAC,QAASoL,EAAM5B,GAEhBD,EAAOvJ,EAAQ,GACfuJ,EAAOvJ,EAAQ,GAEf,CAAC,QAAS4S,EAAQpJ,GAClB,CAAC,OAAQoJ,EAAQpJ,GAEjB,CAAC,QAAS8D,EAAQ9D,GAClB,CAAC,QAASqV,EAAOrV,GACjB,CAAC,OAAQqV,EAAOrV,GAChB,CAAC,OAAQ8D,EAAQ9D,GAEjBD,EAAOA,EAAOpJ,OAAS,GACvBoJ,EAAOA,EAAOpJ,OAAS,GACvB,CAAC,OAAQiL,EAAM5B,IAGjB,OADAD,EAAOrJ,OAAOF,EAAOuJ,EAAOpJ,OAASH,EAAQ,KAAM+e,GAC5CxV,CACT,CAMA,SAASyV,GAAwB1X,EAASC,EAAImU,GAC5C,MAAMmB,EAAOtS,KACP8T,EAAUxB,EAAKyB,OAAOC,eAAiB1B,EAAKyB,OAAOC,aAAe,IACxE,IAEIpQ,EAFA1O,EAAO,EASX,OAYA,SAAe5C,GAKb,OAJAyK,EAAQO,MAAM,mBACdP,EAAQO,MAAM,8BACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,8BACNiX,CACT,EAYA,SAASA,EAAUpiB,GACjB,OAAa,KAATA,EAAoB6e,EAAI7e,IAC5ByK,EAAQO,MAAM,yBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,yBACbV,EAAQO,MAAM,yBACdP,EAAQO,MAAM,eAAeiX,YAAc,SACpCI,EACT,CAYA,SAASA,EAASriB,GAChB,GAEE4C,EAAO,KAEG,KAAT5C,IAAgBsR,GAGR,OAATtR,GACS,KAATA,IACAC,EAAAA,EAAAA,IAA0BD,GAE1B,OAAO6e,EAAI7e,GAEb,GAAa,KAATA,EAAa,CACfyK,EAAQU,KAAK,eACb,MAAM2F,EAAQrG,EAAQU,KAAK,yBAC3B,OAAKqW,EAAQ1U,UAASyG,EAAAA,EAAAA,GAAoByM,EAAKxO,eAAeV,MAG9DrG,EAAQO,MAAM,8BACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,8BACbV,EAAQU,KAAK,mBACNT,GANEmU,EAAI7e,EAOf,CAMA,OALKC,EAAAA,EAAAA,IAA0BD,KAC7BsR,GAAO,GAET1O,IACA6H,EAAQS,QAAQlL,GACA,KAATA,EAAcsiB,EAAaD,CACpC,CAYA,SAASC,EAAWtiB,GAClB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCyK,EAAQS,QAAQlL,GAChB4C,IACOyf,GAEFA,EAASriB,EAClB,CACF,CAMA,SAASuiB,GAAwB9X,EAASC,EAAImU,GAC5C,MAAMmB,EAAOtS,KACP8T,EAAUxB,EAAKyB,OAAOC,eAAiB1B,EAAKyB,OAAOC,aAAe,IAExE,IAAIxO,EAGA5B,EAFA1O,EAAO,EAGX,OAYA,SAAe5C,GAMb,OALAyK,EAAQO,MAAM,yBAAyBwX,YAAa,EACpD/X,EAAQO,MAAM,8BACdP,EAAQO,MAAM,oCACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,oCACNsX,CACT,EAYA,SAASA,EAAcziB,GACrB,OAAa,KAATA,GACFyK,EAAQO,MAAM,+BACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,+BACbV,EAAQO,MAAM,oCACdP,EAAQO,MAAM,eAAeiX,YAAc,SACpCS,GAEF7D,EAAI7e,EACb,CAeA,SAAS0iB,EAAY1iB,GACnB,GAEE4C,EAAO,KAEG,KAAT5C,IAAgBsR,GAGR,OAATtR,GACS,KAATA,IACAC,EAAAA,EAAAA,IAA0BD,GAE1B,OAAO6e,EAAI7e,GAEb,GAAa,KAATA,EAAa,CACfyK,EAAQU,KAAK,eACb,MAAM2F,EAAQrG,EAAQU,KAAK,oCAM3B,OALA+H,GAAaK,EAAAA,EAAAA,GAAoByM,EAAKxO,eAAeV,IACrDrG,EAAQO,MAAM,oCACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,oCACbV,EAAQU,KAAK,8BACNwX,CACT,CAMA,OALK1iB,EAAAA,EAAAA,IAA0BD,KAC7BsR,GAAO,GAET1O,IACA6H,EAAQS,QAAQlL,GACA,KAATA,EAAc4iB,EAAcF,CACrC,CAeA,SAASE,EAAY5iB,GACnB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCyK,EAAQS,QAAQlL,GAChB4C,IACO8f,GAEFA,EAAY1iB,EACrB,CAYA,SAAS2iB,EAAW3iB,GAClB,OAAa,KAATA,GACFyK,EAAQO,MAAM,oBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,oBACRqW,EAAQ1U,SAASoG,IACpBsO,EAAQpgB,KAAK8R,IAMR1I,EAAAA,GAAAA,GACLC,EACAoY,EACA,oCAGGhE,EAAI7e,EACb,CAYA,SAAS6iB,EAAgB7iB,GAEvB,OAAO0K,EAAG1K,EACZ,CACF,CAMA,SAAS8iB,GAA+BrY,EAASC,EAAImU,GAUnD,OAAOpU,EAAQmD,MAAMmV,GAAAA,EAAWrY,EAAID,EAAQ0V,QAAQkB,GAAQ3W,EAAImU,GAClE,CAGA,SAASmE,GAAyBvY,GAChCA,EAAQU,KAAK,wBACf,C,wCCxdO,SAAS8X,GAAiBvU,GAE/B,IAAIwU,GADaxU,GAAW,CAAC,GACPyU,YACtB,MAAMC,EAAY,CAChBxE,SA8GF,SAA+BnU,EAASC,EAAImU,GAC1C,MAAM1M,EAAWzE,KAAKyE,SAChBzF,EAASgB,KAAKhB,OACpB,IAAI9J,EAAO,EACX,OAGA,SAAe5C,GACb,GACe,MAAbmS,GACsC,oBAAtCzF,EAAOA,EAAOpJ,OAAS,GAAG,GAAGqH,KAE7B,OAAOkU,EAAI7e,GAGb,OADAyK,EAAQO,MAAM,kCACPqY,EAAKrjB,EACd,EAGA,SAASqjB,EAAKrjB,GACZ,MAAMsU,GAASvU,EAAAA,GAAAA,GAAkBoS,GACjC,GAAa,MAATnS,EAEF,OAAI4C,EAAO,EAAUic,EAAI7e,IACzByK,EAAQS,QAAQlL,GAChB4C,IACOygB,GAET,GAAIzgB,EAAO,IAAMsgB,EAAQ,OAAOrE,EAAI7e,GACpC,MAAM8Q,EAAQrG,EAAQU,KAAK,kCACrBoJ,GAAQxU,EAAAA,GAAAA,GAAkBC,GAGhC,OAFA8Q,EAAMwS,OAAS/O,GAAoB,IAAVA,GAAelG,QAAQiG,GAChDxD,EAAMyS,QAAUjP,GAAsB,IAAXA,GAAgBjG,QAAQkG,GAC5C7J,EAAG1K,EACZ,CACF,EAhJEwM,WAsBF,SAAiCE,EAAQC,GACvC,IAAIxJ,GAAS,EAGb,OAASA,EAAQuJ,EAAOpJ,QAEtB,GACuB,UAArBoJ,EAAOvJ,GAAO,IACY,mCAA1BuJ,EAAOvJ,GAAO,GAAGwH,MACjB+B,EAAOvJ,GAAO,GAAGogB,OACjB,CACA,IAAIC,EAAOrgB,EAGX,KAAOqgB,KAEL,GACsB,SAApB9W,EAAO8W,GAAM,IACY,mCAAzB9W,EAAO8W,GAAM,GAAG7Y,MAChB+B,EAAO8W,GAAM,GAAGF,OAEhB5W,EAAOvJ,GAAO,GAAGiB,IAAIkC,OAASoG,EAAOvJ,GAAO,GAAGa,MAAMsC,SACnDoG,EAAO8W,GAAM,GAAGpf,IAAIkC,OAASoG,EAAO8W,GAAM,GAAGxf,MAAMsC,OACrD,CACAoG,EAAOvJ,GAAO,GAAGwH,KAAO,wBACxB+B,EAAO8W,GAAM,GAAG7Y,KAAO,wBAGvB,MAAM8Y,EAAgB,CACpB9Y,KAAM,gBACN3G,MAAOsa,OAAOC,OAAO,CAAC,EAAG7R,EAAO8W,GAAM,GAAGxf,OACzCI,IAAKka,OAAOC,OAAO,CAAC,EAAG7R,EAAOvJ,GAAO,GAAGiB,MAIpC2T,EAAO,CACXpN,KAAM,oBACN3G,MAAOsa,OAAOC,OAAO,CAAC,EAAG7R,EAAO8W,GAAM,GAAGpf,KACzCA,IAAKka,OAAOC,OAAO,CAAC,EAAG7R,EAAOvJ,GAAO,GAAGa,QAKpC0f,EAAa,CACjB,CAAC,QAASD,EAAe9W,GACzB,CAAC,QAASD,EAAO8W,GAAM,GAAI7W,GAC3B,CAAC,OAAQD,EAAO8W,GAAM,GAAI7W,GAC1B,CAAC,QAASoL,EAAMpL,IAEZgX,EAAahX,EAAQ8U,OAAOhV,WAAWkX,WAAWC,KACpDD,IAEFtgB,EAAAA,GAAAA,GACEqgB,EACAA,EAAWpgB,OACX,GACAkJ,EAAAA,GAAAA,GAAWmX,EAAYjX,EAAO5F,MAAM0c,EAAO,EAAGrgB,GAAQwJ,KAK1DtJ,EAAAA,GAAAA,GAAOqgB,EAAYA,EAAWpgB,OAAQ,EAAG,CACvC,CAAC,OAAQyU,EAAMpL,GACf,CAAC,QAASD,EAAOvJ,GAAO,GAAIwJ,GAC5B,CAAC,OAAQD,EAAOvJ,GAAO,GAAIwJ,GAC3B,CAAC,OAAQ8W,EAAe9W,MAE1BtJ,EAAAA,GAAAA,GAAOqJ,EAAQ8W,EAAO,EAAGrgB,EAAQqgB,EAAO,EAAGE,GAC3CvgB,EAAQqgB,EAAOE,EAAWpgB,OAAS,EACnC,KACF,CAEJ,CAEFH,GAAS,EACT,OAASA,EAAQuJ,EAAOpJ,QACQ,mCAA1BoJ,EAAOvJ,GAAO,GAAGwH,OACnB+B,EAAOvJ,GAAO,GAAGwH,KAAO,QAG5B,OAAO+B,CACT,GAlGA,OAHe,OAAXwW,QAA8BlgB,IAAXkgB,IACrBA,GAAS,GAEJ,CACLnL,KAAM,CACJ,IAAOqL,GAETO,WAAY,CACVC,KAAM,CAACR,IAETS,iBAAkB,CAChBD,KAAM,CAAC,MAoIb,CC3JO,MAAME,GAIXC,WAAAA,GAMErW,KAAKkH,IAAM,EACb,CAUAoP,GAAAA,CAAI7gB,EAAO+I,EAAQ8X,IAsFrB,SAAiBC,EAASC,EAAIhY,EAAQ8X,GACpC,IAAI7gB,EAAQ,EAGZ,GAAe,IAAX+I,GAA+B,IAAf8X,EAAI1gB,OACtB,OAEF,KAAOH,EAAQ8gB,EAAQrP,IAAItR,QAAQ,CACjC,GAAI2gB,EAAQrP,IAAIzR,GAAO,KAAO+gB,EAW5B,OAVAD,EAAQrP,IAAIzR,GAAO,IAAM+I,OAOzB+X,EAAQrP,IAAIzR,GAAO,GAAG/B,QAAQ4iB,GAKhC7gB,GAAS,CACX,CACA8gB,EAAQrP,IAAIxT,KAAK,CAAC8iB,EAAIhY,EAAQ8X,GAChC,CA7GIG,CAAQzW,KAAMvK,EAAO+I,EAAQ8X,EAC/B,CAqBA9Y,OAAAA,CAAQwB,GAMN,GALAgB,KAAKkH,IAAIwP,MAAK,SAAUvjB,EAAGC,GACzB,OAAOD,EAAE,GAAKC,EAAE,EAClB,IAGwB,IAApB4M,KAAKkH,IAAItR,OACX,OAqBF,IAAIH,EAAQuK,KAAKkH,IAAItR,OAErB,MAAM+gB,EAAO,GACb,KAAOlhB,EAAQ,GACbA,GAAS,EACTkhB,EAAKjjB,KACHsL,EAAO5F,MAAM4G,KAAKkH,IAAIzR,GAAO,GAAKuK,KAAKkH,IAAIzR,GAAO,IAClDuK,KAAKkH,IAAIzR,GAAO,IAIlBuJ,EAAOpJ,OAASoK,KAAKkH,IAAIzR,GAAO,GAElCkhB,EAAKjjB,KAAK,IAAIsL,IACdA,EAAOpJ,OAAS,EAChB,IAAIwD,EAAQud,EAAKC,MACjB,KAAOxd,GACL4F,EAAOtL,QAAQ0F,GACfA,EAAQud,EAAKC,MAIf5W,KAAKkH,IAAItR,OAAS,CACpB,ECtGK,SAASihB,GAAc7X,EAAQvJ,GACpC,IAAIqhB,GAAiB,EAErB,MAAMtb,EAAQ,GACd,KAAO/F,EAAQuJ,EAAOpJ,QAAQ,CAC5B,MAAMiE,EAAQmF,EAAOvJ,GACrB,GAAIqhB,GACF,GAAiB,UAAbjd,EAAM,GAGc,iBAAlBA,EAAM,GAAGoD,MACXzB,EAAM9H,KAC0B,yBAA9BsL,EAAOvJ,EAAQ,GAAG,GAAGwH,KACjB,OACA,aAOL,GAAsB,iBAAlBpD,EAAM,GAAGoD,MAChB,GAAkC,yBAA9B+B,EAAOvJ,EAAQ,GAAG,GAAGwH,KAAiC,CACxD,MAAM8Z,EAAavb,EAAM5F,OAAS,EAClC4F,EAAMub,GAAoC,SAAtBvb,EAAMub,GAAyB,SAAW,OAChE,OAGG,GAAsB,sBAAlBld,EAAM,GAAGoD,KAChB,UAEoB,UAAbpD,EAAM,IAAoC,sBAAlBA,EAAM,GAAGoD,OAC1C6Z,GAAiB,GAEnBrhB,GAAS,CACX,CACA,OAAO+F,CACT,CCLA,SAASwb,GAAcja,EAASC,EAAImU,GAClC,MAAMmB,EAAOtS,KACb,IAGIyR,EAHAvc,EAAO,EACP+hB,EAAQ,EAGZ,OAkBA,SAAe3kB,GACb,IAAImD,EAAQ6c,EAAKtT,OAAOpJ,OAAS,EACjC,KAAOH,GAAS,GAAG,CACjB,MAAMwH,EAAOqV,EAAKtT,OAAOvJ,GAAO,GAAGwH,KACnC,GACW,eAATA,GAES,eAATA,EAGG,MADHxH,GAEJ,CACA,MAAMme,EAAOne,GAAS,EAAI6c,EAAKtT,OAAOvJ,GAAO,GAAGwH,KAAO,KACjDia,EACK,cAATtD,GAAiC,aAATA,EAAsBuD,EAAeC,EAG/D,GAAIF,IAASC,GAAgB7E,EAAKyB,OAAOsD,KAAK/E,EAAK6B,MAAMhN,MACvD,OAAOgK,EAAI7e,GAEb,OAAO4kB,EAAK5kB,EACd,EAcA,SAAS8kB,EAAc9kB,GAGrB,OAFAyK,EAAQO,MAAM,aACdP,EAAQO,MAAM,YAgBhB,SAAsBhL,GACpB,GAAa,MAATA,EACF,OAAOglB,EAAahlB,GAgBtB,OAHAmf,GAAO,EAEPwF,GAAS,EACFK,EAAahlB,EACtB,CAlCSilB,CAAajlB,EACtB,CAiDA,SAASglB,EAAahlB,GACpB,OAAa,OAATA,EAEK6e,EAAI7e,IAET4L,EAAAA,EAAAA,IAAmB5L,GAEjB2kB,EAAQ,GACVA,EAAQ,EAGR3E,EAAKkF,WAAY,EACjBza,EAAQU,KAAK,YACbV,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,cACNga,GAIFtG,EAAI7e,IAET+K,EAAAA,EAAAA,IAAc/K,IAITwK,EAAAA,GAAAA,GAAaC,EAASua,EAAc,aAApCxa,CAAkDxK,IAE3D2kB,GAAS,EACLxF,IACFA,GAAO,EAEPvc,GAAQ,GAEG,MAAT5C,GACFyK,EAAQO,MAAM,oBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,oBAEbgU,GAAO,EACA6F,IAITva,EAAQO,MAAM,QACPoa,EAAYplB,IACrB,CAcA,SAASolB,EAAYplB,GACnB,OAAa,OAATA,GAA0B,MAATA,IAAgBC,EAAAA,EAAAA,IAA0BD,IAC7DyK,EAAQU,KAAK,QACN6Z,EAAahlB,KAEtByK,EAAQS,QAAQlL,GACA,KAATA,EAAcqlB,EAAgBD,EACvC,CAcA,SAASC,EAAcrlB,GACrB,OAAa,KAATA,GAAwB,MAATA,GACjByK,EAAQS,QAAQlL,GACTolB,GAEFA,EAAYplB,EACrB,CAcA,SAASmlB,EAAmBnlB,GAK1B,OAHAggB,EAAKkF,WAAY,EAGblF,EAAKyB,OAAOsD,KAAK/E,EAAK6B,MAAMhN,MACvBgK,EAAI7e,IAEbyK,EAAQO,MAAM,qBAEdmU,GAAO,GACHpU,EAAAA,EAAAA,IAAc/K,IACTwK,EAAAA,GAAAA,GACLC,EACA6a,EACA,aACAtF,EAAKyB,OAAOhV,WAAW8Y,QAAQ3B,KAAK9W,SAAS,qBACzC9J,EACA,EANCwH,CAOLxK,GAEGslB,EAAoBtlB,GAC7B,CAgBA,SAASslB,EAAoBtlB,GAC3B,OAAa,KAATA,GAAwB,KAATA,EACVwlB,EAAyBxlB,GAErB,MAATA,GACFmf,GAAO,EAEP1U,EAAQO,MAAM,oBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,oBACNsa,GAIFC,EAAiB1lB,EAC1B,CAaA,SAASylB,EAAwBzlB,GAC/B,OAAI+K,EAAAA,EAAAA,IAAc/K,IACTwK,EAAAA,GAAAA,GAAaC,EAAS+a,EAA0B,aAAhDhb,CAA8DxK,GAEhEwlB,EAAyBxlB,EAClC,CAaA,SAASwlB,EAAyBxlB,GAEhC,OAAa,KAATA,GACF2kB,GAAS,EACTxF,GAAO,EACP1U,EAAQO,MAAM,wBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,wBACNwa,GAII,KAAT3lB,GACF2kB,GAAS,EAEFgB,EAAgC3lB,IAE5B,OAATA,IAAiB4L,EAAAA,EAAAA,IAAmB5L,GAC/B4lB,EAAuB5lB,GAEzB0lB,EAAiB1lB,EAC1B,CAaA,SAAS2lB,EAAgC3lB,GACvC,OAAa,KAATA,GACFyK,EAAQO,MAAM,wBACP6a,EAAoB7lB,IAItB0lB,EAAiB1lB,EAC1B,CAaA,SAAS6lB,EAAoB7lB,GAC3B,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACT6lB,GAII,KAAT7lB,GACFmf,GAAO,EACP1U,EAAQU,KAAK,wBACbV,EAAQO,MAAM,wBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,wBACN2a,IAETrb,EAAQU,KAAK,wBACN2a,EAAiC9lB,GAC1C,CAaA,SAAS8lB,EAAiC9lB,GACxC,OAAI+K,EAAAA,EAAAA,IAAc/K,IACTwK,EAAAA,GAAAA,GAAaC,EAASmb,EAAwB,aAA9Cpb,CAA4DxK,GAE9D4lB,EAAuB5lB,EAChC,CAaA,SAAS4lB,EAAuB5lB,GAC9B,OAAa,MAATA,EACKslB,EAAoBtlB,IAEhB,OAATA,IAAiB4L,EAAAA,EAAAA,IAAmB5L,KAKjCmf,GAAQvc,IAAS+hB,GAKtBla,EAAQU,KAAK,qBACbV,EAAQU,KAAK,aAGNT,EAAG1K,IAEL0lB,EAAiB1lB,EAC1B,CAaA,SAAS0lB,EAAiB1lB,GAExB,OAAO6e,EAAI7e,EACb,CAcA,SAAS6kB,EAAa7kB,GAKpB,OADAyK,EAAQO,MAAM,YACP+a,EAAa/lB,EACtB,CAgBA,SAAS+lB,EAAa/lB,GACpB,OAAa,MAATA,GACFyK,EAAQO,MAAM,oBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,oBACN4a,GAEI,OAAT/lB,IAAiB4L,EAAAA,EAAAA,IAAmB5L,IACtCyK,EAAQU,KAAK,YACNT,EAAG1K,KAER+K,EAAAA,EAAAA,IAAc/K,IACTwK,EAAAA,GAAAA,GAAaC,EAASsb,EAAc,aAApCvb,CAAkDxK,IAI3DyK,EAAQO,MAAM,QACPgb,EAAYhmB,GACrB,CAcA,SAASgmB,EAAYhmB,GACnB,OAAa,OAATA,GAA0B,MAATA,IAAgBC,EAAAA,EAAAA,IAA0BD,IAC7DyK,EAAQU,KAAK,QACN4a,EAAa/lB,KAEtByK,EAAQS,QAAQlL,GACA,KAATA,EAAcimB,EAAgBD,EACvC,CAcA,SAASC,EAAcjmB,GACrB,OAAa,KAATA,GAAwB,MAATA,GACjByK,EAAQS,QAAQlL,GACTgmB,GAEFA,EAAYhmB,EACrB,CACF,CAIA,SAASkmB,GAAaxZ,EAAQC,GAC5B,IAWIwZ,EAEAC,EAEAC,EAfAljB,GAAS,EACTmjB,GAA0B,EAE1BC,EAAU,EAEVC,EAAW,CAAC,EAAG,EAAG,EAAG,GAErB/I,EAAO,CAAC,EAAG,EAAG,EAAG,GACjBgJ,GAAgC,EAChCC,EAAe,EAOnB,MAAM9R,EAAM,IAAIkP,GAChB,OAAS3gB,EAAQuJ,EAAOpJ,QAAQ,CAC9B,MAAMiE,EAAQmF,EAAOvJ,GACf2N,EAAQvJ,EAAM,GACH,UAAbA,EAAM,GAEW,cAAfuJ,EAAMnG,MACR8b,GAAgC,EAGX,IAAjBC,IACFC,GAAc/R,EAAKjI,EAAS+Z,EAAcP,EAAcC,GACxDA,OAAcpjB,EACd0jB,EAAe,GAIjBP,EAAe,CACbxb,KAAM,QACN3G,MAAOsa,OAAOC,OAAO,CAAC,EAAGzN,EAAM9M,OAE/BI,IAAKka,OAAOC,OAAO,CAAC,EAAGzN,EAAM1M,MAE/BwQ,EAAIoP,IAAI7gB,EAAO,EAAG,CAAC,CAAC,QAASgjB,EAAcxZ,MAE5B,aAAfmE,EAAMnG,MACS,sBAAfmG,EAAMnG,MAEN2b,GAA0B,EAC1BD,OAAcrjB,EACdwjB,EAAW,CAAC,EAAG,EAAG,EAAG,GACrB/I,EAAO,CAAC,EAAGta,EAAQ,EAAG,EAAG,GAGrBsjB,IACFA,GAAgC,EAChCL,EAAc,CACZzb,KAAM,YACN3G,MAAOsa,OAAOC,OAAO,CAAC,EAAGzN,EAAM9M,OAE/BI,IAAKka,OAAOC,OAAO,CAAC,EAAGzN,EAAM1M,MAE/BwQ,EAAIoP,IAAI7gB,EAAO,EAAG,CAAC,CAAC,QAASijB,EAAazZ,MAE5C4Z,EAAyB,sBAAfzV,EAAMnG,KAA+B,EAAIyb,EAAc,EAAI,IAIrEG,GACgB,SAAfzV,EAAMnG,MACU,yBAAfmG,EAAMnG,MACS,yBAAfmG,EAAMnG,KAoBgB,qBAAfmG,EAAMnG,OACX2b,EACFA,GAA0B,GAEN,IAAhBE,EAAS,KACX/I,EAAK,GAAKA,EAAK,GACf4I,EAAcO,GACZhS,EACAjI,EACA6Z,EACAD,OACAvjB,EACAqjB,IAGJG,EAAW/I,EACXA,EAAO,CAAC+I,EAAS,GAAIrjB,EAAO,EAAG,MAlCjCmjB,GAA0B,EAGV,IAAZ7I,EAAK,KACa,IAAhB+I,EAAS,KACX/I,EAAK,GAAKA,EAAK,GACf4I,EAAcO,GACZhS,EACAjI,EACA6Z,EACAD,OACAvjB,EACAqjB,GAEFG,EAAW,CAAC,EAAG,EAAG,EAAG,IAEvB/I,EAAK,GAAKta,IAuBQ,cAAf2N,EAAMnG,MACb8b,GAAgC,EAChCC,EAAevjB,GAEA,aAAf2N,EAAMnG,MACS,sBAAfmG,EAAMnG,MAEN+b,EAAevjB,EACK,IAAhBqjB,EAAS,IACX/I,EAAK,GAAKA,EAAK,GACf4I,EAAcO,GACZhS,EACAjI,EACA6Z,EACAD,EACApjB,EACAkjB,IAEmB,IAAZ5I,EAAK,KACd4I,EAAcO,GAAUhS,EAAKjI,EAAS8Q,EAAM8I,EAASpjB,EAAOkjB,IAE9DE,EAAU,IAEVA,GACgB,SAAfzV,EAAMnG,MACU,yBAAfmG,EAAMnG,MACS,yBAAfmG,EAAMnG,OAER8S,EAAK,GAAKta,EAEd,CAUA,IATqB,IAAjBujB,GACFC,GAAc/R,EAAKjI,EAAS+Z,EAAcP,EAAcC,GAE1DxR,EAAI1J,QAAQyB,EAAQD,QAKpBvJ,GAAS,IACAA,EAAQwJ,EAAQD,OAAOpJ,QAAQ,CACtC,MAAMiE,EAAQoF,EAAQD,OAAOvJ,GACZ,UAAboE,EAAM,IAAoC,UAAlBA,EAAM,GAAGoD,OACnCpD,EAAM,GAAG8T,OAASkJ,GAAc5X,EAAQD,OAAQvJ,GAEpD,CACA,OAAOuJ,CACT,CAcA,SAASka,GAAUhS,EAAKjI,EAAS5I,EAAOwiB,EAASM,EAAQC,GAGvD,MAAMC,EACQ,IAAZR,EACI,cACY,IAAZA,EACA,iBACA,YAYW,IAAbxiB,EAAM,KACR+iB,EAAa1iB,IAAMka,OAAOC,OAAO,CAAC,EAAGyI,GAASra,EAAQD,OAAQ3I,EAAM,KACpE6Q,EAAIoP,IAAIjgB,EAAM,GAAI,EAAG,CAAC,CAAC,OAAQ+iB,EAAcna,MAU/C,MAAMkV,EAAMmF,GAASra,EAAQD,OAAQ3I,EAAM,IAkB3C,GAjBA+iB,EAAe,CACbnc,KAAMoc,EACN/iB,MAAOsa,OAAOC,OAAO,CAAC,EAAGsD,GAEzBzd,IAAKka,OAAOC,OAAO,CAAC,EAAGsD,IAEzBjN,EAAIoP,IAAIjgB,EAAM,GAAI,EAAG,CAAC,CAAC,QAAS+iB,EAAcna,KAW7B,IAAb5I,EAAM,GAAU,CAClB,MAAMkjB,EAAeD,GAASra,EAAQD,OAAQ3I,EAAM,IAC9CmjB,EAAaF,GAASra,EAAQD,OAAQ3I,EAAM,IAE5CojB,EAAa,CACjBxc,KA5Cc,eA6Cd3G,MAAOsa,OAAOC,OAAO,CAAC,EAAG0I,GACzB7iB,IAAKka,OAAOC,OAAO,CAAC,EAAG2I,IAGzB,GADAtS,EAAIoP,IAAIjgB,EAAM,GAAI,EAAG,CAAC,CAAC,QAASojB,EAAYxa,KAC5B,IAAZ4Z,EAAe,CAEjB,MAAMviB,EAAQ2I,EAAQD,OAAO3I,EAAM,IAC7BK,EAAMuI,EAAQD,OAAO3I,EAAM,IAMjC,GALAC,EAAM,GAAGI,IAAMka,OAAOC,OAAO,CAAC,EAAGna,EAAI,GAAGA,KACxCJ,EAAM,GAAG2G,KAAO,YAChB3G,EAAM,GAAGie,YAAc,OAGnBle,EAAM,GAAKA,EAAM,GAAK,EAAG,CAC3B,MAAMlD,EAAIkD,EAAM,GAAK,EACfjD,EAAIiD,EAAM,GAAKA,EAAM,GAAK,EAChC6Q,EAAIoP,IAAInjB,EAAGC,EAAG,GAChB,CACF,CACA8T,EAAIoP,IAAIjgB,EAAM,GAAK,EAAG,EAAG,CAAC,CAAC,OAAQojB,EAAYxa,IACjD,CAcA,YALe3J,IAAX6jB,IACFC,EAAa1iB,IAAMka,OAAOC,OAAO,CAAC,EAAGyI,GAASra,EAAQD,OAAQma,IAC9DjS,EAAIoP,IAAI6C,EAAQ,EAAG,CAAC,CAAC,OAAQC,EAAcna,KAC3Cma,OAAe9jB,GAEV8jB,CACT,CAYA,SAASH,GAAc/R,EAAKjI,EAASxJ,EAAOoZ,EAAO6K,GAEjD,MAAMC,EAAQ,GACRC,EAAUN,GAASra,EAAQD,OAAQvJ,GACrCikB,IACFA,EAAUhjB,IAAMka,OAAOC,OAAO,CAAC,EAAG+I,GAClCD,EAAMjmB,KAAK,CAAC,OAAQgmB,EAAWza,KAEjC4P,EAAMnY,IAAMka,OAAOC,OAAO,CAAC,EAAG+I,GAC9BD,EAAMjmB,KAAK,CAAC,OAAQmb,EAAO5P,IAC3BiI,EAAIoP,IAAI7gB,EAAQ,EAAG,EAAGkkB,EACxB,CAOA,SAASL,GAASta,EAAQvJ,GACxB,MAAMoE,EAAQmF,EAAOvJ,GACfokB,EAAoB,UAAbhgB,EAAM,GAAiB,QAAU,MAC9C,OAAOA,EAAM,GAAGggB,EAClB,CCr2BA,MAAMC,GAAgB,CACpB5I,SAuBF,SAA+BnU,EAASC,EAAImU,GAC1C,MAAMmB,EAAOtS,KACb,OAYA,SAAc1N,GACZ,GAEoB,OAAlBggB,EAAK7N,WAGJ6N,EAAKyH,mCAEN,OAAO5I,EAAI7e,GAMb,OAJAyK,EAAQO,MAAM,iBACdP,EAAQO,MAAM,uBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,uBACNuc,CACT,EAYA,SAASA,EAAO1nB,GAId,OAAIC,EAAAA,EAAAA,IAA0BD,IAC5ByK,EAAQO,MAAM,+BACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,+BACNwc,GAEI,KAAT3nB,GAAwB,MAATA,GACjByK,EAAQO,MAAM,6BACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,6BACNwc,GAEF9I,EAAI7e,EACb,CAYA,SAAS2nB,EAAM3nB,GACb,OAAa,KAATA,GACFyK,EAAQO,MAAM,uBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,uBACbV,EAAQU,KAAK,iBACNoJ,GAEFsK,EAAI7e,EACb,CAKA,SAASuU,EAAMvU,GAEb,OAAI4L,EAAAA,EAAAA,IAAmB5L,GACd0K,EAAG1K,IAKR+K,EAAAA,EAAAA,IAAc/K,GACTyK,EAAQmD,MACb,CACEgR,SAAUgJ,IAEZld,EACAmU,EALKpU,CAMLzK,GAIG6e,EAAI7e,EACb,CACF,GAMA,SAAS4nB,GAAkBnd,EAASC,EAAImU,GACtC,OAAOrU,EAAAA,GAAAA,GAAaC,GAYpB,SAAezK,GAKb,OAAgB,OAATA,EAAgB6e,EAAI7e,GAAQ0K,EAAG1K,EACxC,GAlBoC,aAmBtC,CC5JA,MAAM6nB,GAAe,CAAC,EAWP,SAASC,GAAUpZ,GAGhC,MACMoN,EAAWpN,GAAWmZ,GACtBvW,EAFuC5D,KAE3B4D,OAEZyW,EACJzW,EAAKyW,sBAAwBzW,EAAKyW,oBAAsB,IACpDC,EACJ1W,EAAK0W,yBAA2B1W,EAAK0W,uBAAyB,IAC1DC,EACJ3W,EAAK2W,uBAAyB3W,EAAK2W,qBAAuB,IAE5DF,EAAoB3mB,KCCf,SAAasN,GAClB,OAAOwZ,EAAAA,GAAAA,GAAkB,CRyBlB,CACLnQ,KAAIA,IC9BC,CACLoQ,SAAU,CACR,GAAM,CACJvJ,SAAU2D,GACV6F,aAAc,CACZxJ,SAAUkE,IAEZ3X,KAAM6X,KAGVjL,KAAM,CACJ,GAAM,CACJ6G,SAAUuD,IAEZ,GAAM,CACJ6B,IAAK,QACLpF,SAAU2C,GACV8G,UAAWvG,MOVfmB,GAAiBvU,GHNZ,CACL4Z,KAAM,CACJ1E,KAAM,CACJhF,SAAU8F,GACVlY,WAAY0Z,MCdX,CACLnO,KAAM,CACJ,GAAMyP,MEkBZ,CDT2Be,CAAIzM,IAC7BkM,EAAuB5mB,KEDhB,CrDHA,CACLonB,WAAY,CAAC5W,GACb5G,MAAO,CACLyd,gBAAiB5X,EACjB6X,qBAAsBzX,EACtB0X,oBAAqB1X,EACrB2X,mBAAoB3X,GAEtB9F,KAAM,CACJsd,gBAAiB9W,EACjB+W,qBAAsBjX,EACtBkX,oBAAqBvX,EACrBwX,mBAAoBvX,ICtBjB,CACLrG,MAAO,CACL6d,sBAAuB5V,EACvB6V,iCAAkC3V,EAClC4V,gBAAiBrV,EACjBsV,sBAAuBrV,GAEzBxI,KAAM,CACJ0d,sBAAuBpV,EACvBqV,iCAAkCzV,EAClC0V,gBAAiBlV,EACjBmV,sBAAuBpV,ICMpB,CACLqV,eAAgB,CAAC,UACjBje,MAAO,CAACyY,cAAexO,GACvB9J,KAAM,CAACsY,cAAevO,IwCDjB,CACLlK,MAAO,CACLuR,MAAOnB,GACP8N,UAAWzN,GACX0N,YAAa1N,GACboB,SAAUrB,IAEZrQ,KAAM,CACJie,SAAU1N,GACVa,MAAOhB,GACP2N,UAAW/d,GACXge,YAAahe,GACb0R,SAAU1R,KClCP,CACLA,KAAM,CACJke,0BAA2BtL,GAC3BuL,4BAA6BvL,GAC7BnD,UAAWqD,OQcfgK,EAAqB7mB,KEiBhB,SAAuBsN,GAC5B,MAAO,CACL6a,WAAY,CrDCP,CACL3T,OAAQ,CACN,CACE5I,UAAW,IACXsH,OAAQ,aACRC,MAAO,YACP5D,cACAC,kBAEF,CACE5D,UAAW,IACXsH,OAAQ,OACRC,MAAO,YACP5D,cACAC,kBAEF,CACE5D,UAAW,IACXsH,OAAQ,OACRC,MAAO,MACP5D,cACAC,oBChCC,CAELgF,OAAQ,CAAC,CAAC5I,UAAW,IAAK2D,YAAa,CAAC,WAAY,QAAS,eAC7D0L,SAAU,CAAC7H,qBAAoBV,sBCK1B,CACL8B,OAAQ,CACN,CACE5I,UAAW,IACX2D,YAAa,WACbC,eAAgBoE,IAGpBqH,SAAU,CAACmN,OAAQrU,ImDFjB0G,GAAmBnN,GVxBhB,CACLkH,OAAQ,CAAC,CAAC6B,SAAS,EAAMzK,UAAW,IAAKuH,MAAO,UAChD8H,SAAU,CAAChC,SAAUmE,MU0BzB,CF3B4BiL,CAAc3N,GAC1C,C,0KGXA4N,EAAAA,QAAA,SACEnP,EACAoP,GAEA,IAAIC,EAAkC,KAEtC,IAAKrP,GAA0B,kBAAVA,EACnB,OAAOqP,EAGT,IAAMC,GAAe,EAAAC,EAAAC,SAAMxP,GACrByP,EAAkC,oBAAbL,EAiB3B,OAfAE,EAAanpB,SAAQ,SAACupB,GACpB,GAAyB,gBAArBA,EAAYtf,KAAhB,CAIQ,IAAAuf,EAAoBD,EAAWC,SAArB7f,EAAU4f,EAAW5f,MAEnC2f,EACFL,EAASO,EAAU7f,EAAO4f,GACjB5f,KACTuf,EAAcA,GAAe,CAAC,GAClBM,GAAY7f,EAR1B,CAUF,IAEOuf,CACT,EAzDA,IAAAE,EAAAK,EAAAC,EAAA,O,qECWA,MAAMvC,EAAe,CAAC,EAef,SAASjR,EAASvM,EAAOqE,GAC9B,MAAMoN,EAAWpN,GAAWmZ,EAQ5B,OAAOwC,EAAIhgB,EAN2B,mBAA7ByR,EAASwO,iBACZxO,EAASwO,gBAGmB,mBAAzBxO,EAASyO,aAA4BzO,EAASyO,YAGzD,CAcA,SAASF,EAAIhgB,EAAOigB,EAAiBC,GACnC,GAqDF,SAAclgB,GACZ,OAAOgE,QAAQhE,GAA0B,kBAAVA,EACjC,CAvDMzJ,CAAKyJ,GAAQ,CACf,GAAI,UAAWA,EACb,MAAsB,SAAfA,EAAMM,MAAoB4f,EAAmBlgB,EAAMA,MAAX,GAGjD,GAAIigB,GAAmB,QAASjgB,GAASA,EAAM4M,IAC7C,OAAO5M,EAAM4M,IAGf,GAAI,aAAc5M,EAChB,OAAOyD,EAAIzD,EAAMqF,SAAU4a,EAAiBC,EAEhD,CAEA,OAAIvgB,MAAMsD,QAAQjD,GACTyD,EAAIzD,EAAOigB,EAAiBC,GAG9B,EACT,CAcA,SAASzc,EAAI0c,EAAQF,EAAiBC,GAEpC,MAAMxb,EAAS,GACf,IAAI5L,GAAS,EAEb,OAASA,EAAQqnB,EAAOlnB,QACtByL,EAAO5L,GAASknB,EAAIG,EAAOrnB,GAAQmnB,EAAiBC,GAGtD,OAAOxb,EAAO8O,KAAK,GACrB,C,qCCzFO,SAASnT,IAAM,CAEf,SAAS+f,IAAe,C,4ICC/B,MAAMC,EAAiB,CAAC,EAAEA,eAUnB,SAASxC,EAAkBqB,GAEhC,MAAMzb,EAAM,CAAC,EACb,IAAI3K,GAAS,EAEb,OAASA,EAAQomB,EAAWjmB,QAC1BqnB,EAAgB7c,EAAKyb,EAAWpmB,IAGlC,OAAO2K,CACT,CAWA,SAAS6c,EAAgB7c,EAAK8c,GAE5B,IAAIC,EAEJ,IAAKA,KAAQD,EAAW,CACtB,MAEME,GAFQJ,EAAenc,KAAKT,EAAK+c,GAAQ/c,EAAI+c,QAAQ7nB,KAEpC8K,EAAI+c,GAAQ,CAAC,GAE9BE,EAAQH,EAAUC,GAExB,IAAI7qB,EAEJ,GAAI+qB,EACF,IAAK/qB,KAAQ+qB,EAAO,CACbL,EAAenc,KAAKuc,EAAM9qB,KAAO8qB,EAAK9qB,GAAQ,IACnD,MAAMqK,EAAQ0gB,EAAM/qB,GACpByM,EAEEqe,EAAK9qB,GACLgK,MAAMsD,QAAQjD,GAASA,EAAQA,EAAQ,CAACA,GAAS,GAErD,CAEJ,CACF,CAUA,SAASoC,EAAWue,EAAU/e,GAC5B,IAAI9I,GAAS,EAEb,MAAMmR,EAAS,GAEf,OAASnR,EAAQ8I,EAAK3I,SAEE,UAApB2I,EAAK9I,GAAO6gB,IAAkBgH,EAAW1W,GAAQlT,KAAK6K,EAAK9I,KAG/DE,EAAAA,EAAAA,GAAO2nB,EAAU,EAAG,EAAG1W,EACzB,C,mrBC/EA,MAGM2W,EAAS,0DACTC,EAAY,2DAGZrD,EAAe,CAAC,EA0Cf,SAASsD,EAAKA,EAAMzc,GAGzB,QAFiBA,GAAWmZ,GACRuD,IAAMF,EAAYD,GAC5Bnf,KAAKqf,EACjB,CCtDA,MAAME,EAAK,eAyBX,SAASC,EAAMjhB,GACb,MAAiC,KAA1BA,EAAMuF,QAAQyb,EAAI,GAC3B,CC3BO,MAAME,EAOXxH,WAAAA,CAAYmG,EAAUsB,EAAQC,GAC5B/d,KAAKwc,SAAWA,EAChBxc,KAAK8d,OAASA,EACVC,IACF/d,KAAK+d,MAAQA,EAEjB,ECPK,SAASC,EAAMC,EAAaF,GAEjC,MAAMvB,EAAW,CAAC,EAEZsB,EAAS,CAAC,EAChB,IAAIroB,GAAS,EAEb,OAASA,EAAQwoB,EAAYroB,QAC3Bgb,OAAOC,OAAO2L,EAAUyB,EAAYxoB,GAAO+mB,UAC3C5L,OAAOC,OAAOiN,EAAQG,EAAYxoB,GAAOqoB,QAG3C,OAAO,IAAID,EAAOrB,EAAUsB,EAAQC,EACtC,CCrBO,SAASG,EAAUvhB,GACxB,OAAOA,EAAMmJ,aACf,CFiBA+X,EAAOM,UAAU3B,SAAW,CAAC,EAE7BqB,EAAOM,UAAUL,OAAS,CAAC,EAE3BD,EAAOM,UAAUJ,MAAQ,KG3BlB,MAAMK,EAMX/H,WAAAA,CAAYmG,EAAU6B,GAEpBre,KAAKwc,SAAWA,EAEhBxc,KAAKqe,UAAYA,CACnB,EAIFD,EAAKD,UAAUJ,MAAQ,KACvBK,EAAKD,UAAUG,SAAU,EACzBF,EAAKD,UAAUI,YAAa,EAC5BH,EAAKD,UAAUK,mBAAoB,EACnCJ,EAAKD,UAAUM,QAAS,EACxBL,EAAKD,UAAUO,gBAAiB,EAChCN,EAAKD,UAAUQ,gBAAiB,EAChCP,EAAKD,UAAUS,uBAAwB,EACvCR,EAAKD,UAAUU,iBAAkB,EACjCT,EAAKD,UAAUrK,SAAU,ECxBzB,IAAIgL,EAAS,EAEN,MAAMR,EAAUS,IACVR,EAAaQ,IACbP,EAAoBO,IACpBN,EAASM,IACTJ,EAAiBI,IACjBL,EAAiBK,IACjBH,EAAwBG,IAErC,SAASA,IACP,OAAO,KAAOD,CAChB,CCPA,MAAMhf,EAAS8Q,OAAOoO,KAAKC,GAEpB,MAAMC,UAAoBd,EAQ/B/H,WAAAA,CAAYmG,EAAU6B,EAAWc,EAAMpB,GACrC,IAAItoB,GAAS,EAMb,GAJA2pB,MAAM5C,EAAU6B,GAEhBgB,EAAKrf,KAAM,QAAS+d,GAEA,kBAAToB,EACT,OAAS1pB,EAAQqK,EAAOlK,QAAQ,CAC9B,MAAMsK,EAAQJ,EAAOrK,GACrB4pB,EAAKrf,KAAMF,EAAOrK,IAAS0pB,EAAOF,EAAM/e,MAAY+e,EAAM/e,GAC5D,CAEJ,EAUF,SAASmf,EAAKvC,EAAQzjB,EAAKsD,GACrBA,IAEFmgB,EAAOzjB,GAAOsD,EAElB,CAZAuiB,EAAYf,UAAUrK,SAAU,ECbhC,MAAMwL,EAAM,CAAC,EAAEtC,eAMR,SAASuC,EAAO5T,GAErB,MAAM6Q,EAAW,CAAC,EAEZsB,EAAS,CAAC,EAEhB,IAAIrqB,EAEJ,IAAKA,KAAQkY,EAAW6T,WACtB,GAAIF,EAAIze,KAAK8K,EAAW6T,WAAY/rB,GAAO,CACzC,MAAMkJ,EAAQgP,EAAW6T,WAAW/rB,GAC9B4S,EAAO,IAAI6Y,EACfzrB,EACAkY,EAAW8T,UAAU9T,EAAW+T,YAAc,CAAC,EAAGjsB,GAClDkJ,EACAgP,EAAWoS,OAIXpS,EAAWkT,iBACXlT,EAAWkT,gBAAgBzf,SAAS3L,KAEpC4S,EAAKwY,iBAAkB,GAGzBrC,EAAS/oB,GAAQ4S,EAEjByX,EAAOI,EAAUzqB,IAASA,EAC1BqqB,EAAOI,EAAU7X,EAAKgY,YAAc5qB,CACtC,CAGF,OAAO,IAAIoqB,EAAOrB,EAAUsB,EAAQnS,EAAWoS,MACjD,CCvDO,MAAM4B,EAAQJ,EAAO,CAC1BxB,MAAO,QACP0B,SAAAA,CAAUpb,EAAG5Q,GACX,MAAO,SAAWA,EAAK2F,MAAM,GAAG0M,aAClC,EACA0Z,WAAY,CACVI,aAAc,KACdC,aAAc,KACdC,UAAW,KACXC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,UAAW,QCZFC,EAAMZ,EAAO,CACxBxB,MAAO,MACP0B,SAAAA,CAAUpb,EAAG5Q,GACX,MAAO,OAASA,EAAK2F,MAAM,GAAG0M,aAChC,EACA0Z,WAAY,CAACY,QAAS,KAAMC,QAAS,KAAMC,SAAU,QCFhD,SAASC,EAAuBb,EAAYrB,GACjD,OAAOA,KAAaqB,EAAaA,EAAWrB,GAAaA,CAC3D,CCAO,SAASmC,EAAyBd,EAAYlD,GACnD,OAAO+D,EAAuBb,EAAYlD,EAAS1W,cACrD,CCNO,MAAM2a,EAAQlB,EAAO,CAC1BxB,MAAO,QACP2B,WAAY,CAACgB,WAAY,eACzBjB,UAAWe,EACXhB,WAAY,CAACiB,MAAO,KAAME,WAAY,QCJ3BC,EAAOrB,EAAO,CACzBE,SAAAA,CAAUpb,EAAG5Q,GACX,MAAgB,SAATA,EAAkBA,EAAO,QAAUA,EAAK2F,MAAM,GAAG0M,aAC1D,EACA0Z,WAAY,CACVqB,qBAAsB,KACtBC,WAAYvC,EACZwC,iBAAkB,KAClBC,SAAUzC,EACV0C,YAAa1C,EACb2C,aAAczC,EACd0C,aAAc1C,EACd2C,YAAa3C,EACb4C,aAAc1C,EACd2C,YAAa,KACbC,gBAAiB5C,EACjB6C,YAAa,KACbC,aAAclD,EACdmD,eAAgB/C,EAChBgD,iBAAkB,KAClBC,aAAcrD,EACdsD,WAAYlD,EACZmD,YAAavD,EACbwD,aAAc,KACdC,WAAYzD,EACZ0D,YAAa,KACbC,iBAAkB,KAClBC,UAAW,KACXC,eAAgBzD,EAChB0D,UAAW5D,EACX6D,SAAU,KACVC,UAAWhE,EACXiE,cAAejE,EACfkE,oBAAqBlE,EACrBmE,gBAAiB,KACjBC,SAAUhE,EACViE,gBAAiB,KACjBC,aAAcpE,EACdqE,YAAavE,EACbwE,aAAcxE,EACdyE,aAAc,KACdC,aAAc1E,EACd2E,oBAAqBvE,EACrBwE,aAAc1E,EACd2E,aAAc3E,EACd4E,YAAa5E,EACb6E,aAAc/E,EACdgF,YAAa9E,EACb+E,SAAU,KACVC,aAAchF,EACdiF,aAAcjF,EACdkF,aAAclF,EACdmF,cAAe,KACfC,KAAM,QC7CGza,EAAOmW,EAAO,CACzBxB,MAAO,OACP2B,WAAY,CACVoE,cAAe,iBACfC,UAAW,QACXC,QAAS,MACTC,UAAW,cAEbxE,UAAWe,EACX3B,gBAAiB,CAAC,UAAW,WAAY,QAAS,YAClDW,WAAY,CAEV0E,KAAM,KACNC,OAAQzF,EACR0F,cAAezF,EACf0F,UAAW1F,EACX7oB,OAAQ,KACRwuB,MAAO,KACPC,gBAAiBjG,EACjBkG,oBAAqBlG,EACrBmG,eAAgBnG,EAChB/U,IAAK,KACLmb,GAAI,KACJC,MAAOrG,EACPsG,eAAgB,KAChBC,aAAclG,EACdmG,UAAWxG,EACXyG,SAAUzG,EACVvkB,QAASukB,EACT0G,QAAS,KACT1U,QAASgO,EACT2G,KAAM,KACNC,UAAWvG,EACXwG,KAAM1G,EACN2G,QAAS,KACTC,QAAS,KACTC,gBAAiB/G,EACjBgH,SAAUjH,EACVkH,aAAc7G,EACd8G,OAAQhH,EAASC,EACjBgH,YAAa,KACb9hB,KAAM,KACN+hB,SAAU,KACVC,SAAU,KACVvJ,QAASiC,EACTuH,MAAOvH,EACPwH,IAAK,KACLC,QAAS,KACTC,SAAU1H,EACV2H,SAAUzH,EACV0H,UAAW3H,EACX4H,QAAS,KACTC,aAAc,KACdC,KAAM,KACNC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,eAAgBnI,EAChBoI,WAAY,KACZC,QAAShI,EACTtqB,OAAQoqB,EACRmI,OAAQtI,EACR7hB,KAAMgiB,EACNoI,KAAM,KACNC,SAAU,KACVC,QAASpI,EACTqI,UAAWrI,EACXzK,GAAI,KACJ+S,WAAY,KACZC,YAAa,KACbC,UAAW,KACXC,UAAW,KACXC,GAAI,KACJC,MAAOhJ,EACPiJ,OAAQ,KACRC,SAAU7I,EACV8I,QAAS9I,EACT+I,UAAWpJ,EACXqJ,SAAUhJ,EACViJ,KAAM,KACNxiB,MAAO,KACP+F,KAAM,KACN0c,SAAU,KACVtpB,KAAM,KACNupB,QAAS,KACTC,KAAMzJ,EACN9hB,IAAKiiB,EACLuJ,SAAU,KACVxxB,IAAK,KACLyxB,UAAWxJ,EACXyJ,MAAO,KACPC,OAAQ,KACRxxB,IAAK,KACLyxB,UAAW3J,EACX4J,SAAU/J,EACVgK,MAAOhK,EACPb,KAAM,KACN8K,MAAO,KACPC,SAAUlK,EACVmK,WAAYnK,EACZoK,QAAS,KACTC,aAAc,KACdC,WAAY,KACZC,cAAe,KACfC,cAAe,KACfC,eAAgB,KAChBC,OAAQ,KACRC,SAAU,KACVC,UAAW,KACXC,iBAAkB,KAClBC,SAAU,KACVC,QAAS,KACTC,QAAS,KACTC,cAAe,KACfC,cAAe,KACfC,kBAAmB,KACnBC,OAAQ,KACRC,YAAa,KACbC,MAAO,KACPC,WAAY,KACZC,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,OAAQ,KACRC,iBAAkB,KAClBC,UAAW,KACXC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,WAAY,KACZC,aAAc,KACdC,QAAS,KACTC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,QAAS,KACTC,iBAAkB,KAClBC,OAAQ,KACRC,aAAc,KACdC,iBAAkB,KAClBC,UAAW,KACXC,YAAa,KACbC,UAAW,KACXC,eAAgB,KAChBC,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,UAAW,KACXC,WAAY,KACZC,WAAY,KACZC,aAAc,KACdC,mBAAoB,KACpBC,QAAS,KACTC,SAAU,KACVlzB,SAAU,KACVmzB,YAAa,KACbC,0BAA2B,KAC3BC,SAAU,KACVC,UAAW,KACXC,SAAU,KACVC,aAAc,KACdC,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,UAAW,KACXC,aAAc,KACdC,SAAU,KACVC,qBAAsB,KACtBC,SAAU,KACVC,eAAgB,KAChBC,UAAW,KACXC,QAAS,KACTjY,KAAMwI,EACN0P,QAASvP,EACTtW,QAAS,KACT8lB,KAAMtP,EACNuP,YAAa,KACbC,YAAa7P,EACb8P,OAAQ,KACRC,QAAS,KACTC,SAAUhQ,EACViQ,eAAgB,KAChBC,IAAK7P,EACL8P,SAAUnQ,EACVoQ,SAAUpQ,EACVqQ,KAAMlQ,EACNmQ,QAASnQ,EACToQ,QAASlQ,EACTmQ,MAAO,KACPC,OAAQzQ,EACR0Q,SAAU1Q,EACV2Q,SAAU3Q,EACV4Q,MAAO,KACPh6B,KAAMupB,EACN5O,MAAO,KACPsf,KAAM,KACNC,KAAM3Q,EACN4Q,WAAY9Q,EACZ+Q,IAAK,KACLC,OAAQ,KACRC,QAAS,KACTC,OAAQ,KACRn5B,MAAOmoB,EACPiR,KAAM,KACN7iB,MAAO,KACP8iB,SAAUlR,EACVmR,OAAQ,KACRvsB,MAAO,KACPwsB,UAAW,KACX5yB,KAAM,KACN6yB,cAAexR,EACfyR,OAAQ,KACRpzB,MAAO4hB,EACPnqB,MAAOqqB,EACPuR,KAAM,KAINx0B,MAAO,KACPy0B,MAAO,KACPC,QAASvR,EACTwR,KAAM,KACNC,WAAY,KACZC,QAAS,KACTC,OAAQ7R,EACR8R,YAAa,KACbC,aAAc/R,EACdgS,YAAa,KACbC,YAAa,KACbC,KAAM,KACNC,QAAS,KACTC,QAAS,KACTC,MAAO,KACPx+B,KAAM,KACNy+B,SAAU,KACVC,SAAU,KACVC,MAAO,KACPC,QAAS5S,EACT6S,QAAS7S,EACTzkB,MAAO,KACPu3B,KAAM,KACNC,MAAO,KACPC,YAAa,KACbC,OAAQ9S,EACR+S,WAAY/S,EACZtU,KAAM,KACNsnB,SAAU,KACVC,OAAQ,KACRC,aAAclT,EACdmT,YAAanT,EACboT,SAAUvT,EACVwT,OAAQxT,EACRyT,QAASzT,EACT0T,OAAQ1T,EACR2T,OAAQ,KACRC,QAAS,KACTC,OAAQ,KACRC,IAAK,KACLC,YAAa5T,EACb6T,MAAO,KACPC,OAAQ,KACRC,UAAWjU,EACXkU,QAAS,KACTC,QAAS,KACTroB,KAAM,KACNsoB,UAAWlU,EACXmU,UAAW,KACXC,QAAS,KACTC,OAAQ,KACRC,MAAO,KACPC,OAAQvU,EAGRwU,kBAAmB,KACnBC,YAAa,KACbC,SAAU,KACVC,wBAAyB9U,EACzB+U,sBAAuB/U,EACvB/gB,OAAQ,KACRif,SAAU,KACV8W,QAAS7U,EACT8U,SAAU,KACVC,aAAc,QC1SLC,EAAMlU,EAAO,CACxBxB,MAAO,MACP2B,WAAY,CACVgU,aAAc,gBACdC,kBAAmB,qBACnBC,WAAY,cACZC,cAAe,iBACfC,UAAW,aACX5O,UAAW,QACX6O,SAAU,YACVC,SAAU,YACVC,mBAAoB,sBACpBC,0BAA2B,8BAC3BC,aAAc,gBACdC,eAAgB,kBAChB1O,YAAa,cACb2O,SAAU,WACVC,iBAAkB,oBAClBC,iBAAkB,oBAClBC,YAAa,eACbC,SAAU,YACVC,WAAY,cACZC,aAAc,gBACdC,WAAY,cACZC,SAAU,YACVC,eAAgB,mBAChBC,YAAa,eACbC,UAAW,aACXC,YAAa,eACbC,WAAY,cACZC,UAAW,aACXC,2BAA4B,+BAC5BC,yBAA0B,6BAC1BvO,SAAU,WACVwO,UAAW,cACXC,aAAc,iBACdC,aAAc,iBACdC,eAAgB,kBAChBC,cAAe,iBACfC,cAAe,iBACfC,UAAW,aACXC,UAAW,aACXC,YAAa,eACbC,QAAS,WACTC,YAAa,gBACbC,aAAc,iBACdC,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,SAAU,YACVC,MAAO,SACPC,UAAW,cACXC,WAAY,eACZ9N,QAAS,UACT+N,WAAY,aACZ9N,aAAc,eACdG,cAAe,gBACf4N,QAAS,UACTzN,SAAU,WACVC,UAAW,YACXC,iBAAkB,mBAClBC,SAAU,WACVC,QAAS,UACTC,QAAS,UACTI,OAAQ,SACRC,YAAa,cACbC,MAAO,QACPC,WAAY,aACZC,OAAQ,SACRC,UAAW,YACXC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,OAAQ,SACRC,iBAAkB,mBAClBC,UAAW,YACXoM,MAAO,QACPnM,QAAS,UACTC,QAAS,UACTC,QAAS,UACTkM,UAAW,YACXC,WAAY,aACZjM,aAAc,eACdC,QAAS,UACTC,UAAW,YACXC,UAAW,YACXC,WAAY,aACZC,QAAS,UACTE,OAAQ,SACRC,aAAc,eACdC,iBAAkB,mBAClBE,YAAa,cACbC,UAAW,YACXE,YAAa,cACbC,aAAc,eACdC,aAAc,eACdC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,UAAW,YACX8K,aAAc,eACd7K,UAAW,YACXC,SAAU,WACVC,WAAY,aACZC,WAAY,aACZC,QAAS,UACTC,QAAS,UACTC,OAAQ,SACRC,UAAW,YACXC,WAAY,aACZC,WAAY,aACZC,aAAc,eACdoK,SAAU,WACVlK,QAAS,UACTC,SAAU,WACVlzB,SAAU,WACVqzB,SAAU,WACVC,UAAW,YACXC,SAAU,WACV6J,OAAQ,SACR3J,UAAW,YACXC,UAAW,YACXC,SAAU,WACVC,UAAW,YACXC,aAAc,eACdC,SAAU,WACVE,SAAU,WACVC,eAAgB,iBAChBC,UAAW,YACXmJ,OAAQ,SACRC,iBAAkB,oBAClBC,kBAAmB,qBACnBC,WAAY,cACZC,QAAS,WACTC,cAAe,iBACf/I,eAAgB,iBAChBgJ,gBAAiB,mBACjBC,eAAgB,kBAChBC,UAAW,aACXC,YAAa,eACbC,sBAAuB,yBACvBC,uBAAwB,0BACxBC,gBAAiB,mBACjBC,iBAAkB,oBAClBC,cAAe,iBACfC,eAAgB,kBAChBC,iBAAkB,oBAClBC,cAAe,iBACfC,YAAa,eACbxI,SAAU,WACVyI,WAAY,cACZC,eAAgB,kBAChBC,cAAe,iBACfC,OAAQ,SACRC,kBAAmB,qBACnBC,mBAAoB,sBACpBC,YAAa,eACbC,aAAc,gBACdC,WAAY,eACZC,YAAa,eACbC,SAAU,YACVC,aAAc,gBACdC,cAAe,iBACfC,aAAc,gBACdC,SAAU,aACVC,YAAa,gBACbC,YAAa,gBACbC,YAAa,eACbC,YAAa,eACbC,QAAS,WAETC,cAAe,gBACfC,cAAe,iBAEjBha,UAAWc,EACXf,WAAY,CACVka,MAAO9a,EACP8U,aAAcjV,EACdkb,WAAY,KACZC,SAAU,KACVjG,kBAAmB,KACnBkG,WAAYpb,EACZqb,UAAWrb,EACXmV,WAAY,KACZmG,OAAQtb,EACRub,cAAe,KACfC,cAAe,KACfC,QAASzb,EACT0b,UAAW,KACXtG,cAAe,KACfuG,cAAe,KACfC,YAAa,KACbC,KAAM,KACNC,MAAO,KACPC,KAAM/b,EACNgc,GAAI,KACJC,SAAU,KACV5G,UAAWrV,EACXyG,UAAWvG,EACXgc,KAAM,KACN5G,SAAU,KACV6G,cAAe,KACf5G,SAAU,KACV/C,MAAO,KACPgD,mBAAoB,KACpBC,0BAA2B,KAC3BC,aAAc,KACdC,eAAgB,KAChB/O,QAAS,KACTwV,kBAAmB,KACnBC,iBAAkB,KAClBpV,YAAa,KACbqV,OAAQ,KACRC,GAAI,KACJC,GAAI,KACJ7tB,EAAG,KACHinB,SAAU,KACV6G,cAAe,KACfC,QAAS1c,EACT2c,gBAAiB3c,EACjB4c,UAAW,KACXC,QAAS,KACTC,IAAK,KACLC,QAAS/c,EACT6V,iBAAkB,KAClBrO,SAAU3H,EACVmd,GAAI,KACJC,GAAI,KACJC,SAAU,KACVC,SAAU,KACVC,UAAWpd,EACX8V,iBAAkB,KAClB79B,IAAK,KACLmD,MAAO,KACPiiC,SAAUrd,EACVsd,0BAA2B,KAC3BC,KAAM,KACNxH,YAAa/V,EACbgW,SAAU,KACVwH,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbzH,WAAY,KACZC,aAAc,KACdyH,UAAW,KACXC,eAAgB,KAChBzH,WAAY,KACZC,SAAU,KACVC,eAAgB,KAChBC,YAAa,KACbC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZoH,OAAQ,KACRC,GAAI,KACJ39B,KAAM,KACN49B,GAAI,KACJC,GAAI,KACJC,GAAIhe,EACJie,GAAIje,EACJyW,UAAWzW,EACX0W,2BAA4B,KAC5BC,yBAA0B,KAC1BuH,SAAU,KACVC,kBAAmB,KACnBC,cAAe,KACfj6B,QAAS,KACTk6B,QAASte,EACTue,kBAAmB,KACnBC,WAAY,KACZ5oC,OAAQ,KACRwyB,KAAM,KACNC,SAAU,KACVwO,UAAW7W,EACX8W,aAAc9W,EACd+W,aAAc/W,EACdvK,GAAI,KACJgpB,YAAaze,EACbgX,eAAgB,KAChB0H,kBAAmB,KACnBC,GAAI,KACJC,IAAK,KACLC,UAAW7e,EACX9jB,EAAG8jB,EACH8e,GAAI9e,EACJ+e,GAAI/e,EACJgf,GAAIhf,EACJif,GAAIjf,EACJkf,aAAc/e,EACdgf,iBAAkB,KAClBC,UAAW,KACXC,WAAY,KACZC,SAAU,KACVC,QAAS,KACT7yB,KAAM,KACN8yB,aAAc,KACdvI,cAAe,KACfC,cAAe,KACfuI,kBAAmBzf,EACnB0f,MAAO,KACPvI,UAAW,KACXC,UAAW,KACXC,YAAa,KACbsI,aAAc,KACdC,YAAa,KACbC,YAAa,KACbnf,KAAM,KACNof,iBAAkB,KAClBC,UAAW,KACXC,aAAc,KACdjoC,IAAK,KACL0xB,MAAO,KACPwW,uBAAwB,KACxBC,sBAAuB,KACvBC,UAAWngB,EACXogB,UAAW,KACX1W,OAAQ,KACRxxB,IAAK,KACLmoC,KAAM,KACNrhB,KAAM,KACNsY,QAAS,KACTC,YAAa,KACbC,aAAc,KACdC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,SAAU,KACVC,MAAO,KACPC,UAAW,KACXC,WAAY,KACZuI,WAAY,KACZhqC,SAAU,KACV6D,OAAQ,KACR8vB,QAAS,KACT+N,WAAY,KACZ9N,aAAc,KACdG,cAAe,KACf4N,QAAS,KACTzN,SAAU,KACVC,UAAW,KACXC,iBAAkB,KAClBC,SAAU,KACVC,QAAS,KACTC,QAAS,KACTI,OAAQ,KACRC,YAAa,KACbC,MAAO,KACPC,WAAY,KACZC,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,OAAQ,KACRC,iBAAkB,KAClBC,UAAW,KACXoM,MAAO,KACPnM,QAAS,KACTC,QAAS,KACTC,QAAS,KACTkM,UAAW,KACXC,WAAY,KACZjM,aAAc,KACdC,QAAS,KACTC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,QAAS,KACTE,OAAQ,KACRC,aAAc,KACdC,iBAAkB,KAClBE,YAAa,KACbC,UAAW,KACXE,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,UAAW,KACX8K,aAAc,KACd7K,UAAW,KACXC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,UAAW,KACXC,WAAY,KACZC,WAAY,KACZC,aAAc,KACdoK,SAAU,KACVlK,QAAS,KACTC,SAAU,KACVlzB,SAAU,KACVqzB,SAAU,KACVC,UAAW,KACXC,SAAU,KACV6J,OAAQ,KACR3J,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,UAAW,KACXC,aAAc,KACdC,SAAU,KACVE,SAAU,KACVC,eAAgB,KAChBC,UAAW,KACXmJ,OAAQ,KACR+H,QAAS,KACTC,SAAU,KACVC,MAAO,KACPC,OAAQ,KACRC,YAAa,KACbC,OAAQ,KACRC,SAAU,KACVC,QAAS,KACTrI,iBAAkBzY,EAClB0Y,kBAAmB1Y,EACnB2Y,WAAY,KACZC,QAAS,KACT7yB,KAAM,KACNg7B,WAAY/gB,EACZghB,oBAAqB,KACrBC,iBAAkB,KAClBC,aAAc,KACdC,MAAO,KACP3R,KAAMtP,EACNkhB,MAAO,KACPrG,cAAe,KACflC,cAAe,KACfwI,OAAQ,KACRC,UAAWthB,EACXuhB,UAAWvhB,EACXwhB,UAAWxhB,EACXyhB,cAAe,KACfC,oBAAqB,KACrBC,eAAgB,KAChBC,UAAW,KACX7jB,SAAUoC,EACV0hB,EAAG,KACHC,OAAQ,KACRhS,eAAgB,KAChBiS,KAAM,KACNC,KAAM,KACNjS,IAAK5P,EACLwT,IAAKxT,EACL2Y,gBAAiB,KACjBmJ,YAAa,KACbC,UAAW,KACXC,mBAAoBhiB,EACpBiiB,iBAAkBjiB,EAClBkiB,cAAeliB,EACfmiB,gBAAiBniB,EACjBoiB,SAAU,KACVC,QAAS,KACT5/B,OAAQ,KACR6/B,OAAQ,KACRC,GAAI,KACJC,GAAI,KACJC,MAAO,KACPC,KAAM,KACN9J,eAAgB,KAChB3d,KAAM,KACN0nB,MAAO,KACPC,aAAc,KACdC,iBAAkBhjB,EAClBijB,iBAAkBjjB,EAClBkjB,aAAc,KACdC,QAAS,KACTC,YAAa,KACbC,aAAc,KACdC,MAAO,KACPC,MAAO,KACPC,YAAa,KACbxK,UAAW,KACXC,YAAa,KACbC,sBAAuBlZ,EACvBmZ,uBAAwBnZ,EACxB1b,OAAQ,KACRm/B,OAAQ,KACRrK,gBAAiBjZ,EACjBkZ,iBAAkB,KAClBC,cAAe,KACfC,eAAgB,KAChBC,iBAAkBxZ,EAClByZ,cAAezZ,EACf0Z,YAAa,KACbtrB,MAAO,KACPs1B,aAAc1jB,EACd2jB,aAAc,KACdC,oBAAqB,KACrBC,WAAY,KACZC,cAAe,KACfC,qBAAsB,KACtBC,eAAgB7jB,EAChB+Q,SAAUlR,EACVikB,YAAa,KACb9S,OAAQ,KACR+S,QAASlkB,EACTmkB,QAASnkB,EACT2Z,WAAY,KACZC,eAAgB,KAChBC,cAAe,KACfuK,WAAY,KACZpJ,cAAe,KACfp2B,MAAO,KACPy/B,kBAAmB,KACnB7lC,KAAM,KACNs7B,OAAQ3Z,EACRmkB,GAAI,KACJtjB,UAAW,KACXujB,GAAI,KACJC,GAAI,KACJzK,kBAAmB/Z,EACnBga,mBAAoBha,EACpBykB,QAAS,KACTxK,YAAa,KACbC,aAAc,KACdC,WAAYna,EACZ3B,OAAQ,KACR+b,YAAapa,EACbua,cAAeva,EACfwa,aAAc,KACdH,SAAUra,EACVsa,aAActa,EACdoU,QAAS,KACTqG,SAAUza,EACV0a,YAAa1a,EACb2a,YAAa3a,EACb0kB,QAAS,KACTC,WAAY,KACZC,WAAY,KACZjvC,MAAO,KACPkvC,OAAQ,KACRjK,YAAa,KACbC,YAAa,KACbiK,EAAG,KACHC,GAAI,KACJC,GAAI,KACJC,iBAAkB,KAClBnK,QAAS9a,EACTklB,EAAG,KACHC,GAAI,KACJC,GAAI,KACJC,iBAAkB,KAClBC,EAAG,KACHC,WAAY,QCliBH56B,EAAO4U,EAAM,CAACmC,EAAKR,EAAOc,EAAOG,EAAMqjB,GAAW,QAClDxQ,EAAMzV,EAAM,CAACmC,EAAKR,EAAOc,EAAOG,EAAMsjB,GAAU,OCTvDC,EAAQ,kBACRC,EAAO,UACPC,EAAM,SA+CZ,SAASC,EAAMr2B,GACb,MAAO,IAAMA,EAAGnI,aAClB,CAMA,SAASy+B,EAAUt2B,GACjB,OAAOA,EAAGu2B,OAAO,GAAGz4B,aACtB,CC1DO,MAAM04B,EAAc,CACzB5T,QAAS,UACTwD,SAAU,WACV9M,OAAQ,SACRsQ,gBAAiB,kBACjBC,iBAAkB,mBAClBC,cAAe,gBACfC,eAAgB,iBAChBC,iBAAkB,mBAClBM,OAAQ,SACR3Y,aAAc,eACdC,aAAc,eACdC,UAAW,YACXC,UAAW,YACXC,UAAW,YACXC,WAAY,aACZC,UAAW,YACXS,WAAY,c,eCvBd,EAAe+jB,EAAAA,SAAyBA,EC0BhBC,EAAM,OAAvB,MAUMC,EAAaD,EAAM,SAUhC,SAASA,EAAM1nC,GACb,OAQA,SAAe/J,GACb,MAAMyxC,EAASzxC,GAAQA,EAAKsP,UAAYtP,EAAKsP,SAASvF,IAAU,CAAC,EAEjE,GACwB,kBAAf0nC,EAAMx9B,MACbw9B,EAAMx9B,KAAO,GACW,kBAAjBw9B,EAAMh0B,QACbg0B,EAAMh0B,OAAS,EAEf,MAAO,CACLxJ,KAAMw9B,EAAMx9B,KACZwJ,OAAQg0B,EAAMh0B,OACd/X,OAC0B,kBAAjB+rC,EAAM/rC,QAAuB+rC,EAAM/rC,QAAU,EAChD+rC,EAAM/rC,YACNtD,EAGZ,CACF,CCzCO,SAASuvC,EAAkBloC,GAEhC,OAAKA,GAA0B,kBAAVA,EAKjB,aAAcA,GAAS,SAAUA,EAC5B6F,EAAS7F,EAAM6F,UAIpB,UAAW7F,GAAS,QAASA,EACxB6F,EAAS7F,GAId,SAAUA,GAAS,WAAYA,EAC1BgoC,EAAMhoC,GAIR,GAnBE,EAoBX,CAMA,SAASgoC,EAAMA,GACb,OAAOlvC,EAAMkvC,GAASA,EAAMx9B,MAAQ,IAAM1R,EAAMkvC,GAASA,EAAMh0B,OACjE,CAMA,SAASnO,EAASsiC,GAChB,OAAOH,EAAMG,GAAOA,EAAIxuC,OAAS,IAAMquC,EAAMG,GAAOA,EAAIpuC,IAC1D,CAMA,SAASjB,EAAMkH,GACb,OAAOA,GAA0B,kBAAVA,EAAqBA,EAAQ,CACtD,CCvDO,MAAMooC,WAAqBvkC,MAwDhC6V,WAAAA,CAAY2uB,EAAeC,EAAwB5F,GACjDjgB,QAEsC,kBAA3B6lB,IACT5F,EAAS4F,EACTA,OAAyB3vC,GAI3B,IAAI4vC,EAAS,GAETlkC,EAAU,CAAC,EACXmkC,GAAc,EAwClB,GAtCIF,IAMAjkC,EAHA,SAAUikC,GACV,WAAYA,GAMZ,UAAWA,GACX,QAASA,EALC,CAACG,MAAOH,GAUX,SAAUA,EACP,CACRI,UAAW,CAACJ,GACZG,MAAOH,EAAuBziC,UAKtB,IAAIyiC,IAIW,kBAAlBD,EACTE,EAASF,GAGDhkC,EAAQskC,OAASN,IACzBG,GAAc,EACdD,EAASF,EAAcO,QACvBvkC,EAAQskC,MAAQN,IAGbhkC,EAAQwkC,SAAWxkC,EAAQzB,QAA4B,kBAAX8/B,EAAqB,CACpE,MAAM5pC,EAAQ4pC,EAAO3pC,QAAQ,MAEd,IAAXD,EACFuL,EAAQwkC,OAASnG,GAEjBr+B,EAAQzB,OAAS8/B,EAAOjmC,MAAM,EAAG3D,GACjCuL,EAAQwkC,OAASnG,EAAOjmC,MAAM3D,EAAQ,GAE1C,CAEA,IAAKuL,EAAQokC,OAASpkC,EAAQqkC,WAAarkC,EAAQqkC,UAAW,CAC5D,MAAM3kC,EAASM,EAAQqkC,UAAUrkC,EAAQqkC,UAAUzvC,OAAS,GAExD8K,IACFM,EAAQokC,MAAQ1kC,EAAO8B,SAE3B,CAEA,MAAMlM,EACJ0K,EAAQokC,OAAS,UAAWpkC,EAAQokC,MAChCpkC,EAAQokC,MAAM9uC,MACd0K,EAAQokC,MAQdplC,KAAKqlC,UAAYrkC,EAAQqkC,gBAAa/vC,EAOtC0K,KAAKslC,MAAQtkC,EAAQskC,YAAShwC,EAO9B0K,KAAK2Q,OAASra,EAAQA,EAAMqa,YAASrb,EAWrC0K,KAAKylC,WAAQnwC,EAOb0K,KAAK0lC,KAQL1lC,KAAKulC,QAAUL,EAOfllC,KAAKmH,KAAO7Q,EAAQA,EAAM6Q,UAAO7R,EASjC0K,KAAKyd,KAAOonB,EAAkB7jC,EAAQokC,QAAU,MAOhDplC,KAAKolC,MAAQpkC,EAAQokC,YAAS9vC,EAO9B0K,KAAKklC,OAASllC,KAAKulC,QAOnBvlC,KAAKwlC,OAASxkC,EAAQwkC,aAAUlwC,EAOhC0K,KAAKT,OAASyB,EAAQzB,aAAUjK,EAWhC0K,KAAK2C,MACHwiC,GAAenkC,EAAQskC,OAAwC,kBAAxBtkC,EAAQskC,MAAM3iC,MACjD3B,EAAQskC,MAAM3iC,MACd,GAYN3C,KAAK2lC,OAOL3lC,KAAKuL,SAOLvL,KAAK4lC,KAUL5lC,KAAKsD,GAEP,EAGFyhC,GAAa5mB,UAAUunB,KAAO,GAC9BX,GAAa5mB,UAAUV,KAAO,GAC9BsnB,GAAa5mB,UAAU+mB,OAAS,GAChCH,GAAa5mB,UAAUonB,QAAU,GACjCR,GAAa5mB,UAAUxb,MAAQ,GAC/BoiC,GAAa5mB,UAAUxN,YAASrb,EAChCyvC,GAAa5mB,UAAUhX,UAAO7R,EAC9ByvC,GAAa5mB,UAAUknB,eAAY/vC,EACnCyvC,GAAa5mB,UAAUmnB,WAAQhwC,EAC/ByvC,GAAa5mB,UAAUsnB,WAAQnwC,EAC/ByvC,GAAa5mB,UAAUinB,WAAQ9vC,EAC/ByvC,GAAa5mB,UAAUqnB,YAASlwC,EAChCyvC,GAAa5mB,UAAU5e,YAASjK,ECxChC,MAAMgqB,GAAM,CAAC,EAAEtC,eAGT6oB,GAAW,IAAIhzC,IAEfwxC,GAAM,SACNyB,GAAgB,YAahBC,GAAgB,IAAIC,IAAI,CAAC,QAAS,QAAS,QAAS,QAAS,OAE7DC,GAAmB,IAAID,IAAI,CAAC,KAAM,OAElCE,GAAO,0DAcN,SAASC,GAAaplC,EAAMC,GACjC,IAAKA,QAAgC1L,IAArB0L,EAAQolC,SACtB,MAAM,IAAI5mC,UAAU,kCAGtB,MAAM6mC,EAAWrlC,EAAQqlC,eAAY/wC,EAErC,IAAIiqB,EAEJ,GAAIve,EAAQslC,YAAa,CACvB,GAA8B,oBAAnBtlC,EAAQulC,OACjB,MAAM,IAAI/mC,UACR,yDAIJ+f,EA8TJ,SAA2B8mB,EAAUE,GACnC,OAAOhnB,EAEP,SAASA,EAAOrsB,EAAM+J,EAAMtK,EAAO0G,GAEjC,MAAMmtC,EAAmBlqC,MAAMsD,QAAQjN,EAAMqP,UACvC2iC,EAAQC,EAAW1xC,GACzB,OAAOqzC,EACLtpC,EACAtK,EACA0G,EACAmtC,EACA,CACEC,aAAc9B,EAAQA,EAAMh0B,OAAS,OAAIrb,EACzCoxC,SAAUL,EACVM,WAAYhC,EAAQA,EAAMx9B,UAAO7R,QAEnCA,EAEJ,CACF,CAlVasxC,CAAkBP,EAAUrlC,EAAQulC,OAC/C,KAAO,CACL,GAA2B,oBAAhBvlC,EAAQ0c,IACjB,MAAM,IAAIle,UAAU,wCAGtB,GAA4B,oBAAjBwB,EAAQ6lC,KACjB,MAAM,IAAIrnC,UAAU,yCAGtB+f,EAiSJ,SAA0Blb,EAAGqZ,EAAKmpB,GAChC,OAAOtnB,EAEP,SAASA,EAAOlb,EAAGpH,EAAMtK,EAAO0G,GAE9B,MACMytC,EADmBxqC,MAAMsD,QAAQjN,EAAMqP,UACf6kC,EAAOnpB,EACrC,OAAOrkB,EAAMytC,EAAG7pC,EAAMtK,EAAO0G,GAAOytC,EAAG7pC,EAAMtK,EAC/C,CACF,CA1Sao0C,CAAiBV,EAAUrlC,EAAQ0c,IAAK1c,EAAQ6lC,KAC3D,CAGA,MAAM5zC,EAAQ,CACZmzC,SAAUplC,EAAQolC,SAClBf,UAAW,GACX2B,WAAYhmC,EAAQgmC,YAAc,CAAC,EACnCznB,SACA0nB,yBAA0BjmC,EAAQimC,0BAA4B,QAC9DC,UAAWlmC,EAAQmmC,gBAAkBnmC,EAAQmmC,uBAAoB7xC,EACjE+wC,WACAe,mBAAoBpmC,EAAQomC,qBAAsB,EAClDC,UAA+B,IAArBrmC,EAAQqmC,SAClBC,SAAUtmC,EAAQsmC,WAAY,EAC9BC,OAA0B,QAAlBvmC,EAAQ+c,MAAkB0V,EAAMrqB,EACxCo+B,sBAAuBxmC,EAAQwmC,uBAAyB,MACxDC,uBAAyD,IAAlCzmC,EAAQymC,uBAG3BpmC,EAASsb,GAAI1pB,EAAO8N,OAAMzL,GAGhC,OAAI+L,GAA4B,kBAAXA,EACZA,EAIFpO,EAAMssB,OACXxe,EACA9N,EAAMmzC,SACN,CAACpkC,SAAUX,QAAU/L,QACrBA,EAEJ,CAcA,SAASqnB,GAAI1pB,EAAOC,EAAMmG,GACxB,MAAkB,YAAdnG,EAAK+J,KAqCX,SAAiBhK,EAAOC,EAAMmG,GAC5B,MAAMquC,EAAez0C,EAAMs0C,OAC3B,IAAIA,EAASG,EAEsB,QAA/Bx0C,EAAKy0C,QAAQ7hC,eAAkD,SAAvB4hC,EAAa3pB,QACvDwpB,EAAS9T,EACTxgC,EAAMs0C,OAASA,GAGjBt0C,EAAMoyC,UAAU3xC,KAAKR,GAErB,MAAM+J,EAAO2qC,GAAsB30C,EAAOC,EAAKy0C,SAAS,GAClDh1C,EAkPR,SAA4BM,EAAOC,GAEjC,MAAMP,EAAQ,CAAC,EAEf,IAAIk1C,EAEAp0C,EAEJ,IAAKA,KAAQP,EAAKssB,WAChB,GAAa,aAAT/rB,GAAuB6rB,GAAIze,KAAK3N,EAAKssB,WAAY/rB,GAAO,CAC1D,MAAM4N,EAASymC,GAAe70C,EAAOQ,EAAMP,EAAKssB,WAAW/rB,IAE3D,GAAI4N,EAAQ,CACV,MAAOhI,EAAKsD,GAAS0E,EAGnBpO,EAAMw0C,uBACE,UAARpuC,GACiB,kBAAVsD,GACPspC,GAAiB9wC,IAAIjC,EAAKy0C,SAE1BE,EAAalrC,EAEbhK,EAAM0G,GAAOsD,CAEjB,CACF,CAGF,GAAIkrC,EAAY,EAEsBl1C,EAAMka,QAAUla,EAAMka,MAAQ,CAAC,IAC7B,QAAhC5Z,EAAMu0C,sBAAkC,aAAe,aAC3DK,CACJ,CAEA,OAAOl1C,CACT,CAvRgBo1C,CAAmB90C,EAAOC,GACxC,IAAI8O,EAAWgmC,GAAe/0C,EAAOC,GAEjC6yC,GAAc5wC,IAAIjC,EAAKy0C,WACzB3lC,EAAWA,EAASi6B,QAAO,SAAUgM,GACnC,MAAwB,kBAAVA,KvBvaM,kBADCC,EuBwa0BD,GvBtahC,SAAfC,EAAMjrC,MACJ2gB,EAAMsqB,EAAMvrC,OAEdihB,EAAMsqB,IALL,IAAoBA,CuByavB,KAUF,OAPAC,GAAQl1C,EAAON,EAAOsK,EAAM/J,GAC5Bk1C,GAAYz1C,EAAOqP,GAGnB/O,EAAMoyC,UAAUzuB,MAChB3jB,EAAMs0C,OAASG,EAERz0C,EAAMssB,OAAOrsB,EAAM+J,EAAMtK,EAAO0G,EACzC,CAjEW7E,CAAQvB,EAAOC,EAAMmG,GAGZ,sBAAdnG,EAAK+J,MAA8C,sBAAd/J,EAAK+J,KA0EhD,SAAuBhK,EAAOC,GAC5B,GAAIA,EAAK0Q,MAAQ1Q,EAAK0Q,KAAKykC,QAAUp1C,EAAMi0C,UAAW,CACpD,MACMr9B,EADU3W,EAAK0Q,KAAKykC,OACCC,KAAK,GAIhC,OAHAzkC,EAAAA,EAAAA,IAA2B,wBAApBgG,EAAW5M,MAIhBhK,EAAMi0C,UAAUqB,mBAAmB1+B,EAAWA,WAElD,CAEA2+B,GAAYv1C,EAAOC,EAAKsP,SAC1B,CAtFWimC,CAAcx1C,EAAOC,GAGZ,sBAAdA,EAAK+J,MAA8C,sBAAd/J,EAAK+J,KAsHhD,SAAuBhK,EAAOC,EAAMmG,GAClC,MAAMquC,EAAez0C,EAAMs0C,OAC3B,IAAIA,EAASG,EAEK,QAAdx0C,EAAKuqB,MAAyC,SAAvBiqB,EAAa3pB,QACtCwpB,EAAS9T,EACTxgC,EAAMs0C,OAASA,GAGjBt0C,EAAMoyC,UAAU3xC,KAAKR,GAErB,MAAM+J,EACU,OAAd/J,EAAKuqB,KACDxqB,EAAMmzC,SACNwB,GAAsB30C,EAAOC,EAAKuqB,MAAM,GACxC9qB,EAuMR,SAA+BM,EAAOC,GAEpC,MAAMP,EAAQ,CAAC,EAEf,IAAK,MAAM0rB,KAAanrB,EAAKwsB,WAC3B,GAAuB,8BAAnBrB,EAAUphB,KACZ,GAAIohB,EAAUza,MAAQya,EAAUza,KAAKykC,QAAUp1C,EAAMi0C,UAAW,CAC9D,MACMr9B,EADUwU,EAAUza,KAAKykC,OACJC,KAAK,IAChCzkC,EAAAA,EAAAA,IAA2B,wBAApBgG,EAAW5M,MAClB,MAAMyrC,EAAmB7+B,EAAWA,YACpChG,EAAAA,EAAAA,IAAiC,qBAA1B6kC,EAAiBzrC,MACxB,MAAMuf,EAAWksB,EAAiBlpB,WAAW,IAC7C3b,EAAAA,EAAAA,IAAyB,kBAAlB2Y,EAASvf,MAEhB2T,OAAOC,OACLle,EACAM,EAAMi0C,UAAUqB,mBAAmB/rB,EAASmsB,UAEhD,MACEH,GAAYv1C,EAAOC,EAAKsP,cAErB,CAEL,MAAMib,EAAOY,EAAUZ,KAEvB,IAAI9gB,EAEJ,GAAI0hB,EAAU1hB,OAAoC,kBAApB0hB,EAAU1hB,MACtC,GACE0hB,EAAU1hB,MAAMiH,MAChBya,EAAU1hB,MAAMiH,KAAKykC,QACrBp1C,EAAMi0C,UACN,CACA,MACMr9B,EADUwU,EAAU1hB,MAAMiH,KAAKykC,OACVC,KAAK,IAChCzkC,EAAAA,EAAAA,IAA2B,wBAApBgG,EAAW5M,MAClBN,EAAQ1J,EAAMi0C,UAAUqB,mBAAmB1+B,EAAWA,WACxD,MACE2+B,GAAYv1C,EAAOC,EAAKsP,eAG1B7F,EAA4B,OAApB0hB,EAAU1hB,OAAwB0hB,EAAU1hB,MAItDhK,EAAM8qB,GAA2C9gB,CACnD,CAGF,OAAOhK,CACT,CA1PgBi2C,CAAsB31C,EAAOC,GACrC8O,EAAWgmC,GAAe/0C,EAAOC,GASvC,OAPAi1C,GAAQl1C,EAAON,EAAOsK,EAAM/J,GAC5Bk1C,GAAYz1C,EAAOqP,GAGnB/O,EAAMoyC,UAAUzuB,MAChB3jB,EAAMs0C,OAASG,EAERz0C,EAAMssB,OAAOrsB,EAAM+J,EAAMtK,EAAO0G,EACzC,CA/IWwvC,CAAc51C,EAAOC,EAAMmG,GAGlB,aAAdnG,EAAK+J,KA2FX,SAAgBhK,EAAOC,GACrB,GAAIA,EAAK0Q,MAAQ1Q,EAAK0Q,KAAKykC,QAAUp1C,EAAMi0C,UAEzC,OACEj0C,EAAMi0C,UAAU4B,gBAAgB51C,EAAK0Q,KAAKykC,QAI9CG,GAAYv1C,EAAOC,EAAKsP,SAC1B,CAnGWumC,CAAO91C,EAAOC,GAGL,SAAdA,EAAK+J,KAsJX,SAAchK,EAAOC,EAAMmG,GAEzB,MAAM1G,EAAQ,CAAC,EAIf,OAFAy1C,GAAYz1C,EAAOq1C,GAAe/0C,EAAOC,IAElCD,EAAMssB,OAAOrsB,EAAMD,EAAMmzC,SAAUzzC,EAAO0G,EACnD,CA5JW8T,CAAKla,EAAOC,EAAMmG,GAGT,SAAdnG,EAAK+J,KAqKX,SAAcoH,EAAGnR,GACf,OAAOA,EAAKyJ,KACd,CAtKW0N,CAAKpX,EAAOC,QADrB,CAGF,CAoLA,SAASi1C,GAAQl1C,EAAON,EAAOsK,EAAM/J,GAEf,kBAAT+J,GAAqBA,IAAShK,EAAMmzC,UAAYnzC,EAAMq0C,WAC/D30C,EAAMO,KAAOA,EAEjB,CAYA,SAASk1C,GAAYz1C,EAAOqP,GAC1B,GAAIA,EAASpM,OAAS,EAAG,CACvB,MAAM+G,EAAQqF,EAASpM,OAAS,EAAIoM,EAAWA,EAAS,GAEpDrF,IACFhK,EAAMqP,SAAWrF,EAErB,CACF,CA+KA,SAASqrC,GAAe/0C,EAAOC,GAE7B,MAAM8O,EAAW,GACjB,IAAIvM,GAAS,EAIb,MAAMuzC,EAAe/1C,EAAMo0C,SAAW,IAAIx0C,IAAQgzC,GAElD,OAASpwC,EAAQvC,EAAK8O,SAASpM,QAAQ,CACrC,MAAMqyC,EAAQ/0C,EAAK8O,SAASvM,GAE5B,IAAI4D,EAEJ,GAAIpG,EAAMo0C,SAAU,CAClB,MAAM5pB,EACW,YAAfwqB,EAAMhrC,KACFgrC,EAAMN,QACS,sBAAfM,EAAMhrC,MACW,sBAAfgrC,EAAMhrC,KACNgrC,EAAMxqB,UACNnoB,EAER,GAAImoB,EAAM,CACR,MAAMhe,EAAQupC,EAAa5zC,IAAIqoB,IAAS,EACxCpkB,EAAMokB,EAAO,IAAMhe,EACnBupC,EAAa3zC,IAAIooB,EAAMhe,EAAQ,EACjC,CACF,CAEA,MAAM4B,EAASsb,GAAI1pB,EAAOg1C,EAAO5uC,QAClB/D,IAAX+L,GAAsBW,EAAStO,KAAK2N,EAC1C,CAEA,OAAOW,CACT,CAcA,SAAS8lC,GAAe70C,EAAOQ,EAAMkJ,GACnC,MAAM0J,ENzzBD,SAAckhC,EAAQ5qC,GAC3B,MAAMmhB,EAASI,EAAUvhB,GACzB,IAAIlJ,EAAOkJ,EACPssC,EAAO7qB,EAEX,GAAIN,KAAUypB,EAAOzpB,OACnB,OAAOypB,EAAO/qB,SAAS+qB,EAAOzpB,OAAOA,IAGvC,GAAIA,EAAOloB,OAAS,GAA4B,SAAvBkoB,EAAO1kB,MAAM,EAAG,IAAiB+qC,EAAM/lC,KAAKzB,GAAQ,CAE3E,GAAwB,MAApBA,EAAM6nC,OAAO,GAAY,CAE3B,MAAM1oC,EAAOa,EAAMvD,MAAM,GAAG8I,QAAQkiC,EAAMG,GAC1C9wC,EAAO,OAASqI,EAAK0oC,OAAO,GAAGz4B,cAAgBjQ,EAAK1C,MAAM,EAC5D,KAAO,CAEL,MAAM0C,EAAOa,EAAMvD,MAAM,GAEzB,IAAKgrC,EAAKhmC,KAAKtC,GAAO,CACpB,IAAIotC,EAASptC,EAAKoG,QAAQmiC,EAAKC,GAEN,MAArB4E,EAAO1E,OAAO,KAChB0E,EAAS,IAAMA,GAGjBvsC,EAAQ,OAASusC,CACnB,CACF,CAEAD,EAAO/pB,CACT,CAEA,OAAO,IAAI+pB,EAAKx1C,EAAMkJ,EACxB,CMuxBesF,CAAKhP,EAAMs0C,OAAQ9zC,GAGhC,KACY,OAAVkJ,QACUrH,IAAVqH,GACkB,kBAAVA,GAAsBQ,OAAOgsC,MAAMxsC,IAH7C,CAeA,GAPIL,MAAMsD,QAAQjD,KAGhBA,EAAQ0J,EAAKqY,eC5xBV,SAAmB5B,EAAQ9b,GAChC,MAAMoN,EAAWpN,GAAW,CAAC,EAK7B,OAF4C,KAA9B8b,EAAOA,EAAOlnB,OAAS,GAAY,IAAIknB,EAAQ,IAAMA,GAGhE3M,MACE/B,EAASg7B,SAAW,IAAM,IACzB,MACsB,IAArBh7B,EAASi7B,QAAoB,GAAK,MAEtCC,MACL,CD+wBkCC,CAAO5sC,GAAgBA,EEl0BzCwT,KAAK,KAAKm5B,QFs0BF,UAAlBjjC,EAAKmW,SAAsB,CAC7B,IAAIN,EACe,kBAAVvf,EAAqBA,EA6BlC,SAAoB1J,EAAO0J,GAEzB,MAAM0E,EAAS,CAAC,EAEhB,IAEEmoC,EAAc7sC,EAAO8sC,EACvB,CAAE,MAAOC,GACP,IAAKz2C,EAAMm0C,mBAAoB,CAC7B,MAAM9B,EAA8BoE,EAC9BnE,EAAU,IAAIR,GAAa,iCAAkC,CACjEM,UAAWpyC,EAAMoyC,UACjBC,QACAE,OAAQ,QACRjmC,OAAQ,6BAKV,MAHAgmC,EAAQG,KAAOzyC,EAAMozC,eAAY/wC,EACjCiwC,EAAQjiC,IAAM4iC,GAAO,gCAEfX,CACR,CACF,CAEA,OAAOlkC,EAaP,SAASooC,EAAShsB,EAAM9gB,GACtB,IAAItD,EAAMokB,EAEc,OAApBpkB,EAAID,MAAM,EAAG,KACS,SAApBC,EAAID,MAAM,EAAG,KAAeC,EAAM,MAAQA,EAAID,MAAM,IACxDC,EAAMA,EAAI6I,QAAQ4jC,GAAe6D,KAGnCtoC,EAAOhI,GAAOsD,CAChB,CACF,CA3E0CitC,CAAW32C,EAAOoL,OAAO1B,IAM/D,MAJoC,QAAhC1J,EAAMu0C,wBACRtrB,EAsKN,SAAoC2tB,GAElC,MAAMC,EAAY,CAAC,EAEnB,IAAIlrC,EAEJ,IAAKA,KAAQirC,EACPvqB,GAAIze,KAAKgpC,EAAWjrC,KACtBkrC,EAAUC,GAA0BnrC,IAASirC,EAAUjrC,IAI3D,OAAOkrC,CACT,CAnLoBE,CAA2B9tB,IAGpC,CAAC,QAASA,EACnB,CAEA,MAAO,CAC8B,UAAnCjpB,EAAMg0C,0BAAwC5gC,EAAK0X,MAC/C0mB,EAAYp+B,EAAKmW,WAAanW,EAAKmW,SACnCnW,EAAKgY,UACT1hB,EAxBF,CA0BF,CA0EA,SAASirC,GAAsB30C,EAAOwqB,EAAMwsB,GAE1C,IAAI5oC,EAEJ,GAAK4oC,EAEE,GAAIxsB,EAAKre,SAAS,KAAM,CAC7B,MAAM8qC,EAAczsB,EAAK9Y,MAAM,KAC/B,IAEIzR,EAFAuC,GAAS,EAIb,OAASA,EAAQy0C,EAAYt0C,QAAQ,CAEnC,MAAMnC,EAAO02C,EAAiBD,EAAYz0C,IACtC,CAACwH,KAAM,aAAcwgB,KAAMysB,EAAYz0C,IACvC,CAACwH,KAAM,UAAWN,MAAOutC,EAAYz0C,IACzCvC,EAAOA,EACH,CACE+J,KAAM,mBACNg1B,OAAQ/+B,EACRspB,SAAU/oB,EACV22C,SAAUzpC,QAAQlL,GAAuB,YAAdhC,EAAKwJ,MAChCotC,UAAU,GAEZ52C,CACN,EAEAoQ,EAAAA,EAAAA,IAAO3Q,EAAM,mBACbmO,EAASnO,CACX,MACEmO,EACE8oC,EAAiB1sB,KAAU,SAASrf,KAAKqf,GACrC,CAACxgB,KAAM,aAAcwgB,QACrB,CAACxgB,KAAM,UAAWN,MAAO8gB,QA7B/Bpc,EAAS,CAACpE,KAAM,UAAWN,MAAO8gB,GAkCpC,GAAoB,YAAhBpc,EAAOpE,KAAoB,CAC7B,MAAMwgB,EAAmDpc,EAAO1E,MAEhE,OAAO2iB,GAAIze,KAAK5N,EAAM+zC,WAAYvpB,GAAQxqB,EAAM+zC,WAAWvpB,GAAQA,CACrE,CAGA,GAAIxqB,EAAMi0C,UACR,OAAOj0C,EAAMi0C,UAAUqB,mBAAmBlnC,GAG5CmnC,GAAYv1C,EACd,CAOA,SAASu1C,GAAYv1C,EAAOmyC,GAC1B,MAAMG,EAAU,IAAIR,GAClB,sDACA,CACEM,UAAWpyC,EAAMoyC,UACjBD,QACAI,OAAQ,aACRjmC,OAAQ,6BAMZ,MAHAgmC,EAAQG,KAAOzyC,EAAMozC,eAAY/wC,EACjCiwC,EAAQjiC,IAAM4iC,GAAO,qDAEfX,CACR,CA6BA,SAASwE,GAA0BnrC,GACjC,IAAImkC,EAAKnkC,EAAKsD,QAAQmiC,GAAKiG,IAG3B,MADuB,QAAnBvH,EAAG3pC,MAAM,EAAG,KAAc2pC,EAAK,IAAMA,GAClCA,CACT,CAYA,SAAS4G,GAAQtlC,EAAG6J,GAClB,OAAOA,EAAGnC,aACZ,CAUA,SAASu+B,GAAOr8B,GACd,MAAO,IAAMA,EAAGnI,aAClB,CGnjCO,MAAMykC,GAAgB,CAC3Bz0C,OAAQ,CAAC,QACTmvB,KAAM,CAAC,aAAc,MAAO,MAAO,KACnCrhB,KAAM,CAAC,UACP0iB,WAAY,CAAC,SAAU,SACvBO,KAAM,CAAC,IAAK,OAAQ,OAAQ,QAC5B2jB,KAAM,CAAC,YACPjjB,OAAQ,KACRS,SAAU,CAAC,QACXiG,KAAM,CAAC,IAAK,QACZG,OAAQ,CAAC,SACTkB,IAAK,CACH,QACA,QACA,SACA,MACA,QACA,SACA,SACA,QACA,U,mDCCG,MAAMmb,GAOXp0B,WAAAA,CAAYq0B,GAEV1qC,KAAKod,KAAOstB,EAAU,IAAIA,GAAW,GAErC1qC,KAAKqd,MAAQ,EACf,CAWAjoB,GAAAA,CAAIK,GACF,GAAIA,EAAQ,GAAKA,GAASuK,KAAKod,KAAKxnB,OAASoK,KAAKqd,MAAMznB,OACtD,MAAM,IAAI+0C,WAAW,wBAA0Bl1C,EAAQ,kCAAoCuK,KAAKod,KAAKxnB,OAASoK,KAAKqd,MAAMznB,QAAU,KAErI,OAAIH,EAAQuK,KAAKod,KAAKxnB,OAAeoK,KAAKod,KAAK3nB,GACxCuK,KAAKqd,MAAMrd,KAAKqd,MAAMznB,OAASH,EAAQuK,KAAKod,KAAKxnB,OAAS,EACnE,CAMA,UAAIA,GACF,OAAOoK,KAAKod,KAAKxnB,OAASoK,KAAKqd,MAAMznB,MACvC,CASAmR,KAAAA,GAEE,OADA/G,KAAK4qC,UAAU,GACR5qC,KAAKqd,MAAMzG,KACpB,CAaAxd,KAAAA,CAAM9C,EAAOI,GAEX,MAAMm0C,EAAe,OAARn0C,QAAwBpB,IAARoB,EAAoByG,OAAOC,kBAAoB1G,EAC5E,OAAIm0C,EAAO7qC,KAAKod,KAAKxnB,OACZoK,KAAKod,KAAKhkB,MAAM9C,EAAOu0C,GAE5Bv0C,EAAQ0J,KAAKod,KAAKxnB,OACboK,KAAKqd,MAAMjkB,MAAM4G,KAAKqd,MAAMznB,OAASi1C,EAAO7qC,KAAKod,KAAKxnB,OAAQoK,KAAKqd,MAAMznB,OAASU,EAAQ0J,KAAKod,KAAKxnB,QAAQkT,UAE9G9I,KAAKod,KAAKhkB,MAAM9C,GAAO+Y,OAAOrP,KAAKqd,MAAMjkB,MAAM4G,KAAKqd,MAAMznB,OAASi1C,EAAO7qC,KAAKod,KAAKxnB,QAAQkT,UACrG,CAsBAnT,MAAAA,CAAOW,EAAOw0C,EAAarsC,GAEzB,MAAMgB,EAAQqrC,GAAe,EAC7B9qC,KAAK4qC,UAAUr0C,KAAKw0C,MAAMz0C,IAC1B,MAAM00C,EAAUhrC,KAAKqd,MAAM1nB,OAAOqK,KAAKqd,MAAMznB,OAAS6J,EAAOtC,OAAOC,mBAEpE,OADIqB,GAAOwsC,GAAYjrC,KAAKod,KAAM3e,GAC3BusC,EAAQliC,SACjB,CAUA8N,GAAAA,GAEE,OADA5W,KAAK4qC,UAAUztC,OAAOC,mBACf4C,KAAKod,KAAKxG,KACnB,CAWAljB,IAAAA,CAAKmH,GACHmF,KAAK4qC,UAAUztC,OAAOC,mBACtB4C,KAAKod,KAAK1pB,KAAKmH,EACjB,CAWAqwC,QAAAA,CAASzsC,GACPuB,KAAK4qC,UAAUztC,OAAOC,mBACtB6tC,GAAYjrC,KAAKod,KAAM3e,EACzB,CAWAI,OAAAA,CAAQhE,GACNmF,KAAK4qC,UAAU,GACf5qC,KAAKqd,MAAM3pB,KAAKmH,EAClB,CAWAswC,WAAAA,CAAY1sC,GACVuB,KAAK4qC,UAAU,GACfK,GAAYjrC,KAAKqd,MAAO5e,EAAMqK,UAChC,CAcA8hC,SAAAA,CAAUQ,GACR,KAAIA,IAAMprC,KAAKod,KAAKxnB,QAAUw1C,EAAIprC,KAAKod,KAAKxnB,QAAgC,IAAtBoK,KAAKqd,MAAMznB,QAAgBw1C,EAAI,GAA0B,IAArBprC,KAAKod,KAAKxnB,QACpG,GAAIw1C,EAAIprC,KAAKod,KAAKxnB,OAAQ,CAExB,MAAMo1C,EAAUhrC,KAAKod,KAAKznB,OAAOy1C,EAAGjuC,OAAOC,mBAC3C6tC,GAAYjrC,KAAKqd,MAAO2tB,EAAQliC,UAClC,KAAO,CAEL,MAAMkiC,EAAUhrC,KAAKqd,MAAM1nB,OAAOqK,KAAKod,KAAKxnB,OAASoK,KAAKqd,MAAMznB,OAASw1C,EAAGjuC,OAAOC,mBACnF6tC,GAAYjrC,KAAKod,KAAM4tB,EAAQliC,UACjC,CACF,EAeF,SAASmiC,GAAY1sC,EAAM8e,GAEzB,IAAI1e,EAAa,EACjB,GAAI0e,EAAMznB,OAAS,IACjB2I,EAAK7K,QAAQ2pB,QAEb,KAAO1e,EAAa0e,EAAMznB,QACxB2I,EAAK7K,QAAQ2pB,EAAMjkB,MAAMuF,EAAYA,EAAa,MAClDA,GAAc,GAGpB,CCrOO,SAAS0sC,GAAYC,GAE1B,MAAMC,EAAQ,CAAC,EACf,IAEI1xC,EAEA2xC,EAEAC,EAEAC,EAEAhtC,EAEAitC,EAEAh2B,EAdAlgB,GAAS,EAeb,MAAMuJ,EAAS,IAAIyrC,GAAaa,GAChC,OAAS71C,EAAQuJ,EAAOpJ,QAAQ,CAC9B,KAAOH,KAAS81C,GACd91C,EAAQ81C,EAAM91C,GAMhB,GAJAoE,EAAQmF,EAAO5J,IAAIK,GAIfA,GAA2B,cAAlBoE,EAAM,GAAGoD,MAA0D,mBAAlC+B,EAAO5J,IAAIK,EAAQ,GAAG,GAAGwH,OACrE0uC,EAAY9xC,EAAM,GAAG+xC,WAAW5sC,OAChCysC,EAAa,EACTA,EAAaE,EAAU/1C,QAA4C,oBAAlC+1C,EAAUF,GAAY,GAAGxuC,OAC5DwuC,GAAc,GAEZA,EAAaE,EAAU/1C,QAA4C,YAAlC+1C,EAAUF,GAAY,GAAGxuC,MAC5D,OAASwuC,EAAaE,EAAU/1C,QACQ,YAAlC+1C,EAAUF,GAAY,GAAGxuC,MAGS,cAAlC0uC,EAAUF,GAAY,GAAGxuC,OAC3B0uC,EAAUF,GAAY,GAAGI,6BAA8B,EACvDJ,KAOR,GAAiB,UAAb5xC,EAAM,GACJA,EAAM,GAAG0a,cACX3D,OAAOC,OAAO06B,EAAOO,GAAW9sC,EAAQvJ,IACxCA,EAAQ81C,EAAM91C,GACdkgB,GAAO,QAIN,GAAI9b,EAAM,GAAGib,WAAY,CAG5B,IAFA22B,EAAah2C,EACb+1C,OAAYl2C,EACLm2C,MACLC,EAAa1sC,EAAO5J,IAAIq2C,GACG,eAAvBC,EAAW,GAAGzuC,MAAgD,oBAAvByuC,EAAW,GAAGzuC,OACjC,UAAlByuC,EAAW,KACTF,IACFxsC,EAAO5J,IAAIo2C,GAAW,GAAGvuC,KAAO,mBAElCyuC,EAAW,GAAGzuC,KAAO,aACrBuuC,EAAYC,GAMdD,IAEF3xC,EAAM,GAAGnD,IAAMka,OAAOC,OAAO,CAAC,EAAG7R,EAAO5J,IAAIo2C,GAAW,GAAGl1C,OAG1DoI,EAAaM,EAAO5F,MAAMoyC,EAAW/1C,GACrCiJ,EAAWG,QAAQhF,GACnBmF,EAAOrJ,OAAO61C,EAAW/1C,EAAQ+1C,EAAY,EAAG9sC,GAEpD,CACF,CAIA,OADA/I,EAAAA,GAAAA,GAAO21C,EAAa,EAAGnuC,OAAOC,kBAAmB4B,EAAO5F,MAAM,KACtDuc,CACV,CASA,SAASm2B,GAAW9sC,EAAQ+sC,GAC1B,MAAM3oC,EAAQpE,EAAO5J,IAAI22C,GAAY,GAC/B9sC,EAAUD,EAAO5J,IAAI22C,GAAY,GACvC,IAAIC,EAAgBD,EAAa,EAEjC,MAAME,EAAiB,GACjBv2B,EAAYtS,EAAMwoC,YAAc3sC,EAAQ8U,OAAO3Q,EAAMmR,aAAanR,EAAM9M,OACxE41C,EAAcx2B,EAAU1W,OAExBusC,EAAQ,GAERY,EAAO,CAAC,EAEd,IAAIC,EAEA3nC,EACAhP,GAAS,EAETlB,EAAU6O,EACVipC,EAAS,EACT/1C,EAAQ,EACZ,MAAMg2C,EAAS,CAACh2C,GAIhB,KAAO/B,GAAS,CAEd,KAAOyK,EAAO5J,MAAM42C,GAAe,KAAOz3C,IAG1C03C,EAAev4C,KAAKs4C,GACfz3C,EAAQq3C,aACXQ,EAASntC,EAAQstC,YAAYh4C,GACxBA,EAAQ2iB,MACXk1B,EAAO14C,KAAK,MAEV+Q,GACFiR,EAAU82B,WAAWj4C,EAAQ+B,OAE3B/B,EAAQs3C,8BACVn2B,EAAUqE,oCAAqC,GAEjDrE,EAAU+2B,MAAML,GACZ73C,EAAQs3C,8BACVn2B,EAAUqE,wCAAqCzkB,IAKnDmP,EAAWlQ,EACXA,EAAUA,EAAQ2iB,IACpB,CAKA,IADA3iB,EAAU6O,IACD3N,EAAQy2C,EAAYt2C,QAGD,SAA1Bs2C,EAAYz2C,GAAO,IAA+C,UAA9By2C,EAAYz2C,EAAQ,GAAG,IAAkBy2C,EAAYz2C,GAAO,GAAGwH,OAASivC,EAAYz2C,EAAQ,GAAG,GAAGwH,MAAQivC,EAAYz2C,GAAO,GAAGa,MAAM6Q,OAAS+kC,EAAYz2C,GAAO,GAAGiB,IAAIyQ,OAC3M7Q,EAAQb,EAAQ,EAChB62C,EAAO54C,KAAK4C,GAEZ/B,EAAQq3C,gBAAat2C,EACrBf,EAAQkQ,cAAWnP,EACnBf,EAAUA,EAAQ2iB,MAqBtB,IAhBAxB,EAAU1W,OAAS,GAKfzK,GAEFA,EAAQq3C,gBAAat2C,EACrBf,EAAQkQ,cAAWnP,GAEnBg3C,EAAO11B,MAKTnhB,EAAQ62C,EAAO12C,OACRH,KAAS,CACd,MAAM2D,EAAQ8yC,EAAY9yC,MAAMkzC,EAAO72C,GAAQ62C,EAAO72C,EAAQ,IACxDa,EAAQ21C,EAAer1B,MAC7B20B,EAAM73C,KAAK,CAAC4C,EAAOA,EAAQ8C,EAAMxD,OAAS,IAC1CoJ,EAAOrJ,OAAOW,EAAO,EAAG8C,EAC1B,CAGA,IAFAmyC,EAAMziC,UACNrT,GAAS,IACAA,EAAQ81C,EAAM31C,QACrBu2C,EAAKE,EAASd,EAAM91C,GAAO,IAAM42C,EAASd,EAAM91C,GAAO,GACvD42C,GAAUd,EAAM91C,GAAO,GAAK81C,EAAM91C,GAAO,GAAK,EAEhD,OAAO02C,CACT,C,wCC7MO,MAAM9mB,GAAU,CACrBnU,SAOF,SAA2BnU,GACzB,MAAM2vC,EAAe3vC,EAAQ0V,QAC3BzS,KAAK+T,OAAOhV,WAAW4tC,gBASzB,SAAoCr6C,GAClC,GAAa,OAATA,EAEF,YADAyK,EAAQS,QAAQlL,GAMlB,OAHAyK,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,eACNX,EAAAA,GAAAA,GAAaC,EAAS2vC,EAAc,aAC7C,IAGA,SAA0Bp6C,GAExB,OADAyK,EAAQO,MAAM,aACPsvC,EAAUt6C,EACnB,IAnBA,IAAImS,EACJ,OAAOioC,EAqBP,SAASE,EAAUt6C,GACjB,MAAM8Q,EAAQrG,EAAQO,MAAM,YAAa,CACvCiX,YAAa,OACb9P,aAMF,OAJIA,IACFA,EAASyS,KAAO9T,GAElBqB,EAAWrB,EACJQ,EAAKtR,EACd,CAGA,SAASsR,EAAKtR,GACZ,OAAa,OAATA,GACFyK,EAAQU,KAAK,aACbV,EAAQU,KAAK,kBACbV,EAAQS,QAAQlL,KAGd4L,EAAAA,GAAAA,IAAmB5L,IACrByK,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,aACNmvC,IAIT7vC,EAAQS,QAAQlL,GACTsR,EACT,CACF,GC1DO,MAAM6W,GAAW,CACtBvJ,SAYF,SAA4BnU,GAC1B,MAAMuV,EAAOtS,KAEP2C,EAAQ,GACd,IAEIkqC,EAEAC,EAEAC,EANAC,EAAY,EAOhB,OAAO12C,EAGP,SAASA,EAAMhE,GAWb,GAAI06C,EAAYrqC,EAAM/M,OAAQ,CAC5B,MAAMiF,EAAO8H,EAAMqqC,GAEnB,OADA16B,EAAK26B,eAAiBpyC,EAAK,GACpBkC,EAAQ0V,QACb5X,EAAK,GAAG6f,aACRwyB,EACAC,EAHKpwC,CAILzK,EACJ,CAGA,OAAO66C,EAAmB76C,EAC5B,CAGA,SAAS46C,EAAiB56C,GAMxB,GALA06C,IAKI16B,EAAK26B,eAAeG,WAAY,CAClC96B,EAAK26B,eAAeG,gBAAa93C,EAC7Bu3C,GACFQ,IAKF,MAAMC,EAAmBh7B,EAAKtT,OAAOpJ,OACrC,IAEI+uC,EAFA4I,EAAkBD,EAKtB,KAAOC,KACL,GACsC,SAApCj7B,EAAKtT,OAAOuuC,GAAiB,IACY,cAAzCj7B,EAAKtT,OAAOuuC,GAAiB,GAAGtwC,KAChC,CACA0nC,EAAQryB,EAAKtT,OAAOuuC,GAAiB,GAAG72C,IACxC,KACF,CAEF82C,EAAeR,GAGf,IAAIv3C,EAAQ63C,EACZ,KAAO73C,EAAQ6c,EAAKtT,OAAOpJ,QACzB0c,EAAKtT,OAAOvJ,GAAO,GAAGiB,IAAMka,OAAOC,OAAO,CAAC,EAAG8zB,GAC9ClvC,IAaF,OATAE,EAAAA,GAAAA,GACE2c,EAAKtT,OACLuuC,EAAkB,EAClB,EACAj7B,EAAKtT,OAAO5F,MAAMk0C,IAIpBh7B,EAAKtT,OAAOpJ,OAASH,EACd03C,EAAmB76C,EAC5B,CACA,OAAOgE,EAAMhE,EACf,CAGA,SAAS66C,EAAmB76C,GAM1B,GAAI06C,IAAcrqC,EAAM/M,OAAQ,CAI9B,IAAKi3C,EACH,OAAOY,EAAkBn7C,GAM3B,GAAIu6C,EAAUa,kBAAoBb,EAAUa,iBAAiBC,SAC3D,OAAOC,EAAUt7C,GAQnBggB,EAAKkF,UAAY7W,QACfksC,EAAUa,mBAAqBb,EAAUgB,8BAE7C,CAIA,OADAv7B,EAAK26B,eAAiB,CAAC,EAChBlwC,EAAQmD,MACb4tC,GACAC,EACAC,EAHKjxC,CAILzK,EACJ,CAGA,SAASy7C,EAAqBz7C,GAG5B,OAFIu6C,GAAWQ,IACfG,EAAeR,GACRS,EAAkBn7C,EAC3B,CAGA,SAAS07C,EAAsB17C,GAG7B,OAFAggB,EAAKyB,OAAOsD,KAAK/E,EAAK6B,MAAMhN,MAAQ6lC,IAAcrqC,EAAM/M,OACxDm3C,EAAkBz6B,EAAK6B,MAAMvb,OACtBg1C,EAAUt7C,EACnB,CAGA,SAASm7C,EAAkBn7C,GAGzB,OADAggB,EAAK26B,eAAiB,CAAC,EAChBlwC,EAAQ0V,QACbq7B,GACAG,EACAL,EAHK7wC,CAILzK,EACJ,CAGA,SAAS27C,EAAkB37C,GAIzB,OAHA06C,IACArqC,EAAMjP,KAAK,CAAC4e,EAAKo7B,iBAAkBp7B,EAAK26B,iBAEjCQ,EAAkBn7C,EAC3B,CAGA,SAASs7C,EAAUt7C,GACjB,OAAa,OAATA,GACEu6C,GAAWQ,IACfG,EAAe,QACfzwC,EAAQS,QAAQlL,KAGlBu6C,EAAYA,GAAav6B,EAAKyB,OAAO6G,KAAKtI,EAAK6B,OAC/CpX,EAAQO,MAAM,YAAa,CACzBiX,YAAa,OACb9P,SAAUqoC,EACVlB,WAAYiB,IAEPqB,EAAa57C,GACtB,CAGA,SAAS47C,EAAa57C,GACpB,OAAa,OAATA,GACF67C,EAAapxC,EAAQU,KAAK,cAAc,GACxC+vC,EAAe,QACfzwC,EAAQS,QAAQlL,KAGd4L,EAAAA,GAAAA,IAAmB5L,IACrByK,EAAQS,QAAQlL,GAChB67C,EAAapxC,EAAQU,KAAK,cAE1BuvC,EAAY,EACZ16B,EAAKkF,eAAYliB,EACVgB,IAETyG,EAAQS,QAAQlL,GACT47C,EACT,CAOA,SAASC,EAAa/qC,EAAOgrC,GAC3B,MAAMhC,EAAS95B,EAAKi6B,YAAYnpC,GAyChC,GAxCIgrC,GAAKhC,EAAO14C,KAAK,MACrB0P,EAAMqB,SAAWqoC,EACbA,IAAYA,EAAW51B,KAAO9T,GAClC0pC,EAAa1pC,EACbypC,EAAUL,WAAWppC,EAAM9M,OAC3Bu2C,EAAUJ,MAAML,GAmCZ95B,EAAKyB,OAAOsD,KAAKjU,EAAM9M,MAAM6Q,MAAO,CACtC,IAAI1R,EAAQo3C,EAAU7tC,OAAOpJ,OAC7B,KAAOH,KACL,GAEEo3C,EAAU7tC,OAAOvJ,GAAO,GAAGa,MAAMsC,OAASm0C,KAExCF,EAAU7tC,OAAOvJ,GAAO,GAAGiB,KAE3Bm2C,EAAU7tC,OAAOvJ,GAAO,GAAGiB,IAAIkC,OAASm0C,GAI1C,OAMJ,MAAMO,EAAmBh7B,EAAKtT,OAAOpJ,OACrC,IAEI6b,EAEAkzB,EAJA4I,EAAkBD,EAOtB,KAAOC,KACL,GACsC,SAApCj7B,EAAKtT,OAAOuuC,GAAiB,IACY,cAAzCj7B,EAAKtT,OAAOuuC,GAAiB,GAAGtwC,KAChC,CACA,GAAIwU,EAAM,CACRkzB,EAAQryB,EAAKtT,OAAOuuC,GAAiB,GAAG72C,IACxC,KACF,CACA+a,GAAO,CACT,CAMF,IAJA+7B,EAAeR,GAGfv3C,EAAQ63C,EACD73C,EAAQ6c,EAAKtT,OAAOpJ,QACzB0c,EAAKtT,OAAOvJ,GAAO,GAAGiB,IAAMka,OAAOC,OAAO,CAAC,EAAG8zB,GAC9ClvC,KAIFE,EAAAA,GAAAA,GACE2c,EAAKtT,OACLuuC,EAAkB,EAClB,EACAj7B,EAAKtT,OAAO5F,MAAMk0C,IAIpBh7B,EAAKtT,OAAOpJ,OAASH,CACvB,CACF,CAMA,SAAS+3C,EAAet4C,GACtB,IAAIO,EAAQkN,EAAM/M,OAGlB,KAAOH,KAAUP,GAAM,CACrB,MAAMm5C,EAAQ1rC,EAAMlN,GACpB6c,EAAK26B,eAAiBoB,EAAM,GAC5BA,EAAM,GAAG5wC,KAAKoD,KAAKyR,EAAMvV,EAC3B,CACA4F,EAAM/M,OAASV,CACjB,CACA,SAASm4C,IACPR,EAAUJ,MAAM,CAAC,OACjBK,OAAax3C,EACbu3C,OAAYv3C,EACZgd,EAAK26B,eAAeG,gBAAa93C,CACnC,CACF,GArVMw4C,GAAqB,CACzB58B,SA0VF,SAA2BnU,EAASC,EAAImU,GAGtC,OAAOrU,EAAAA,GAAAA,GACLC,EACAA,EAAQ0V,QAAQzS,KAAK+T,OAAOhV,WAAW0b,SAAUzd,EAAImU,GACrD,aACAnR,KAAK+T,OAAOhV,WAAW8Y,QAAQ3B,KAAK9W,SAAS,qBAAkB9J,EAAY,EAE/E,G,gBC7WO,MAAM+vB,GAAU,CACrBnU,SAyBF,SAAyBnU,EAASC,GAEhC,IAAIyH,EACJ,OAYA,SAAoBnS,GAKlB,OAJAyK,EAAQO,MAAM,WACdmH,EAAW1H,EAAQO,MAAM,eAAgB,CACvCiX,YAAa,YAER+5B,EAAYh8C,EACrB,EAYA,SAASg8C,EAAYh8C,GACnB,OAAa,OAATA,EACKi8C,EAAWj8C,IAKhB4L,EAAAA,GAAAA,IAAmB5L,GACdyK,EAAQmD,MAAMsuC,GAAuBC,EAAiBF,EAAtDxxC,CAAkEzK,IAI3EyK,EAAQS,QAAQlL,GACTg8C,EACT,CAOA,SAASC,EAAWj8C,GAGlB,OAFAyK,EAAQU,KAAK,gBACbV,EAAQU,KAAK,WACNT,EAAG1K,EACZ,CAOA,SAASm8C,EAAgBn8C,GAQvB,OAPAyK,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,gBACbgH,EAASyS,KAAOna,EAAQO,MAAM,eAAgB,CAC5CiX,YAAa,UACb9P,aAEFA,EAAWA,EAASyS,KACbo3B,CACT,CACF,EAnGEnvC,QAeF,SAAwBH,GAEtB,OADAqsC,GAAYrsC,GACLA,CACT,GAdMwvC,GAAwB,CAC5Bt9B,SAoGF,SAA8BnU,EAASC,EAAImU,GACzC,MAAMmB,EAAOtS,KACb,OAOA,SAAwB1N,GAKtB,OAJAyK,EAAQU,KAAK,gBACbV,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,eACNX,EAAAA,GAAAA,GAAaC,EAAS2xC,EAAU,aACzC,EAOA,SAASA,EAASp8C,GAChB,GAAa,OAATA,IAAiB4L,EAAAA,GAAAA,IAAmB5L,GACtC,OAAO6e,EAAI7e,GAKb,MAAMshB,EAAOtB,EAAKtT,OAAOsT,EAAKtT,OAAOpJ,OAAS,GAC9C,OAAK0c,EAAKyB,OAAOhV,WAAW8Y,QAAQ3B,KAAK9W,SAAS,iBAAmBwU,GAAyB,eAAjBA,EAAK,GAAG3W,MAAyB2W,EAAK,GAAG9P,eAAe8P,EAAK,IAAI,GAAMhe,QAAU,EACrJoH,EAAG1K,GAELyK,EAAQya,UAAUlF,EAAKyB,OAAOhV,WAAW6b,KAAMzJ,EAAKnU,EAApDD,CAAwDzK,EACjE,CACF,EAtIEgf,SAAS,GCbJ,MAAMsJ,GAAO,CAClB1J,SAOF,SAAwBnU,GACtB,MAAMuV,EAAOtS,KACP0qC,EAAU3tC,EAAQ0V,QAEtB4C,GAAAA,GAoBF,SAAuB/iB,GACrB,GAAa,OAATA,EAEF,YADAyK,EAAQS,QAAQlL,GAOlB,OAJAyK,EAAQO,MAAM,mBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,mBACb6U,EAAKo7B,sBAAmBp4C,EACjBo1C,CACT,GA3BE3tC,EAAQ0V,QACNzS,KAAK+T,OAAOhV,WAAW4vC,YACvBC,GACA9xC,EAAAA,GAAAA,GACEC,EACAA,EAAQ0V,QACNzS,KAAK+T,OAAOhV,WAAW6b,KACvBg0B,EACA7xC,EAAQ0V,QAAQ4S,GAASupB,IAE3B,gBAIN,OAAOlE,EAgBP,SAASkE,EAAet8C,GACtB,GAAa,OAATA,EAQJ,OAJAyK,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,cACb6U,EAAKo7B,sBAAmBp4C,EACjBo1C,EAPL3tC,EAAQS,QAAQlL,EAQpB,CACF,GC1DO,MAAMu8C,GAAW,CACtB/vC,WAAYgwC,MAED/rC,GAASgsC,GAAkB,UAC3B1kC,GAAO0kC,GAAkB,QAMtC,SAASA,GAAkBC,GACzB,MAAO,CACL99B,SAUF,SAAwBnU,GACtB,MAAMuV,EAAOtS,KACPjB,EAAaiB,KAAK+T,OAAOhV,WAAWiwC,GACpC3kC,EAAOtN,EAAQ0V,QAAQ1T,EAAYzI,EAAO24C,GAChD,OAAO34C,EAGP,SAASA,EAAMhE,GACb,OAAOyX,EAAQzX,GAAQ+X,EAAK/X,GAAQ28C,EAAQ38C,EAC9C,CAGA,SAAS28C,EAAQ38C,GACf,GAAa,OAATA,EAMJ,OAFAyK,EAAQO,MAAM,QACdP,EAAQS,QAAQlL,GACTsR,EALL7G,EAAQS,QAAQlL,EAMpB,CAGA,SAASsR,EAAKtR,GACZ,OAAIyX,EAAQzX,IACVyK,EAAQU,KAAK,QACN4M,EAAK/X,KAIdyK,EAAQS,QAAQlL,GACTsR,EACT,CAMA,SAASmG,EAAQzX,GACf,GAAa,OAATA,EACF,OAAO,EAET,MAAMiM,EAAOQ,EAAWzM,GACxB,IAAImD,GAAS,EACb,GAAI8I,EAGF,OAAS9I,EAAQ8I,EAAK3I,QAAQ,CAC5B,MAAMiF,EAAO0D,EAAK9I,GAClB,IAAKoF,EAAK4J,UAAY5J,EAAK4J,SAAS5D,KAAKyR,EAAMA,EAAK7N,UAClD,OAAO,CAEX,CAEF,OAAO,CACT,CACF,EAjEE3F,WAAYgwC,GACA,SAAVE,EAAmBE,QAAyB55C,GAiElD,CAMA,SAASw5C,GAAeK,GACtB,OAGA,SAAwBnwC,EAAQC,GAC9B,IAEI3B,EAFA7H,GAAS,EAMb,OAASA,GAASuJ,EAAOpJ,aACTN,IAAVgI,EACE0B,EAAOvJ,IAAoC,SAA1BuJ,EAAOvJ,GAAO,GAAGwH,OACpCK,EAAQ7H,EACRA,KAEQuJ,EAAOvJ,IAAoC,SAA1BuJ,EAAOvJ,GAAO,GAAGwH,OAExCxH,IAAU6H,EAAQ,IACpB0B,EAAO1B,GAAO,GAAG5G,IAAMsI,EAAOvJ,EAAQ,GAAG,GAAGiB,IAC5CsI,EAAOrJ,OAAO2H,EAAQ,EAAG7H,EAAQ6H,EAAQ,GACzC7H,EAAQ6H,EAAQ,GAElBA,OAAQhI,GAGZ,OAAO65C,EAAgBA,EAAcnwC,EAAQC,GAAWD,CAC1D,CACF,CAaA,SAASkwC,GAAuBlwC,EAAQC,GACtC,IAAI8sC,EAAa,EAEjB,OAASA,GAAc/sC,EAAOpJ,QAC5B,IACGm2C,IAAe/sC,EAAOpJ,QACU,eAA/BoJ,EAAO+sC,GAAY,GAAG9uC,OACW,SAAnC+B,EAAO+sC,EAAa,GAAG,GAAG9uC,KAC1B,CACA,MAAM2G,EAAO5E,EAAO+sC,EAAa,GAAG,GAC9BqD,EAASnwC,EAAQstC,YAAY3oC,GACnC,IAIIyrC,EAJA55C,EAAQ25C,EAAOx5C,OACf05C,GAAe,EACfp6C,EAAO,EAGX,KAAOO,KAAS,CACd,MAAM6e,EAAQ86B,EAAO35C,GACrB,GAAqB,kBAAV6e,EAAoB,CAE7B,IADAg7B,EAAch7B,EAAM1e,OACyB,KAAtC0e,EAAMhP,WAAWgqC,EAAc,IACpCp6C,IACAo6C,IAEF,GAAIA,EAAa,MACjBA,GAAe,CACjB,MAEK,IAAe,IAAXh7B,EACP+6B,GAAO,EACPn6C,SACK,IAAe,IAAXof,EAEJ,CAEL7e,IACA,KACF,CACF,CACA,GAAIP,EAAM,CACR,MAAMkO,EAAQ,CACZnG,KACE8uC,IAAe/sC,EAAOpJ,QAAUy5C,GAAQn6C,EAAO,EAC3C,aACA,oBACNoB,MAAO,CACL6Q,KAAMvD,EAAKlN,IAAIyQ,KACfwJ,OAAQ/M,EAAKlN,IAAIia,OAASzb,EAC1B0D,OAAQgL,EAAKlN,IAAIkC,OAAS1D,EAC1Bq6C,OAAQ3rC,EAAKtN,MAAMi5C,OAAS95C,EAC5B4e,aAAc5e,EACV65C,EACA1rC,EAAKtN,MAAM+d,aAAei7B,GAEhC54C,IAAKka,OAAOC,OAAO,CAAC,EAAGjN,EAAKlN,MAE9BkN,EAAKlN,IAAMka,OAAOC,OAAO,CAAC,EAAGzN,EAAM9M,OAC/BsN,EAAKtN,MAAMsC,SAAWgL,EAAKlN,IAAIkC,OACjCgY,OAAOC,OAAOjN,EAAMR,IAEpBpE,EAAOrJ,OACLo2C,EACA,EACA,CAAC,QAAS3oC,EAAOnE,GACjB,CAAC,OAAQmE,EAAOnE,IAElB8sC,GAAc,EAElB,CACAA,GACF,CAEF,OAAO/sC,CACT,C,gBClKO,SAASwwC,GAAgBz7B,EAAQ07B,EAAY7wC,GAElD,IAAI+lC,EAAQ/zB,OAAOC,OACjBjS,EACIgS,OAAOC,OAAO,CAAC,EAAGjS,GAClB,CACEuI,KAAM,EACNwJ,OAAQ,EACR/X,OAAQ,GAEd,CACE22C,OAAQ,EACRl7B,cAAe,IAInB,MAAMq7B,EAAc,CAAC,EAEfC,EAAuB,GAE7B,IAAIP,EAAS,GAETzsC,EAAQ,GAERitC,GAAW,EAOf,MAAM7yC,EAAU,CACdS,QAkJF,SAAiBlL,IACX4L,EAAAA,GAAAA,IAAmB5L,IACrBqyC,EAAMx9B,OACNw9B,EAAMh0B,OAAS,EACfg0B,EAAM/rC,SAAoB,IAAVtG,EAAc,EAAI,EAClCu9C,MACmB,IAAVv9C,IACTqyC,EAAMh0B,SACNg0B,EAAM/rC,UAIJ+rC,EAAMtwB,aAAe,EACvBswB,EAAM4K,UAEN5K,EAAMtwB,eAKFswB,EAAMtwB,eAAiB+6B,EAAOzK,EAAM4K,QAAQ35C,SAC9C+uC,EAAMtwB,cAAgB,EACtBswB,EAAM4K,WAKVtwC,EAAQwF,SAAWnS,EAGnBs9C,GAAW,CACb,EAhLEtyC,MAmLF,SAAeL,EAAM6yC,GAGnB,MAAM1sC,EAAQ0sC,GAAU,CAAC,EAKzB,OAJA1sC,EAAMnG,KAAOA,EACbmG,EAAM9M,MAAQ6d,IACdlV,EAAQD,OAAOtL,KAAK,CAAC,QAAS0P,EAAOnE,IACrC0D,EAAMjP,KAAK0P,GACJA,CACT,EA3LE3F,KA8LF,SAAcR,GACZ,MAAMmG,EAAQT,EAAMiU,MAGpB,OAFAxT,EAAM1M,IAAMyd,IACZlV,EAAQD,OAAOtL,KAAK,CAAC,OAAQ0P,EAAOnE,IAC7BmE,CACT,EAlMEqP,QAASs9B,GAyMX,SAA+BC,EAAW3pC,GACxC4pC,EAAUD,EAAW3pC,EAAKzH,KAC5B,IA1MEsB,MAAO6vC,EAAiBG,GACxB14B,UAAWu4B,EAAiBG,EAAmB,CAC7C14B,WAAW,KASTvY,EAAU,CACdwF,SAAU,KACVnS,KAAM,KACN26C,eAAgB,CAAC,EACjBjuC,OAAQ,GACR+U,SACAw4B,cACAzoC,eA6CF,SAAwBV,EAAO+sC,GAC7B,OAsYJ,SAAyBf,EAAQe,GAC/B,IAAI16C,GAAS,EAEb,MAAM4L,EAAS,GAEf,IAAI+uC,EACJ,OAAS36C,EAAQ25C,EAAOx5C,QAAQ,CAC9B,MAAM0e,EAAQ86B,EAAO35C,GAErB,IAAIkH,EACJ,GAAqB,kBAAV2X,EACT3X,EAAQ2X,OAER,OAAQA,GACN,KAAM,EACJ3X,EAAQ,KACR,MAEF,KAAM,EACJA,EAAQ,KACR,MAEF,KAAM,EACJA,EAAQ,OACR,MAEF,KAAM,EACJA,EAAQwzC,EAAa,IAAM,KAC3B,MAEF,KAAM,EACJ,IAAKA,GAAcC,EAAO,SAC1BzzC,EAAQ,IACR,MAEF,QAEEA,EAAQ0B,OAAOC,aAAagW,GAGlC87B,GAAmB,IAAX97B,EACRjT,EAAO3N,KAAKiJ,EACd,CACA,OAAO0E,EAAO8O,KAAK,GACrB,CAlbWkgC,CAAgB9D,EAAYnpC,GAAQ+sC,EAC7C,EA9CEh8B,MACAq4B,WAkEF,SAAoB7vC,GAClB+yC,EAAY/yC,EAAMwK,MAAQxK,EAAMgU,OAChCk/B,GACF,EApEEpD,MAsBF,SAAerzC,GAKb,GAJAg2C,GAAS17C,EAAAA,GAAAA,GAAK07C,EAAQh2C,GACtBk3C,IAGkC,OAA9BlB,EAAOA,EAAOx5C,OAAS,GACzB,MAAO,GAMT,OAJAq6C,EAAUR,EAAY,GAGtBxwC,EAAQD,QAASF,EAAAA,GAAAA,GAAW6wC,EAAsB1wC,EAAQD,OAAQC,GAC3DA,EAAQD,MACjB,GA3BA,IAOIuxC,EAPAt9C,EAAQw8C,EAAWv+B,SAASrQ,KAAK5B,EAASlC,GAW9C,OAHI0yC,EAAW3wC,YACb6wC,EAAqBj8C,KAAK+7C,GAErBxwC,EA4BP,SAASstC,EAAYnpC,GACnB,OA8VJ,SAAqBgsC,EAAQhsC,GAC3B,MAAMotC,EAAaptC,EAAM9M,MAAMi5C,OACzBkB,EAAmBrtC,EAAM9M,MAAM+d,aAC/Bq8B,EAAWttC,EAAM1M,IAAI64C,OACrBoB,EAAiBvtC,EAAM1M,IAAI2d,aAEjC,IAAIu8B,EACJ,GAAIJ,IAAeE,EAEjBE,EAAO,CAACxB,EAAOoB,GAAYp3C,MAAMq3C,EAAkBE,QAC9C,CAEL,GADAC,EAAOxB,EAAOh2C,MAAMo3C,EAAYE,GAC5BD,GAAoB,EAAG,CACzB,MAAMjgC,EAAOogC,EAAK,GACE,kBAATpgC,EACTogC,EAAK,GAAKpgC,EAAKpX,MAAMq3C,GAErBG,EAAK7pC,OAET,CACI4pC,EAAiB,GAEnBC,EAAKl9C,KAAK07C,EAAOsB,GAAUt3C,MAAM,EAAGu3C,GAExC,CACA,OAAOC,CACT,CAxXWC,CAAYzB,EAAQhsC,EAC7B,CAGA,SAAS+Q,IAEP,MAAM,KAAChN,EAAI,OAAEwJ,EAAM,OAAE/X,EAAM,OAAE22C,EAAM,aAAEl7B,GAAgBswB,EACrD,MAAO,CACLx9B,OACAwJ,SACA/X,SACA22C,SACAl7B,eAEJ,CAsBA,SAASi8B,IAEP,IAAIQ,EACJ,KAAOnM,EAAM4K,OAASH,EAAOx5C,QAAQ,CACnC,MAAM0e,EAAQ86B,EAAOzK,EAAM4K,QAG3B,GAAqB,kBAAVj7B,EAKT,IAJAw8B,EAAanM,EAAM4K,OACf5K,EAAMtwB,aAAe,IACvBswB,EAAMtwB,aAAe,GAGrBswB,EAAM4K,SAAWuB,GACjBnM,EAAMtwB,aAAeC,EAAM1e,QAE3Bm7C,EAAGz8B,EAAMhP,WAAWq/B,EAAMtwB,oBAG5B08B,EAAGz8B,EAEP,CACF,CAQA,SAASy8B,EAAGz+C,GACVs9C,OAAWt6C,EACXi7C,EAAej+C,EACfW,EAAQA,EAAMX,EAChB,CAsEA,SAAS49C,EAAkB7rC,EAAGgC,GAC5BA,EAAK2qC,SACP,CAQA,SAASjB,EAAiBkB,EAAUnB,GAClC,OAWA,SAAc/wC,EAAYmyC,EAAaC,GAErC,IAAIC,EAEAC,EAEA3D,EAEArnC,EACJ,OAAO/J,MAAMsD,QAAQb,GACjBuyC,EAAuBvyC,GACvB,aAAcA,EAEduyC,EAAuB,CAACvyC,IAS5B,SAA+BmI,GAC7B,OAAO5Q,EAGP,SAASA,EAAMhE,GACb,MAAMi/C,EAAe,OAATj/C,GAAiB4U,EAAI5U,GAC3B8N,EAAe,OAAT9N,GAAiB4U,EAAIgP,KAOjC,OAAOo7B,EANM,IAGPh1C,MAAMsD,QAAQ2xC,GAAOA,EAAMA,EAAM,CAACA,GAAO,MACzCj1C,MAAMsD,QAAQQ,GAAOA,EAAMA,EAAM,CAACA,GAAO,IAExCkxC,CAA6Bh/C,EACtC,CACF,CAvBIk/C,CAAsBzyC,GA+B1B,SAASuyC,EAAuB/yC,GAG9B,OAFA6yC,EAAmB7yC,EACnB8yC,EAAiB,EACG,IAAhB9yC,EAAK3I,OACAu7C,EAEFM,EAAgBlzC,EAAK8yC,GAC9B,CAQA,SAASI,EAAgBzB,GACvB,OAGA,SAAe19C,GAKb+T,EAwER,WACE,MAAMqrC,EAAav9B,IACbw9B,EAAgB1yC,EAAQwF,SACxBmtC,EAAwB3yC,EAAQyuC,iBAChCmE,EAAmB5yC,EAAQD,OAAOpJ,OAClCk8C,EAAax1C,MAAMsC,KAAK+D,GAC9B,MAAO,CACLquC,UACApyC,KAAMizC,GAQR,SAASb,IACPrM,EAAQ+M,EACRzyC,EAAQwF,SAAWktC,EACnB1yC,EAAQyuC,iBAAmBkE,EAC3B3yC,EAAQD,OAAOpJ,OAASi8C,EACxBlvC,EAAQmvC,EACRjC,GACF,CACF,CAhGekC,GACPrE,EAAmBsC,EACdA,EAAU1+B,UACbrS,EAAQyuC,iBAAmBsC,GAK7B,GACEA,EAAUvyB,MACVxe,EAAQ8U,OAAOhV,WAAW8Y,QAAQ3B,KAAK9W,SAAS4wC,EAAUvyB,MAE1D,OAAOtM,EAAI7e,GAEb,OAAO09C,EAAU9+B,SAASrQ,KAIxBivC,EAASl/B,OAAOC,OAAOD,OAAO2O,OAAOtgB,GAAU6wC,GAAU7wC,EACzDlC,EACAC,EACAmU,EAPK6+B,CAQL19C,EACJ,CACF,CAGA,SAAS0K,EAAG1K,GAGV,OAFAs9C,GAAW,EACXqB,EAASvD,EAAkBrnC,GACpB6qC,CACT,CAGA,SAAS//B,EAAI7e,GAGX,OAFAs9C,GAAW,EACXvpC,EAAK2qC,YACCK,EAAiBD,EAAiBx7C,OAC/B67C,EAAgBL,EAAiBC,IAEnCF,CACT,CACF,CACF,CAOA,SAASlB,EAAUD,EAAWpxC,GACxBoxC,EAAUlxC,aAAe6wC,EAAqBvwC,SAAS4wC,IACzDL,EAAqBj8C,KAAKs8C,GAExBA,EAAU7wC,UACZxJ,EAAAA,GAAAA,GACEsJ,EAAQD,OACRJ,EACAK,EAAQD,OAAOpJ,OAASgJ,EACxBoxC,EAAU7wC,QAAQF,EAAQD,OAAO5F,MAAMwF,GAAOK,IAG9C+wC,EAAUr1B,YACZ1b,EAAQD,OAASgxC,EAAUr1B,UAAU1b,EAAQD,OAAQC,GAEzD,CAuCA,SAAS4wC,IACHlL,EAAMx9B,QAAQuoC,GAAe/K,EAAMh0B,OAAS,IAC9Cg0B,EAAMh0B,OAAS++B,EAAY/K,EAAMx9B,MACjCw9B,EAAM/rC,QAAU82C,EAAY/K,EAAMx9B,MAAQ,EAE9C,CACF,CCleO,MAAMkG,GAAgB,CAC3BoQ,KAAM,gBACNvM,SAOF,SAA+BnU,EAASC,EAAImU,GAC1C,IAEI9I,EAFAnT,EAAO,EAGX,OAYA,SAAe5C,GAGb,OAFAyK,EAAQO,MAAM,iBAehB,SAAgBhL,GAEd,OADA+V,EAAS/V,EACFyX,EAAQzX,EACjB,CAhBSsU,CAAOtU,EAChB,EA2BA,SAASyX,EAAQzX,GACf,OAAIA,IAAS+V,GACXtL,EAAQO,MAAM,yBACPsM,EAAStX,IAEd4C,GAAQ,IAAe,OAAT5C,IAAiB4L,EAAAA,GAAAA,IAAmB5L,KACpDyK,EAAQU,KAAK,iBACNT,EAAG1K,IAEL6e,EAAI7e,EACb,CAYA,SAASsX,EAAStX,GAChB,OAAIA,IAAS+V,GACXtL,EAAQS,QAAQlL,GAChB4C,IACO0U,IAET7M,EAAQU,KAAK,0BACNJ,EAAAA,GAAAA,IAAc/K,IAAQwK,EAAAA,GAAAA,GAAaC,EAASgN,EAAS,aAA/BjN,CAA6CxK,GAAQyX,EAAQzX,GAC5F,CACF,GClFO,MAAMiM,GAAO,CAClBkf,KAAM,OACNvM,SA0BF,SAA2BnU,EAASC,EAAImU,GACtC,MAAMmB,EAAOtS,KACP4T,EAAOtB,EAAKtT,OAAOsT,EAAKtT,OAAOpJ,OAAS,GAC9C,IAAIo8C,EAAcp+B,GAAyB,eAAjBA,EAAK,GAAG3W,KAAwB2W,EAAK,GAAG9P,eAAe8P,EAAK,IAAI,GAAMhe,OAAS,EACrGV,EAAO,EACX,OAGA,SAAe5C,GACb,MAAMs1B,EAAOtV,EAAK26B,eAAehwC,OAAkB,KAAT3K,GAAwB,KAATA,GAAwB,KAATA,EAAc,gBAAkB,eACxG,GAAa,kBAATs1B,GAA4BtV,EAAK26B,eAAe5kC,QAAU/V,IAASggB,EAAK26B,eAAe5kC,QAAStK,EAAAA,GAAAA,IAAWzL,GAAO,CAOpH,GANKggB,EAAK26B,eAAehwC,OACvBqV,EAAK26B,eAAehwC,KAAO2qB,EAC3B7qB,EAAQO,MAAMsqB,EAAM,CAClB9S,YAAY,KAGH,kBAAT8S,EAEF,OADA7qB,EAAQO,MAAM,kBACE,KAAThL,GAAwB,KAATA,EAAcyK,EAAQmD,MAAMmN,GAAe8D,EAAK8gC,EAAlCl1C,CAA4CzK,GAAQ2/C,EAAS3/C,GAEnG,IAAKggB,EAAKkF,WAAsB,KAATllB,EAGrB,OAFAyK,EAAQO,MAAM,kBACdP,EAAQO,MAAM,iBACP0c,EAAO1nB,EAElB,CACA,OAAO6e,EAAI7e,EACb,EAGA,SAAS0nB,EAAO1nB,GACd,OAAIyL,EAAAA,GAAAA,IAAWzL,MAAW4C,EAAO,IAC/B6H,EAAQS,QAAQlL,GACT0nB,KAEH1H,EAAKkF,WAAatiB,EAAO,KAAOod,EAAK26B,eAAe5kC,OAAS/V,IAASggB,EAAK26B,eAAe5kC,OAAkB,KAAT/V,GAAwB,KAATA,IACtHyK,EAAQU,KAAK,iBACNw0C,EAAS3/C,IAEX6e,EAAI7e,EACb,CAKA,SAAS2/C,EAAS3/C,GAKhB,OAJAyK,EAAQO,MAAM,kBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,kBACb6U,EAAK26B,eAAe5kC,OAASiK,EAAK26B,eAAe5kC,QAAU/V,EACpDyK,EAAQmD,MAAMmV,GAAAA,EAErB/C,EAAKkF,UAAYrG,EAAM+gC,EAASn1C,EAAQ0V,QAAQ0/B,GAAmCC,EAAaC,GAClG,CAGA,SAASH,EAAQ5/C,GAGf,OAFAggB,EAAK26B,eAAeqF,kBAAmB,EACvCN,IACOI,EAAY9/C,EACrB,CAGA,SAAS+/C,EAAY//C,GACnB,OAAI+K,EAAAA,GAAAA,IAAc/K,IAChByK,EAAQO,MAAM,4BACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,4BACN20C,GAEFjhC,EAAI7e,EACb,CAGA,SAAS8/C,EAAY9/C,GAEnB,OADAggB,EAAK26B,eAAe/3C,KAAO88C,EAAc1/B,EAAKxO,eAAe/G,EAAQU,KAAK,mBAAmB,GAAM7H,OAC5FoH,EAAG1K,EACZ,CACF,EAxGEooB,aAAc,CACZxJ,SA6GJ,SAAkCnU,EAASC,EAAImU,GAC7C,MAAMmB,EAAOtS,KAEb,OADAsS,EAAK26B,eAAeG,gBAAa93C,EAC1ByH,EAAQmD,MAAMmV,GAAAA,GAGrB,SAAiB/iB,GAKf,OAJAggB,EAAK26B,eAAesF,kBAAoBjgC,EAAK26B,eAAesF,mBAAqBjgC,EAAK26B,eAAeqF,kBAI9Fx1C,EAAAA,GAAAA,GAAaC,EAASC,EAAI,iBAAkBsV,EAAK26B,eAAe/3C,KAAO,EAAvE4H,CAA0ExK,EACnF,IAGA,SAAkBA,GAChB,GAAIggB,EAAK26B,eAAesF,qBAAsBl1C,EAAAA,GAAAA,IAAc/K,GAG1D,OAFAggB,EAAK26B,eAAesF,uBAAoBj9C,EACxCgd,EAAK26B,eAAeqF,sBAAmBh9C,EAChCk9C,EAAiBlgD,GAI1B,OAFAggB,EAAK26B,eAAesF,uBAAoBj9C,EACxCgd,EAAK26B,eAAeqF,sBAAmBh9C,EAChCyH,EAAQ0V,QAAQggC,GAAiBz1C,EAAIw1C,EAArCz1C,CAAuDzK,EAChE,IAGA,SAASkgD,EAAiBlgD,GAOxB,OALAggB,EAAK26B,eAAeG,YAAa,EAEjC96B,EAAKkF,eAAYliB,GAGVwH,EAAAA,GAAAA,GAAaC,EAASA,EAAQ0V,QAAQlU,GAAMvB,EAAImU,GAAM,aAAcmB,EAAKyB,OAAOhV,WAAW8Y,QAAQ3B,KAAK9W,SAAS,qBAAkB9J,EAAY,EAA/IwH,CAAkJxK,EAC3J,CACF,GA/IEmL,KAoKF,SAAyBV,GACvBA,EAAQU,KAAKuC,KAAKitC,eAAehwC,KACnC,GAlKMk1C,GAAoC,CACxCjhC,SAuKF,SAA0CnU,EAASC,EAAImU,GACrD,MAAMmB,EAAOtS,KAIb,OAAOlD,EAAAA,GAAAA,GAAaC,GAGpB,SAAqBzK,GACnB,MAAMshB,EAAOtB,EAAKtT,OAAOsT,EAAKtT,OAAOpJ,OAAS,GAC9C,QAAQyH,EAAAA,GAAAA,IAAc/K,IAASshB,GAAyB,6BAAjBA,EAAK,GAAG3W,KAAsCD,EAAG1K,GAAQ6e,EAAI7e,EACtG,GAN0C,2BAA4BggB,EAAKyB,OAAOhV,WAAW8Y,QAAQ3B,KAAK9W,SAAS,qBAAkB9J,EAAY,EAOnJ,EAlLEgc,SAAS,GAILmhC,GAAkB,CACtBvhC,SA0IF,SAAwBnU,EAASC,EAAImU,GACnC,MAAMmB,EAAOtS,KACb,OAAOlD,EAAAA,GAAAA,GAAaC,GAGpB,SAAqBzK,GACnB,MAAMshB,EAAOtB,EAAKtT,OAAOsT,EAAKtT,OAAOpJ,OAAS,GAC9C,OAAOge,GAAyB,mBAAjBA,EAAK,GAAG3W,MAA6B2W,EAAK,GAAG9P,eAAe8P,EAAK,IAAI,GAAMhe,SAAW0c,EAAK26B,eAAe/3C,KAAO8H,EAAG1K,GAAQ6e,EAAI7e,EACjJ,GAN0C,iBAAkBggB,EAAK26B,eAAe/3C,KAAO,EAOzF,EAlJEoc,SAAS,GCvBJ,MAAMohC,GAAa,CACxBj1B,KAAM,aACNvM,SAWF,SAAiCnU,EAASC,EAAImU,GAC5C,MAAMmB,EAAOtS,KACb,OAYA,SAAe1N,GACb,GAAa,KAATA,EAAa,CACf,MAAMW,EAAQqf,EAAK26B,eAWnB,OAVKh6C,EAAM6iB,OACT/Y,EAAQO,MAAM,aAAc,CAC1BwX,YAAY,IAEd7hB,EAAM6iB,MAAO,GAEf/Y,EAAQO,MAAM,oBACdP,EAAQO,MAAM,oBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,oBACNoJ,CACT,CACA,OAAOsK,EAAI7e,EACb,EAYA,SAASuU,EAAMvU,GACb,OAAI+K,EAAAA,GAAAA,IAAc/K,IAChByK,EAAQO,MAAM,8BACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,8BACbV,EAAQU,KAAK,oBACNT,IAETD,EAAQU,KAAK,oBACNT,EAAG1K,GACZ,CACF,EA/DEooB,aAAc,CACZxJ,SA4EJ,SAAwCnU,EAASC,EAAImU,GACnD,MAAMmB,EAAOtS,KACb,OAeA,SAAmB1N,GACjB,IAAI+K,EAAAA,GAAAA,IAAc/K,GAGhB,OAAOwK,EAAAA,GAAAA,GAAaC,EAAS41C,EAAY,aAAcrgC,EAAKyB,OAAOhV,WAAW8Y,QAAQ3B,KAAK9W,SAAS,qBAAkB9J,EAAY,EAA3HwH,CAA8HxK,GAEvI,OAAOqgD,EAAWrgD,EACpB,EAeA,SAASqgD,EAAWrgD,GAClB,OAAOyK,EAAQ0V,QAAQigC,GAAY11C,EAAImU,EAAhCpU,CAAqCzK,EAC9C,CACF,GApHEmL,KAuHF,SAAcV,GACZA,EAAQU,KAAK,aACf,GC1FO,SAASm1C,GACd71C,EACAC,EACAmU,EACAlU,EACA41C,EACAC,EACAC,EACAC,EACAx8C,GAEA,MAAM0G,EAAQ1G,GAAO2G,OAAOC,kBAC5B,IAAI61C,EAAU,EACd,OAcA,SAAe3gD,GACb,GAAa,KAATA,EAMF,OALAyK,EAAQO,MAAML,GACdF,EAAQO,MAAMu1C,GACd91C,EAAQO,MAAMw1C,GACd/1C,EAAQS,QAAQlL,GAChByK,EAAQU,KAAKq1C,GACNI,EAIT,GAAa,OAAT5gD,GAA0B,KAATA,GAAwB,KAATA,IAAewL,EAAAA,GAAAA,IAAaxL,GAC9D,OAAO6e,EAAI7e,GAQb,OANAyK,EAAQO,MAAML,GACdF,EAAQO,MAAMy1C,GACdh2C,EAAQO,MAAM01C,GACdj2C,EAAQO,MAAM,cAAe,CAC3BiX,YAAa,WAERtK,EAAI3X,EACb,EAYA,SAAS4gD,EAAe5gD,GACtB,OAAa,KAATA,GACFyK,EAAQO,MAAMw1C,GACd/1C,EAAQS,QAAQlL,GAChByK,EAAQU,KAAKq1C,GACb/1C,EAAQU,KAAKo1C,GACb91C,EAAQU,KAAKR,GACND,IAETD,EAAQO,MAAM01C,GACdj2C,EAAQO,MAAM,cAAe,CAC3BiX,YAAa,WAER4+B,EAAS7gD,GAClB,CAYA,SAAS6gD,EAAS7gD,GAChB,OAAa,KAATA,GACFyK,EAAQU,KAAK,eACbV,EAAQU,KAAKu1C,GACNE,EAAe5gD,IAEX,OAATA,GAA0B,KAATA,IAAe4L,EAAAA,GAAAA,IAAmB5L,GAC9C6e,EAAI7e,IAEbyK,EAAQS,QAAQlL,GACA,KAATA,EAAc8gD,EAAiBD,EACxC,CAYA,SAASC,EAAe9gD,GACtB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCyK,EAAQS,QAAQlL,GACT6gD,GAEFA,EAAS7gD,EAClB,CAYA,SAAS2X,EAAI3X,GACX,OACG2gD,GACS,OAAT3gD,GAA0B,KAATA,KAAeC,EAAAA,GAAAA,IAA0BD,GAQzD2gD,EAAU/1C,GAAkB,KAAT5K,GACrByK,EAAQS,QAAQlL,GAChB2gD,IACOhpC,GAEI,KAAT3X,GACFyK,EAAQS,QAAQlL,GAChB2gD,IACOhpC,GAMI,OAAT3X,GAA0B,KAATA,GAAwB,KAATA,IAAewL,EAAAA,GAAAA,IAAaxL,GACvD6e,EAAI7e,IAEbyK,EAAQS,QAAQlL,GACA,KAATA,EAAc+gD,EAAYppC,IAxB/BlN,EAAQU,KAAK,eACbV,EAAQU,KAAKu1C,GACbj2C,EAAQU,KAAKs1C,GACbh2C,EAAQU,KAAKR,GACND,EAAG1K,GAqBd,CAYA,SAAS+gD,EAAU/gD,GACjB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCyK,EAAQS,QAAQlL,GACT2X,GAEFA,EAAI3X,EACb,CACF,CCzLO,SAASghD,GAAav2C,EAASC,EAAImU,EAAKlU,EAAMs2C,EAAYP,GAC/D,MAAM1gC,EAAOtS,KACb,IAEIyR,EAFAvc,EAAO,EAGX,OAYA,SAAe5C,GAMb,OALAyK,EAAQO,MAAML,GACdF,EAAQO,MAAMi2C,GACdx2C,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK81C,GACbx2C,EAAQO,MAAM01C,GACPjpC,CACT,EAYA,SAASA,EAAQzX,GACf,OACE4C,EAAO,KACE,OAAT5C,GACS,KAATA,GACU,KAATA,IAAgBmf,GAMP,KAATnf,IACE4C,GACD,2BAA4Bod,EAAKyB,OAAOhV,WAEnCoS,EAAI7e,GAEA,KAATA,GACFyK,EAAQU,KAAKu1C,GACbj2C,EAAQO,MAAMi2C,GACdx2C,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK81C,GACbx2C,EAAQU,KAAKR,GACND,IAILkB,EAAAA,GAAAA,IAAmB5L,IACrByK,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,cACNsM,IAEThN,EAAQO,MAAM,cAAe,CAC3BiX,YAAa,WAERS,EAAY1iB,GACrB,CAYA,SAAS0iB,EAAY1iB,GACnB,OACW,OAATA,GACS,KAATA,GACS,KAATA,IACA4L,EAAAA,GAAAA,IAAmB5L,IACnB4C,IAAS,KAET6H,EAAQU,KAAK,eACNsM,EAAQzX,KAEjByK,EAAQS,QAAQlL,GACXmf,IAAMA,IAAQpU,EAAAA,GAAAA,IAAc/K,IACjB,KAATA,EAAc4iB,EAAcF,EACrC,CAYA,SAASE,EAAY5iB,GACnB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCyK,EAAQS,QAAQlL,GAChB4C,IACO8f,GAEFA,EAAY1iB,EACrB,CACF,CCtHO,SAASkhD,GAAaz2C,EAASC,EAAImU,EAAKlU,EAAMs2C,EAAYP,GAE/D,IAAI3qC,EACJ,OAYA,SAAe/V,GACb,GAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EAMhC,OALAyK,EAAQO,MAAML,GACdF,EAAQO,MAAMi2C,GACdx2C,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK81C,GACblrC,EAAkB,KAAT/V,EAAc,GAAKA,EACrBioC,EAET,OAAOppB,EAAI7e,EACb,EAcA,SAASioC,EAAMjoC,GACb,OAAIA,IAAS+V,GACXtL,EAAQO,MAAMi2C,GACdx2C,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK81C,GACbx2C,EAAQU,KAAKR,GACND,IAETD,EAAQO,MAAM01C,GACPjpC,EAAQzX,GACjB,CAYA,SAASyX,EAAQzX,GACf,OAAIA,IAAS+V,GACXtL,EAAQU,KAAKu1C,GACNzY,EAAMlyB,IAEF,OAAT/V,EACK6e,EAAI7e,IAIT4L,EAAAA,GAAAA,IAAmB5L,IAErByK,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,eACNX,EAAAA,GAAAA,GAAaC,EAASgN,EAAS,gBAExChN,EAAQO,MAAM,cAAe,CAC3BiX,YAAa,WAERyF,EAAO1nB,GAChB,CAOA,SAAS0nB,EAAO1nB,GACd,OAAIA,IAAS+V,GAAmB,OAAT/V,IAAiB4L,EAAAA,GAAAA,IAAmB5L,IACzDyK,EAAQU,KAAK,eACNsM,EAAQzX,KAEjByK,EAAQS,QAAQlL,GACA,KAATA,EAAc0Q,EAASgX,EAChC,CAYA,SAAShX,EAAO1Q,GACd,OAAIA,IAAS+V,GAAmB,KAAT/V,GACrByK,EAAQS,QAAQlL,GACT0nB,GAEFA,EAAO1nB,EAChB,CACF,CClIO,SAASmhD,GAAkB12C,EAASC,GAEzC,IAAIyU,EACJ,OAGA,SAASnb,EAAMhE,GACb,IAAI4L,EAAAA,GAAAA,IAAmB5L,GAKrB,OAJAyK,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,cACbgU,GAAO,EACAnb,EAET,IAAI+G,EAAAA,GAAAA,IAAc/K,GAChB,OAAOwK,EAAAA,GAAAA,GACLC,EACAzG,EACAmb,EAAO,aAAe,aAHjB3U,CAILxK,GAEJ,OAAO0K,EAAG1K,EACZ,CACF,C,gBCjCO,MAAMqZ,GAAa,CACxB8R,KAAM,aACNvM,SAaF,SAA4BnU,EAASC,EAAImU,GACvC,MAAMmB,EAAOtS,KAEb,IAAIwF,EACJ,OAYA,SAAelT,GAKb,OADAyK,EAAQO,MAAM,cAchB,SAAgBhL,GAGd,OAAOghD,GAAazyC,KAAKyR,EAAMvV,EAASkY,EAExC9D,EAAK,kBAAmB,wBAAyB,wBAF1CmiC,CAEmEhhD,EAC5E,CAnBSsU,CAAOtU,EAChB,EA8BA,SAAS2iB,EAAW3iB,GAElB,OADAkT,GAAaK,EAAAA,GAAAA,GAAoByM,EAAKxO,eAAewO,EAAKtT,OAAOsT,EAAKtT,OAAOpJ,OAAS,GAAG,IAAIwD,MAAM,GAAI,IAC1F,KAAT9G,GACFyK,EAAQO,MAAM,oBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,oBACNi2C,GAEFviC,EAAI7e,EACb,CAYA,SAASohD,EAAYphD,GAEnB,OAAOC,EAAAA,GAAAA,IAA0BD,GAAQmhD,GAAkB12C,EAAS42C,EAA3BF,CAA8CnhD,GAAQqhD,EAAkBrhD,EACnH,CAYA,SAASqhD,EAAkBrhD,GACzB,OAAOsgD,GAAmB71C,EAAS62C,EAEnCziC,EAAK,wBAAyB,+BAAgC,qCAAsC,2BAA4B,8BAFzHyhC,CAEwJtgD,EACjK,CAYA,SAASshD,EAAiBthD,GACxB,OAAOyK,EAAQ0V,QAAQohC,GAAahtC,EAAOA,EAApC9J,CAA2CzK,EACpD,CAcA,SAASuU,EAAMvU,GACb,OAAO+K,EAAAA,GAAAA,IAAc/K,IAAQwK,EAAAA,GAAAA,GAAaC,EAAS+2C,EAAiB,aAAvCh3C,CAAqDxK,GAAQwhD,EAAgBxhD,EAC5G,CAcA,SAASwhD,EAAgBxhD,GACvB,OAAa,OAATA,IAAiB4L,EAAAA,GAAAA,IAAmB5L,IACtCyK,EAAQU,KAAK,cAKb6U,EAAKyB,OAAOD,QAAQpgB,KAAK8R,GAKlBxI,EAAG1K,IAEL6e,EAAI7e,EACb,CACF,GAjKMuhD,GAAc,CAClB3iC,SAsKF,SAA6BnU,EAASC,EAAImU,GACxC,OAcA,SAAqB7e,GACnB,OAAOC,EAAAA,GAAAA,IAA0BD,GAAQmhD,GAAkB12C,EAASg3C,EAA3BN,CAAyCnhD,GAAQ6e,EAAI7e,EAChG,EAaA,SAASyhD,EAAazhD,GACpB,OAAOkhD,GAAaz2C,EAASi3C,EAAY7iC,EAAK,kBAAmB,wBAAyB,wBAAnFqiC,CAA4GlhD,EACrH,CAYA,SAAS0hD,EAAW1hD,GAClB,OAAO+K,EAAAA,GAAAA,IAAc/K,IAAQwK,EAAAA,GAAAA,GAAaC,EAASk3C,EAA8B,aAApDn3C,CAAkExK,GAAQ2hD,EAA6B3hD,EACtI,CAYA,SAAS2hD,EAA6B3hD,GACpC,OAAgB,OAATA,IAAiB4L,EAAAA,GAAAA,IAAmB5L,GAAQ0K,EAAG1K,GAAQ6e,EAAI7e,EACpE,CACF,EAlOEgf,SAAS,GCbJ,MAAM4iC,GAAe,CAC1Bz2B,KAAM,eACNvM,SAaF,SAA8BnU,EAASC,EAAImU,GACzC,MAAMmB,EAAOtS,KACb,OAgBA,SAAe1N,GAMb,OAHAyK,EAAQO,MAAM,iBAGPR,EAAAA,GAAAA,GAAaC,EAASo3C,EAAa,aAAc,EAAjDr3C,CAAwDxK,EACjE,EAYA,SAAS6hD,EAAY7hD,GACnB,MAAMshB,EAAOtB,EAAKtT,OAAOsT,EAAKtT,OAAOpJ,OAAS,GAC9C,OAAOge,GAAyB,eAAjBA,EAAK,GAAG3W,MAAyB2W,EAAK,GAAG9P,eAAe8P,EAAK,IAAI,GAAMhe,QAAU,EAAImU,EAAQzX,GAAQ6e,EAAI7e,EAC1H,CAYA,SAASyX,EAAQzX,GACf,OAAa,OAATA,EACKuU,EAAMvU,IAEX4L,EAAAA,GAAAA,IAAmB5L,GACdyK,EAAQ0V,QAAQ2hC,GAAcrqC,EAASlD,EAAvC9J,CAA8CzK,IAEvDyK,EAAQO,MAAM,iBACP0c,EAAO1nB,GAChB,CAYA,SAAS0nB,EAAO1nB,GACd,OAAa,OAATA,IAAiB4L,EAAAA,GAAAA,IAAmB5L,IACtCyK,EAAQU,KAAK,iBACNsM,EAAQzX,KAEjByK,EAAQS,QAAQlL,GACT0nB,EACT,CAGA,SAASnT,EAAMvU,GAKb,OAJAyK,EAAQU,KAAK,gBAINT,EAAG1K,EACZ,CACF,GAnGM8hD,GAAe,CACnBljC,SAwGF,SAA8BnU,EAASC,EAAImU,GACzC,MAAMmB,EAAOtS,KACb,OAAOo0C,EAaP,SAASA,EAAa9hD,GAGpB,OAAIggB,EAAKyB,OAAOsD,KAAK/E,EAAK6B,MAAMhN,MACvBgK,EAAI7e,IAET4L,EAAAA,GAAAA,IAAmB5L,IACrByK,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,cACN22C,IASFt3C,EAAAA,GAAAA,GAAaC,EAASo3C,EAAa,aAAc,EAAjDr3C,CAAwDxK,EACjE,CAYA,SAAS6hD,EAAY7hD,GACnB,MAAMshB,EAAOtB,EAAKtT,OAAOsT,EAAKtT,OAAOpJ,OAAS,GAC9C,OAAOge,GAAyB,eAAjBA,EAAK,GAAG3W,MAAyB2W,EAAK,GAAG9P,eAAe8P,EAAK,IAAI,GAAMhe,QAAU,EAAIoH,EAAG1K,IAAQ4L,EAAAA,GAAAA,IAAmB5L,GAAQ8hD,EAAa9hD,GAAQ6e,EAAI7e,EACrK,CACF,EA1JEgf,SAAS,GCLJ,MAAM+iC,GAAa,CACxB52B,KAAM,aACNvM,SA8CF,SAA4BnU,EAASC,EAAImU,GACvC,IAAIjc,EAAO,EACX,OAYA,SAAe5C,GAGb,OADAyK,EAAQO,MAAM,cAchB,SAAgBhL,GAEd,OADAyK,EAAQO,MAAM,sBACPg3C,EAAahiD,EACtB,CAhBSsU,CAAOtU,EAChB,EA2BA,SAASgiD,EAAahiD,GACpB,OAAa,KAATA,GAAe4C,IAAS,GAC1B6H,EAAQS,QAAQlL,GACTgiD,GAII,OAAThiD,IAAiBC,EAAAA,GAAAA,IAA0BD,IAC7CyK,EAAQU,KAAK,sBACNsM,EAAQzX,IAEV6e,EAAI7e,EACb,CAYA,SAASyX,EAAQzX,GACf,OAAa,KAATA,GACFyK,EAAQO,MAAM,sBACPi3C,EAAgBjiD,IAEZ,OAATA,IAAiB4L,EAAAA,GAAAA,IAAmB5L,IACtCyK,EAAQU,KAAK,cAINT,EAAG1K,KAER+K,EAAAA,GAAAA,IAAc/K,IACTwK,EAAAA,GAAAA,GAAaC,EAASgN,EAAS,aAA/BjN,CAA6CxK,IAKtDyK,EAAQO,MAAM,kBACPsG,EAAKtR,GACd,CAcA,SAASiiD,EAAgBjiD,GACvB,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACTiiD,IAETx3C,EAAQU,KAAK,sBACNsM,EAAQzX,GACjB,CAYA,SAASsR,EAAKtR,GACZ,OAAa,OAATA,GAA0B,KAATA,IAAeC,EAAAA,GAAAA,IAA0BD,IAC5DyK,EAAQU,KAAK,kBACNsM,EAAQzX,KAEjByK,EAAQS,QAAQlL,GACTsR,EACT,CACF,EA/KEzE,QAIF,SAA2BH,EAAQC,GACjC,IAGIomB,EAEAhb,EALAkkC,EAAavvC,EAAOpJ,OAAS,EAC7B82C,EAAe,EAOkB,eAAjC1tC,EAAO0tC,GAAc,GAAGzvC,OAC1ByvC,GAAgB,GAId6B,EAAa,EAAI7B,GAA+C,eAA/B1tC,EAAOuvC,GAAY,GAAGtxC,OACzDsxC,GAAc,GAEmB,uBAA/BvvC,EAAOuvC,GAAY,GAAGtxC,OAAkCyvC,IAAiB6B,EAAa,GAAKA,EAAa,EAAI7B,GAAmD,eAAnC1tC,EAAOuvC,EAAa,GAAG,GAAGtxC,QACxJsxC,GAAc7B,EAAe,IAAM6B,EAAa,EAAI,GAElDA,EAAa7B,IACfrnB,EAAU,CACRpoB,KAAM,iBACN3G,MAAO0I,EAAO0tC,GAAc,GAAGp2C,MAC/BI,IAAKsI,EAAOuvC,GAAY,GAAG73C,KAE7B2T,EAAO,CACLpN,KAAM,YACN3G,MAAO0I,EAAO0tC,GAAc,GAAGp2C,MAC/BI,IAAKsI,EAAOuvC,GAAY,GAAG73C,IAC3B6d,YAAa,SAEf5e,EAAAA,GAAAA,GAAOqJ,EAAQ0tC,EAAc6B,EAAa7B,EAAe,EAAG,CAAC,CAAC,QAASrnB,EAASpmB,GAAU,CAAC,QAASoL,EAAMpL,GAAU,CAAC,OAAQoL,EAAMpL,GAAU,CAAC,OAAQomB,EAASpmB,MAEjK,OAAOD,CACT,GC3CO,MAAMw1C,GAAkB,CAC7B/2B,KAAM,kBACNvM,SAkEF,SAAiCnU,EAASC,EAAImU,GAC5C,MAAMmB,EAAOtS,KAEb,IAAIqI,EACJ,OAaA,SAAe/V,GACb,IAEI4a,EAFAzX,EAAQ6c,EAAKtT,OAAOpJ,OAIxB,KAAOH,KAGL,GAAmC,eAA/B6c,EAAKtT,OAAOvJ,GAAO,GAAGwH,MAAwD,eAA/BqV,EAAKtT,OAAOvJ,GAAO,GAAGwH,MAAwD,YAA/BqV,EAAKtT,OAAOvJ,GAAO,GAAGwH,KAAoB,CAC1IiQ,EAA2C,cAA/BoF,EAAKtT,OAAOvJ,GAAO,GAAGwH,KAClC,KACF,CAKF,IAAKqV,EAAKyB,OAAOsD,KAAK/E,EAAK6B,MAAMhN,QAAUmL,EAAKkF,WAAatK,GAG3D,OAFAnQ,EAAQO,MAAM,qBACd+K,EAAS/V,EAiBb,SAAgBA,GAEd,OADAyK,EAAQO,MAAM,6BACP0c,EAAO1nB,EAChB,CAnBWsU,CAAOtU,GAEhB,OAAO6e,EAAI7e,EACb,EA6BA,SAAS0nB,EAAO1nB,GACd,OAAIA,IAAS+V,GACXtL,EAAQS,QAAQlL,GACT0nB,IAETjd,EAAQU,KAAK,8BACNJ,EAAAA,GAAAA,IAAc/K,IAAQwK,EAAAA,GAAAA,GAAaC,EAAS8J,EAAO,aAA7B/J,CAA2CxK,GAAQuU,EAAMvU,GACxF,CAaA,SAASuU,EAAMvU,GACb,OAAa,OAATA,IAAiB4L,EAAAA,GAAAA,IAAmB5L,IACtCyK,EAAQU,KAAK,qBACNT,EAAG1K,IAEL6e,EAAI7e,EACb,CACF,EAhKEqoB,UAIF,SAAkC3b,EAAQC,GAExC,IAEIomB,EAEAhb,EAEAsB,EANAlW,EAAQuJ,EAAOpJ,OAUnB,KAAOH,KACL,GAAyB,UAArBuJ,EAAOvJ,GAAO,GAAgB,CAChC,GAA8B,YAA1BuJ,EAAOvJ,GAAO,GAAGwH,KAAoB,CACvCooB,EAAU5vB,EACV,KACF,CAC8B,cAA1BuJ,EAAOvJ,GAAO,GAAGwH,OACnBoN,EAAO5U,EAEX,KAGgC,YAA1BuJ,EAAOvJ,GAAO,GAAGwH,MAEnB+B,EAAOrJ,OAAOF,EAAO,GAElBkW,GAAwC,eAA1B3M,EAAOvJ,GAAO,GAAGwH,OAClC0O,EAAalW,GAInB,MAAMmW,EAAU,CACd3O,KAAM,gBACN3G,MAAOsa,OAAOC,OAAO,CAAC,EAAG7R,EAAOqL,GAAM,GAAG/T,OACzCI,IAAKka,OAAOC,OAAO,CAAC,EAAG7R,EAAOA,EAAOpJ,OAAS,GAAG,GAAGc,MAItDsI,EAAOqL,GAAM,GAAGpN,KAAO,oBAInB0O,GACF3M,EAAOrJ,OAAO0U,EAAM,EAAG,CAAC,QAASuB,EAAS3M,IAC1CD,EAAOrJ,OAAOgW,EAAa,EAAG,EAAG,CAAC,OAAQ3M,EAAOqmB,GAAS,GAAIpmB,IAC9DD,EAAOqmB,GAAS,GAAG3uB,IAAMka,OAAOC,OAAO,CAAC,EAAG7R,EAAO2M,GAAY,GAAGjV,MAEjEsI,EAAOqmB,GAAS,GAAKzZ,EAKvB,OADA5M,EAAOtL,KAAK,CAAC,OAAQkY,EAAS3M,IACvBD,CACT,GC3DO,MAAMy1C,GAAiB,CAC5B,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,SACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,MAeWC,GAAe,CAAC,MAAO,SAAU,QAAS,YC9E1CC,GAAW,CACtBl3B,KAAM,WACNvM,SAsCF,SAA0BnU,EAASC,EAAImU,GACrC,MAAMmB,EAAOtS,KAEb,IAAIqI,EAEAusC,EAEAlvC,EAEAjQ,EAEAo/C,EACJ,OAYA,SAAeviD,GAEb,OAaF,SAAgBA,GAId,OAHAyK,EAAQO,MAAM,YACdP,EAAQO,MAAM,gBACdP,EAAQS,QAAQlL,GACTwjB,CACT,CAlBSlP,CAAOtU,EAChB,EAiCA,SAASwjB,EAAKxjB,GACZ,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACTwiD,GAEI,KAATxiD,GACFyK,EAAQS,QAAQlL,GAChBsiD,GAAa,EACNG,GAEI,KAATziD,GACFyK,EAAQS,QAAQlL,GAChB+V,EAAS,EAMFiK,EAAKkF,UAAYxa,EAAKg4C,IAI3Bt3C,EAAAA,GAAAA,IAAWpL,IACbyK,EAAQS,QAAQlL,GAEhBoT,EAASrH,OAAOC,aAAahM,GACtBq1C,GAEFx2B,EAAI7e,EACb,CAgBA,SAASwiD,EAAgBxiD,GACvB,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GAChB+V,EAAS,EACF4sC,GAEI,KAAT3iD,GACFyK,EAAQS,QAAQlL,GAChB+V,EAAS,EACT5S,EAAQ,EACDy/C,IAILx3C,EAAAA,GAAAA,IAAWpL,IACbyK,EAAQS,QAAQlL,GAChB+V,EAAS,EAGFiK,EAAKkF,UAAYxa,EAAKg4C,GAExB7jC,EAAI7e,EACb,CAYA,SAAS2iD,EAAkB3iD,GACzB,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GAGTggB,EAAKkF,UAAYxa,EAAKg4C,GAExB7jC,EAAI7e,EACb,CAYA,SAAS4iD,EAAgB5iD,GACvB,MAAMqK,EAAQ,SACd,OAAIrK,IAASqK,EAAM2I,WAAW7P,MAC5BsH,EAAQS,QAAQlL,GACFqK,IAAVlH,EAGK6c,EAAKkF,UAAYxa,EAAK0d,EAExBw6B,GAEF/jC,EAAI7e,EACb,CAYA,SAASyiD,EAAcziD,GACrB,OAAIoL,EAAAA,GAAAA,IAAWpL,IACbyK,EAAQS,QAAQlL,GAEhBoT,EAASrH,OAAOC,aAAahM,GACtBq1C,GAEFx2B,EAAI7e,EACb,CAcA,SAASq1C,EAAQr1C,GACf,GAAa,OAATA,GAA0B,KAATA,GAAwB,KAATA,IAAeC,EAAAA,GAAAA,IAA0BD,GAAO,CAClF,MAAM6iD,EAAiB,KAAT7iD,EACRmrB,EAAO/X,EAAOI,cACpB,OAAKqvC,GAAUP,IAAcF,GAAat1C,SAASqe,GAM/Cg3B,GAAer1C,SAASsG,EAAOI,gBACjCuC,EAAS,EACL8sC,GACFp4C,EAAQS,QAAQlL,GACT8iD,GAKF9iC,EAAKkF,UAAYxa,EAAG1K,GAAQooB,EAAapoB,KAElD+V,EAAS,EAEFiK,EAAKkF,YAAclF,EAAKyB,OAAOsD,KAAK/E,EAAK6B,MAAMhN,MAAQgK,EAAI7e,GAAQsiD,EAAaS,EAAwB/iD,GAAQgjD,EAA4BhjD,KAlBjJ+V,EAAS,EAGFiK,EAAKkF,UAAYxa,EAAG1K,GAAQooB,EAAapoB,GAgBpD,CAGA,OAAa,KAATA,IAAesL,EAAAA,GAAAA,IAAkBtL,IACnCyK,EAAQS,QAAQlL,GAChBoT,GAAUrH,OAAOC,aAAahM,GACvBq1C,GAEFx2B,EAAI7e,EACb,CAYA,SAAS8iD,EAAiB9iD,GACxB,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GAGTggB,EAAKkF,UAAYxa,EAAK0d,GAExBvJ,EAAI7e,EACb,CAYA,SAAS+iD,EAAwB/iD,GAC/B,OAAI+K,EAAAA,GAAAA,IAAc/K,IAChByK,EAAQS,QAAQlL,GACT+iD,GAEFE,EAAYjjD,EACrB,CAyBA,SAASgjD,EAA4BhjD,GACnC,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACTijD,GAII,KAATjjD,GAAwB,KAATA,IAAeoL,EAAAA,GAAAA,IAAWpL,IAC3CyK,EAAQS,QAAQlL,GACTkjD,IAELn4C,EAAAA,GAAAA,IAAc/K,IAChByK,EAAQS,QAAQlL,GACTgjD,GAEFC,EAAYjjD,EACrB,CAgBA,SAASkjD,EAAsBljD,GAE7B,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,IAAesL,EAAAA,GAAAA,IAAkBtL,IAChFyK,EAAQS,QAAQlL,GACTkjD,GAEFC,EAA2BnjD,EACpC,CAeA,SAASmjD,EAA2BnjD,GAClC,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACTojD,IAELr4C,EAAAA,GAAAA,IAAc/K,IAChByK,EAAQS,QAAQlL,GACTmjD,GAEFH,EAA4BhjD,EACrC,CAeA,SAASojD,EAA6BpjD,GACpC,OAAa,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzD6e,EAAI7e,GAEA,KAATA,GAAwB,KAATA,GACjByK,EAAQS,QAAQlL,GAChBuiD,EAAUviD,EACHqjD,IAELt4C,EAAAA,GAAAA,IAAc/K,IAChByK,EAAQS,QAAQlL,GACTojD,GAEFE,EAA+BtjD,EACxC,CAcA,SAASqjD,EAA6BrjD,GACpC,OAAIA,IAASuiD,GACX93C,EAAQS,QAAQlL,GAChBuiD,EAAU,KACHgB,GAEI,OAATvjD,IAAiB4L,EAAAA,GAAAA,IAAmB5L,GAC/B6e,EAAI7e,IAEbyK,EAAQS,QAAQlL,GACTqjD,EACT,CAYA,SAASC,EAA+BtjD,GACtC,OAAa,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,IAAeC,EAAAA,GAAAA,IAA0BD,GAC/ImjD,EAA2BnjD,IAEpCyK,EAAQS,QAAQlL,GACTsjD,EACT,CAaA,SAASC,EAAkCvjD,GACzC,OAAa,KAATA,GAAwB,KAATA,IAAe+K,EAAAA,GAAAA,IAAc/K,GACvCgjD,EAA4BhjD,GAE9B6e,EAAI7e,EACb,CAYA,SAASijD,EAAYjjD,GACnB,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACTwjD,GAEF3kC,EAAI7e,EACb,CAYA,SAASwjD,EAAcxjD,GACrB,OAAa,OAATA,IAAiB4L,EAAAA,GAAAA,IAAmB5L,GAG/BooB,EAAapoB,IAElB+K,EAAAA,GAAAA,IAAc/K,IAChByK,EAAQS,QAAQlL,GACTwjD,GAEF3kC,EAAI7e,EACb,CAYA,SAASooB,EAAapoB,GACpB,OAAa,KAATA,GAA0B,IAAX+V,GACjBtL,EAAQS,QAAQlL,GACTyjD,GAEI,KAATzjD,GAA0B,IAAX+V,GACjBtL,EAAQS,QAAQlL,GACT0jD,GAEI,KAAT1jD,GAA0B,IAAX+V,GACjBtL,EAAQS,QAAQlL,GACT2jD,GAEI,KAAT3jD,GAA0B,IAAX+V,GACjBtL,EAAQS,QAAQlL,GACT0iD,GAEI,KAAT1iD,GAA0B,IAAX+V,GACjBtL,EAAQS,QAAQlL,GACT4jD,KAELh4C,EAAAA,GAAAA,IAAmB5L,IAAqB,IAAX+V,GAA2B,IAAXA,EAIpC,OAAT/V,IAAiB4L,EAAAA,GAAAA,IAAmB5L,IACtCyK,EAAQU,KAAK,gBACN04C,EAAkB7jD,KAE3ByK,EAAQS,QAAQlL,GACTooB,IARL3d,EAAQU,KAAK,gBACNV,EAAQmD,MAAMk2C,GAAiBC,EAAmBF,EAAlDp5C,CAAqEzK,GAQhF,CAaA,SAAS6jD,EAAkB7jD,GACzB,OAAOyK,EAAQmD,MAAMo2C,GAA0BC,EAA0BF,EAAlEt5C,CAAqFzK,EAC9F,CAaA,SAASikD,EAAyBjkD,GAIhC,OAHAyK,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,cACN+4C,CACT,CAaA,SAASA,EAAmBlkD,GAC1B,OAAa,OAATA,IAAiB4L,EAAAA,GAAAA,IAAmB5L,GAC/B6jD,EAAkB7jD,IAE3ByK,EAAQO,MAAM,gBACPod,EAAapoB,GACtB,CAYA,SAASyjD,EAA0BzjD,GACjC,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACT0iD,GAEFt6B,EAAapoB,EACtB,CAYA,SAAS0jD,EAAuB1jD,GAC9B,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GAChBoT,EAAS,GACF+wC,GAEF/7B,EAAapoB,EACtB,CAYA,SAASmkD,EAAsBnkD,GAC7B,GAAa,KAATA,EAAa,CACf,MAAMmrB,EAAO/X,EAAOI,cACpB,OAAI4uC,GAAat1C,SAASqe,IACxB1gB,EAAQS,QAAQlL,GACT2jD,GAEFv7B,EAAapoB,EACtB,CACA,OAAIoL,EAAAA,GAAAA,IAAWpL,IAASoT,EAAO9P,OAAS,GACtCmH,EAAQS,QAAQlL,GAEhBoT,GAAUrH,OAAOC,aAAahM,GACvBmkD,GAEF/7B,EAAapoB,EACtB,CAYA,SAAS4jD,EAAwB5jD,GAC/B,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACT0iD,GAEFt6B,EAAapoB,EACtB,CAoBA,SAAS0iD,EAA8B1iD,GACrC,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACT2jD,GAII,KAAT3jD,GAA0B,IAAX+V,GACjBtL,EAAQS,QAAQlL,GACT0iD,GAEFt6B,EAAapoB,EACtB,CAYA,SAAS2jD,EAAkB3jD,GACzB,OAAa,OAATA,IAAiB4L,EAAAA,GAAAA,IAAmB5L,IACtCyK,EAAQU,KAAK,gBACN44C,EAAkB/jD,KAE3ByK,EAAQS,QAAQlL,GACT2jD,EACT,CAYA,SAASI,EAAkB/jD,GAMzB,OALAyK,EAAQU,KAAK,YAKNT,EAAG1K,EACZ,CACF,EA9wBEqoB,UAeF,SAA2B3b,GACzB,IAAIvJ,EAAQuJ,EAAOpJ,OACnB,KAAOH,MACoB,UAArBuJ,EAAOvJ,GAAO,IAA4C,aAA1BuJ,EAAOvJ,GAAO,GAAGwH,QAInDxH,EAAQ,GAAmC,eAA9BuJ,EAAOvJ,EAAQ,GAAG,GAAGwH,OAEpC+B,EAAOvJ,GAAO,GAAGa,MAAQ0I,EAAOvJ,EAAQ,GAAG,GAAGa,MAE9C0I,EAAOvJ,EAAQ,GAAG,GAAGa,MAAQ0I,EAAOvJ,EAAQ,GAAG,GAAGa,MAElD0I,EAAOrJ,OAAOF,EAAQ,EAAG,IAE3B,OAAOuJ,CACT,EA9BE2uC,UAAU,GAINyI,GAAkB,CACtBllC,SA2zBF,SAAiCnU,EAASC,EAAImU,GAC5C,OAaA,SAAe7e,GAIb,OAHAyK,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,cACNV,EAAQ0V,QAAQ4C,GAAAA,EAAWrY,EAAImU,EACxC,CACF,EA90BEG,SAAS,GAELglC,GAA2B,CAC/BplC,SA0wBF,SAA0CnU,EAASC,EAAImU,GACrD,MAAMmB,EAAOtS,KACb,OAaA,SAAe1N,GACb,IAAI4L,EAAAA,GAAAA,IAAmB5L,GAIrB,OAHAyK,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,cACNoJ,EAET,OAAOsK,EAAI7e,EACb,EAaA,SAASuU,EAAMvU,GACb,OAAOggB,EAAKyB,OAAOsD,KAAK/E,EAAK6B,MAAMhN,MAAQgK,EAAI7e,GAAQ0K,EAAG1K,EAC5D,CACF,EAhzBEgf,SAAS,GCjBX,MAAMolC,GAAsB,CAC1BxlC,SA+ZF,SAAqCnU,EAASC,EAAImU,GAChD,MAAMmB,EAAOtS,KACb,OAOA,SAAe1N,GACb,GAAa,OAATA,EACF,OAAO6e,EAAI7e,GAKb,OAHAyK,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,cACNmvC,CACT,EAOA,SAASA,EAAUt6C,GACjB,OAAOggB,EAAKyB,OAAOsD,KAAK/E,EAAK6B,MAAMhN,MAAQgK,EAAI7e,GAAQ0K,EAAG1K,EAC5D,CACF,EAzbEgf,SAAS,GAIEqlC,GAAa,CACxBl5B,KAAM,aACNvM,SAQF,SAA4BnU,EAASC,EAAImU,GACvC,MAAMmB,EAAOtS,KAEP42C,EAAa,CACjB1lC,SAiSF,SAA4BnU,EAASC,EAAImU,GACvC,IAAIjc,EAAO,EACX,OAAO2hD,EAOP,SAASA,EAAYvkD,GAInB,OAHAyK,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,cACNnH,CACT,CAcA,SAASA,EAAMhE,GAKb,OADAyK,EAAQO,MAAM,oBACPD,EAAAA,GAAAA,IAAc/K,IAAQwK,EAAAA,GAAAA,GAAaC,EAAS+5C,EAAqB,aAAcxkC,EAAKyB,OAAOhV,WAAW8Y,QAAQ3B,KAAK9W,SAAS,qBAAkB9J,EAAY,EAApIwH,CAAuIxK,GAAQwkD,EAAoBxkD,EAClM,CAcA,SAASwkD,EAAoBxkD,GAC3B,OAAIA,IAAS+V,GACXtL,EAAQO,MAAM,2BACPy5C,EAAczkD,IAEhB6e,EAAI7e,EACb,CAcA,SAASykD,EAAczkD,GACrB,OAAIA,IAAS+V,GACXnT,IACA6H,EAAQS,QAAQlL,GACTykD,GAEL7hD,GAAQ2c,GACV9U,EAAQU,KAAK,4BACNJ,EAAAA,GAAAA,IAAc/K,IAAQwK,EAAAA,GAAAA,GAAaC,EAASi6C,EAAoB,aAA1Cl6C,CAAwDxK,GAAQ0kD,EAAmB1kD,IAE3G6e,EAAI7e,EACb,CAcA,SAAS0kD,EAAmB1kD,GAC1B,OAAa,OAATA,IAAiB4L,EAAAA,GAAAA,IAAmB5L,IACtCyK,EAAQU,KAAK,mBACNT,EAAG1K,IAEL6e,EAAI7e,EACb,CACF,EApYEgf,SAAS,GAEX,IAGIjJ,EAHA4uC,EAAgB,EAChBplC,EAAW,EAGf,OAcA,SAAevf,GAEb,OAeF,SAA4BA,GAC1B,MAAMshB,EAAOtB,EAAKtT,OAAOsT,EAAKtT,OAAOpJ,OAAS,GAM9C,OALAqhD,EAAgBrjC,GAAyB,eAAjBA,EAAK,GAAG3W,KAAwB2W,EAAK,GAAG9P,eAAe8P,EAAK,IAAI,GAAMhe,OAAS,EACvGyS,EAAS/V,EACTyK,EAAQO,MAAM,cACdP,EAAQO,MAAM,mBACdP,EAAQO,MAAM,2BACPg3C,EAAahiD,EACtB,CAvBS4kD,CAAmB5kD,EAC5B,EAoCA,SAASgiD,EAAahiD,GACpB,OAAIA,IAAS+V,GACXwJ,IACA9U,EAAQS,QAAQlL,GACTgiD,GAELziC,EAAW,EACNV,EAAI7e,IAEbyK,EAAQU,KAAK,4BACNJ,EAAAA,GAAAA,IAAc/K,IAAQwK,EAAAA,GAAAA,GAAaC,EAASo6C,EAAY,aAAlCr6C,CAAgDxK,GAAQ6kD,EAAW7kD,GAClG,CAcA,SAAS6kD,EAAW7kD,GAClB,OAAa,OAATA,IAAiB4L,EAAAA,GAAAA,IAAmB5L,IACtCyK,EAAQU,KAAK,mBACN6U,EAAKkF,UAAYxa,EAAG1K,GAAQyK,EAAQmD,MAAMw2C,GAAqBU,EAAgBvwC,EAAnD9J,CAA0DzK,KAE/FyK,EAAQO,MAAM,uBACdP,EAAQO,MAAM,cAAe,CAC3BiX,YAAa,WAERlO,EAAK/T,GACd,CAcA,SAAS+T,EAAK/T,GACZ,OAAa,OAATA,IAAiB4L,EAAAA,GAAAA,IAAmB5L,IACtCyK,EAAQU,KAAK,eACbV,EAAQU,KAAK,uBACN05C,EAAW7kD,KAEhB+K,EAAAA,GAAAA,IAAc/K,IAChByK,EAAQU,KAAK,eACbV,EAAQU,KAAK,wBACNX,EAAAA,GAAAA,GAAaC,EAASs6C,EAAY,aAAlCv6C,CAAgDxK,IAE5C,KAATA,GAAeA,IAAS+V,EACnB8I,EAAI7e,IAEbyK,EAAQS,QAAQlL,GACT+T,EACT,CAcA,SAASgxC,EAAW/kD,GAClB,OAAa,OAATA,IAAiB4L,EAAAA,GAAAA,IAAmB5L,GAC/B6kD,EAAW7kD,IAEpByK,EAAQO,MAAM,uBACdP,EAAQO,MAAM,cAAe,CAC3BiX,YAAa,WAER7I,EAAKpZ,GACd,CAcA,SAASoZ,EAAKpZ,GACZ,OAAa,OAATA,IAAiB4L,EAAAA,GAAAA,IAAmB5L,IACtCyK,EAAQU,KAAK,eACbV,EAAQU,KAAK,uBACN05C,EAAW7kD,IAEP,KAATA,GAAeA,IAAS+V,EACnB8I,EAAI7e,IAEbyK,EAAQS,QAAQlL,GACToZ,EACT,CAeA,SAAS0rC,EAAe9kD,GACtB,OAAOyK,EAAQ0V,QAAQmkC,EAAY/vC,EAAOywC,EAAnCv6C,CAAkDzK,EAC3D,CAcA,SAASglD,EAAchlD,GAIrB,OAHAyK,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,cACNivC,CACT,CAcA,SAASA,EAAap6C,GACpB,OAAO2kD,EAAgB,IAAK55C,EAAAA,GAAAA,IAAc/K,IAAQwK,EAAAA,GAAAA,GAAaC,EAASw6C,EAAoB,aAAcN,EAAgB,EAAxEn6C,CAA2ExK,GAAQilD,EAAmBjlD,EAC1J,CAcA,SAASilD,EAAmBjlD,GAC1B,OAAa,OAATA,IAAiB4L,EAAAA,GAAAA,IAAmB5L,GAC/ByK,EAAQmD,MAAMw2C,GAAqBU,EAAgBvwC,EAAnD9J,CAA0DzK,IAEnEyK,EAAQO,MAAM,iBACPk6C,EAAallD,GACtB,CAcA,SAASklD,EAAallD,GACpB,OAAa,OAATA,IAAiB4L,EAAAA,GAAAA,IAAmB5L,IACtCyK,EAAQU,KAAK,iBACN85C,EAAmBjlD,KAE5ByK,EAAQS,QAAQlL,GACTklD,EACT,CAcA,SAAS3wC,EAAMvU,GAEb,OADAyK,EAAQU,KAAK,cACNT,EAAG1K,EACZ,CA2GF,EAjZEq7C,UAAU,GChBZ,MAAMn5C,GAAUimB,SAASg9B,cAAc,KAMhC,SAASC,GAA8B/6C,GAC5C,MAAMg7C,EAAqB,IAAMh7C,EAAQ,IACzCnI,GAAQojD,UAAYD,EACpB,MAAMhnB,EAAOn8B,GAAQqjD,YAUrB,OAAyC,KAArClnB,EAAKrrB,WAAWqrB,EAAK/6B,OAAS,IAAiC,SAAV+G,KAQlDg0B,IAASgnB,GAA6BhnB,EAC/C,CCrBO,MAAMgnB,GAAqB,CAChCl6B,KAAM,qBACNvM,SAOF,SAAoCnU,EAASC,EAAImU,GAC/C,MAAMmB,EAAOtS,KACb,IAEIxJ,EAEA4H,EAJAlJ,EAAO,EAKX,OAgBA,SAAe5C,GAKb,OAJAyK,EAAQO,MAAM,sBACdP,EAAQO,MAAM,4BACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,4BACNqY,CACT,EAiBA,SAASA,EAAKxjB,GACZ,OAAa,KAATA,GACFyK,EAAQO,MAAM,mCACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,mCACNq6C,IAET/6C,EAAQO,MAAM,2BACd9G,EAAM,GACN4H,EAAOR,GAAAA,GACAjB,EAAMrK,GACf,CAcA,SAASwlD,EAAQxlD,GACf,OAAa,KAATA,GAAwB,MAATA,GACjByK,EAAQO,MAAM,uCACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,uCACbV,EAAQO,MAAM,2BACd9G,EAAM,EACN4H,EAAOJ,GAAAA,GACArB,IAETI,EAAQO,MAAM,2BACd9G,EAAM,EACN4H,EAAOL,GAAAA,GACApB,EAAMrK,GACf,CAmBA,SAASqK,EAAMrK,GACb,GAAa,KAATA,GAAe4C,EAAM,CACvB,MAAMkO,EAAQrG,EAAQU,KAAK,2BAC3B,OAAIW,IAASR,GAAAA,IAAsB85C,GAA8BplC,EAAKxO,eAAeV,KAMrFrG,EAAQO,MAAM,4BACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,4BACbV,EAAQU,KAAK,sBACNT,GATEmU,EAAI7e,EAUf,CACA,OAAI8L,EAAK9L,IAAS4C,IAASsB,GACzBuG,EAAQS,QAAQlL,GACTqK,GAEFwU,EAAI7e,EACb,CACF,GCxIO,MAAMylD,GAAkB,CAC7Bt6B,KAAM,kBACNvM,SAOF,SAAiCnU,EAASC,EAAImU,GAC5C,OAYA,SAAe7e,GAKb,OAJAyK,EAAQO,MAAM,mBACdP,EAAQO,MAAM,gBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,gBACNuc,CACT,EAYA,SAASA,EAAO1nB,GAEd,OAAI2L,EAAAA,GAAAA,IAAiB3L,IACnByK,EAAQO,MAAM,wBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,wBACbV,EAAQU,KAAK,mBACNT,GAEFmU,EAAI7e,EACb,CACF,GClDO,MAAM0lD,GAAa,CACxBv6B,KAAM,aACNvM,SAOF,SAA4BnU,EAASC,GACnC,OAGA,SAAe1K,GAIb,OAHAyK,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,eACNX,EAAAA,GAAAA,GAAaC,EAASC,EAAI,aACnC,CACF,GCVO,MAAMi7C,GAAW,CACtBx6B,KAAM,WACNvM,SAoHF,SAA0BnU,EAASC,EAAImU,GACrC,MAAMmB,EAAOtS,KACb,IAEIiU,EAEAH,EAJAre,EAAQ6c,EAAKtT,OAAOpJ,OAOxB,KAAOH,KACL,IAAoC,eAA/B6c,EAAKtT,OAAOvJ,GAAO,GAAGwH,MAAwD,cAA/BqV,EAAKtT,OAAOvJ,GAAO,GAAGwH,QAA0BqV,EAAKtT,OAAOvJ,GAAO,GAAGge,UAAW,CACnIQ,EAAa3B,EAAKtT,OAAOvJ,GAAO,GAChC,KACF,CAEF,OAiBA,SAAenD,GAEb,IAAK2hB,EACH,OAAO9C,EAAI7e,GAYb,GAAI2hB,EAAWikC,UACb,OAAOC,EAAY7lD,GAWrB,OATAwhB,EAAUxB,EAAKyB,OAAOD,QAAQ1U,UAASyG,EAAAA,GAAAA,GAAoByM,EAAKxO,eAAe,CAC7ExN,MAAO2d,EAAWvd,IAClBA,IAAK4b,EAAK6B,UAEZpX,EAAQO,MAAM,YACdP,EAAQO,MAAM,eACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,eACbV,EAAQU,KAAK,YACNoJ,CACT,EAkBA,SAASA,EAAMvU,GAKb,OAAa,KAATA,EACKyK,EAAQ0V,QAAQ2lC,GAAmBC,EAAYvkC,EAAUukC,EAAaF,EAAtEp7C,CAAmFzK,GAI/E,KAATA,EACKyK,EAAQ0V,QAAQ6lC,GAAwBD,EAAYvkC,EAAUykC,EAAmBJ,EAAjFp7C,CAA8FzK,GAIhGwhB,EAAUukC,EAAW/lD,GAAQ6lD,EAAY7lD,EAClD,CAgBA,SAASimD,EAAiBjmD,GACxB,OAAOyK,EAAQ0V,QAAQ+lC,GAA6BH,EAAYF,EAAzDp7C,CAAsEzK,EAC/E,CAkBA,SAAS+lD,EAAW/lD,GAElB,OAAO0K,EAAG1K,EACZ,CAkBA,SAAS6lD,EAAY7lD,GAEnB,OADA2hB,EAAWR,WAAY,EAChBtC,EAAI7e,EACb,CACF,EA9QEqoB,UAiCF,SAA2B3b,EAAQC,GACjC,IAGImE,EAEA0S,EAEAmE,EAEAiO,EATAzyB,EAAQuJ,EAAOpJ,OACfgD,EAAS,EAWb,KAAOnD,KAEL,GADA2N,EAAQpE,EAAOvJ,GAAO,GAClBqgB,EAAM,CAER,GAAmB,SAAf1S,EAAMnG,MAAkC,cAAfmG,EAAMnG,MAAwBmG,EAAM80C,UAC/D,MAKuB,UAArBl5C,EAAOvJ,GAAO,IAAiC,cAAf2N,EAAMnG,OACxCmG,EAAM80C,WAAY,EAEtB,MAAO,GAAIj+B,GACT,GAAyB,UAArBjb,EAAOvJ,GAAO,KAAkC,eAAf2N,EAAMnG,MAAwC,cAAfmG,EAAMnG,QAA0BmG,EAAMqQ,YACxGqC,EAAOrgB,EACY,cAAf2N,EAAMnG,MAAsB,CAC9BrE,EAAS,EACT,KACF,MAEsB,aAAfwK,EAAMnG,OACfgd,EAAQxkB,GAGZ,MAAMgjD,EAAQ,CACZx7C,KAA+B,cAAzB+B,EAAO8W,GAAM,GAAG7Y,KAAuB,OAAS,QACtD3G,MAAOsa,OAAOC,OAAO,CAAC,EAAG7R,EAAO8W,GAAM,GAAGxf,OACzCI,IAAKka,OAAOC,OAAO,CAAC,EAAG7R,EAAOA,EAAOpJ,OAAS,GAAG,GAAGc,MAEhD0O,EAAQ,CACZnI,KAAM,QACN3G,MAAOsa,OAAOC,OAAO,CAAC,EAAG7R,EAAO8W,GAAM,GAAGxf,OACzCI,IAAKka,OAAOC,OAAO,CAAC,EAAG7R,EAAOib,GAAO,GAAGvjB,MAEpC2T,EAAO,CACXpN,KAAM,YACN3G,MAAOsa,OAAOC,OAAO,CAAC,EAAG7R,EAAO8W,EAAOld,EAAS,GAAG,GAAGlC,KACtDA,IAAKka,OAAOC,OAAO,CAAC,EAAG7R,EAAOib,EAAQ,GAAG,GAAG3jB,QAwB9C,OAtBA4xB,EAAQ,CAAC,CAAC,QAASuwB,EAAOx5C,GAAU,CAAC,QAASmG,EAAOnG,IAGrDipB,GAAQx0B,EAAAA,GAAAA,GAAKw0B,EAAOlpB,EAAO5F,MAAM0c,EAAO,EAAGA,EAAOld,EAAS,IAG3DsvB,GAAQx0B,EAAAA,GAAAA,GAAKw0B,EAAO,CAAC,CAAC,QAAS7d,EAAMpL,KAKrCipB,GAAQx0B,EAAAA,GAAAA,GAAKw0B,GAAOppB,EAAAA,GAAAA,GAAWG,EAAQ8U,OAAOhV,WAAWkX,WAAWC,KAAMlX,EAAO5F,MAAM0c,EAAOld,EAAS,EAAGqhB,EAAQ,GAAIhb,IAGtHipB,GAAQx0B,EAAAA,GAAAA,GAAKw0B,EAAO,CAAC,CAAC,OAAQ7d,EAAMpL,GAAUD,EAAOib,EAAQ,GAAIjb,EAAOib,EAAQ,GAAI,CAAC,OAAQ7U,EAAOnG,KAGpGipB,GAAQx0B,EAAAA,GAAAA,GAAKw0B,EAAOlpB,EAAO5F,MAAM6gB,EAAQ,IAGzCiO,GAAQx0B,EAAAA,GAAAA,GAAKw0B,EAAO,CAAC,CAAC,OAAQuwB,EAAOx5C,MACrCtJ,EAAAA,GAAAA,GAAOqJ,EAAQ8W,EAAM9W,EAAOpJ,OAAQsyB,GAC7BlpB,CACT,EA5GEF,WAiBF,SAA4BE,GAC1B,IAAIvJ,GAAS,EACb,OAASA,EAAQuJ,EAAOpJ,QAAQ,CAC9B,MAAMwN,EAAQpE,EAAOvJ,GAAO,GACT,eAAf2N,EAAMnG,MAAwC,cAAfmG,EAAMnG,MAAuC,aAAfmG,EAAMnG,OAErE+B,EAAOrJ,OAAOF,EAAQ,EAAkB,eAAf2N,EAAMnG,KAAwB,EAAI,GAC3DmG,EAAMnG,KAAO,OACbxH,IAEJ,CACA,OAAOuJ,CACT,GAzBMo5C,GAAoB,CACxBlnC,SA8QF,SAA0BnU,EAASC,EAAImU,GACrC,OAYA,SAAuB7e,GAKrB,OAJAyK,EAAQO,MAAM,YACdP,EAAQO,MAAM,kBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,kBACNi7C,CACT,EAYA,SAASA,EAAepmD,GACtB,OAAOC,EAAAA,GAAAA,IAA0BD,GAAQmhD,GAAkB12C,EAAS47C,EAA3BlF,CAAyCnhD,GAAQqmD,EAAarmD,EACzG,CAYA,SAASqmD,EAAarmD,GACpB,OAAa,KAATA,EACKsmD,EAAYtmD,GAEdsgD,GAAmB71C,EAAS87C,EAA0BC,EAA4B,sBAAuB,6BAA8B,mCAAoC,yBAA0B,4BAA6B,GAAlOlG,CAAsOtgD,EAC/O,CAYA,SAASumD,EAAyBvmD,GAChC,OAAOC,EAAAA,GAAAA,IAA0BD,GAAQmhD,GAAkB12C,EAASg8C,EAA3BtF,CAA4CnhD,GAAQsmD,EAAYtmD,EAC3G,CAYA,SAASwmD,EAA2BxmD,GAClC,OAAO6e,EAAI7e,EACb,CAYA,SAASymD,EAAgBzmD,GACvB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzBkhD,GAAaz2C,EAASi8C,EAAoB7nC,EAAK,gBAAiB,sBAAuB,sBAAvFqiC,CAA8GlhD,GAEhHsmD,EAAYtmD,EACrB,CAYA,SAAS0mD,EAAmB1mD,GAC1B,OAAOC,EAAAA,GAAAA,IAA0BD,GAAQmhD,GAAkB12C,EAAS67C,EAA3BnF,CAAwCnhD,GAAQsmD,EAAYtmD,EACvG,CAYA,SAASsmD,EAAYtmD,GACnB,OAAa,KAATA,GACFyK,EAAQO,MAAM,kBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,kBACbV,EAAQU,KAAK,YACNT,GAEFmU,EAAI7e,EACb,CACF,GA9YMgmD,GAAyB,CAC7BpnC,SAmZF,SAA+BnU,EAASC,EAAImU,GAC1C,MAAMmB,EAAOtS,KACb,OAYA,SAAuB1N,GACrB,OAAOghD,GAAazyC,KAAKyR,EAAMvV,EAASk8C,EAAoBC,EAAsB,YAAa,kBAAmB,kBAA3G5F,CAA8HhhD,EACvI,EAYA,SAAS2mD,EAAmB3mD,GAC1B,OAAOggB,EAAKyB,OAAOD,QAAQ1U,UAASyG,EAAAA,GAAAA,GAAoByM,EAAKxO,eAAewO,EAAKtT,OAAOsT,EAAKtT,OAAOpJ,OAAS,GAAG,IAAIwD,MAAM,GAAI,KAAO4D,EAAG1K,GAAQ6e,EAAI7e,EACtJ,CAYA,SAAS4mD,EAAqB5mD,GAC5B,OAAO6e,EAAI7e,EACb,CACF,GA7bMkmD,GAA8B,CAClCtnC,SAkcF,SAAoCnU,EAASC,EAAImU,GAC/C,OAcA,SAAiC7e,GAO/B,OAJAyK,EAAQO,MAAM,aACdP,EAAQO,MAAM,mBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,mBACN07C,CACT,EAcA,SAASA,EAAuB7mD,GAC9B,OAAa,KAATA,GACFyK,EAAQO,MAAM,mBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,mBACbV,EAAQU,KAAK,aACNT,GAEFmU,EAAI7e,EACb,CACF,GC3gBO,MAAM8mD,GAAkB,CAC7B37B,KAAM,kBACNvM,SAQF,SAAiCnU,EAASC,EAAImU,GAC5C,MAAMmB,EAAOtS,KACb,OAYA,SAAe1N,GAKb,OAJAyK,EAAQO,MAAM,cACdP,EAAQO,MAAM,oBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,oBACNqY,CACT,EAYA,SAASA,EAAKxjB,GACZ,OAAa,KAATA,GACFyK,EAAQO,MAAM,eACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,eACbV,EAAQU,KAAK,cACNoJ,GAEFsK,EAAI7e,EACb,CA6BA,SAASuU,EAAMvU,GAMb,OAAgB,KAATA,GAAe,2BAA4BggB,EAAKyB,OAAOhV,WAAaoS,EAAI7e,GAAQ0K,EAAG1K,EAC5F,CACF,EArFEwM,WAAYm5C,GAASn5C,Y,gBCGhB,MAAMu6C,GAAY,CACvB57B,KAAM,YACNvM,SA+HF,SAA2BnU,EAASC,GAClC,MAAMmZ,EAAmBnW,KAAK+T,OAAOhV,WAAWoX,iBAAiBD,KAC3DzR,EAAWzE,KAAKyE,SAChBmC,GAASvU,EAAAA,GAAAA,GAAkBoS,GAGjC,IAAI4D,EACJ,OAYA,SAAe/V,GAGb,OAFA+V,EAAS/V,EACTyK,EAAQO,MAAM,qBACP0c,EAAO1nB,EAChB,EAYA,SAAS0nB,EAAO1nB,GACd,GAAIA,IAAS+V,EAEX,OADAtL,EAAQS,QAAQlL,GACT0nB,EAET,MAAM5W,EAAQrG,EAAQU,KAAK,qBAGrBoJ,GAAQxU,EAAAA,GAAAA,GAAkBC,GAI1BwjB,GAAQjP,GAAmB,IAAVA,GAAeD,GAAUuP,EAAiB/W,SAAS9M,GACpE2nB,GAASrT,GAAqB,IAAXA,GAAgBC,GAASsP,EAAiB/W,SAASqF,GAG5E,OAFArB,EAAMwS,MAAQjV,QAAmB,KAAX0H,EAAgByN,EAAOA,IAASlP,IAAWqT,IACjE7W,EAAMyS,OAASlV,QAAmB,KAAX0H,EAAgB4R,EAAQA,IAAUpT,IAAUiP,IAC5D9Y,EAAG1K,EACZ,CACF,EAnLEwM,WASF,SAA6BE,EAAQC,GACnC,IAEI6W,EAEA2iC,EAEApuC,EAEAivC,EAEAC,EAEAC,EAEAxjC,EAEApd,EAhBAnD,GAAS,EAsBb,OAASA,EAAQuJ,EAAOpJ,QAEtB,GAAyB,UAArBoJ,EAAOvJ,GAAO,IAA4C,sBAA1BuJ,EAAOvJ,GAAO,GAAGwH,MAAgC+B,EAAOvJ,GAAO,GAAGogB,OAIpG,IAHAC,EAAOrgB,EAGAqgB,KAEL,GAAwB,SAApB9W,EAAO8W,GAAM,IAA0C,sBAAzB9W,EAAO8W,GAAM,GAAG7Y,MAAgC+B,EAAO8W,GAAM,GAAGF,OAElG3W,EAAQ6E,eAAe9E,EAAO8W,GAAM,IAAIxQ,WAAW,KAAOrG,EAAQ6E,eAAe9E,EAAOvJ,GAAO,IAAI6P,WAAW,GAAI,CAKhH,IAAKtG,EAAO8W,GAAM,GAAGD,QAAU7W,EAAOvJ,GAAO,GAAGmgB,SAAW5W,EAAOvJ,GAAO,GAAGiB,IAAIkC,OAASoG,EAAOvJ,GAAO,GAAGa,MAAMsC,QAAU,MAAQoG,EAAO8W,GAAM,GAAGpf,IAAIkC,OAASoG,EAAO8W,GAAM,GAAGxf,MAAMsC,OAASoG,EAAOvJ,GAAO,GAAGiB,IAAIkC,OAASoG,EAAOvJ,GAAO,GAAGa,MAAMsC,QAAU,GAC3P,SAIF4gD,EAAMx6C,EAAO8W,GAAM,GAAGpf,IAAIkC,OAASoG,EAAO8W,GAAM,GAAGxf,MAAMsC,OAAS,GAAKoG,EAAOvJ,GAAO,GAAGiB,IAAIkC,OAASoG,EAAOvJ,GAAO,GAAGa,MAAMsC,OAAS,EAAI,EAAI,EAC7I,MAAMtC,EAAQsa,OAAOC,OAAO,CAAC,EAAG7R,EAAO8W,GAAM,GAAGpf,KAC1CA,EAAMka,OAAOC,OAAO,CAAC,EAAG7R,EAAOvJ,GAAO,GAAGa,OAC/CmjD,GAAUnjD,GAAQkjD,GAClBC,GAAU/iD,EAAK8iD,GACfF,EAAkB,CAChBr8C,KAAMu8C,EAAM,EAAI,iBAAmB,mBACnCljD,QACAI,IAAKka,OAAOC,OAAO,CAAC,EAAG7R,EAAO8W,GAAM,GAAGpf,MAEzC6iD,EAAkB,CAChBt8C,KAAMu8C,EAAM,EAAI,iBAAmB,mBACnCljD,MAAOsa,OAAOC,OAAO,CAAC,EAAG7R,EAAOvJ,GAAO,GAAGa,OAC1CI,OAEF2T,EAAO,CACLpN,KAAMu8C,EAAM,EAAI,aAAe,eAC/BljD,MAAOsa,OAAOC,OAAO,CAAC,EAAG7R,EAAO8W,GAAM,GAAGpf,KACzCA,IAAKka,OAAOC,OAAO,CAAC,EAAG7R,EAAOvJ,GAAO,GAAGa,QAE1CmiD,EAAQ,CACNx7C,KAAMu8C,EAAM,EAAI,SAAW,WAC3BljD,MAAOsa,OAAOC,OAAO,CAAC,EAAGyoC,EAAgBhjD,OACzCI,IAAKka,OAAOC,OAAO,CAAC,EAAG0oC,EAAgB7iD,MAEzCsI,EAAO8W,GAAM,GAAGpf,IAAMka,OAAOC,OAAO,CAAC,EAAGyoC,EAAgBhjD,OACxD0I,EAAOvJ,GAAO,GAAGa,MAAQsa,OAAOC,OAAO,CAAC,EAAG0oC,EAAgB7iD,KAC3Dsf,EAAa,GAGThX,EAAO8W,GAAM,GAAGpf,IAAIkC,OAASoG,EAAO8W,GAAM,GAAGxf,MAAMsC,SACrDod,GAAatiB,EAAAA,GAAAA,GAAKsiB,EAAY,CAAC,CAAC,QAAShX,EAAO8W,GAAM,GAAI7W,GAAU,CAAC,OAAQD,EAAO8W,GAAM,GAAI7W,MAIhG+W,GAAatiB,EAAAA,GAAAA,GAAKsiB,EAAY,CAAC,CAAC,QAASyiC,EAAOx5C,GAAU,CAAC,QAASq6C,EAAiBr6C,GAAU,CAAC,OAAQq6C,EAAiBr6C,GAAU,CAAC,QAASoL,EAAMpL,KAKnJ+W,GAAatiB,EAAAA,GAAAA,GAAKsiB,GAAYlX,EAAAA,GAAAA,GAAWG,EAAQ8U,OAAOhV,WAAWkX,WAAWC,KAAMlX,EAAO5F,MAAM0c,EAAO,EAAGrgB,GAAQwJ,IAGnH+W,GAAatiB,EAAAA,GAAAA,GAAKsiB,EAAY,CAAC,CAAC,OAAQ3L,EAAMpL,GAAU,CAAC,QAASs6C,EAAiBt6C,GAAU,CAAC,OAAQs6C,EAAiBt6C,GAAU,CAAC,OAAQw5C,EAAOx5C,KAG7ID,EAAOvJ,GAAO,GAAGiB,IAAIkC,OAASoG,EAAOvJ,GAAO,GAAGa,MAAMsC,QACvDA,EAAS,EACTod,GAAatiB,EAAAA,GAAAA,GAAKsiB,EAAY,CAAC,CAAC,QAAShX,EAAOvJ,GAAO,GAAIwJ,GAAU,CAAC,OAAQD,EAAOvJ,GAAO,GAAIwJ,MAEhGrG,EAAS,GAEXjD,EAAAA,GAAAA,GAAOqJ,EAAQ8W,EAAO,EAAGrgB,EAAQqgB,EAAO,EAAGE,GAC3CvgB,EAAQqgB,EAAOE,EAAWpgB,OAASgD,EAAS,EAC5C,KACF,CAMNnD,GAAS,EACT,OAASA,EAAQuJ,EAAOpJ,QACQ,sBAA1BoJ,EAAOvJ,GAAO,GAAGwH,OACnB+B,EAAOvJ,GAAO,GAAGwH,KAAO,QAG5B,OAAO+B,CACT,GAuEA,SAASy6C,GAAU9U,EAAO/rC,GACxB+rC,EAAMh0B,QAAU/X,EAChB+rC,EAAM/rC,QAAUA,EAChB+rC,EAAMtwB,cAAgBzb,CACxB,CC7MO,MAAM8gD,GAAW,CACtBj8B,KAAM,WACNvM,SAOF,SAA0BnU,EAASC,EAAImU,GACrC,IAAIjc,EAAO,EACX,OAcA,SAAe5C,GAMb,OALAyK,EAAQO,MAAM,YACdP,EAAQO,MAAM,kBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,kBACbV,EAAQO,MAAM,oBACPwY,CACT,EAcA,SAASA,EAAKxjB,GACZ,OAAIoL,EAAAA,GAAAA,IAAWpL,IACbyK,EAAQS,QAAQlL,GACTqnD,GAEI,KAATrnD,EACK6e,EAAI7e,GAENsnD,EAAWtnD,EACpB,CAcA,SAASqnD,EAAmBrnD,GAE1B,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,IAAesL,EAAAA,GAAAA,IAAkBtL,IAEjE4C,EAAO,EACA2kD,EAAyBvnD,IAE3BsnD,EAAWtnD,EACpB,CAcA,SAASunD,EAAyBvnD,GAChC,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GAChB4C,EAAO,EACA4kD,IAIK,KAATxnD,GAAwB,KAATA,GAAwB,KAATA,IAAesL,EAAAA,GAAAA,IAAkBtL,KAAU4C,IAAS,IACrF6H,EAAQS,QAAQlL,GACTunD,IAET3kD,EAAO,EACA0kD,EAAWtnD,GACpB,CAYA,SAASwnD,EAAUxnD,GACjB,OAAa,KAATA,GACFyK,EAAQU,KAAK,oBACbV,EAAQO,MAAM,kBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,kBACbV,EAAQU,KAAK,YACNT,GAII,OAAT1K,GAA0B,KAATA,GAAwB,KAATA,IAAewL,EAAAA,GAAAA,IAAaxL,GACvD6e,EAAI7e,IAEbyK,EAAQS,QAAQlL,GACTwnD,EACT,CAYA,SAASF,EAAWtnD,GAClB,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACTynD,IAELl8C,EAAAA,GAAAA,IAAWvL,IACbyK,EAAQS,QAAQlL,GACTsnD,GAEFzoC,EAAI7e,EACb,CAYA,SAASynD,EAAiBznD,GACxB,OAAOsL,EAAAA,GAAAA,IAAkBtL,GAAQ0nD,EAAW1nD,GAAQ6e,EAAI7e,EAC1D,CAYA,SAAS0nD,EAAW1nD,GAClB,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GAChB4C,EAAO,EACA6kD,GAEI,KAATznD,GAEFyK,EAAQU,KAAK,oBAAoBR,KAAO,gBACxCF,EAAQO,MAAM,kBACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,kBACbV,EAAQU,KAAK,YACNT,GAEFi9C,EAAW3nD,EACpB,CAcA,SAAS2nD,EAAW3nD,GAElB,IAAc,KAATA,IAAesL,EAAAA,GAAAA,IAAkBtL,KAAU4C,IAAS,GAAI,CAC3D,MAAMgiB,EAAgB,KAAT5kB,EAAc2nD,EAAaD,EAExC,OADAj9C,EAAQS,QAAQlL,GACT4kB,CACT,CACA,OAAO/F,EAAI7e,EACb,CACF,GC1NO,MAAM4nD,GAAW,CACtBz8B,KAAM,WACNvM,SAOF,SAA0BnU,EAASC,EAAImU,GACrC,MAAMmB,EAAOtS,KAEb,IAAIqI,EAEA5S,EAEAy7C,EACJ,OAYA,SAAe5+C,GAIb,OAHAyK,EAAQO,MAAM,YACdP,EAAQO,MAAM,gBACdP,EAAQS,QAAQlL,GACTwjB,CACT,EAgBA,SAASA,EAAKxjB,GACZ,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACTwiD,GAEI,KAATxiD,GACFyK,EAAQS,QAAQlL,GACTyiD,GAEI,KAATziD,GACFyK,EAAQS,QAAQlL,GACT6nD,IAILz8C,EAAAA,GAAAA,IAAWpL,IACbyK,EAAQS,QAAQlL,GACT8nD,GAEFjpC,EAAI7e,EACb,CAgBA,SAASwiD,EAAgBxiD,GACvB,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACT2iD,GAEI,KAAT3iD,GACFyK,EAAQS,QAAQlL,GAChBmD,EAAQ,EACDy/C,IAELx3C,EAAAA,GAAAA,IAAWpL,IACbyK,EAAQS,QAAQlL,GACTiqB,GAEFpL,EAAI7e,EACb,CAYA,SAAS2iD,EAAkB3iD,GACzB,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACT+nD,GAEFlpC,EAAI7e,EACb,CAYA,SAASgoD,EAAQhoD,GACf,OAAa,OAATA,EACK6e,EAAI7e,GAEA,KAATA,GACFyK,EAAQS,QAAQlL,GACTioD,IAELr8C,EAAAA,GAAAA,IAAmB5L,IACrB4+C,EAAcoJ,EACPE,EAAiBloD,KAE1ByK,EAAQS,QAAQlL,GACTgoD,EACT,CAYA,SAASC,EAAajoD,GACpB,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACT+nD,GAEFC,EAAQhoD,EACjB,CAYA,SAAS+nD,EAAW/nD,GAClB,OAAgB,KAATA,EAAcoE,EAAIpE,GAAiB,KAATA,EAAcioD,EAAajoD,GAAQgoD,EAAQhoD,EAC9E,CAYA,SAAS4iD,EAAgB5iD,GACvB,MAAMqK,EAAQ,SACd,OAAIrK,IAASqK,EAAM2I,WAAW7P,MAC5BsH,EAAQS,QAAQlL,GACCqK,IAAVlH,EAAyBglD,EAAQvF,GAEnC/jC,EAAI7e,EACb,CAYA,SAASmoD,EAAMnoD,GACb,OAAa,OAATA,EACK6e,EAAI7e,GAEA,KAATA,GACFyK,EAAQS,QAAQlL,GACTooD,IAELx8C,EAAAA,GAAAA,IAAmB5L,IACrB4+C,EAAcuJ,EACPD,EAAiBloD,KAE1ByK,EAAQS,QAAQlL,GACTmoD,EACT,CAYA,SAASC,EAAWpoD,GAClB,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACTqoD,GAEFF,EAAMnoD,EACf,CAYA,SAASqoD,EAASroD,GAChB,OAAa,KAATA,EACKoE,EAAIpE,GAEA,KAATA,GACFyK,EAAQS,QAAQlL,GACTqoD,GAEFF,EAAMnoD,EACf,CAYA,SAASiqB,EAAYjqB,GACnB,OAAa,OAATA,GAA0B,KAATA,EACZoE,EAAIpE,IAET4L,EAAAA,GAAAA,IAAmB5L,IACrB4+C,EAAc30B,EACPi+B,EAAiBloD,KAE1ByK,EAAQS,QAAQlL,GACTiqB,EACT,CAYA,SAAS49B,EAAY7nD,GACnB,OAAa,OAATA,EACK6e,EAAI7e,GAEA,KAATA,GACFyK,EAAQS,QAAQlL,GACTsoD,IAEL18C,EAAAA,GAAAA,IAAmB5L,IACrB4+C,EAAciJ,EACPK,EAAiBloD,KAE1ByK,EAAQS,QAAQlL,GACT6nD,EACT,CAYA,SAASS,EAAiBtoD,GACxB,OAAgB,KAATA,EAAcoE,EAAIpE,GAAQ6nD,EAAY7nD,EAC/C,CAYA,SAASyiD,EAAcziD,GAErB,OAAIoL,EAAAA,GAAAA,IAAWpL,IACbyK,EAAQS,QAAQlL,GACTuoD,GAEF1pC,EAAI7e,EACb,CAYA,SAASuoD,EAASvoD,GAEhB,OAAa,KAATA,IAAesL,EAAAA,GAAAA,IAAkBtL,IACnCyK,EAAQS,QAAQlL,GACTuoD,GAEFC,EAAgBxoD,EACzB,CAYA,SAASwoD,EAAgBxoD,GACvB,OAAI4L,EAAAA,GAAAA,IAAmB5L,IACrB4+C,EAAc4J,EACPN,EAAiBloD,KAEtB+K,EAAAA,GAAAA,IAAc/K,IAChByK,EAAQS,QAAQlL,GACTwoD,GAEFpkD,EAAIpE,EACb,CAYA,SAAS8nD,EAAQ9nD,GAEf,OAAa,KAATA,IAAesL,EAAAA,GAAAA,IAAkBtL,IACnCyK,EAAQS,QAAQlL,GACT8nD,GAEI,KAAT9nD,GAAwB,KAATA,IAAeC,EAAAA,GAAAA,IAA0BD,GACnDyoD,EAAezoD,GAEjB6e,EAAI7e,EACb,CAYA,SAASyoD,EAAezoD,GACtB,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACToE,GAII,KAATpE,GAAwB,KAATA,IAAeoL,EAAAA,GAAAA,IAAWpL,IAC3CyK,EAAQS,QAAQlL,GACT0oD,IAEL98C,EAAAA,GAAAA,IAAmB5L,IACrB4+C,EAAc6J,EACPP,EAAiBloD,KAEtB+K,EAAAA,GAAAA,IAAc/K,IAChByK,EAAQS,QAAQlL,GACTyoD,GAEFrkD,EAAIpE,EACb,CAYA,SAAS0oD,EAAqB1oD,GAE5B,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,IAAesL,EAAAA,GAAAA,IAAkBtL,IAChFyK,EAAQS,QAAQlL,GACT0oD,GAEFC,EAA0B3oD,EACnC,CAaA,SAAS2oD,EAA0B3oD,GACjC,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GACT4oD,IAELh9C,EAAAA,GAAAA,IAAmB5L,IACrB4+C,EAAc+J,EACPT,EAAiBloD,KAEtB+K,EAAAA,GAAAA,IAAc/K,IAChByK,EAAQS,QAAQlL,GACT2oD,GAEFF,EAAezoD,EACxB,CAaA,SAAS4oD,EAA4B5oD,GACnC,OAAa,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzD6e,EAAI7e,GAEA,KAATA,GAAwB,KAATA,GACjByK,EAAQS,QAAQlL,GAChB+V,EAAS/V,EACF6oD,IAELj9C,EAAAA,GAAAA,IAAmB5L,IACrB4+C,EAAcgK,EACPV,EAAiBloD,KAEtB+K,EAAAA,GAAAA,IAAc/K,IAChByK,EAAQS,QAAQlL,GACT4oD,IAETn+C,EAAQS,QAAQlL,GACT8oD,EACT,CAYA,SAASD,EAA4B7oD,GACnC,OAAIA,IAAS+V,GACXtL,EAAQS,QAAQlL,GAChB+V,OAAS/S,EACF+lD,GAEI,OAAT/oD,EACK6e,EAAI7e,IAET4L,EAAAA,GAAAA,IAAmB5L,IACrB4+C,EAAciK,EACPX,EAAiBloD,KAE1ByK,EAAQS,QAAQlL,GACT6oD,EACT,CAYA,SAASC,EAA8B9oD,GACrC,OAAa,OAATA,GAA0B,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACxE6e,EAAI7e,GAEA,KAATA,GAAwB,KAATA,IAAeC,EAAAA,GAAAA,IAA0BD,GACnDyoD,EAAezoD,IAExByK,EAAQS,QAAQlL,GACT8oD,EACT,CAaA,SAASC,EAAiC/oD,GACxC,OAAa,KAATA,GAAwB,KAATA,IAAeC,EAAAA,GAAAA,IAA0BD,GACnDyoD,EAAezoD,GAEjB6e,EAAI7e,EACb,CAYA,SAASoE,EAAIpE,GACX,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,gBACbV,EAAQU,KAAK,YACNT,GAEFmU,EAAI7e,EACb,CAgBA,SAASkoD,EAAiBloD,GAKxB,OAJAyK,EAAQU,KAAK,gBACbV,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,cACN69C,CACT,CAgBA,SAASA,EAAgBhpD,GAGvB,OAAO+K,EAAAA,GAAAA,IAAc/K,IAAQwK,EAAAA,GAAAA,GAAaC,EAASw+C,EAAuB,aAAcjpC,EAAKyB,OAAOhV,WAAW8Y,QAAQ3B,KAAK9W,SAAS,qBAAkB9J,EAAY,EAAtIwH,CAAyIxK,GAAQipD,EAAsBjpD,EACtM,CAgBA,SAASipD,EAAsBjpD,GAE7B,OADAyK,EAAQO,MAAM,gBACP4zC,EAAY5+C,EACrB,CACF,GCxpBO,MAAMkpD,GAAiB,CAC5B/9B,KAAM,iBACNvM,SAQF,SAAgCnU,EAASC,EAAImU,GAC3C,MAAMmB,EAAOtS,KACb,OAYA,SAAe1N,GAMb,OALAyK,EAAQO,MAAM,aACdP,EAAQO,MAAM,eACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,eACbV,EAAQU,KAAK,aACNoJ,CACT,EAGA,SAASA,EAAMvU,GAKb,OAAgB,KAATA,GAAe,2BAA4BggB,EAAKyB,OAAOhV,WAAaoS,EAAI7e,GAAQ0K,EAAG1K,EAC5F,CACF,EAtCEwM,WAAYm5C,GAASn5C,YCJhB,MAAM28C,GAAkB,CAC7Bh+B,KAAM,kBACNvM,SAOF,SAAiCnU,EAASC,EAAImU,GAC5C,OAaA,SAAe7e,GAGb,OAFAyK,EAAQO,MAAM,mBACdP,EAAQS,QAAQlL,GACTuU,CACT,EAaA,SAASA,EAAMvU,GACb,OAAI4L,EAAAA,GAAAA,IAAmB5L,IACrByK,EAAQU,KAAK,mBACNT,EAAG1K,IAEL6e,EAAI7e,EACb,CACF,GC5CO,MAAMopB,GAAW,CACtB+B,KAAM,WACNvM,SAmEF,SAA0BnU,EAASC,EAAImU,GAErC,IAEIjc,EAEAkO,EAJAyO,EAAW,EAKf,OAcA,SAAevf,GAGb,OAFAyK,EAAQO,MAAM,YACdP,EAAQO,MAAM,oBACPg3C,EAAahiD,EACtB,EAYA,SAASgiD,EAAahiD,GACpB,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GAChBuf,IACOyiC,IAETv3C,EAAQU,KAAK,oBACNi+C,EAAQppD,GACjB,CAYA,SAASopD,EAAQppD,GAEf,OAAa,OAATA,EACK6e,EAAI7e,GAMA,KAATA,GACFyK,EAAQO,MAAM,SACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,SACNi+C,GAII,KAATppD,GACF8Q,EAAQrG,EAAQO,MAAM,oBACtBpI,EAAO,EACA6hD,EAAczkD,KAEnB4L,EAAAA,GAAAA,IAAmB5L,IACrByK,EAAQO,MAAM,cACdP,EAAQS,QAAQlL,GAChByK,EAAQU,KAAK,cACNi+C,IAIT3+C,EAAQO,MAAM,gBACPsG,EAAKtR,GACd,CAYA,SAASsR,EAAKtR,GACZ,OAAa,OAATA,GAA0B,KAATA,GAAwB,KAATA,IAAe4L,EAAAA,GAAAA,IAAmB5L,IACpEyK,EAAQU,KAAK,gBACNi+C,EAAQppD,KAEjByK,EAAQS,QAAQlL,GACTsR,EACT,CAYA,SAASmzC,EAAczkD,GAErB,OAAa,KAATA,GACFyK,EAAQS,QAAQlL,GAChB4C,IACO6hD,GAIL7hD,IAAS2c,GACX9U,EAAQU,KAAK,oBACbV,EAAQU,KAAK,YACNT,EAAG1K,KAIZ8Q,EAAMnG,KAAO,eACN2G,EAAKtR,GACd,CACF,EA7ME6M,QAMF,SAAyBH,GACvB,IAGIvJ,EAEA6H,EALAq+C,EAAgB38C,EAAOpJ,OAAS,EAChCgmD,EAAiB,EAOrB,IAAwC,eAAnC58C,EAAO48C,GAAgB,GAAG3+C,MAA4D,UAAnC+B,EAAO48C,GAAgB,GAAG3+C,QAAwD,eAAlC+B,EAAO28C,GAAe,GAAG1+C,MAA2D,UAAlC+B,EAAO28C,GAAe,GAAG1+C,MAIjL,IAHAxH,EAAQmmD,IAGCnmD,EAAQkmD,GACf,GAA8B,iBAA1B38C,EAAOvJ,GAAO,GAAGwH,KAAyB,CAE5C+B,EAAO48C,GAAgB,GAAG3+C,KAAO,kBACjC+B,EAAO28C,GAAe,GAAG1+C,KAAO,kBAChC2+C,GAAkB,EAClBD,GAAiB,EACjB,KACF,CAKJlmD,EAAQmmD,EAAiB,EACzBD,IACA,OAASlmD,GAASkmD,QACFrmD,IAAVgI,EACE7H,IAAUkmD,GAA2C,eAA1B38C,EAAOvJ,GAAO,GAAGwH,OAC9CK,EAAQ7H,GAEDA,IAAUkmD,GAA2C,eAA1B38C,EAAOvJ,GAAO,GAAGwH,OACrD+B,EAAO1B,GAAO,GAAGL,KAAO,eACpBxH,IAAU6H,EAAQ,IACpB0B,EAAO1B,GAAO,GAAG5G,IAAMsI,EAAOvJ,EAAQ,GAAG,GAAGiB,IAC5CsI,EAAOrJ,OAAO2H,EAAQ,EAAG7H,EAAQ6H,EAAQ,GACzCq+C,GAAiBlmD,EAAQ6H,EAAQ,EACjC7H,EAAQ6H,EAAQ,GAElBA,OAAQhI,GAGZ,OAAO0J,CACT,EAlDEyF,SAwDF,SAAkBnS,GAEhB,OAAgB,KAATA,GAA+D,oBAAhD0N,KAAKhB,OAAOgB,KAAKhB,OAAOpJ,OAAS,GAAG,GAAGqH,IAC/D,GC9CO,MAAMwd,GAAW,CACtB,GAAMlc,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMm0C,IAIK/F,GAAiB,CAC5B,GAAMhhC,IAIKgjC,GAAc,CACzB,EAAE,GAAIuF,GACN,EAAE,GAAIA,GACN,GAAMA,IAIKt5B,GAAO,CAClB,GAAMy5B,GACN,GAAMhnC,GACN,GAAM,CAACmnC,GAAiBnnC,IACxB,GAAMsnC,GACN,GAAMH,GACN,GAAMnnC,GACN,GAAMspC,GACN,IAAOA,IAII5zC,GAAS,CACpB,GAAM40C,GACN,GAAMI,IAIK1tC,GAAO,CAClB,EAAE,GAAI2tC,GACN,EAAE,GAAIA,GACN,EAAE,GAAIA,GACN,GAAMoB,GACN,GAAMzB,GACN,GAAM0B,GACN,GAAM,CAACK,GAAUQ,IACjB,GAAMsB,GACN,GAAM,CAACC,GAAiB1D,IACxB,GAAME,GACN,GAAMoB,GACN,GAAM39B,IAIKzF,GAAa,CACxBC,KAAM,CAACmjC,GAAWwC,KAIP1lC,GAAmB,CAC9BD,KAAM,CAAC,GAAI,KAIA2B,GAAU,CACrB3B,KAAM,ICzFR,MAAM4lC,GAAS,cCDR,SAASC,GAAgCp/C,EAAOq/C,GACrD,MAAM1pD,EAAO6K,OAAO8+C,SAASt/C,EAAOq/C,GACpC,OAEA1pD,EAAO,GAAc,KAATA,GAAeA,EAAO,IAAMA,EAAO,IAE/CA,EAAO,KAAOA,EAAO,KAErBA,EAAO,OAAUA,EAAO,OAExBA,EAAO,OAAUA,EAAO,OACJ,SAAZ,MAAPA,IAAiD,SAAZ,MAAPA,IAE/BA,EAAO,QACE,SAEF+L,OAAOwU,cAAcvgB,EAC9B,CC7BA,MAAM4pD,GACJ,oEAwBF,SAASC,GAAOluC,EAAIC,EAAIkuC,GACtB,GAAIluC,EAEF,OAAOA,EAKT,GAAa,KADAkuC,EAAG92C,WAAW,GACV,CACf,MAAMkL,EAAO4rC,EAAG92C,WAAW,GACrB+2C,EAAe,MAAT7rC,GAAyB,KAATA,EAC5B,OAAOurC,GAAgCK,EAAGhjD,MAAMijD,EAAM,EAAI,GAAIA,EAAM,GAAK,GAC3E,CACA,OAAO3E,GAA8B0E,IAAOnuC,CAC9C,CCqGA,MAAMqR,GAAM,CAAC,EAAEtC,eAyBR,SAASs/B,GAAa3/C,EAAO4/C,EAAUv7C,GAK5C,MAJwB,kBAAbu7C,IACTv7C,EAAUu7C,EACVA,OAAWjnD,GAUf,SAAkB0L,GAEhB,MAAMwC,EAAS,CACbsX,WAAY,GACZS,eAAgB,CAAC,WAAY,WAAY,UAAW,YAAa,UACjEje,MAAO,CACLo8C,SAAU8C,EAAOryC,IACjB1G,iBAAkBg5C,EAClBz4C,cAAey4C,EACfC,WAAYF,EAAO5wC,GACnB8mC,WAAY8J,EAAO9J,GACnBqF,gBAAiB0E,EACjB9E,mBAAoB8E,EACpB9F,WAAY6F,EAAOG,GACnBC,oBAAqBl3C,EACrBm3C,oBAAqBn3C,EACrBwuC,aAAcsI,EAAOG,EAAUj3C,GAC/BgW,SAAU8gC,EAAO9gC,EAAUhW,GAC3Bo3C,aAAcL,EACd74C,KAAM64C,EACNM,cAAeN,EACf9wC,WAAY6wC,EAAO7wC,GACnBqxC,4BAA6Bt3C,EAC7Bu3C,sBAAuBv3C,EACvBw3C,sBAAuBx3C,EACvB6C,SAAUi0C,EAAOj0C,GACjBkzC,gBAAiBe,EAAOx0C,GACxBm1C,kBAAmBX,EAAOx0C,GAC1B2sC,SAAU6H,EAAOpzC,GAAM1D,GACvB03C,aAAcX,EACdvC,SAAUsC,EAAOpzC,GAAM1D,GACvB23C,aAAcZ,EACdpzC,MAAOmzC,EAAOnzC,IACdjE,MAAOM,EACPyE,KAAMqyC,EAAOryC,IACbwC,SAAU6vC,EAAO7vC,IACjB2wC,cAAeC,EACfC,YAAahB,EAAOj+C,GAAMk/C,GAC1BC,cAAelB,EAAOj+C,IACtB2O,UAAWsvC,EAAOtvC,IAClBxD,UAAWi0C,EACXC,gBAAiBl4C,EACjBm4C,0BAA2Bn4C,EAC3Bo4C,oBAAqBp4C,EACrBq4C,cAAevB,EAAO5wC,GACtBjB,OAAQ6xC,EAAO7xC,IACf0C,cAAemvC,EAAOnvC,KAExB5P,KAAM,CACJi/C,WAAYsB,IACZC,mBAAoBC,EACpBxE,SAAUsE,IACVh6C,cAAem6C,EACf16C,iBAAkB26C,EAClB1L,WAAYsL,IACZK,qBAAsBC,EACtBC,oCAAqCC,EACrCC,gCAAiCD,EACjCE,wBAAyBC,EACzBhH,mBAAoBiH,EACpBjI,WAAYqH,EAAOa,GACnBC,gBAAiBC,EACjBnC,oBAAqBoC,EACrBnC,oBAAqBoC,EACrBlC,cAAeuB,EACfpK,aAAc8J,EAAOkB,GACrBxjC,SAAUsiC,EAAOmB,GACjBrC,aAAcwB,EACd16C,KAAM06C,EACN3yC,WAAYqyC,IACZhB,4BAA6BoC,EAC7BnC,sBAAuBoC,EACvBnC,sBAAuBoC,EACvB/2C,SAAUy1C,IACVvC,gBAAiBuC,EAAOuB,GACxBpC,kBAAmBa,EAAOuB,GAC1B5K,SAAUqJ,EAAOwB,GACjBpC,aAAckB,EACdpE,SAAU8D,EAAOyB,GACjBpC,aAAciB,EACdj1C,MAAO20C,EAAO0B,GACdt6C,MAAOu6C,EACPC,UAAWC,EACX7H,WAAY8H,EACZ31C,KAAM6zC,EAAO+B,GACbpzC,SAAUqxC,IACVR,YAAaQ,IACbN,cAAeM,IACf9wC,UAAW8wC,IACXJ,gBAAiBoC,EACjBnC,0BAA2BoC,EAC3BnC,oBAAqBoC,EACrBlf,SAAUmf,EACVpC,cAAeC,EAAOoC,GACtBC,0BAA2BC,EAC3BC,kBAAmBC,EACnB71C,OAAQqzC,IACR3wC,cAAe2wC,MAGnByC,GAAUj9C,GAASxC,GAAW,CAAC,GAAG0/C,iBAAmB,IAGrD,MAAM98C,EAAO,CAAC,EACd,OAAO+8C,EAUP,SAASA,EAAQ3hD,GAEf,IAAI+B,EAAO,CACT9D,KAAM,OACN+E,SAAU,IAGZ,MAAM/C,EAAU,CACd0D,MAAO,CAAC5B,GACR6/C,WAAY,GACZp9C,SACAlG,QACAG,OACAiI,SACAE,SACAhC,QAGIi9C,EAAY,GAClB,IAAIprD,GAAS,EACb,OAASA,EAAQuJ,EAAOpJ,QAGtB,GAA8B,gBAA1BoJ,EAAOvJ,GAAO,GAAGwH,MAAoD,kBAA1B+B,EAAOvJ,GAAO,GAAGwH,KAC9D,GAAyB,UAArB+B,EAAOvJ,GAAO,GAChBorD,EAAUntD,KAAK+B,OACV,CAELA,EAAQqrD,EAAY9hD,EADP6hD,EAAUjqC,MACWnhB,EACpC,CAIJ,IADAA,GAAS,IACAA,EAAQuJ,EAAOpJ,QAAQ,CAC9B,MAAMiN,EAAUW,EAAOxE,EAAOvJ,GAAO,IACjC6pB,GAAIze,KAAKgC,EAAS7D,EAAOvJ,GAAO,GAAGwH,OACrC4F,EAAQ7D,EAAOvJ,GAAO,GAAGwH,MAAM4D,KAAK+P,OAAOC,OAAO,CAChD/M,eAAgB9E,EAAOvJ,GAAO,GAAGqO,gBAChC7E,GAAUD,EAAOvJ,GAAO,GAE/B,CAGA,GAAIwJ,EAAQ2hD,WAAWhrD,OAAS,EAAG,CACjC,MAAMge,EAAO3U,EAAQ2hD,WAAW3hD,EAAQ2hD,WAAWhrD,OAAS,IAC5Cge,EAAK,IAAMmtC,IACnBlgD,KAAK5B,OAAS3J,EAAWse,EAAK,GACxC,CAkBA,IAfA7S,EAAKyB,SAAW,CACdlM,MAAOquC,GAAM3lC,EAAOpJ,OAAS,EAAIoJ,EAAO,GAAG,GAAG1I,MAAQ,CACpD6Q,KAAM,EACNwJ,OAAQ,EACR/X,OAAQ,IAEVlC,IAAKiuC,GAAM3lC,EAAOpJ,OAAS,EAAIoJ,EAAOA,EAAOpJ,OAAS,GAAG,GAAGc,IAAM,CAChEyQ,KAAM,EACNwJ,OAAQ,EACR/X,OAAQ,KAKZnD,GAAS,IACAA,EAAQ+N,EAAOsX,WAAWllB,QACjCmL,EAAOyC,EAAOsX,WAAWrlB,GAAOsL,IAASA,EAE3C,OAAOA,CACT,CAQA,SAAS+/C,EAAY9hD,EAAQ1I,EAAOV,GAClC,IAII+W,EAEA6+B,EAEAwV,EAEA/O,EAVAx8C,EAAQa,EAAQ,EAChB2qD,GAAoB,EACpBC,GAAa,EASjB,OAASzrD,GAASG,GAAQ,CACxB,MAAMiE,EAAQmF,EAAOvJ,GACrB,OAAQoE,EAAM,GAAGoD,MACf,IAAK,gBACL,IAAK,cACL,IAAK,aAEgB,UAAbpD,EAAM,GACRonD,IAEAA,IAEFhP,OAAW38C,EACX,MAEJ,IAAK,kBAEgB,UAAbuE,EAAM,MACJ8S,GAAaslC,GAAagP,GAAqBD,IACjDA,EAAsBvrD,GAExBw8C,OAAW38C,GAEb,MAEJ,IAAK,aACL,IAAK,gBACL,IAAK,iBACL,IAAK,iBACL,IAAK,2BAID,MAEJ,QAEI28C,OAAW38C,EAGjB,IAAK2rD,GAAiC,UAAbpnD,EAAM,IAAoC,mBAAlBA,EAAM,GAAGoD,OAAmD,IAAtBgkD,GAAwC,SAAbpnD,EAAM,KAAoC,kBAAlBA,EAAM,GAAGoD,MAA8C,gBAAlBpD,EAAM,GAAGoD,MAAyB,CAC/M,GAAI0P,EAAU,CACZ,IAAIw0C,EAAY1rD,EAEhB,IADA+1C,OAAYl2C,EACL6rD,KAAa,CAClB,MAAMC,EAAYpiD,EAAOmiD,GACzB,GAA0B,eAAtBC,EAAU,GAAGnkD,MAA+C,oBAAtBmkD,EAAU,GAAGnkD,KAA4B,CACjF,GAAqB,SAAjBmkD,EAAU,GAAe,SACzB5V,IACFxsC,EAAOwsC,GAAW,GAAGvuC,KAAO,kBAC5BikD,GAAa,GAEfE,EAAU,GAAGnkD,KAAO,aACpBuuC,EAAY2V,CACd,MAAO,GAA0B,eAAtBC,EAAU,GAAGnkD,MAA+C,qBAAtBmkD,EAAU,GAAGnkD,MAAqD,+BAAtBmkD,EAAU,GAAGnkD,MAA+D,qBAAtBmkD,EAAU,GAAGnkD,MAAqD,mBAAtBmkD,EAAU,GAAGnkD,KAG1M,KAEJ,CACI+jD,KAAyBxV,GAAawV,EAAsBxV,KAC9D7+B,EAAS00C,SAAU,GAIrB10C,EAASjW,IAAMka,OAAOC,OAAO,CAAC,EAAG26B,EAAYxsC,EAAOwsC,GAAW,GAAGl1C,MAAQuD,EAAM,GAAGnD,KACnFsI,EAAOrJ,OAAO61C,GAAa/1C,EAAO,EAAG,CAAC,OAAQkX,EAAU9S,EAAM,KAC9DpE,IACAG,GACF,CAGA,GAAsB,mBAAlBiE,EAAM,GAAGoD,KAA2B,CAEtC,MAAMpC,EAAO,CACXoC,KAAM,WACNokD,SAAS,EACT/qD,MAAOsa,OAAOC,OAAO,CAAC,EAAGhX,EAAM,GAAGvD,OAElCI,SAAKpB,GAEPqX,EAAW9R,EACXmE,EAAOrJ,OAAOF,EAAO,EAAG,CAAC,QAASoF,EAAMhB,EAAM,KAC9CpE,IACAG,IACAorD,OAAsB1rD,EACtB28C,GAAW,CACb,CACF,CACF,CAEA,OADAjzC,EAAO1I,GAAO,GAAG+qD,QAAUH,EACpBtrD,CACT,CAYA,SAAS4mD,EAAOj9B,EAAQ+hC,GACtB,OAAOxrC,EAOP,SAASA,EAAK1S,GACZ9F,EAAMuD,KAAKb,KAAMuf,EAAOnc,GAAQA,GAC5Bk+C,GAAKA,EAAIzgD,KAAKb,KAAMoD,EAC1B,CACF,CAMA,SAASsC,IACP1F,KAAK2C,MAAMjP,KAAK,CACduJ,KAAM,WACN+E,SAAU,IAEd,CAcA,SAAS1E,EAAMpK,EAAMkQ,EAAOm+C,GACXvhD,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GAEtBoM,SACftO,KAAKR,GACd8M,KAAK2C,MAAMjP,KAAKR,GAChB8M,KAAK4gD,WAAWltD,KAAK,CAAC0P,EAAOm+C,IAC7BruD,EAAKsP,SAAW,CACdlM,MAAOquC,GAAMvhC,EAAM9M,OAEnBI,SAAKpB,EAET,CAUA,SAAS0oD,EAAOsD,GACd,OAAOrnC,EAOP,SAASA,EAAM7W,GACTk+C,GAAKA,EAAIzgD,KAAKb,KAAMoD,GACxB3F,EAAKoD,KAAKb,KAAMoD,EAClB,CACF,CAYA,SAAS3F,EAAK2F,EAAOo+C,GACnB,MAAMtuD,EAAO8M,KAAK2C,MAAMiU,MAClBd,EAAO9V,KAAK4gD,WAAWhqC,MAC7B,IAAKd,EACH,MAAM,IAAItV,MAAM,iBAAmB4C,EAAMnG,KAAO,MAAQ4nC,EAAkB,CACxEvuC,MAAO8M,EAAM9M,MACbI,IAAK0M,EAAM1M,MACR,yBACA,GAAIof,EAAK,GAAG7Y,OAASmG,EAAMnG,KAChC,GAAIukD,EACFA,EAAY3gD,KAAKb,KAAMoD,EAAO0S,EAAK,QAC9B,EACWA,EAAK,IAAMirC,IACnBlgD,KAAKb,KAAMoD,EAAO0S,EAAK,GACjC,CAEF5iB,EAAKsP,SAAS9L,IAAMiuC,GAAMvhC,EAAM1M,IAClC,CAMA,SAASkP,IACP,OAAOsD,EAAAA,GAAAA,GAASlJ,KAAK2C,MAAMiU,MAC7B,CAUA,SAAS6mC,IACPz9C,KAAK4D,KAAK69C,6BAA8B,CAC1C,CAMA,SAASlE,EAAqBn6C,GAC5B,GAAIpD,KAAK4D,KAAK69C,4BAA6B,CACxBzhD,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GACvCU,MAAQ6G,OAAO8+C,SAASj8C,KAAK8D,eAAeV,GAAQ,IAC7DpD,KAAK4D,KAAK69C,iCAA8BnsD,CAC1C,CACF,CAMA,SAAS0pD,IACP,MAAMp7C,EAAO5D,KAAK4F,SACL5F,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GACvCuV,KAAOvH,CACd,CAMA,SAASq7C,IACP,MAAMr7C,EAAO5D,KAAK4F,SACL5F,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GACvC8V,KAAO9H,CACd,CAMA,SAASm7C,IAEH/+C,KAAK4D,KAAK89C,iBACd1hD,KAAK0F,SACL1F,KAAK4D,KAAK89C,gBAAiB,EAC7B,CAMA,SAAS7C,IACP,MAAMj7C,EAAO5D,KAAK4F,SACL5F,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GACvC+G,MAAQiH,EAAK1B,QAAQ,2BAA4B,IACtDlC,KAAK4D,KAAK89C,oBAAiBpsD,CAC7B,CAMA,SAAS4pD,IACP,MAAMt7C,EAAO5D,KAAK4F,SACL5F,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GACvC+G,MAAQiH,EAAK1B,QAAQ,eAAgB,GAC5C,CAMA,SAASm9C,EAA4Bj8C,GACnC,MAAMgC,EAAQpF,KAAK4F,SACb1S,EAAO8M,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GAC5C1C,EAAKkS,MAAQA,EACblS,EAAKsS,YAAaK,EAAAA,GAAAA,GAAoB7F,KAAK8D,eAAeV,IAAQ0C,aACpE,CAMA,SAASw5C,IACP,MAAM17C,EAAO5D,KAAK4F,SACL5F,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GACvCyN,MAAQO,CACf,CAMA,SAASw7C,IACP,MAAMx7C,EAAO5D,KAAK4F,SACL5F,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GACvC0N,IAAMM,CACb,CAMA,SAASs6C,EAAyB96C,GAChC,MAAMlQ,EAAO8M,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GAC5C,IAAK1C,EAAK+V,MAAO,CACf,MAAMA,EAAQjJ,KAAK8D,eAAeV,GAAOxN,OACzC1C,EAAK+V,MAAQA,CACf,CACF,CAMA,SAASu3C,IACPxgD,KAAK4D,KAAK+9C,8BAA+B,CAC3C,CAMA,SAASrB,EAAgCl9C,GAC1BpD,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GACvCqT,MAAsD,KAA9CjJ,KAAK8D,eAAeV,GAAOyE,YAAY,GAAY,EAAI,CACtE,CAMA,SAASu4C,IACPpgD,KAAK4D,KAAK+9C,kCAA+BrsD,CAC3C,CAOA,SAASmnD,EAAYr5C,GACnB,MAEMrB,EAFO/B,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GAEtBoM,SACtB,IAAI4R,EAAO7R,EAASA,EAASnM,OAAS,GACjCge,GAAsB,SAAdA,EAAK3W,OAEhB2W,EAAOvJ,KACPuJ,EAAKpR,SAAW,CACdlM,MAAOquC,GAAMvhC,EAAM9M,OAEnBI,SAAKpB,GAEPyM,EAASrO,KAAKkgB,IAEhB5T,KAAK2C,MAAMjP,KAAKkgB,EAClB,CAOA,SAAS0qC,EAAWl7C,GAClB,MAAMwQ,EAAO5T,KAAK2C,MAAMiU,MACxBhD,EAAKjX,OAASqD,KAAK8D,eAAeV,GAClCwQ,EAAKpR,SAAS9L,IAAMiuC,GAAMvhC,EAAM1M,IAClC,CAOA,SAASopD,EAAiB18C,GACxB,MAAMnE,EAAUe,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GAE/C,GAAIoK,KAAK4D,KAAKg+C,YAAa,CAIzB,OAHa3iD,EAAQ+C,SAAS/C,EAAQ+C,SAASpM,OAAS,GACnD4M,SAAS9L,IAAMiuC,GAAMvhC,EAAM1M,UAChCsJ,KAAK4D,KAAKg+C,iBAActsD,EAE1B,EACK0K,KAAK4D,KAAK+9C,8BAAgCn+C,EAAO+X,eAAenc,SAASH,EAAQhC,QACpFw/C,EAAY57C,KAAKb,KAAMoD,GACvBk7C,EAAWz9C,KAAKb,KAAMoD,GAE1B,CAOA,SAASm8C,IACPv/C,KAAK4D,KAAKg+C,aAAc,CAC1B,CAOA,SAASpC,IACP,MAAM57C,EAAO5D,KAAK4F,SACL5F,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GACvC+G,MAAQiH,CACf,CAOA,SAAS67C,IACP,MAAM77C,EAAO5D,KAAK4F,SACL5F,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GACvC+G,MAAQiH,CACf,CAOA,SAASu7C,IACP,MAAMv7C,EAAO5D,KAAK4F,SACL5F,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GACvC+G,MAAQiH,CACf,CAOA,SAASm8C,IACP,MAAM7sD,EAAO8M,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GAK5C,GAAIoK,KAAK4D,KAAKi+C,YAAa,CAEzB,MAAMp4C,EAAgBzJ,KAAK4D,KAAK6F,eAAiB,WACjDvW,EAAK+J,MAAQ,YAEb/J,EAAKuW,cAAgBA,SAEdvW,EAAKoQ,WACLpQ,EAAKmQ,KACd,aAESnQ,EAAKsS,kBAELtS,EAAKkS,MAEdpF,KAAK4D,KAAK6F,mBAAgBnU,CAC5B,CAOA,SAASoqD,IACP,MAAMxsD,EAAO8M,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GAK5C,GAAIoK,KAAK4D,KAAKi+C,YAAa,CAEzB,MAAMp4C,EAAgBzJ,KAAK4D,KAAK6F,eAAiB,WACjDvW,EAAK+J,MAAQ,YAEb/J,EAAKuW,cAAgBA,SAEdvW,EAAKoQ,WACLpQ,EAAKmQ,KACd,aAESnQ,EAAKsS,kBAELtS,EAAKkS,MAEdpF,KAAK4D,KAAK6F,mBAAgBnU,CAC5B,CAOA,SAASuqD,EAAgBz8C,GACvB,MAAML,EAAS/C,KAAK8D,eAAeV,GAC7B0+C,EAAW9hD,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GAGhDksD,EAAS18C,MDx3BN,SAAsBzI,GAC3B,OAAOA,EAAMuF,QAAQg6C,GAA4BC,GACnD,CCs3BqB4F,CAAah/C,GAE9B++C,EAASt8C,YAAaK,EAAAA,GAAAA,GAAoB9C,GAAQ+C,aACpD,CAOA,SAAS65C,IACP,MAAMqC,EAAWhiD,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GAC1C+G,EAAQqD,KAAK4F,SACb1S,EAAO8M,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GAG5C,GADAoK,KAAK4D,KAAKi+C,aAAc,EACN,SAAd3uD,EAAK+J,KAAiB,CAExB,MAAM+E,EAAWggD,EAAShgD,SAC1B9O,EAAK8O,SAAWA,CAClB,MACE9O,EAAKqW,IAAM5M,CAEf,CAOA,SAASsjD,IACP,MAAMr8C,EAAO5D,KAAK4F,SACL5F,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GACvC0N,IAAMM,CACb,CAOA,SAASs8C,IACP,MAAMt8C,EAAO5D,KAAK4F,SACL5F,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GACvCyN,MAAQO,CACf,CAOA,SAASu8C,IACPngD,KAAK4D,KAAKi+C,iBAAcvsD,CAC1B,CAOA,SAASqoD,IACP39C,KAAK4D,KAAK6F,cAAgB,WAC5B,CAOA,SAASu2C,EAAsB58C,GAC7B,MAAMgC,EAAQpF,KAAK4F,SACb1S,EAAO8M,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GAG5C1C,EAAKkS,MAAQA,EAEblS,EAAKsS,YAAaK,EAAAA,GAAAA,GAAoB7F,KAAK8D,eAAeV,IAAQ0C,cAClE9F,KAAK4D,KAAK6F,cAAgB,MAC5B,CAOA,SAAS+0C,EAA+Bp7C,GACtCpD,KAAK4D,KAAKq+C,uBAAyB7+C,EAAMnG,IAC3C,CAMA,SAAS0hD,EAA8Bv7C,GACrC,MAAMQ,EAAO5D,KAAK8D,eAAeV,GAC3BnG,EAAO+C,KAAK4D,KAAKq+C,uBAEvB,IAAItlD,EACJ,GAAIM,EACFN,EAAQo/C,GAAgCn4C,EAAe,oCAAT3G,EAA6C,GAAK,IAChG+C,KAAK4D,KAAKq+C,4BAAyB3sD,MAC9B,CAELqH,EADe+6C,GAA8B9zC,EAE/C,CACa5D,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GACvC+G,OAASA,CAChB,CAMA,SAASiiD,EAAyBx7C,GACnBpD,KAAK2C,MAAMiU,MACnBpU,SAAS9L,IAAMiuC,GAAMvhC,EAAM1M,IAClC,CAMA,SAAS0nD,EAAuBh7C,GAC9Bk7C,EAAWz9C,KAAKb,KAAMoD,GACTpD,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GACvC0N,IAAMtD,KAAK8D,eAAeV,EACjC,CAMA,SAAS+6C,EAAoB/6C,GAC3Bk7C,EAAWz9C,KAAKb,KAAMoD,GACTpD,KAAK2C,MAAM3C,KAAK2C,MAAM/M,OAAS,GACvC0N,IAAM,UAAYtD,KAAK8D,eAAeV,EAC7C,CAOA,SAASsvC,IACP,MAAO,CACLz1C,KAAM,aACN+E,SAAU,GAEd,CAGA,SAAS26C,IACP,MAAO,CACL1/C,KAAM,OACNkO,KAAM,KACNO,KAAM,KACN/O,MAAO,GAEX,CAGA,SAAS+e,IACP,MAAO,CACLze,KAAM,aACNN,MAAO,GAEX,CAGA,SAASgP,IACP,MAAO,CACL1O,KAAM,aACNuI,WAAY,GACZJ,MAAO,KACP/B,MAAO,KACPC,IAAK,GAET,CAGA,SAASiF,IACP,MAAO,CACLtL,KAAM,WACN+E,SAAU,GAEd,CAGA,SAAS4J,IACP,MAAO,CACL3O,KAAM,UAENgM,MAAO,EACPjH,SAAU,GAEd,CAGA,SAASgG,IACP,MAAO,CACL/K,KAAM,QAEV,CAGA,SAASmM,KACP,MAAO,CACLnM,KAAM,OACNN,MAAO,GAEX,CAGA,SAAS0M,KACP,MAAO,CACLpM,KAAM,QACNoG,MAAO,KACPC,IAAK,GACLiG,IAAK,KAET,CAGA,SAASY,KACP,MAAO,CACLlN,KAAM,OACNoG,MAAO,KACPC,IAAK,GACLtB,SAAU,GAEd,CAMA,SAASzD,GAAK6E,GACZ,MAAO,CACLnG,KAAM,OACNiP,QAAwB,gBAAf9I,EAAMnG,KACf3G,MAAO,KACP0W,OAAQ5J,EAAMi+C,QACdr/C,SAAU,GAEd,CAMA,SAAS2K,GAASvJ,GAChB,MAAO,CACLnG,KAAM,WACN+P,OAAQ5J,EAAMi+C,QACd/wC,QAAS,KACTtO,SAAU,GAEd,CAGA,SAASkL,KACP,MAAO,CACLjQ,KAAM,YACN+E,SAAU,GAEd,CAGA,SAAS2I,KACP,MAAO,CACL1N,KAAM,SACN+E,SAAU,GAEd,CAGA,SAASqI,KACP,MAAO,CACLpN,KAAM,OACNN,MAAO,GAEX,CAGA,SAAS0Q,KACP,MAAO,CACLpQ,KAAM,gBAEV,CACF,CA//BSilD,CAASlhD,EAATkhD,CClKF,SAAqBljD,GAC1B,MAAQqsC,GAAYrsC,KAGpB,OAAOA,CACT,CD6J2BmjD,CExJpB,SAAenhD,GACpB,MAAMoN,EAAWpN,GAAW,CAAC,EAMvB+S,EAAS,CACbD,QAAS,GACTuD,KAAM,CAAC,EACPtY,YANAyb,EAAAA,GAAAA,GAAkB,CAAC4nC,KAAuBh0C,EAASyN,YAAc,KAOjEwJ,QAAS9F,EAAO8F,IAChB5K,SAAU8E,EAAO9E,IACjBG,KAAM2E,EAAO3E,IACb7X,OAAQwc,EAAOxc,IACfsH,KAAMkV,EAAOlV,KAEf,OAAO0J,EAKP,SAASwL,EAAOmrB,GACd,OAEA,SAAiB9rC,GACf,OAAO4wC,GAAgBz7B,EAAQ22B,EAAS9rC,EAC1C,CACF,CACF,CF2HuCyjD,CAAMrhD,GAASyZ,WAAWgyB,MHxJ1D,WACL,IAKI6V,EALA3xC,EAAS,EACTjL,EAAS,GAETpP,GAAQ,EAGZ,OAIA,SAAsBqG,EAAO4/C,EAAU7lD,GAErC,MAAM04C,EAAS,GAEf,IAAI9sC,EAEA4U,EAEA80B,EAEAuW,EAEAjwD,EAeJ,IAdAqK,EACE+I,GACkB,kBAAV/I,EACJA,EAAMuM,WACN,IAAIs5C,YAAYjG,QAAYjnD,GAAW6mD,OAAOx/C,IACpDqvC,EAAgB,EAChBtmC,EAAS,GACLpP,IAE0B,QAAxBqG,EAAM2I,WAAW,IACnB0mC,IAEF11C,OAAQhB,GAEH02C,EAAgBrvC,EAAM/G,QAAQ,CAMnC,GALAkmD,GAAOz5C,UAAY2pC,EACnB1pC,EAAQw5C,GAAOv5C,KAAK5F,GACpB4lD,EACEjgD,QAAyBhN,IAAhBgN,EAAM7M,MAAsB6M,EAAM7M,MAAQkH,EAAM/G,OAC3DtD,EAAOqK,EAAM2I,WAAWi9C,IACnBjgD,EAAO,CACVoD,EAAS/I,EAAMvD,MAAM4yC,GACrB,KACF,CACA,GAAa,KAAT15C,GAAe05C,IAAkBuW,GAAeD,EAClDlT,EAAO17C,MAAM,GACb4uD,OAAmBhtD,OAUnB,OARIgtD,IACFlT,EAAO17C,MAAM,GACb4uD,OAAmBhtD,GAEjB02C,EAAgBuW,IAClBnT,EAAO17C,KAAKiJ,EAAMvD,MAAM4yC,EAAeuW,IACvC5xC,GAAU4xC,EAAcvW,GAElB15C,GACN,KAAK,EACH88C,EAAO17C,KAAK,OACZid,IACA,MAEF,KAAK,EAGH,IAFAuG,EAA+B,EAAxB3gB,KAAK0W,KAAK0D,EAAS,GAC1By+B,EAAO17C,MAAM,GACNid,IAAWuG,GAAMk4B,EAAO17C,MAAM,GACrC,MAEF,KAAK,GACH07C,EAAO17C,MAAM,GACbid,EAAS,EACT,MAEF,QACE2xC,GAAmB,EACnB3xC,EAAS,EAIfq7B,EAAgBuW,EAAc,CAChC,CAMA,OALI7rD,IACE4rD,GAAkBlT,EAAO17C,MAAM,GAC/BgS,GAAQ0pC,EAAO17C,KAAKgS,GACxB0pC,EAAO17C,KAAK,OAEP07C,CACT,CACF,CG4DuEqT,GAAa9lD,EAAO4/C,GAAU,KACrG,CAwgCA,SAAS5X,GAAMv3B,GACb,MAAO,CACLjG,KAAMiG,EAAEjG,KACRwJ,OAAQvD,EAAEuD,OACV/X,OAAQwU,EAAExU,OAEd,CAOA,SAAS6nD,GAAUiC,EAAU7mC,GAC3B,IAAIpmB,GAAS,EACb,OAASA,EAAQomB,EAAWjmB,QAAQ,CAClC,MAAM+G,EAAQkf,EAAWpmB,GACrB6G,MAAMsD,QAAQjD,GAChB8jD,GAAUiC,EAAU/lD,GAEpBugB,GAAUwlC,EAAU/lD,EAExB,CACF,CAOA,SAASugB,GAAUwlC,EAAUxlC,GAE3B,IAAI7jB,EACJ,IAAKA,KAAO6jB,EACV,GAAIoC,GAAIze,KAAKqc,EAAW7jB,GACtB,OAAQA,GACN,IAAK,iBACH,CACE,MAAMgkB,EAAQH,EAAU7jB,GACpBgkB,GACFqlC,EAASrpD,GAAK3F,QAAQ2pB,GAExB,KACF,CACF,IAAK,aACH,CACE,MAAMA,EAAQH,EAAU7jB,GACpBgkB,GACFqlC,EAASrpD,GAAK3F,QAAQ2pB,GAExB,KACF,CACF,IAAK,QACL,IAAK,OACH,CACE,MAAMA,EAAQH,EAAU7jB,GACpBgkB,GACFzM,OAAOC,OAAO6xC,EAASrpD,GAAMgkB,GAE/B,KACF,EAKV,CAGA,SAAS0jC,GAAe3jC,EAAMC,GAC5B,MAAID,EACI,IAAI5c,MAAM,iBAAmB4c,EAAKngB,KAAO,MAAQ4nC,EAAkB,CACvEvuC,MAAO8mB,EAAK9mB,MACZI,IAAK0mB,EAAK1mB,MACP,0BAA4B2mB,EAAMpgB,KAAO,MAAQ4nC,EAAkB,CACtEvuC,MAAO+mB,EAAM/mB,MACbI,IAAK2mB,EAAM3mB,MACR,aAEC,IAAI8J,MAAM,oCAAsC6c,EAAMpgB,KAAO,MAAQ4nC,EAAkB,CAC3FvuC,MAAO+mB,EAAM/mB,MACbI,IAAK2mB,EAAM3mB,MACR,kBAET,CGnvCe,SAASisD,GAAY3hD,GAGlC,MAAMsR,EAAOtS,KAEbsS,EAAKyB,OAKL,SAAgB6uC,GACd,OAAOtG,GAAasG,EAAK,IACpBtwC,EAAK1O,KAAK,eACV5C,EAIH6a,WAAYvJ,EAAK1O,KAAK,wBAA0B,GAChD88C,gBAAiBpuC,EAAK1O,KAAK,2BAA6B,IAE5D,CACF,CC1CO,MCODi/C,GAAsB,kBAATvwC,KAAoBA,KAAOwwC,WAuEjCC,GAAcC,GArENC,EAACC,EAAG7+C,KACvB,MAAMqgB,EAAKA,CAACy+B,EAAK1tD,KACfytD,EAAE7tD,IAAII,EAAO0tD,GACNA,GAGHC,EAAS3tD,IACb,GAAIytD,EAAE/tD,IAAIM,GACR,OAAOytD,EAAE9tD,IAAIK,GAEf,MAAOwH,EAAMN,GAAS0H,EAAE5O,GACxB,OAAQwH,GACN,KDpBoB,ECqBpB,KDtBoB,ECuBlB,OAAOynB,EAAG/nB,EAAOlH,GACnB,KDtBoB,ECsBR,CACV,MAAMmB,EAAM8tB,EAAG,GAAIjvB,GACnB,IAAK,MAAMA,KAASkH,EAClB/F,EAAIlD,KAAK0vD,EAAO3tD,IAClB,OAAOmB,CACT,CACA,KD3BoB,EC2BP,CACX,MAAMq7B,EAASvN,EAAG,CAAC,EAAGjvB,GACtB,IAAK,MAAO4D,EAAK5D,KAAUkH,EACzBs1B,EAAOmxB,EAAO/pD,IAAQ+pD,EAAO3tD,GAC/B,OAAOw8B,CACT,CACA,KDhCoB,ECiClB,OAAOvN,EAAG,IAAI2+B,KAAK1mD,GAAQlH,GAC7B,KDjCoB,ECiCP,CACX,MAAM,OAAC8J,EAAM,MAAE+jD,GAAS3mD,EACxB,OAAO+nB,EAAG,IAAI5hB,OAAOvD,EAAQ+jD,GAAQ7tD,EACvC,CACA,KDpCoB,ECoCV,CACR,MAAMyR,EAAMwd,EAAG,IAAI7xB,IAAK4C,GACxB,IAAK,MAAO4D,EAAK5D,KAAUkH,EACzBuK,EAAI7R,IAAI+tD,EAAO/pD,GAAM+pD,EAAO3tD,IAC9B,OAAOyR,CACT,CACA,KDzCoB,ECyCV,CACR,MAAM7R,EAAMqvB,EAAG,IAAIshB,IAAKvwC,GACxB,IAAK,MAAMA,KAASkH,EAClBtH,EAAIihB,IAAI8sC,EAAO3tD,IACjB,OAAOJ,CACT,CACA,KD9CoB,EC8CR,CACV,MAAM,KAACooB,EAAI,QAAE8nB,GAAW5oC,EACxB,OAAO+nB,EAAG,IAAIm+B,GAAIplC,GAAM8nB,GAAU9vC,EACpC,CACA,KDjDoB,ECkDlB,OAAOivB,EAAG6+B,OAAO5mD,GAAQlH,GAC3B,IAAK,SACH,OAAOivB,EAAG9T,OAAO2yC,OAAO5mD,IAASlH,GAErC,OAAOivB,EAAG,IAAIm+B,GAAI5lD,GAAMN,GAAQlH,EAAM,EAGxC,OAAO2tD,CAAM,EAY0BH,CAAa,IAAIpwD,IAAKmwD,EAAtBC,CAAkC,GCvErEO,GAAQ,IAEPt6C,SAAQA,IAAI,CAAC,GACd,KAAC8V,IAAQpO,OAET2nB,GAAS57B,IACb,MAAMM,SAAcN,EACpB,GAAa,WAATM,IAAsBN,EACxB,MAAO,CFde,EEcHM,GAErB,MAAMwmD,EAAWv6C,GAASrI,KAAKlE,GAAOvD,MAAM,GAAI,GAChD,OAAQqqD,GACN,IAAK,QACH,MAAO,CFlBa,EEkBLD,IACjB,IAAK,SACH,MAAO,CFnBa,EEmBJA,IAClB,IAAK,OACH,MAAO,CFpBa,EEoBNA,IAChB,IAAK,SACH,MAAO,CFrBa,EEqBJA,IAClB,IAAK,MACH,MAAO,CFtBa,EEsBPA,IACf,IAAK,MACH,MAAO,CFvBa,EEuBPA,IAGjB,OAAIC,EAASrkD,SAAS,SACb,CFhCe,EEgCPqkD,GAEbA,EAASrkD,SAAS,SACb,CF7Be,EE6BPqkD,GAEV,CFpCiB,EEoCRA,EAAS,EAGrBC,GAAaA,EAAEC,EAAM1mD,KFzCD,IE0CxB0mD,IACU,aAAT1mD,GAAgC,WAATA,GAiHZ2mD,GAAYA,CAACjnD,GAAQknD,OAAMC,SAAS,CAAC,KACjD,MAAMz/C,EAAI,GACV,MAhHiB0/C,EAACC,EAAQH,EAAMX,EAAG7+C,KAEnC,MAAMqgB,EAAKA,CAACy+B,EAAKxmD,KACf,MAAMlH,EAAQ4O,EAAE3Q,KAAKyvD,GAAO,EAE5B,OADAD,EAAE7tD,IAAIsH,EAAOlH,GACNA,CAAK,EAGRwuD,EAAOtnD,IACX,GAAIumD,EAAE/tD,IAAIwH,GACR,OAAOumD,EAAE9tD,IAAIuH,GAEf,IAAKgnD,EAAM1mD,GAAQs7B,GAAO57B,GAC1B,OAAQgnD,GACN,KF5DoB,EE4DJ,CACd,IAAItV,EAAQ1xC,EACZ,OAAQM,GACN,IAAK,SACH0mD,EFxDc,EEyDdtV,EAAQ1xC,EAAMuM,WACd,MACF,IAAK,WACL,IAAK,SACH,GAAI86C,EACF,MAAM,IAAIxkD,UAAU,uBAAyBvC,GAC/CoxC,EAAQ,KACR,MACF,IAAK,YACH,OAAO3pB,EAAG,EF3EI,GE2EI/nB,GAEtB,OAAO+nB,EAAG,CAACi/B,EAAMtV,GAAQ1xC,EAC3B,CACA,KF7EoB,EE6ER,CACV,GAAIM,EACF,OAAOynB,EAAG,CAACznB,EAAM,IAAIN,IAASA,GAEhC,MAAM/F,EAAM,GACNnB,EAAQivB,EAAG,CAACi/B,EAAM/sD,GAAM+F,GAC9B,IAAK,MAAM0xC,KAAS1xC,EAClB/F,EAAIlD,KAAKuwD,EAAK5V,IAChB,OAAO54C,CACT,CACA,KFtFoB,EEsFP,CACX,GAAIwH,EACF,OAAQA,GACN,IAAK,SACH,OAAOynB,EAAG,CAACznB,EAAMN,EAAMuM,YAAavM,GACtC,IAAK,UACL,IAAK,SACL,IAAK,SACH,OAAO+nB,EAAG,CAACznB,EAAMN,EAAMunD,WAAYvnD,GAIzC,GAAIknD,GAAS,WAAYlnD,EACvB,OAAOsnD,EAAKtnD,EAAMwnD,UAEpB,MAAMC,EAAU,GACV3uD,EAAQivB,EAAG,CAACi/B,EAAMS,GAAUznD,GAClC,IAAK,MAAMtD,KAAO2lB,GAAKriB,IACjBqnD,GAAWN,GAAWnrB,GAAO57B,EAAMtD,MACrC+qD,EAAQ1wD,KAAK,CAACuwD,EAAK5qD,GAAM4qD,EAAKtnD,EAAMtD,MAExC,OAAO5D,CACT,CACA,KF5GoB,EE6GlB,OAAOivB,EAAG,CAACi/B,EAAMhnD,EAAM0nD,eAAgB1nD,GACzC,KF7GoB,EE6GP,CACX,MAAM,OAAC4C,EAAM,MAAE+jD,GAAS3mD,EACxB,OAAO+nB,EAAG,CAACi/B,EAAM,CAACpkD,SAAQ+jD,UAAS3mD,EACrC,CACA,KFhHoB,EEgHV,CACR,MAAMynD,EAAU,GACV3uD,EAAQivB,EAAG,CAACi/B,EAAMS,GAAUznD,GAClC,IAAK,MAAOtD,EAAKg1C,KAAU1xC,GACrBqnD,IAAYN,GAAWnrB,GAAOl/B,MAASqqD,GAAWnrB,GAAO8V,MAC3D+V,EAAQ1wD,KAAK,CAACuwD,EAAK5qD,GAAM4qD,EAAK5V,KAElC,OAAO54C,CACT,CACA,KFxHoB,EEwHV,CACR,MAAM2uD,EAAU,GACV3uD,EAAQivB,EAAG,CAACi/B,EAAMS,GAAUznD,GAClC,IAAK,MAAM0xC,KAAS1xC,GACdqnD,GAAWN,GAAWnrB,GAAO8V,KAC/B+V,EAAQ1wD,KAAKuwD,EAAK5V,IAEtB,OAAO54C,CACT,EAGF,MAAM,QAAC8vC,GAAW5oC,EAClB,OAAO+nB,EAAG,CAACi/B,EAAM,CAAClmC,KAAMxgB,EAAMsoC,YAAW5oC,EAAM,EAGjD,OAAOsnD,CAAI,EAiBJF,GAAaF,GAAQC,KAAUD,EAAM,IAAIhxD,IAAKwR,EAA9C0/C,CAAiDpnD,GAAQ0H,CAAC,EChJnE,OAA0C,oBAApBigD,gBAEpB,CAACvkD,EAAKiB,IACJA,IAAY,SAAUA,GAAW,UAAWA,GAC1C+hD,GAAYa,GAAU7jD,EAAKiB,IAAYsjD,gBAAgBvkD,GAE3D,CAACA,EAAKiB,IAAY+hD,GAAYa,GAAU7jD,EAAKiB,ICsCxC,SAASujD,GAAa5nD,GAE3B,MAAM0E,EAAS,GACf,IAAI5L,GAAS,EACTa,EAAQ,EACRkuD,EAAO,EACX,OAAS/uD,EAAQkH,EAAM/G,QAAQ,CAC7B,MAAMtD,EAAOqK,EAAM2I,WAAW7P,GAE9B,IAAIyM,EAAU,GAGd,GACW,KAAT5P,IACAsL,EAAAA,GAAAA,IAAkBjB,EAAM2I,WAAW7P,EAAQ,MAC3CmI,EAAAA,GAAAA,IAAkBjB,EAAM2I,WAAW7P,EAAQ,IAE3C+uD,EAAO,OAGJ,GAAIlyD,EAAO,IACT,oBAAoB8L,KAAKC,OAAOC,aAAahM,MAChD4P,EAAU7D,OAAOC,aAAahM,SAI7B,GAAIA,EAAO,OAAUA,EAAO,MAAQ,CACvC,MAAM4kB,EAAOva,EAAM2I,WAAW7P,EAAQ,GAGlCnD,EAAO,OAAU4kB,EAAO,OAAUA,EAAO,OAC3ChV,EAAU7D,OAAOC,aAAahM,EAAM4kB,GACpCstC,EAAO,GAIPtiD,EAAU,QAEd,MAGEA,EAAU7D,OAAOC,aAAahM,GAE5B4P,IACFb,EAAO3N,KAAKiJ,EAAMvD,MAAM9C,EAAOb,GAAQgvD,mBAAmBviD,IAC1D5L,EAAQb,EAAQ+uD,EAAO,EACvBtiD,EAAU,IAERsiD,IACF/uD,GAAS+uD,EACTA,EAAO,EAEX,CACA,OAAOnjD,EAAO8O,KAAK,IAAMxT,EAAMvD,MAAM9C,EACvC,CCjCO,SAASouD,GAA2BrgD,EAAGsgD,GAE5C,MAAMtjD,EAAS,CAAC,CAACpE,KAAM,OAAQN,MAAO,WAWtC,OATIgoD,EAAmB,GACrBtjD,EAAO3N,KAAK,CACVuJ,KAAM,UACN0qC,QAAS,MACTnoB,WAAY,CAAC,EACbxd,SAAU,CAAC,CAAC/E,KAAM,OAAQN,MAAO0B,OAAOsmD,OAIrCtjD,CACT,CAaO,SAASujD,GAAyBC,EAAgBF,GACvD,MACE,sBACCE,EAAiB,IACjBF,EAAmB,EAAI,IAAMA,EAAmB,GAErD,C,gBCpFO,MAAMG,GAAWngB,GAAM,OAUjBC,GAAaD,GAAM,SAUhC,SAASA,GAAM1nC,GACb,OAQA,SAAe/J,GACb,MAAMyxC,EAASzxC,GAAQA,EAAKsP,UAAYtP,EAAKsP,SAASvF,IAAU,CAAC,EAEjE,GACwB,kBAAf0nC,EAAMx9B,MACbw9B,EAAMx9B,KAAO,GACW,kBAAjBw9B,EAAMh0B,QACbg0B,EAAMh0B,OAAS,EAEf,MAAO,CACLxJ,KAAMw9B,EAAMx9B,KACZwJ,OAAQg0B,EAAMh0B,OACd/X,OAC0B,kBAAjB+rC,EAAM/rC,QAAuB+rC,EAAM/rC,QAAU,EAChD+rC,EAAM/rC,YACNtD,EAGZ,CACF,CCvDO,SAASyvD,GAAO9xD,EAAOC,GAC5B,MAAM8xD,EAAU9xD,EAAKuW,cACrB,IAAIH,EAAS,IAQb,GANgB,cAAZ07C,EACF17C,GAAU,KACW,SAAZ07C,IACT17C,GAAU,KAAOpW,EAAKkS,OAASlS,EAAKsS,YAAc,KAGlC,mBAAdtS,EAAK+J,KACP,MAAO,CAAC,CAACA,KAAM,OAAQN,MAAO,KAAOzJ,EAAKqW,IAAMD,IAGlD,MAAM27C,EAAWhyD,EAAMmN,IAAIlN,GACrBsd,EAAOy0C,EAAS,GAElBz0C,GAAsB,SAAdA,EAAKvT,KACfuT,EAAK7T,MAAQ,IAAM6T,EAAK7T,MAExBsoD,EAASpmD,QAAQ,CAAC5B,KAAM,OAAQN,MAAO,MAGzC,MAAMiX,EAAOqxC,EAASA,EAASrvD,OAAS,GAQxC,OANIge,GAAsB,SAAdA,EAAK3W,KACf2W,EAAKjX,OAAS2M,EAEd27C,EAASvxD,KAAK,CAACuJ,KAAM,OAAQN,MAAO2M,IAG/B27C,CACT,CCgEA,SAASC,GAAchyD,GACrB,MAAM8Z,EAAS9Z,EAAK8Z,OAEpB,OAAkB,OAAXA,QAA8B1X,IAAX0X,EACtB9Z,EAAK8O,SAASpM,OAAS,EACvBoX,CACN,CChHO,SAASm4C,GAAUxoD,GACxB,MAAM4C,EAASlB,OAAO1B,GAChBm/C,EAAS,YACf,IAAIx5C,EAAQw5C,EAAOv5C,KAAKhD,GACpB6lD,EAAO,EAEX,MAAMp1C,EAAQ,GAEd,KAAO1N,GACL0N,EAAMtc,KACJ2xD,GAAS9lD,EAAOnG,MAAMgsD,EAAM9iD,EAAM7M,OAAQ2vD,EAAO,GAAG,GACpD9iD,EAAM,IAGR8iD,EAAO9iD,EAAM7M,MAAQ6M,EAAM,GAAG1M,OAC9B0M,EAAQw5C,EAAOv5C,KAAKhD,GAKtB,OAFAyQ,EAAMtc,KAAK2xD,GAAS9lD,EAAOnG,MAAMgsD,GAAOA,EAAO,GAAG,IAE3Cp1C,EAAMG,KAAK,GACpB,CAYA,SAASk1C,GAAS1oD,EAAOrG,EAAOI,GAC9B,IAAI85C,EAAa,EACbE,EAAW/zC,EAAM/G,OAErB,GAAIU,EAAO,CACT,IAAIhE,EAAOqK,EAAMkL,YAAY2oC,GAE7B,KApDQ,IAoDDl+C,GAnDG,KAmDaA,GACrBk+C,IACAl+C,EAAOqK,EAAMkL,YAAY2oC,EAE7B,CAEA,GAAI95C,EAAK,CACP,IAAIpE,EAAOqK,EAAMkL,YAAY6oC,EAAW,GAExC,KA7DQ,IA6DDp+C,GA5DG,KA4DaA,GACrBo+C,IACAp+C,EAAOqK,EAAMkL,YAAY6oC,EAAW,EAExC,CAEA,OAAOA,EAAWF,EAAa7zC,EAAMvD,MAAMo3C,EAAYE,GAAY,EACrE,CCvCO,MAAM/hC,GAAW,CACtB7D,WCXK,SAAoB7X,EAAOC,GAEhC,MAAMmO,EAAS,CACbpE,KAAM,UACN0qC,QAAS,aACTnoB,WAAY,CAAC,EACbxd,SAAU/O,EAAM+8B,KAAK/8B,EAAMmN,IAAIlN,IAAO,IAGxC,OADAD,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,EDEE0J,MEXK,SAAmB9X,EAAOC,GAE/B,MAAMmO,EAAS,CAACpE,KAAM,UAAW0qC,QAAS,KAAMnoB,WAAY,CAAC,EAAGxd,SAAU,IAE1E,OADA/O,EAAMqyD,MAAMpyD,EAAMmO,GACX,CAACpO,EAAMsyD,UAAUryD,EAAMmO,GAAS,CAACpE,KAAM,OAAQN,MAAO,MAC/D,EFOErK,KGZK,SAAcW,EAAOC,GAC1B,MAAMyJ,EAAQzJ,EAAKyJ,MAAQzJ,EAAKyJ,MAAQ,KAAO,GAEzC6iB,EAAa,CAAC,EAEhBtsB,EAAKiY,OACPqU,EAAW0F,UAAY,CAAC,YAAchyB,EAAKiY,OAK7C,IAAI9J,EAAS,CACXpE,KAAM,UACN0qC,QAAS,OACTnoB,aACAxd,SAAU,CAAC,CAAC/E,KAAM,OAAQN,WAa5B,OAVIzJ,EAAKwY,OACPrK,EAAOuC,KAAO,CAAC8H,KAAMxY,EAAKwY,OAG5BzY,EAAMqyD,MAAMpyD,EAAMmO,GAClBA,EAASpO,EAAMsyD,UAAUryD,EAAMmO,GAG/BA,EAAS,CAACpE,KAAM,UAAW0qC,QAAS,MAAOnoB,WAAY,CAAC,EAAGxd,SAAU,CAACX,IACtEpO,EAAMqyD,MAAMpyD,EAAMmO,GACXA,CACT,EHhBEya,OIdK,SAAuB7oB,EAAOC,GAEnC,MAAMmO,EAAS,CACbpE,KAAM,UACN0qC,QAAS,MACTnoB,WAAY,CAAC,EACbxd,SAAU/O,EAAMmN,IAAIlN,IAGtB,OADAD,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,EJKEkH,SKfK,SAAkBtV,EAAOC,GAE9B,MAAMmO,EAAS,CACbpE,KAAM,UACN0qC,QAAS,KACTnoB,WAAY,CAAC,EACbxd,SAAU/O,EAAMmN,IAAIlN,IAGtB,OADAD,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,ELME+E,kBMjBK,SAA2BnT,EAAOC,GACvC,MAAMsyD,EACmC,kBAAhCvyD,EAAM+N,QAAQwkD,cACjBvyD,EAAM+N,QAAQwkD,cACd,gBACAtxC,EAAK7V,OAAOnL,EAAKsS,YAAYuG,cAC7B05C,EAASlB,GAAarwC,EAAGpO,eACzBrQ,EAAQxC,EAAMyyD,cAAchwD,QAAQwe,GAE1C,IAAIyxC,EAEAC,EAAe3yD,EAAM4yD,eAAezwD,IAAI8e,QAEvB5e,IAAjBswD,GACFA,EAAe,EACf3yD,EAAMyyD,cAAchyD,KAAKwgB,GACzByxC,EAAU1yD,EAAMyyD,cAAc9vD,QAE9B+vD,EAAUlwD,EAAQ,EAGpBmwD,GAAgB,EAChB3yD,EAAM4yD,eAAexwD,IAAI6e,EAAI0xC,GAG7B,MAAMz7C,EAAO,CACXlN,KAAM,UACN0qC,QAAS,IACTnoB,WAAY,CACVqH,KAAM,IAAM2+B,EAAgB,MAAQC,EACpCvxC,GACEsxC,EACA,SACAC,GACCG,EAAe,EAAI,IAAMA,EAAe,IAC3CE,iBAAiB,EACjBvkC,gBAAiB,CAAC,mBAEpBvf,SAAU,CAAC,CAAC/E,KAAM,OAAQN,MAAO0B,OAAOsnD,MAE1C1yD,EAAMqyD,MAAMpyD,EAAMiX,GAGlB,MAAM47C,EAAM,CACV9oD,KAAM,UACN0qC,QAAS,MACTnoB,WAAY,CAAC,EACbxd,SAAU,CAACmI,IAGb,OADAlX,EAAMqyD,MAAMpyD,EAAM6yD,GACX9yD,EAAMsyD,UAAUryD,EAAM6yD,EAC/B,ENjCEn6C,QOjBK,SAAiB3Y,EAAOC,GAE7B,MAAMmO,EAAS,CACbpE,KAAM,UACN0qC,QAAS,IAAMz0C,EAAK+V,MACpBuW,WAAY,CAAC,EACbxd,SAAU/O,EAAMmN,IAAIlN,IAGtB,OADAD,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,EPQE+H,KQhBK,SAAcnW,EAAOC,GAC1B,GAAID,EAAM+N,QAAQglD,mBAAoB,CAEpC,MAAM3kD,EAAS,CAACpE,KAAM,MAAON,MAAOzJ,EAAKyJ,OAEzC,OADA1J,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,CAGF,ERQEmI,eSjBK,SAAwBvW,EAAOC,GACpC,MAAMghB,EAAK7V,OAAOnL,EAAKsS,YAAYuG,cAC7BwlC,EAAMt+C,EAAMgzD,eAAe7wD,IAAI8e,GAErC,IAAKq9B,EACH,OAAOwT,GAAO9xD,EAAOC,GAIvB,MAAMssB,EAAa,CAAC8P,IAAKi1B,GAAahT,EAAIjuC,KAAO,IAAKiG,IAAKrW,EAAKqW,KAE9C,OAAdgoC,EAAIluC,YAAgC/N,IAAdi8C,EAAIluC,QAC5Bmc,EAAWnc,MAAQkuC,EAAIluC,OAIzB,MAAMhC,EAAS,CAACpE,KAAM,UAAW0qC,QAAS,MAAOnoB,aAAYxd,SAAU,IAEvE,OADA/O,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,ETDEgI,MUpBK,SAAepW,EAAOC,GAE3B,MAAMssB,EAAa,CAAC8P,IAAKi1B,GAAarxD,EAAKoQ,MAE1B,OAAbpQ,EAAKqW,UAA6BjU,IAAbpC,EAAKqW,MAC5BiW,EAAWjW,IAAMrW,EAAKqW,KAGL,OAAfrW,EAAKmQ,YAAiC/N,IAAfpC,EAAKmQ,QAC9Bmc,EAAWnc,MAAQnQ,EAAKmQ,OAI1B,MAAMhC,EAAS,CAACpE,KAAM,UAAW0qC,QAAS,MAAOnoB,aAAYxd,SAAU,IAEvE,OADA/O,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,EVKEsI,WWpBK,SAAoB1W,EAAOC,GAEhC,MAAMmX,EAAO,CAACpN,KAAM,OAAQN,MAAOzJ,EAAKyJ,MAAMuF,QAAQ,YAAa,MACnEjP,EAAMqyD,MAAMpyD,EAAMmX,GAGlB,MAAMhJ,EAAS,CACbpE,KAAM,UACN0qC,QAAS,OACTnoB,WAAY,CAAC,EACbxd,SAAU,CAACqI,IAGb,OADApX,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,EXOE+I,cYpBK,SAAuBnX,EAAOC,GACnC,MAAMghB,EAAK7V,OAAOnL,EAAKsS,YAAYuG,cAC7BwlC,EAAMt+C,EAAMgzD,eAAe7wD,IAAI8e,GAErC,IAAKq9B,EACH,OAAOwT,GAAO9xD,EAAOC,GAIvB,MAAMssB,EAAa,CAACqH,KAAM09B,GAAahT,EAAIjuC,KAAO,KAEhC,OAAdiuC,EAAIluC,YAAgC/N,IAAdi8C,EAAIluC,QAC5Bmc,EAAWnc,MAAQkuC,EAAIluC,OAIzB,MAAMhC,EAAS,CACbpE,KAAM,UACN0qC,QAAS,IACTnoB,aACAxd,SAAU/O,EAAMmN,IAAIlN,IAGtB,OADAD,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,EZHE8I,KavBK,SAAclX,EAAOC,GAE1B,MAAMssB,EAAa,CAACqH,KAAM09B,GAAarxD,EAAKoQ,MAEzB,OAAfpQ,EAAKmQ,YAAiC/N,IAAfpC,EAAKmQ,QAC9Bmc,EAAWnc,MAAQnQ,EAAKmQ,OAI1B,MAAMhC,EAAS,CACbpE,KAAM,UACN0qC,QAAS,IACTnoB,aACAxd,SAAU/O,EAAMmN,IAAIlN,IAGtB,OADAD,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,EbOEsL,SFnBK,SAAkB1Z,EAAOC,EAAMwN,GACpC,MAAM4yB,EAAUrgC,EAAMmN,IAAIlN,GACpBgzD,EAAQxlD,EAyEhB,SAAmBxN,GACjB,IAAIgzD,GAAQ,EACZ,GAAkB,SAAdhzD,EAAK+J,KAAiB,CACxBipD,EAAQhzD,EAAK8Z,SAAU,EACvB,MAAMhL,EAAW9O,EAAK8O,SACtB,IAAIvM,GAAS,EAEb,MAAQywD,KAAWzwD,EAAQuM,EAASpM,QAClCswD,EAAQhB,GAAcljD,EAASvM,GAEnC,CAEA,OAAOywD,CACT,CAtFyBC,CAAUzlD,GAAUwkD,GAAchyD,GAEnDssB,EAAa,CAAC,EAEdxd,EAAW,GAEjB,GAA4B,mBAAjB9O,EAAKod,QAAuB,CACrC,MAAME,EAAO8iB,EAAQ,GAErB,IAAIpmB,EAEAsD,GAAsB,YAAdA,EAAKvT,MAAuC,MAAjBuT,EAAKm3B,QAC1Cz6B,EAAYsD,GAEZtD,EAAY,CAACjQ,KAAM,UAAW0qC,QAAS,IAAKnoB,WAAY,CAAC,EAAGxd,SAAU,IACtEsxB,EAAQz0B,QAAQqO,IAGdA,EAAUlL,SAASpM,OAAS,GAC9BsX,EAAUlL,SAASnD,QAAQ,CAAC5B,KAAM,OAAQN,MAAO,MAGnDuQ,EAAUlL,SAASnD,QAAQ,CACzB5B,KAAM,UACN0qC,QAAS,QACTnoB,WAAY,CAACviB,KAAM,WAAYqT,QAASpd,EAAKod,QAAS0V,UAAU,GAChEhkB,SAAU,KAKZwd,EAAW0F,UAAY,CAAC,iBAC1B,CAEA,IAAIzvB,GAAS,EAEb,OAASA,EAAQ69B,EAAQ19B,QAAQ,CAC/B,MAAMqyC,EAAQ3U,EAAQ79B,IAIpBywD,GACU,IAAVzwD,GACe,YAAfwyC,EAAMhrC,MACY,MAAlBgrC,EAAMN,UAEN3lC,EAAStO,KAAK,CAACuJ,KAAM,OAAQN,MAAO,OAGnB,YAAfsrC,EAAMhrC,MAAwC,MAAlBgrC,EAAMN,SAAoBue,EAGxDlkD,EAAStO,KAAKu0C,GAFdjmC,EAAStO,QAAQu0C,EAAMjmC,SAI3B,CAEA,MAAM4R,EAAO0f,EAAQA,EAAQ19B,OAAS,GAGlCge,IAASsyC,GAAuB,YAAdtyC,EAAK3W,MAAuC,MAAjB2W,EAAK+zB,UACpD3lC,EAAStO,KAAK,CAACuJ,KAAM,OAAQN,MAAO,OAItC,MAAM0E,EAAS,CAACpE,KAAM,UAAW0qC,QAAS,KAAMnoB,aAAYxd,YAE5D,OADA/O,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,EEjDE9C,KcxBK,SAActL,EAAOC,GAE1B,MAAMssB,EAAa,CAAC,EACd8T,EAAUrgC,EAAMmN,IAAIlN,GAC1B,IAAIuC,GAAS,EAOb,IAL0B,kBAAfvC,EAAKoD,OAAqC,IAAfpD,EAAKoD,QACzCkpB,EAAWlpB,MAAQpD,EAAKoD,SAIjBb,EAAQ69B,EAAQ19B,QAAQ,CAC/B,MAAMqyC,EAAQ3U,EAAQ79B,GAEtB,GACiB,YAAfwyC,EAAMhrC,MACY,OAAlBgrC,EAAMN,SACNM,EAAMzoB,YACNljB,MAAMsD,QAAQqoC,EAAMzoB,WAAW0F,YAC/B+iB,EAAMzoB,WAAW0F,UAAU9lB,SAAS,kBACpC,CACAogB,EAAW0F,UAAY,CAAC,sBACxB,KACF,CACF,CAGA,MAAM7jB,EAAS,CACbpE,KAAM,UACN0qC,QAASz0C,EAAKgZ,QAAU,KAAO,KAC/BsT,aACAxd,SAAU/O,EAAM+8B,KAAKsD,GAAS,IAGhC,OADArgC,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,EdVE6L,Ue1BK,SAAmBja,EAAOC,GAE/B,MAAMmO,EAAS,CACbpE,KAAM,UACN0qC,QAAS,IACTnoB,WAAY,CAAC,EACbxd,SAAU/O,EAAMmN,IAAIlN,IAGtB,OADAD,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,EfkBE8L,KgB3BK,SAAcla,EAAOC,GAE1B,MAAMmO,EAAS,CAACpE,KAAM,OAAQ+E,SAAU/O,EAAM+8B,KAAK/8B,EAAMmN,IAAIlN,KAE7D,OADAD,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,EhBuBEsJ,OiB7BK,SAAgB1X,EAAOC,GAE5B,MAAMmO,EAAS,CACbpE,KAAM,UACN0qC,QAAS,SACTnoB,WAAY,CAAC,EACbxd,SAAU/O,EAAMmN,IAAIlN,IAGtB,OADAD,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,EjBoBEwN,MkB/BK,SAAe5b,EAAOC,GAC3B,MAAMy7B,EAAO17B,EAAMmN,IAAIlN,GACjBkzD,EAAWz3B,EAAK5nB,QAEhBs/C,EAAe,GAErB,GAAID,EAAU,CAEZ,MAAM51C,EAAO,CACXvT,KAAM,UACN0qC,QAAS,QACTnoB,WAAY,CAAC,EACbxd,SAAU/O,EAAM+8B,KAAK,CAACo2B,IAAW,IAEnCnzD,EAAMqyD,MAAMpyD,EAAK8O,SAAS,GAAIwO,GAC9B61C,EAAa3yD,KAAK8c,EACpB,CAEA,GAAIme,EAAK/4B,OAAS,EAAG,CAEnB,MAAM0yC,EAAO,CACXrrC,KAAM,UACN0qC,QAAS,QACTnoB,WAAY,CAAC,EACbxd,SAAU/O,EAAM+8B,KAAKrB,GAAM,IAGvBr4B,EAAQsuC,GAAW1xC,EAAK8O,SAAS,IACjCtL,EAAMouD,GAAS5xD,EAAK8O,SAAS9O,EAAK8O,SAASpM,OAAS,IACtDU,GAASI,IAAK4xC,EAAK9lC,SAAW,CAAClM,QAAOI,QAC1C2vD,EAAa3yD,KAAK40C,EACpB,CAGA,MAAMjnC,EAAS,CACbpE,KAAM,UACN0qC,QAAS,QACTnoB,WAAY,CAAC,EACbxd,SAAU/O,EAAM+8B,KAAKq2B,GAAc,IAGrC,OADApzD,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,ElBVE4N,UmB/BK,SAAmBhc,EAAOC,GAI/B,MAAMmO,EAAS,CACbpE,KAAM,UACN0qC,QAAS,KACTnoB,WAAY,CAAC,EACbxd,SAAU/O,EAAMmN,IAAIlN,IAGtB,OADAD,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,EnBoBE8N,SoB3BK,SAAkBlc,EAAOC,EAAMwN,GACpC,MAAMqB,EAAWrB,EAASA,EAAOsB,cAAW1M,EAGtCqyC,EAAuB,KADZ5lC,EAAWA,EAASrM,QAAQxC,GAAQ,GACpB,KAAO,KAElCsI,EAAQkF,GAA0B,UAAhBA,EAAOzD,KAAmByD,EAAOlF,WAAQlG,EAC3DM,EAAS4F,EAAQA,EAAM5F,OAAS1C,EAAK8O,SAASpM,OACpD,IAAI0wD,GAAa,EAEjB,MAAMC,EAAQ,GAEd,OAASD,EAAY1wD,GAAQ,CAE3B,MAAMma,EAAO7c,EAAK8O,SAASskD,GAErB9mC,EAAa,CAAC,EACdqoB,EAAarsC,EAAQA,EAAM8qD,QAAahxD,EAE1CuyC,IACFroB,EAAWhkB,MAAQqsC,GAIrB,IAAIxmC,EAAS,CAACpE,KAAM,UAAW0qC,UAASnoB,aAAYxd,SAAU,IAE1D+N,IACF1O,EAAOW,SAAW/O,EAAMmN,IAAI2P,GAC5B9c,EAAMqyD,MAAMv1C,EAAM1O,GAClBA,EAASpO,EAAMsyD,UAAUx1C,EAAM1O,IAGjCklD,EAAM7yD,KAAK2N,EACb,CAGA,MAAMA,EAAS,CACbpE,KAAM,UACN0qC,QAAS,KACTnoB,WAAY,CAAC,EACbxd,SAAU/O,EAAM+8B,KAAKu2B,GAAO,IAG9B,OADAtzD,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,EpBhBEgJ,KqBjCK,SAAcpX,EAAOC,GAE1B,MAAMmO,EAAS,CAACpE,KAAM,OAAQN,MAAOwoD,GAAU9mD,OAAOnL,EAAKyJ,SAE3D,OADA1J,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,ErB6BEgM,csBlCK,SAAuBpa,EAAOC,GAEnC,MAAMmO,EAAS,CACbpE,KAAM,UACN0qC,QAAS,KACTnoB,WAAY,CAAC,EACbxd,SAAU,IAGZ,OADA/O,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,EtByBEmlD,KAAMtlD,GACNulD,KAAMvlD,GACNyK,WAAYzK,GACZ4F,mBAAoB5F,IAItB,SAASA,KAET,CuBoHA,MAAMoe,GAAM,CAAC,EAAEtC,eAGT7C,GAAe,CAAC,EAYf,SAASusC,GAAY3lD,EAAMC,GAChC,MAAMoN,EAAWpN,GAAWmZ,GAEtB8rC,EAAiB,IAAIpzD,IAErB8zD,EAAe,IAAI9zD,IAEnBgzD,EAAiB,IAAIhzD,IAIrB8b,EAAW,IAAIC,MAAoBR,EAASO,UAG5C1b,EAAQ,CACZmN,IA0EF,SAAaM,GAEX,MAAMoc,EAAS,GAEf,GAAI,aAAcpc,EAAQ,CACxB,MAAM0B,EAAQ1B,EAAOsB,SACrB,IAAIvM,GAAS,EACb,OAASA,EAAQ2M,EAAMxM,QAAQ,CAC7B,MAAMyL,EAASpO,EAAM0pB,IAAIva,EAAM3M,GAAQiL,GAGvC,GAAIW,EAAQ,CACV,GAAI5L,GAAmC,UAA1B2M,EAAM3M,EAAQ,GAAGwH,OACvBX,MAAMsD,QAAQyB,IAA2B,SAAhBA,EAAOpE,OACnCoE,EAAO1E,MAAQiqD,GAAuBvlD,EAAO1E,SAG1CL,MAAMsD,QAAQyB,IAA2B,YAAhBA,EAAOpE,MAAoB,CACvD,MAAMuT,EAAOnP,EAAOW,SAAS,GAEzBwO,GAAsB,SAAdA,EAAKvT,OACfuT,EAAK7T,MAAQiqD,GAAuBp2C,EAAK7T,OAE7C,CAGEL,MAAMsD,QAAQyB,GAChByb,EAAOppB,QAAQ2N,GAEfyb,EAAOppB,KAAK2N,EAEhB,CACF,CACF,CAEA,OAAOyb,CACT,EA7GEyoC,aACAU,iBACAU,eACAd,iBACAH,cAAe,GACf/2C,WACAgO,IAgCF,SAAazpB,EAAMwN,GACjB,MAAMzD,EAAO/J,EAAK+J,KACZ4N,EAAS5X,EAAM0b,SAAS1R,GAE9B,GAAIqiB,GAAIze,KAAK5N,EAAM0b,SAAU1R,IAAS4N,EACpC,OAAOA,EAAO5X,EAAOC,EAAMwN,GAG7B,GAAIzN,EAAM+N,QAAQ6lD,aAAe5zD,EAAM+N,QAAQ6lD,YAAYznD,SAASnC,GAAO,CACzE,GAAI,aAAc/J,EAAM,CACtB,MAAM,SAAC8O,KAAa8kD,GAAW5zD,EACzBmO,EAASijD,GAAgBwC,GAI/B,OAFAzlD,EAAOW,SAAW/O,EAAMmN,IAAIlN,GAErBmO,CACT,CAGA,OAAOijD,GAAgBpxD,EACzB,CAIA,OAFgBD,EAAM+N,QAAQ+lD,gBAAkBC,IAEjC/zD,EAAOC,EAAMwN,EAC9B,EAxDEM,QAASoN,EACTk3C,SACAt1B,SAiBF,OC0CK,SAAejvB,EAAM4H,EAAeC,EAAkBC,GAE3D,IAAIC,EAEA1K,EAEAwD,EAGuB,oBAAlB+G,GACqB,oBAArBC,GAEPxK,OAAO9I,EACPsM,EAAU+G,EACVG,EAAUF,IAGVxK,EAAOuK,EAEP/G,EAAUgH,EACVE,EAAUD,IAGZlH,EAAAA,GAAAA,IAAaZ,EAAM3C,GAMnB,SAAkBlL,EAAM2O,GACtB,MAAMnB,EAASmB,EAAQA,EAAQjM,OAAS,GAClCH,EAAQiL,EAASA,EAAOsB,SAAStM,QAAQxC,QAAQoC,EACvD,OAAOsM,EAAQ1O,EAAMuC,EAAOiL,EAC9B,GAVmCoI,EAWrC,CD1FEC,CAAMhI,GAAM,SAAU7N,GACpB,GAAkB,eAAdA,EAAK+J,MAAuC,uBAAd/J,EAAK+J,KAA+B,CACpE,MAAMiK,EAAoB,eAAdhU,EAAK+J,KAAwBgpD,EAAiBU,EACpDzyC,EAAK7V,OAAOnL,EAAKsS,YAAYuG,cAI9B7E,EAAI/R,IAAI+e,IAEXhN,EAAI7R,IAAI6e,EAAIhhB,EAEhB,CACF,IAEOD,CAoFT,CAYA,SAASqyD,GAAM1mD,EAAMmkC,GACfnkC,EAAK4D,WAAUugC,EAAGvgC,S3BtPjB,SAAkBtP,GACvB,MAAMoD,EAAQsuC,GAAW1xC,GACnBwD,EAAMouD,GAAS5xD,GAErB,GAAIoD,GAASI,EACX,MAAO,CAACJ,QAAOI,MAEnB,C2B+OmC8L,CAAS5D,GAC5C,CAcA,SAAS2mD,GAAU3mD,EAAMmkC,GAEvB,IAAI1hC,EAAS0hC,EAGb,GAAInkC,GAAQA,EAAKgF,KAAM,CACrB,MAAMqjD,EAAQroD,EAAKgF,KAAKqjD,MAClBC,EAAYtoD,EAAKgF,KAAKsjD,UACtBC,EAAcvoD,EAAKgF,KAAKujD,YAE9B,GAAqB,kBAAVF,EAGT,GAAoB,YAAhB5lD,EAAOpE,KACToE,EAAOsmC,QAAUsf,MAMd,CAIH5lD,EAAS,CAACpE,KAAM,UAAW0qC,QAASsf,EAAOznC,WAAY,CAAC,EAAGxd,SAD1C,aAAcX,EAASA,EAAOW,SAAW,CAACX,GAE7D,CAGkB,YAAhBA,EAAOpE,MAAsBkqD,GAC/Bv2C,OAAOC,OAAOxP,EAAOme,WAAY8kC,GAAgB6C,IAIjD,aAAc9lD,GACdA,EAAOW,UACO,OAAdklD,QACc5xD,IAAd4xD,IAEA7lD,EAAOW,SAAWklD,EAEtB,CAEA,OAAO7lD,CACT,CAYA,SAAS2lD,GAAsB/zD,EAAOC,GACpC,MAAM0Q,EAAO1Q,EAAK0Q,MAAQ,CAAC,EAErBvC,IACJ,UAAWnO,IACTosB,GAAIze,KAAK+C,EAAM,gBAAkB0b,GAAIze,KAAK+C,EAAM,aAE9C,CACE3G,KAAM,UACN0qC,QAAS,MACTnoB,WAAY,CAAC,EACbxd,SAAU/O,EAAMmN,IAAIlN,IALtB,CAAC+J,KAAM,OAAQN,MAAOzJ,EAAKyJ,OASjC,OADA1J,EAAMqyD,MAAMpyD,EAAMmO,GACXpO,EAAMsyD,UAAUryD,EAAMmO,EAC/B,CAcO,SAAS2uB,GAAK5tB,EAAO8jD,GAE1B,MAAM7kD,EAAS,GACf,IAAI5L,GAAS,EAMb,IAJIywD,GACF7kD,EAAO3N,KAAK,CAACuJ,KAAM,OAAQN,MAAO,SAG3BlH,EAAQ2M,EAAMxM,QACjBH,GAAO4L,EAAO3N,KAAK,CAACuJ,KAAM,OAAQN,MAAO,OAC7C0E,EAAO3N,KAAK0O,EAAM3M,IAOpB,OAJIywD,GAAS9jD,EAAMxM,OAAS,GAC1ByL,EAAO3N,KAAK,CAACuJ,KAAM,OAAQN,MAAO,OAG7B0E,CACT,CAUA,SAASulD,GAAuBjqD,GAC9B,IAAIlH,EAAQ,EACRnD,EAAOqK,EAAM2I,WAAW7P,GAE5B,KAAgB,IAATnD,GAAuB,KAATA,GACnBmD,IACAnD,EAAOqK,EAAM2I,WAAW7P,GAG1B,OAAOkH,EAAMvD,MAAM3D,EACrB,CEjYO,SAAS2xD,GAAOrmD,EAAMC,GAC3B,MAAM/N,EAAQyzD,GAAY3lD,EAAMC,GAC1B9N,EAAOD,EAAM0pB,IAAI5b,OAAMzL,GACvB+xD,E9BkCD,SAAgBp0D,GACrB,MAAMuyD,EACmC,kBAAhCvyD,EAAM+N,QAAQwkD,cACjBvyD,EAAM+N,QAAQwkD,cACd,gBACA8B,EACJr0D,EAAM+N,QAAQsmD,qBAAuB5C,GACjC6C,EACJt0D,EAAM+N,QAAQumD,mBAAqB3C,GAC/B4C,EAAgBv0D,EAAM+N,QAAQwmD,eAAiB,YAC/CC,EAAuBx0D,EAAM+N,QAAQymD,sBAAwB,KAC7DC,EAA0Bz0D,EAAM+N,QAAQ0mD,yBAA2B,CACvExiC,UAAW,CAAC,YAGRyiC,EAAY,GAClB,IAAI9C,GAAkB,EAEtB,OAASA,EAAiB5xD,EAAMyyD,cAAc9vD,QAAQ,CACpD,MAAM27C,EAAMt+C,EAAM0zD,aAAavxD,IAAInC,EAAMyyD,cAAcb,IAEvD,IAAKtT,EACH,SAGF,MAAMlsB,EAAUpyB,EAAMmN,IAAImxC,GACpBr9B,EAAK7V,OAAOkzC,EAAI/rC,YAAYuG,cAC5B05C,EAASlB,GAAarwC,EAAGpO,eAC/B,IAAI6+C,EAAmB,EAEvB,MAAMiD,EAAiB,GACjBC,EAAS50D,EAAM4yD,eAAezwD,IAAI8e,GAGxC,UAAkB5e,IAAXuyD,KAA0BlD,GAAoBkD,GAAQ,CACvDD,EAAehyD,OAAS,GAC1BgyD,EAAel0D,KAAK,CAACuJ,KAAM,OAAQN,MAAO,MAG5C,IAAIqF,EAC6B,kBAAxBslD,EACHA,EACAA,EAAoBzC,EAAgBF,GAElB,kBAAb3iD,IACTA,EAAW,CAAC/E,KAAM,OAAQN,MAAOqF,IAGnC4lD,EAAel0D,KAAK,CAClBuJ,KAAM,UACN0qC,QAAS,IACTnoB,WAAY,CACVqH,KACE,IACA2+B,EACA,SACAC,GACCd,EAAmB,EAAI,IAAMA,EAAmB,IACnDmD,oBAAqB,GACrB3lC,UAC+B,kBAAtBolC,EACHA,EACAA,EAAkB1C,EAAgBF,GACxCz/B,UAAW,CAAC,0BAEdljB,SAAU1F,MAAMsD,QAAQoC,GAAYA,EAAW,CAACA,IAEpD,CAEA,MAAM4R,EAAOyR,EAAQA,EAAQzvB,OAAS,GAEtC,GAAIge,GAAsB,YAAdA,EAAK3W,MAAuC,MAAjB2W,EAAK+zB,QAAiB,CAC3D,MAAMogB,EAAWn0C,EAAK5R,SAAS4R,EAAK5R,SAASpM,OAAS,GAClDmyD,GAA8B,SAAlBA,EAAS9qD,KACvB8qD,EAASprD,OAAS,IAElBiX,EAAK5R,SAAStO,KAAK,CAACuJ,KAAM,OAAQN,MAAO,MAG3CiX,EAAK5R,SAAStO,QAAQk0D,EACxB,MACEviC,EAAQ3xB,QAAQk0D,GAIlB,MAAMj7C,EAAW,CACf1P,KAAM,UACN0qC,QAAS,KACTnoB,WAAY,CAACtL,GAAIsxC,EAAgB,MAAQC,GACzCzjD,SAAU/O,EAAM+8B,KAAK3K,GAAS,IAGhCpyB,EAAMqyD,MAAM/T,EAAK5kC,GAEjBg7C,EAAUj0D,KAAKiZ,EACjB,CAEA,GAAyB,IAArBg7C,EAAU/xD,OAId,MAAO,CACLqH,KAAM,UACN0qC,QAAS,UACTnoB,WAAY,CAACwoC,eAAe,EAAM9iC,UAAW,CAAC,cAC9CljB,SAAU,CACR,CACE/E,KAAM,UACN0qC,QAAS8f,EACTjoC,WAAY,IACP8kC,GAAgBoD,GACnBxzC,GAAI,kBAENlS,SAAU,CAAC,CAAC/E,KAAM,OAAQN,MAAO6qD,KAEnC,CAACvqD,KAAM,OAAQN,MAAO,MACtB,CACEM,KAAM,UACN0qC,QAAS,KACTnoB,WAAY,CAAC,EACbxd,SAAU/O,EAAM+8B,KAAK23B,GAAW,IAElC,CAAC1qD,KAAM,OAAQN,MAAO,OAG5B,C8B/JesrD,CAAOh1D,GAEdoO,EAAS/E,MAAMsD,QAAQ1M,GACzB,CAAC+J,KAAM,OAAQ+E,SAAU9O,GACzBA,GAAQ,CAAC+J,KAAM,OAAQ+E,SAAU,IAUrC,OARIqlD,KAIFxjD,EAAAA,EAAAA,IAAO,aAAcxC,GACrBA,EAAOW,SAAStO,KAAK,CAACuJ,KAAM,OAAQN,MAAO,MAAO0qD,IAG7ChmD,CACT,CC8Be,SAAS6mD,GAAaC,EAAannD,GAChD,OAAImnD,GAAe,QAASA,EAInBxjC,eAAgB5jB,EAAM2kC,GAE3B,MAAM0iB,EACJhB,GAAOrmD,EAAM,CAAC2kC,UAAS1kC,UAEnBmnD,EAAYr1D,IAAIs1D,EAAU1iB,EAClC,EAMK,SAAU3kC,EAAM2kC,GAErB,OACE0hB,GAAOrmD,EAAM,CAAC2kC,UAAU1kC,GAAWmnD,GAEvC,CACF,CCvJO,SAASE,GAAK3e,GACnB,GAAIA,EACF,MAAMA,CAEV,C,gBCXe,SAAS4e,GAAc3rD,GACrC,GAAqB,kBAAVA,GAAgC,OAAVA,EAChC,OAAO,EAGR,MAAMwhB,EAAYvN,OAAO23C,eAAe5rD,GACxC,OAAsB,OAAdwhB,GAAsBA,IAAcvN,OAAOuN,WAAkD,OAArCvN,OAAO23C,eAAepqC,OAA0BqqC,OAAOC,eAAe9rD,MAAY6rD,OAAOvsC,YAAYtf,EACtK,CCUO,SAAS+rD,KAEd,MAAMC,EAAM,GAENC,EAAW,CAAC91D,IAKlB,YAAgBgqB,GACd,IAAI+rC,GAAmB,EAEvB,MAAMC,EAAWhsC,EAAOlG,MAExB,GAAwB,oBAAbkyC,EACT,MAAM,IAAItpD,UAAU,2CAA6CspD,IAWnE,SAAS5xC,EAAKwyB,KAAUqf,GACtB,MAAMjiB,EAAK6hB,IAAME,GACjB,IAAIpzD,GAAS,EAEb,GAAIi0C,EACFof,EAASpf,OADX,CAMA,OAASj0C,EAAQqnB,EAAOlnB,QACA,OAAlBmzD,EAAOtzD,SAAqCH,IAAlByzD,EAAOtzD,KACnCszD,EAAOtzD,GAASqnB,EAAOrnB,IAK3BqnB,EAASisC,EAGLjiB,EA6BH,SAAckiB,EAAYF,GAE/B,IAAI5pD,EAEJ,OAAO+pD,EAQP,SAASA,KAAWvqD,GAClB,MAAMwqD,EAAoBF,EAAWpzD,OAAS8I,EAAW9I,OAEzD,IAAIyL,EAEA6nD,GACFxqD,EAAWhL,KAAKy1D,GAGlB,IACE9nD,EAAS2nD,EAAW7vD,MAAM6G,KAAMtB,EAClC,CAAE,MAAOgrC,GAOP,GAAIwf,GAAqBhqD,EACvB,MAPsCwqC,EAUxC,OAAOyf,EAViCzf,EAW1C,CAEKwf,IACC7nD,aAAkB+nD,QACpB/nD,EAAOgoD,KAAKA,EAAMF,GACT9nD,aAAkBb,MAC3B2oD,EAAK9nD,GAELgoD,EAAKhoD,GAGX,CAMA,SAAS8nD,EAAKzf,KAAUqf,GACjB7pD,IACHA,GAAS,EACT4pD,EAASpf,KAAUqf,GAEvB,CAOA,SAASM,EAAK1sD,GACZwsD,EAAK,KAAMxsD,EACb,CACF,CA/FQqzB,CAAK8W,EAAI5vB,EAAT8Y,IAAkB+4B,GAElBD,EAAS,QAASC,EAhBpB,CAkBF,CAjCA7xC,CAAK,QAAS4F,EAkChB,EAhDuB08B,IAmDvB,SAAa8P,GACX,GAA0B,oBAAfA,EACT,MAAM,IAAI9pD,UACR,+CAAiD8pD,GAKrD,OADAX,EAAIj1D,KAAK41D,GACFV,CACT,GA1DA,OAAOA,CA2DT,CC/BO,MAAMpkD,GAAO,CAAC+kD,SAcrB,SAAkB/kD,EAAMglD,GACtB,QAAYl0D,IAARk0D,GAAoC,kBAARA,EAC9B,MAAM,IAAIhqD,UAAU,mCAGtBiqD,GAAWjlD,GACX,IAIIklD,EAJApzD,EAAQ,EACRI,GAAO,EACPjB,EAAQ+O,EAAK5O,OAIjB,QAAYN,IAARk0D,GAAoC,IAAfA,EAAI5zD,QAAgB4zD,EAAI5zD,OAAS4O,EAAK5O,OAAQ,CACrE,KAAOH,KACL,GAAgC,KAA5B+O,EAAKqD,YAAYpS,IAGnB,GAAIi0D,EAAc,CAChBpzD,EAAQb,EAAQ,EAChB,KACF,OACSiB,EAAM,IAGfgzD,GAAe,EACfhzD,EAAMjB,EAAQ,GAIlB,OAAOiB,EAAM,EAAI,GAAK8N,EAAKpL,MAAM9C,EAAOI,EAC1C,CAEA,GAAI8yD,IAAQhlD,EACV,MAAO,GAGT,IAAImlD,GAAoB,EACpBC,EAAWJ,EAAI5zD,OAAS,EAE5B,KAAOH,KACL,GAAgC,KAA5B+O,EAAKqD,YAAYpS,IAGnB,GAAIi0D,EAAc,CAChBpzD,EAAQb,EAAQ,EAChB,KACF,OAEIk0D,EAAmB,IAGrBD,GAAe,EACfC,EAAmBl0D,EAAQ,GAGzBm0D,GAAY,IAEVplD,EAAKqD,YAAYpS,KAAW+zD,EAAI3hD,YAAY+hD,KAC1CA,EAAW,IAGblzD,EAAMjB,IAKRm0D,GAAY,EACZlzD,EAAMizD,IAMVrzD,IAAUI,EACZA,EAAMizD,EACGjzD,EAAM,IACfA,EAAM8N,EAAK5O,QAGb,OAAO4O,EAAKpL,MAAM9C,EAAOI,EAC3B,EA9F+BmzD,QAwG/B,SAAiBrlD,GAGf,GAFAilD,GAAWjlD,GAES,IAAhBA,EAAK5O,OACP,MAAO,IAGT,IAGIk0D,EAHApzD,GAAO,EACPjB,EAAQ+O,EAAK5O,OAKjB,OAASH,GACP,GAAgC,KAA5B+O,EAAKqD,YAAYpS,IACnB,GAAIq0D,EAAgB,CAClBpzD,EAAMjB,EACN,KACF,OACUq0D,IAEVA,GAAiB,GAIrB,OAAOpzD,EAAM,EACe,KAAxB8N,EAAKqD,YAAY,GACf,IACA,IACM,IAARnR,GAAqC,KAAxB8N,EAAKqD,YAAY,GAC9B,KACArD,EAAKpL,MAAM,EAAG1C,EACpB,EAxIwCqzD,QAkJxC,SAAiBvlD,GACfilD,GAAWjlD,GAEX,IASIslD,EATAr0D,EAAQ+O,EAAK5O,OAEbc,GAAO,EACPszD,EAAY,EACZC,GAAY,EAGZC,EAAc,EAIlB,KAAOz0D,KAAS,CACd,MAAMnD,EAAOkS,EAAKqD,YAAYpS,GAE9B,GAAa,KAATnD,EAWAoE,EAAM,IAGRozD,GAAiB,EACjBpzD,EAAMjB,EAAQ,GAGH,KAATnD,EAEE23D,EAAW,EACbA,EAAWx0D,EACc,IAAhBy0D,IACTA,EAAc,GAEPD,GAAY,IAGrBC,GAAe,QAzBf,GAAIJ,EAAgB,CAClBE,EAAYv0D,EAAQ,EACpB,KACF,CAwBJ,CAEA,GACEw0D,EAAW,GACXvzD,EAAM,GAEU,IAAhBwzD,GAEiB,IAAhBA,GAAqBD,IAAavzD,EAAM,GAAKuzD,IAAaD,EAAY,EAEvE,MAAO,GAGT,OAAOxlD,EAAKpL,MAAM6wD,EAAUvzD,EAC9B,EA/MiDyZ,KAyNjD,YAAiBg6C,GACf,IAEIC,EAFA30D,GAAS,EAIb,OAASA,EAAQ00D,EAASv0D,QACxB6zD,GAAWU,EAAS10D,IAEhB00D,EAAS10D,KACX20D,OACa90D,IAAX80D,EAAuBD,EAAS10D,GAAS20D,EAAS,IAAMD,EAAS10D,IAIvE,YAAkBH,IAAX80D,EAAuB,IAahC,SAAmB5lD,GACjBilD,GAAWjlD,GAEX,MAAM6lD,EAAmC,KAAxB7lD,EAAKqD,YAAY,GAGlC,IAAIlL,EAuBN,SAAyB6H,EAAM8lD,GAC7B,IAMIh4D,EAEAi4D,EARAlpD,EAAS,GACTmpD,EAAoB,EACpBC,GAAa,EACbC,EAAO,EACPj1D,GAAS,EAMb,OAASA,GAAS+O,EAAK5O,QAAQ,CAC7B,GAAIH,EAAQ+O,EAAK5O,OACftD,EAAOkS,EAAKqD,YAAYpS,OACnB,IAAa,KAATnD,EACT,MAEAA,EAAO,EACT,CAEA,GAAa,KAATA,EAAuB,CACzB,GAAIm4D,IAAch1D,EAAQ,GAAc,IAATi1D,QAExB,GAAID,IAAch1D,EAAQ,GAAc,IAATi1D,EAAY,CAChD,GACErpD,EAAOzL,OAAS,GACM,IAAtB40D,GAC0C,KAA1CnpD,EAAOwG,YAAYxG,EAAOzL,OAAS,IACO,KAA1CyL,EAAOwG,YAAYxG,EAAOzL,OAAS,GAEnC,GAAIyL,EAAOzL,OAAS,GAGlB,GAFA20D,EAAiBlpD,EAAOyK,YAAY,KAEhCy+C,IAAmBlpD,EAAOzL,OAAS,EAAG,CACpC20D,EAAiB,GACnBlpD,EAAS,GACTmpD,EAAoB,IAEpBnpD,EAASA,EAAOjI,MAAM,EAAGmxD,GACzBC,EAAoBnpD,EAAOzL,OAAS,EAAIyL,EAAOyK,YAAY,MAG7D2+C,EAAYh1D,EACZi1D,EAAO,EACP,QACF,OACK,GAAIrpD,EAAOzL,OAAS,EAAG,CAC5ByL,EAAS,GACTmpD,EAAoB,EACpBC,EAAYh1D,EACZi1D,EAAO,EACP,QACF,CAGEJ,IACFjpD,EAASA,EAAOzL,OAAS,EAAIyL,EAAS,MAAQ,KAC9CmpD,EAAoB,EAExB,MACMnpD,EAAOzL,OAAS,EAClByL,GAAU,IAAMmD,EAAKpL,MAAMqxD,EAAY,EAAGh1D,GAE1C4L,EAASmD,EAAKpL,MAAMqxD,EAAY,EAAGh1D,GAGrC+0D,EAAoB/0D,EAAQg1D,EAAY,EAG1CA,EAAYh1D,EACZi1D,EAAO,CACT,MAAoB,KAATp4D,GAAyBo4D,GAAQ,EAC1CA,IAEAA,GAAQ,CAEZ,CAEA,OAAOrpD,CACT,CAtGcspD,CAAgBnmD,GAAO6lD,GAEd,IAAjB1tD,EAAM/G,QAAiBy0D,IACzB1tD,EAAQ,KAGNA,EAAM/G,OAAS,GAA2C,KAAtC4O,EAAKqD,YAAYrD,EAAK5O,OAAS,KACrD+G,GAAS,KAGX,OAAO0tD,EAAW,IAAM1tD,EAAQA,CAClC,CA9BsCuhB,CAAUksC,EAChD,EAxOuDQ,IAAK,KA0W5D,SAASnB,GAAWjlD,GAClB,GAAoB,kBAATA,EACT,MAAM,IAAIhF,UACR,mCAAqCqrD,KAAKC,UAAUtmD,GAG1D,CChaO,MAAMumD,GAAO,CAACC,IAErB,WACE,MAAO,GACT,GCYO,SAASC,GAAMC,GACpB,OAAOvqD,QACa,OAAlBuqD,GAC2B,kBAAlBA,GACP,SAAUA,GACVA,EAAcrkC,MACd,aAAcqkC,GACdA,EAAc5mD,eAEShP,IAAvB41D,EAAcC,KAEpB,CClBO,SAASC,GAAU5mD,GACxB,GAAoB,kBAATA,EACTA,EAAO,IAAI6mD,IAAI7mD,QACV,IAAKymD,GAAMzmD,GAAO,CAEvB,MAAMklC,EAAQ,IAAIlqC,UAChB,+EACEgF,EACA,KAGJ,MADAklC,EAAMp3C,KAAO,uBACPo3C,CACR,CAEA,GAAsB,UAAlBllC,EAAKF,SAAsB,CAE7B,MAAMolC,EAAQ,IAAIlqC,UAAU,kCAE5B,MADAkqC,EAAMp3C,KAAO,yBACPo3C,CACR,CAEA,OAWF,SAA6BpmC,GAC3B,GAAqB,KAAjBA,EAAIgoD,SAAiB,CAEvB,MAAM5hB,EAAQ,IAAIlqC,UAChB,wDAGF,MADAkqC,EAAMp3C,KAAO,4BACPo3C,CACR,CAEA,MAAM6hB,EAAWjoD,EAAIioD,SACrB,IAAI91D,GAAS,EAEb,OAASA,EAAQ81D,EAAS31D,QACxB,GACkC,KAAhC21D,EAAS1jD,YAAYpS,IACe,KAApC81D,EAAS1jD,YAAYpS,EAAQ,GAC7B,CACA,MAAM+1D,EAAQD,EAAS1jD,YAAYpS,EAAQ,GAC3C,GAAc,KAAV+1D,GAAoC,MAAVA,EAAyB,CAErD,MAAM9hB,EAAQ,IAAIlqC,UAChB,uDAGF,MADAkqC,EAAMp3C,KAAO,4BACPo3C,CACR,CACF,CAGF,OAAO+hB,mBAAmBF,EAC5B,CA1CSG,CAAoBlnD,EAC7B,CCsDA,MAAM06B,GAA8B,CAClC,UACA,OACA,WACA,OACA,UACA,WAGK,MAAMysB,GAuBXt1C,WAAAA,CAAY1Z,GAEV,IAAIqE,EAKFA,EAHGrE,EAEMsuD,GAAMtuD,GACL,CAAC6H,KAAM7H,GACS,kBAAVA,GAujBtB,SAAsBA,GACpB,OAAOgE,QACLhE,GACmB,kBAAVA,GACP,eAAgBA,GAChB,eAAgBA,EAEtB,CA9jB4CivD,CAAajvD,GACzC,CAACA,SAEDA,EANA,CAAC,EAgBbqD,KAAKgrD,IAAMD,GAAKC,MAUhBhrD,KAAK4D,KAAO,CAAC,EASb5D,KAAK6rD,QAAU,GAOf7rD,KAAK8rD,SAAW,GAOhB9rD,KAAKrD,MAYLqD,KAAKkH,IAULlH,KAAKqB,OASLrB,KAAK+rD,OAIL,IAkBIt4D,EAlBAgC,GAAS,EAEb,OAASA,EAAQypC,GAAMtpC,QAAQ,CAC7B,MAAMnC,EAAOyrC,GAAMzpC,GAKjBhC,KAAQuN,QACU1L,IAAlB0L,EAAQvN,IACU,OAAlBuN,EAAQvN,KAGRuM,KAAKvM,GAAiB,YAATA,EAAqB,IAAIuN,EAAQvN,IAASuN,EAAQvN,GAEnE,CAMA,IAAKA,KAAQuN,EAENk+B,GAAM9/B,SAAS3L,KAElBuM,KAAKvM,GAAQuN,EAAQvN,GAG3B,CAQA,YAAI81D,GACF,MAA4B,kBAAdvpD,KAAKwE,KAAoBA,GAAK+kD,SAASvpD,KAAKwE,WAAQlP,CACpE,CAcA,YAAIi0D,CAASA,GACXyC,GAAezC,EAAU,YACzB0C,GAAW1C,EAAU,YACrBvpD,KAAKwE,KAAOA,GAAK2L,KAAKnQ,KAAK6pD,SAAW,GAAIN,EAC5C,CAQA,WAAIM,GACF,MAA4B,kBAAd7pD,KAAKwE,KAAoBA,GAAKqlD,QAAQ7pD,KAAKwE,WAAQlP,CACnE,CAYA,WAAIu0D,CAAQA,GACVJ,GAAWzpD,KAAKupD,SAAU,WAC1BvpD,KAAKwE,KAAOA,GAAK2L,KAAK05C,GAAW,GAAI7pD,KAAKupD,SAC5C,CAQA,WAAIQ,GACF,MAA4B,kBAAd/pD,KAAKwE,KAAoBA,GAAKulD,QAAQ/pD,KAAKwE,WAAQlP,CACnE,CAcA,WAAIy0D,CAAQA,GAIV,GAHAkC,GAAWlC,EAAS,WACpBN,GAAWzpD,KAAK6pD,QAAS,WAErBE,EAAS,CACX,GAA+B,KAA3BA,EAAQliD,YAAY,GACtB,MAAM,IAAIrH,MAAM,iCAGlB,GAAIupD,EAAQ3qD,SAAS,IAAK,GACxB,MAAM,IAAIoB,MAAM,yCAEpB,CAEAR,KAAKwE,KAAOA,GAAK2L,KAAKnQ,KAAK6pD,QAAS7pD,KAAKksD,MAAQnC,GAAW,IAC9D,CAQA,QAAIvlD,GACF,OAAOxE,KAAK6rD,QAAQ7rD,KAAK6rD,QAAQj2D,OAAS,EAC5C,CAcA,QAAI4O,CAAKA,GACHymD,GAAMzmD,KACRA,EAAO4mD,GAAU5mD,IAGnBwnD,GAAexnD,EAAM,QAEjBxE,KAAKwE,OAASA,GAChBxE,KAAK6rD,QAAQn4D,KAAK8Q,EAEtB,CAQA,QAAI0nD,GACF,MAA4B,kBAAdlsD,KAAKwE,KACfA,GAAK+kD,SAASvpD,KAAKwE,KAAMxE,KAAK+pD,cAC9Bz0D,CACN,CAcA,QAAI42D,CAAKA,GACPF,GAAeE,EAAM,QACrBD,GAAWC,EAAM,QACjBlsD,KAAKwE,KAAOA,GAAK2L,KAAKnQ,KAAK6pD,SAAW,GAAIqC,GAAQlsD,KAAK+pD,SAAW,IACpE,CA+DAoC,IAAAA,CAAKnnB,EAAeC,EAAwB5F,GAE1C,MAAMkG,EAAUvlC,KAAKulC,QAAQP,EAAeC,EAAwB5F,GAIpE,MAFAkG,EAAQE,OAAQ,EAEVF,CACR,CA4DAl/B,IAAAA,CAAK2+B,EAAeC,EAAwB5F,GAE1C,MAAMkG,EAAUvlC,KAAKulC,QAAQP,EAAeC,EAAwB5F,GAIpE,OAFAkG,EAAQE,WAAQnwC,EAETiwC,CACT,CA4DAA,OAAAA,CAAQP,EAAeC,EAAwB5F,GAC7C,MAAMkG,EAAU,IAAIR,GAElBC,EACAC,EACA5F,GAYF,OATIr/B,KAAKwE,OACP+gC,EAAQ9nB,KAAOzd,KAAKwE,KAAO,IAAM+gC,EAAQ9nB,KACzC8nB,EAAQG,KAAO1lC,KAAKwE,MAGtB+gC,EAAQE,OAAQ,EAEhBzlC,KAAK8rD,SAASp4D,KAAK6xC,GAEZA,CACT,CAeAr8B,QAAAA,CAASqzC,GACP,QAAmBjnD,IAAf0K,KAAKrD,MACP,MAAO,GAGT,GAA0B,kBAAfqD,KAAKrD,MACd,OAAOqD,KAAKrD,MAId,OADgB,IAAI6lD,YAAYjG,QAAYjnD,GAC7B6mD,OAAOn8C,KAAKrD,MAC7B,EAaF,SAASsvD,GAAWG,EAAM3uC,GACxB,GAAI2uC,GAAQA,EAAKhtD,SAASoF,GAAKomD,KAC7B,MAAM,IAAIpqD,MACR,IAAMid,EAAO,uCAAyCjZ,GAAKomD,IAAM,IAGvE,CAYA,SAASoB,GAAeI,EAAM3uC,GAC5B,IAAK2uC,EACH,MAAM,IAAI5rD,MAAM,IAAMid,EAAO,oBAEjC,CAYA,SAASgsC,GAAWjlD,EAAMiZ,GACxB,IAAKjZ,EACH,MAAM,IAAIhE,MAAM,YAAcid,EAAO,kCAEzC,CC7qBO,MAAM4uC,GAYP,SAAU7vC,GACR,MAEM8vC,EAFOtsD,KACOqW,YAIX8H,UAEHouC,EAAOD,EAAM9vC,GAEbrjB,EAAQ,WACZ,OAAOozD,EAAKpzD,MAAMA,EAAOiD,UAC3B,EAEAwU,OAAO47C,eAAerzD,EAAOmzD,GAE7B,MAAMG,EAAQ77C,OAAO87C,oBAAoBH,GAEzC,IAAK,MAAMI,KAAKF,EAAO,CACrB,MAAMG,EAAah8C,OAAOi8C,yBAAyBN,EAAMI,GACrDC,GAAYh8C,OAAOk8C,eAAe3zD,EAAOwzD,EAAGC,EAClD,CAEA,OAAOzzD,CACT,ECsUAmmB,GAAM,CAAC,EAAEtC,eAeR,MAAM+vC,WAAkBV,GAI7Bh2C,WAAAA,GAEE+I,MAAM,QAeNpf,KAAKgtD,cAAW13D,EAYhB0K,KAAKitD,YAAS33D,EAad0K,KAAKktD,UAAY,GAajBltD,KAAKkiD,cAAW5sD,EAShB0K,KAAKmtD,aAAe,EASpBntD,KAAKotD,YAAS93D,EASd0K,KAAKqtD,UAAY,CAAC,EAUlBrtD,KAAK+T,YAASze,EASd0K,KAAKstD,aAAe5E,IACtB,CAaA6E,IAAAA,GAEE,MAAMpF,EAEF,IAAI4E,GAER,IAAIt3D,GAAS,EAEb,OAASA,EAAQuK,KAAKktD,UAAUt3D,QAAQ,CACtC,MAAM43D,EAAWxtD,KAAKktD,UAAUz3D,GAChC0yD,EAAY3O,OAAOgU,EACrB,CAIA,OAFArF,EAAYvkD,KAAK6pD,IAAO,EAAM,CAAC,EAAGztD,KAAKqtD,YAEhClF,CACT,CA6DAvkD,IAAAA,CAAKvK,EAAKsD,GACR,MAAmB,kBAARtD,EAEgB,IAArB+C,UAAUxG,QACZ83D,GAAe,OAAQ1tD,KAAKotD,QAC5BptD,KAAKqtD,UAAUh0D,GAAOsD,EACfqD,MAIDsf,GAAIze,KAAKb,KAAKqtD,UAAWh0D,IAAQ2G,KAAKqtD,UAAUh0D,SAAS/D,EAI/D+D,GACFq0D,GAAe,OAAQ1tD,KAAKotD,QAC5BptD,KAAKqtD,UAAYh0D,EACV2G,MAIFA,KAAKqtD,SACd,CAmBAM,MAAAA,GACE,GAAI3tD,KAAKotD,OACP,OAAOptD,KAMT,MAAMsS,EAAyDtS,KAE/D,OAASA,KAAKmtD,YAAcntD,KAAKktD,UAAUt3D,QAAQ,CACjD,MAAO43D,KAAaxsD,GAAWhB,KAAKktD,UAAUltD,KAAKmtD,aAEnD,IAAmB,IAAfnsD,EAAQ,GACV,UAGiB,IAAfA,EAAQ,KACVA,EAAQ,QAAK1L,GAGf,MAAMs4D,EAAcJ,EAAS3sD,KAAKyR,KAAStR,GAEhB,oBAAhB4sD,GACT5tD,KAAKstD,aAAa9T,IAAIoU,EAE1B,CAKA,OAHA5tD,KAAKotD,QAAS,EACdptD,KAAKmtD,YAAchwD,OAAOC,kBAEnB4C,IACT,CAgBAqiD,KAAAA,CAAM3c,GACJ1lC,KAAK2tD,SACL,MAAME,EAAWC,GAAMpoB,GACjB3xB,EAAS/T,KAAK+T,QAAU/T,KAAKitD,OAEnC,OADAc,GAAa,QAASh6C,GACfA,EAAO1V,OAAOwvD,GAAWA,EAClC,CA4CAG,OAAAA,CAAQtoB,EAAMyjB,GACZ,MAAM72C,EAAOtS,KAMb,OAJAA,KAAK2tD,SACLI,GAAa,UAAW/tD,KAAK+T,QAAU/T,KAAKitD,QAC5CgB,GAAe,UAAWjuD,KAAKkiD,UAAYliD,KAAKgtD,UAEzC7D,EAAO+E,OAAS54D,EAAW6zD,GAAQ,IAAIC,QAAQ8E,GAQtD,SAASA,EAAS/uD,EAASgvD,GACzB,MAAMN,EAAWC,GAAMpoB,GAGjB0oB,EAEsB97C,EAAK+vC,MAAMwL,GA+BvC,SAASQ,EAAS3kB,EAAOhE,GACnBgE,IAAUhE,EACZyoB,EAAOzkB,GACEvqC,EACTA,EAAQumC,KAER7hC,EAAAA,EAAAA,IAAOslD,EAAM,yCACbA,OAAK7zD,EAAWowC,GAEpB,CArCApzB,EAAKxf,IAAIs7D,EAAWP,GAAU,SAAUnkB,EAAO3oC,EAAM2kC,GACnD,GAAIgE,IAAU3oC,IAAS2kC,EACrB,OAAO2oB,EAAS3kB,GAKlB,MAAM4kB,EAEsBvtD,EAGtBwtD,EAAgBj8C,EAAKw4C,UAAUwD,EAAa5oB,GA2iB1D,IAAyB/oC,EACC,kBADDA,EAziBG4xD,IAqjB5B,SAAsB5xD,GACpB,OAAOgE,QACLhE,GACmB,kBAAVA,GACP,eAAgBA,GAChB,eAAgBA,EAEtB,CAlBsCivD,CAAajvD,GAziBzC+oC,EAAK/oC,MAAQ4xD,EAEb7oB,EAAKrkC,OAASktD,EAGhBF,EAAS3kB,EAAsDhE,EACjE,GAiBF,CACF,CAiCA8oB,WAAAA,CAAY9oB,GAEV,IAEIrkC,EAFAotD,GAAW,EAYf,OARAzuD,KAAK2tD,SACLI,GAAa,cAAe/tD,KAAK+T,QAAU/T,KAAKitD,QAChDgB,GAAe,cAAejuD,KAAKkiD,UAAYliD,KAAKgtD,UAEpDhtD,KAAKguD,QAAQtoB,GASb,SAAkBgE,EAAOhE,GACvB+oB,GAAW,EACXpG,GAAK3e,GACLroC,EAASqkC,CACX,IAZAgpB,GAAW,cAAe,UAAWD,IACrC5qD,EAAAA,EAAAA,IAAOxC,EAAQ,+CAERA,CAUT,CAwCAvO,GAAAA,CAAIiO,EAAM2kC,EAAMyjB,GACdwF,GAAW5tD,GACXf,KAAK2tD,SAEL,MAAML,EAAettD,KAAKstD,aAO1B,OALKnE,GAAwB,oBAATzjB,IAClByjB,EAAOzjB,EACPA,OAAOpwC,GAGF6zD,EAAO+E,OAAS54D,EAAW6zD,GAAQ,IAAIC,QAAQ8E,GAWtD,SAASA,EAAS/uD,EAASgvD,IACzBtqD,EAAAA,EAAAA,IACkB,oBAAT6hC,EACP,qDAEF,MAAMmoB,EAAWC,GAAMpoB,GACvB4nB,EAAax6D,IAAIiO,EAAM8sD,GAQvB,SAAkBnkB,EAAOklB,EAAYlpB,GACnC,MAAMmpB,EAEFD,GAAc7tD,EAGd2oC,EACFykB,EAAOzkB,GACEvqC,EACTA,EAAQ0vD,KAERhrD,EAAAA,EAAAA,IAAOslD,EAAM,yCACbA,OAAK7zD,EAAWu5D,EAAenpB,GAEnC,GACF,CACF,CAmBAopB,OAAAA,CAAQ/tD,EAAM2kC,GAEZ,IAEIrkC,EAFAotD,GAAW,EAQf,OAJAzuD,KAAKlN,IAAIiO,EAAM2kC,GASf,SAAkBgE,EAAO3oC,GACvBsnD,GAAK3e,GACLroC,EAASN,EACT0tD,GAAW,CACb,IAXAC,GAAW,UAAW,MAAOD,IAC7B5qD,EAAAA,EAAAA,IAAOxC,EAAQ,+CACRA,CAUT,CA+BAypD,SAAAA,CAAU/pD,EAAM2kC,GACd1lC,KAAK2tD,SACL,MAAME,EAAWC,GAAMpoB,GACjBwc,EAAWliD,KAAKkiD,UAAYliD,KAAKgtD,SAIvC,OAHAiB,GAAe,YAAa/L,GAC5ByM,GAAW5tD,GAEJmhD,EAASnhD,EAAM8sD,EACxB,CA2DArU,GAAAA,CAAI78C,KAAU+B,GACZ,MAAMwuD,EAAYltD,KAAKktD,UACjBG,EAAYrtD,KAAKqtD,UAIvB,GAFAK,GAAe,MAAO1tD,KAAKotD,QAEb,OAAVzwD,QAA4BrH,IAAVqH,QAEf,GAAqB,oBAAVA,EAChBoyD,EAAUpyD,EAAO+B,OACZ,IAAqB,kBAAV/B,EAOhB,MAAM,IAAI6C,UAAU,+BAAiC7C,EAAQ,KANzDL,MAAMsD,QAAQjD,GAChBqyD,EAAQryD,GAERsyD,EAAUtyD,EAId,CAEA,OAAOqD,KAMP,SAASsW,EAAI3Z,GACX,GAAqB,oBAAVA,EACToyD,EAAUpyD,EAAO,QACZ,IAAqB,kBAAVA,EAShB,MAAM,IAAI6C,UAAU,+BAAiC7C,EAAQ,KAR7D,GAAIL,MAAMsD,QAAQjD,GAAQ,CACxB,MAAOuyD,KAAWxwD,GAC4B/B,EAC9CoyD,EAAUG,EAAQxwD,EACpB,MACEuwD,EAAUtyD,EAId,CACF,CAMA,SAASsyD,EAAU5tD,GACjB,KAAM,YAAaA,MAAa,aAAcA,GAC5C,MAAM,IAAIb,MACR,8KAIJwuD,EAAQ3tD,EAAO8tD,SAEX9tD,EAAO+M,WACTi/C,EAAUj/C,SAAWq/C,IAAO,EAAMJ,EAAUj/C,SAAU/M,EAAO+M,UAEjE,CAMA,SAAS4gD,EAAQG,GACf,IAAI15D,GAAS,EAEb,GAAgB,OAAZ05D,QAAgC75D,IAAZ65D,OAEjB,KAAI7yD,MAAMsD,QAAQuvD,GAMvB,MAAM,IAAI3vD,UAAU,oCAAsC2vD,EAAU,KALpE,OAAS15D,EAAQ05D,EAAQv5D,QAAQ,CAE/B0gB,EADc64C,EAAQ15D,GAExB,CAGF,CACF,CAOA,SAASs5D,EAAUG,EAAQxwD,GACzB,IAAIjJ,GAAS,EACT25D,GAAc,EAElB,OAAS35D,EAAQy3D,EAAUt3D,QACzB,GAAIs3D,EAAUz3D,GAAO,KAAOy5D,EAAQ,CAClCE,EAAa35D,EACb,KACF,CAGF,IAAoB,IAAhB25D,EACFlC,EAAUx5D,KAAK,CAACw7D,KAAWxwD,SAIxB,GAAIA,EAAW9I,OAAS,EAAG,CAC9B,IAAKy5D,KAAYvzD,GAAQ4C,EACzB,MAAM4wD,EAAiBpC,EAAUkC,GAAY,GACzCG,GAAWD,IAAmBC,GAAWF,KAC3CA,EAAU5B,IAAO,EAAM6B,EAAgBD,IAGzCnC,EAAUkC,GAAc,CAACF,EAAQG,KAAYvzD,EAC/C,CACF,CACF,EA+BK,MAAM0zD,IAAU,IAAIzC,IAAYY,SASvC,SAASI,GAAatwC,EAAM9gB,GAC1B,GAAqB,oBAAVA,EACT,MAAM,IAAI6C,UAAU,WAAaie,EAAO,qBAE5C,CASA,SAASwwC,GAAexwC,EAAM9gB,GAC5B,GAAqB,oBAAVA,EACT,MAAM,IAAI6C,UAAU,WAAaie,EAAO,uBAE5C,CASA,SAASiwC,GAAejwC,EAAM2vC,GAC5B,GAAIA,EACF,MAAM,IAAI5sD,MACR,gBACEid,EACA,mHAGR,CAQA,SAASkxC,GAAWz7D,GAGlB,IAAKq8D,GAAWr8D,IAA8B,kBAAdA,EAAK+J,KACnC,MAAM,IAAIuC,UAAU,uBAAyBtM,EAAO,IAGxD,CAUA,SAASw7D,GAAWjxC,EAAMgyC,EAAWhB,GACnC,IAAKA,EACH,MAAM,IAAIjuD,MACR,IAAMid,EAAO,0BAA4BgyC,EAAY,YAG3D,CAMA,SAAS3B,GAAMnxD,GACb,OAOF,SAAyBA,GACvB,OAAOgE,QACLhE,GACmB,kBAAVA,GACP,YAAaA,GACb,aAAcA,EAEpB,CAdS+yD,CAAgB/yD,GAASA,EAAQ,IAAIgvD,GAAMhvD,EACpD,CChpCA,MAAMgzD,GACJ,oEAGIC,GAAe,GAEfC,GAA2B,CAAC7J,oBAAoB,GAChD8J,GAAe,gCAIfC,GAAe,CACnB,CAACnxD,KAAM,aAAcsV,GAAI,wCACzB,CAACtV,KAAM,qBAAsBsV,GAAI,wCACjC,CACEtV,KAAM,YACNsV,GAAI,qDACJ6uB,GAAI,gBAEN,CACEnkC,KAAM,eACNsV,GAAI,qDACJ6uB,GAAI,mBAEN,CAACnkC,KAAM,YAAasV,GAAI,oBACxB,CACEtV,KAAM,kBACNsV,GAAI,qDACJ6uB,GAAI,sBAEN,CAACnkC,KAAM,aAAcsV,GAAI,wCACzB,CAACtV,KAAM,sBAAuBsV,GAAI,+BAClC,CACEtV,KAAM,mBACNsV,GAAI,kDAEN,CAACtV,KAAM,aAAcsV,GAAI,qBACzB,CAACtV,KAAM,UAAWsV,GAAI,kCAAmC6uB,GAAI,iBAC7D,CAACnkC,KAAM,eAAgBsV,GAAI,wBAC3B,CAACtV,KAAM,YAAasV,GAAI,iCAAkC6uB,GAAI,cAC9D,CAACnkC,KAAM,SAAUsV,GAAI,4BAA6B6uB,GAAI,YACtD,CAACnkC,KAAM,YAAasV,GAAI,qBACxB,CAACtV,KAAM,oBAAqBsV,GAAI,oBAAqB6uB,GAAI,gBACzD,CAACnkC,KAAM,mBAAoBsV,GAAI,oBAAqB6uB,GAAI,iBAenD,SAASitB,GAAShvD,GACvB,MAAMivD,EAAYC,GAAgBlvD,GAC5B0kC,EAAOyqB,GAAWnvD,GACxB,OAAOovD,GAAKH,EAAUnB,QAAQmB,EAAU5N,MAAM3c,GAAOA,GAAO1kC,EAC9D,CAmFA,SAASkvD,GAAgBlvD,GACvB,MAAMqvD,EAAgBrvD,EAAQqvD,eAAiBT,GACzCU,EAAgBtvD,EAAQsvD,eAAiBV,GACzCW,EAAsBvvD,EAAQuvD,oBAChC,IAAIvvD,EAAQuvD,uBAAwBV,IACpCA,GAQJ,OANkBL,KACfhW,IAAImJ,IACJnJ,IAAI8W,GACJ9W,IAAI0O,GAAcqI,GAClB/W,IAAI6W,EAGT,CAUA,SAASF,GAAWnvD,GAClB,MAAMgB,EAAWhB,EAAQgB,UAAY,GAC/B0jC,EAAO,IAAIimB,GAYjB,MAVwB,kBAAb3pD,EACT0jC,EAAK/oC,MAAQqF,GAEb+a,EAAAA,EAAAA,IACE,qBACE/a,EACA,4CAIC0jC,CACT,CAYA,SAAS0qB,GAAKrvD,EAAMC,GAClB,MAAMwvD,EAAkBxvD,EAAQwvD,gBAC1BC,EAAezvD,EAAQyvD,aACvBzpB,EAAahmC,EAAQgmC,WACrB0pB,EAAqB1vD,EAAQ0vD,mBAC7BC,EAAW3vD,EAAQ2vD,SACnBC,EAAmB5vD,EAAQ4vD,iBAC3BC,EAAe7vD,EAAQ6vD,cAAgBC,GAE7C,IAAK,MAAMC,KAAehB,GACpBn/C,OAAOogD,OAAOhwD,EAAS+vD,EAAYnyD,QACrCme,EAAAA,EAAAA,IACE,eACEg0C,EAAYnyD,KACZ,YACCmyD,EAAYhuB,GACT,QAAUguB,EAAYhuB,GAAK,YAC3B,aACJ,UACA4sB,GACA,IACAoB,EAAY78C,GACZ,oBAaR,OARIs8C,GAAmBE,IACrB3zC,EAAAA,EAAAA,IACE,6FC/DC,SAAehc,EAAM4H,EAAeC,EAAkBC,GAE3D,IAAIC,EAEA1K,EAEAwD,EAGuB,oBAAlB+G,GACqB,oBAArBC,GAEPxK,OAAO9I,EACPsM,EAAU+G,EACVG,EAAUF,IAGVxK,EAAOuK,EAEP/G,EAAUgH,EACVE,EAAUD,IAGZlH,EAAAA,GAAAA,IAAaZ,EAAM3C,GAMnB,SAAkBlL,EAAM2O,GACtB,MAAMnB,EAASmB,EAAQA,EAAQjM,OAAS,GAClCH,EAAQiL,EAASA,EAAOsB,SAAStM,QAAQxC,QAAQoC,EACvD,OAAOsM,EAAQ1O,EAAMuC,EAAOiL,EAC9B,GAVmCoI,EAWrC,CDiCEC,CAAMhI,GAaN,SAAmB7N,EAAMuC,EAAOiL,GAC9B,GAAkB,QAAdxN,EAAK+J,MAAkByD,GAA2B,kBAAVjL,EAO1C,OANIk7D,EACFjwD,EAAOsB,SAASrM,OAAOF,EAAO,GAE9BiL,EAAOsB,SAASvM,GAAS,CAACwH,KAAM,OAAQN,MAAOzJ,EAAKyJ,OAG/ClH,EAGT,GAAkB,YAAdvC,EAAK+J,KAAoB,CAE3B,IAAI5D,EAEJ,IAAKA,KAAOkxC,GACV,GACE35B,OAAOogD,OAAOzmB,GAAelxC,IAC7BuX,OAAOogD,OAAO99D,EAAKssB,WAAYnmB,GAC/B,CACA,MAAMsD,EAAQzJ,EAAKssB,WAAWnmB,GACxB+E,EAAOmsC,GAAclxC,IACd,OAAT+E,GAAiBA,EAAKgB,SAASlM,EAAKy0C,YACtCz0C,EAAKssB,WAAWnmB,GAAOw3D,EAAaxyD,OAAO1B,GAAS,IAAKtD,EAAKnG,GAElE,CAEJ,CAEA,GAAkB,YAAdA,EAAK+J,KAAoB,CAC3B,IAAIuB,EAASgyD,GACRA,EAAgBpxD,SAASlM,EAAKy0C,WAC/B+oB,GACEA,EAAmBtxD,SAASlM,EAAKy0C,SAOvC,IAJKnpC,GAAUiyD,GAAiC,kBAAVh7D,IACpC+I,GAAUiyD,EAAav9D,EAAMuC,EAAOiL,IAGlClC,GAAUkC,GAA2B,kBAAVjL,EAO7B,OANIm7D,GAAoB19D,EAAK8O,SAC3BtB,EAAOsB,SAASrM,OAAOF,EAAO,KAAMvC,EAAK8O,UAEzCtB,EAAOsB,SAASrM,OAAOF,EAAO,GAGzBA,CAEX,CACF,IA7DO0wC,GAAaplC,EAAM,CACxBqlC,SAAQ,YACRY,aACAI,oBAAoB,EACpB1pB,IAAG,OACHmpB,KAAI,QACJQ,UAAU,EACVC,UAAU,GAuDd,CAWO,SAASwpB,GAAoBn0D,GAIlC,MAAMs0D,EAAQt0D,EAAMjH,QAAQ,KACtBw7D,EAAev0D,EAAMjH,QAAQ,KAC7By7D,EAAax0D,EAAMjH,QAAQ,KAC3By/C,EAAQx4C,EAAMjH,QAAQ,KAE5B,OAEa,IAAXu7D,IAEY,IAAX9b,GAAgB8b,EAAQ9b,IACN,IAAlB+b,GAAuBD,EAAQC,IACf,IAAhBC,GAAqBF,EAAQE,GAE9BrB,GAAa1xD,KAAKzB,EAAMvD,MAAM,EAAG63D,IAE1Bt0D,EAGF,EACT,C,qCExaO,SAASkJ,EAAoBlJ,GAClC,OACEA,EAEGuF,QAAQ,cAAe,KAEvBA,QAAQ,SAAU,IAOlB4D,cACAiG,aAEP,C,6HC8BO,MA0EMrM,EAgBT,SAAUtB,GACR,GAAa,OAATA,QAA0B9I,IAAT8I,EACnB,OAAOpB,EAGT,GAAoB,oBAAToB,EACT,OAAOuB,EAAYvB,GAGrB,GAAoB,kBAATA,EACT,OAAO9B,MAAMsD,QAAQxB,GAe7B,SAAoByB,GAElB,MAAMC,EAAS,GACf,IAAIrK,GAAS,EAEb,OAASA,EAAQoK,EAAMjK,QACrBkK,EAAOrK,GAASiK,EAAQG,EAAMpK,IAGhC,OAAOkK,EAAYI,GAMnB,SAASA,KAAOrB,GACd,IAAIjJ,GAAS,EAEb,OAASA,EAAQqK,EAAOlK,QACtB,GAAIkK,EAAOrK,GAAO0D,MAAM6G,KAAMtB,GAAa,OAAO,EAGpD,OAAO,CACT,CACF,CAvCqCuB,CAAW7B,GA+ChD,SAAsB8B,GACpB,MAAMC,EAAwDD,EAE9D,OAAOP,EAAYS,GAMnB,SAASA,EAAIlN,GACX,MAAMmN,EACoBnN,EAI1B,IAAImG,EAEJ,IAAKA,KAAO6G,EACV,GAAIG,EAAahH,KAAS8G,EAAc9G,GAAM,OAAO,EAGvD,OAAO,CACT,CACF,CAtEwDiH,CAAalC,GAG/D,GAAoB,kBAATA,EACT,OA0ER,SAAqB8B,GACnB,OAAOP,EAAY1C,GAKnB,SAASA,EAAK/J,GACZ,OAAOA,GAAQA,EAAK+J,OAASiD,CAC/B,CACF,CAnFeK,CAAYnC,GAGrB,MAAM,IAAIoC,MAAM,+CAClB,EAuFJ,SAASb,EAAYc,GACnB,OAMA,SAAe9D,EAAOlH,EAAOiL,GAC3B,OAAOC,QACLC,EAAejE,IACb8D,EAAaI,KACXb,KACArD,EACiB,kBAAVlH,EAAqBA,OAAQH,EACpCoL,QAAUpL,GAGlB,CACF,CAEA,SAAS0H,IACP,OAAO,CACT,CAMA,SAAS4D,EAAejE,GACtB,OAAiB,OAAVA,GAAmC,kBAAVA,GAAsB,SAAUA,CAClE,CCnEA,MAAMihB,EAAQ,GAKDwzC,GAAW,EAKXpoD,GAAO,EAKPqoD,EAAO,OAiDb,SAAS1vD,EAAaZ,EAAM3C,EAAMwD,EAASkH,GAEhD,IAAI5I,EAEgB,oBAAT9B,GAA0C,oBAAZwD,GACvCkH,EAAUlH,EAEVA,EAAUxD,GAGV8B,EAAQ9B,EAGV,MAAMipB,EAAK3nB,EAAQQ,GACbwvB,EAAO5mB,GAAW,EAAI,GAS5B,SAASwoD,EAAQp+D,EAAMuC,EAAOoM,GAC5B,MAAMlF,EACJzJ,GAAwB,kBAATA,EAAoBA,EAAO,CAAC,EAG7C,GAA0B,kBAAfyJ,EAAMM,KAAmB,CAClC,MAAMwgB,EAEqB,kBAAlB9gB,EAAMgrC,QACThrC,EAAMgrC,QAEc,kBAAfhrC,EAAM8gB,KACX9gB,EAAM8gB,UACNnoB,EAENsb,OAAOk8C,eAAe/jD,EAAO,OAAQ,CACnCpM,MACE,SAAiBzJ,EAAK+J,MAAQwgB,EAAO,IAAMA,EAAO,IAAM,IAAO,KAErE,CAEA,OAAO1U,EAEP,SAASA,IAEP,IAEIwoD,EAEA34D,EAEA44D,EANAnwD,EAASuc,EAQb,KAAKxf,GAAQipB,EAAGn0B,EAAMuC,EAAOoM,EAAQA,EAAQjM,OAAS,SAAMN,MAE1D+L,EA0CR,SAAkB1E,GAChB,GAAIL,MAAMsD,QAAQjD,GAChB,OAAOA,EAGT,GAAqB,kBAAVA,EACT,MAAO,CAACy0D,EAAUz0D,GAGpB,OAAiB,OAAVA,QAA4BrH,IAAVqH,EAAsBihB,EAAQ,CAACjhB,EAC1D,CApDiB80D,CAAS7vD,EAAQ1O,EAAM2O,IAE5BR,EAAO,KAAO2H,GAChB,OAAO3H,EAIX,GAAI,aAAcnO,GAAQA,EAAK8O,SAAU,CACvC,MAAM0vD,EAA2Cx+D,EAEjD,GAAIw+D,EAAa1vD,UAAYX,EAAO,KAAOgwD,EAIzC,IAHAz4D,GAAUkQ,EAAU4oD,EAAa1vD,SAASpM,QAAU,GAAK85B,EACzD8hC,EAAe3vD,EAAQwN,OAAOqiD,GAEvB94D,GAAU,GAAKA,EAAS84D,EAAa1vD,SAASpM,QAAQ,CAC3D,MAAMqyC,EAAQypB,EAAa1vD,SAASpJ,GAIpC,GAFA24D,EAAYD,EAAQrpB,EAAOrvC,EAAQ44D,EAAvBF,GAERC,EAAU,KAAOvoD,EACnB,OAAOuoD,EAGT34D,EAC0B,kBAAjB24D,EAAU,GAAkBA,EAAU,GAAK34D,EAAS82B,CAC/D,CAEJ,CAEA,OAAOruB,CACT,CACF,CAzEAiwD,CAAQvwD,OAAMzL,EAAW,GAAzBg8D,EA0EF,C,iCCvXA,IAAIN,EAASpgD,OAAOuN,UAAUnB,eAC1B20C,EAAQ/gD,OAAOuN,UAAUjV,SACzB4jD,EAAiBl8C,OAAOk8C,eACxB8E,EAAOhhD,OAAOi8C,yBAEdjtD,EAAU,SAAiBhJ,GAC9B,MAA6B,oBAAlB0F,MAAMsD,QACTtD,MAAMsD,QAAQhJ,GAGK,mBAApB+6D,EAAM9wD,KAAKjK,EACnB,EAEI0xD,EAAgB,SAAuBuJ,GAC1C,IAAKA,GAA2B,oBAApBF,EAAM9wD,KAAKgxD,GACtB,OAAO,EAGR,IASIx4D,EATAy4D,EAAoBd,EAAOnwD,KAAKgxD,EAAK,eACrCE,EAAmBF,EAAIx7C,aAAew7C,EAAIx7C,YAAY8H,WAAa6yC,EAAOnwD,KAAKgxD,EAAIx7C,YAAY8H,UAAW,iBAE9G,GAAI0zC,EAAIx7C,cAAgBy7C,IAAsBC,EAC7C,OAAO,EAMR,IAAK14D,KAAOw4D,GAEZ,MAAsB,qBAARx4D,GAAuB23D,EAAOnwD,KAAKgxD,EAAKx4D,EACvD,EAGI24D,EAAc,SAAqBpiC,EAAQ5uB,GAC1C8rD,GAAmC,cAAjB9rD,EAAQyc,KAC7BqvC,EAAel9B,EAAQ5uB,EAAQyc,KAAM,CACpCw0C,YAAY,EACZC,cAAc,EACdv1D,MAAOqE,EAAQmxD,SACfC,UAAU,IAGXxiC,EAAO5uB,EAAQyc,MAAQzc,EAAQmxD,QAEjC,EAGIE,EAAc,SAAqBR,EAAKp0C,GAC3C,GAAa,cAATA,EAAsB,CACzB,IAAKuzC,EAAOnwD,KAAKgxD,EAAKp0C,GACrB,OACM,GAAIm0C,EAGV,OAAOA,EAAKC,EAAKp0C,GAAM9gB,KAEzB,CAEA,OAAOk1D,EAAIp0C,EACZ,EAEA60C,EAAOt2C,QAAU,SAASyxC,IACzB,IAAIzsD,EAASyc,EAAM6R,EAAKi+B,EAAMgF,EAAaC,EACvC5iC,EAASxzB,UAAU,GACnBvF,EAAI,EACJjB,EAASwG,UAAUxG,OACnB68D,GAAO,EAaX,IAVsB,mBAAX7iC,IACV6iC,EAAO7iC,EACPA,EAASxzB,UAAU,IAAM,CAAC,EAE1BvF,EAAI,IAES,MAAV+4B,GAAqC,kBAAXA,GAAyC,oBAAXA,KAC3DA,EAAS,CAAC,GAGJ/4B,EAAIjB,IAAUiB,EAGpB,GAAe,OAFfmK,EAAU5E,UAAUvF,IAInB,IAAK4mB,KAAQzc,EACZsuB,EAAM+iC,EAAYziC,EAAQnS,GAItBmS,KAHJ29B,EAAO8E,EAAYrxD,EAASyc,MAKvBg1C,GAAQlF,IAASjF,EAAciF,KAAUgF,EAAc3yD,EAAQ2tD,MAC9DgF,GACHA,GAAc,EACdC,EAAQljC,GAAO1vB,EAAQ0vB,GAAOA,EAAM,IAEpCkjC,EAAQljC,GAAOg5B,EAAch5B,GAAOA,EAAM,CAAC,EAI5C0iC,EAAYpiC,EAAQ,CAAEnS,KAAMA,EAAM00C,SAAU1E,EAAOgF,EAAMD,EAAOjF,MAGtC,qBAATA,GACjByE,EAAYpiC,EAAQ,CAAEnS,KAAMA,EAAM00C,SAAU5E,KAQjD,OAAO39B,CACR,C,oBClHA,IAAI8iC,EAAgB,kCAEhBC,EAAgB,MAChBC,EAAmB,OAGnBC,EAAiB,yCACjBC,EAAc,QACdC,EAAc,uDACdC,EAAkB,UAGlBC,EAAa,aAMbC,EAAe,GA8OnB,SAAS5pB,EAAK6pB,GACZ,OAAOA,EAAMA,EAAIjxD,QAAQ+wD,EAAYC,GAAgBA,CACvD,CAnOAZ,EAAOt2C,QAAU,SAAUnP,EAAO7L,GAChC,GAAqB,kBAAV6L,EACT,MAAM,IAAIrN,UAAU,mCAGtB,IAAKqN,EAAO,MAAO,GAEnB7L,EAAUA,GAAW,CAAC,EAKtB,IAAIoyD,EAAS,EACTziD,EAAS,EAOb,SAAS0iD,EAAeF,GACtB,IAAInjD,EAAQmjD,EAAI7wD,MAAMqwD,GAClB3iD,IAAOojD,GAAUpjD,EAAMpa,QAC3B,IAAIiB,EAAIs8D,EAAIrnD,YAvCF,MAwCV6E,GAAU9Z,EAAIs8D,EAAIv9D,OAASiB,EAAI8Z,EAASwiD,EAAIv9D,MAC9C,CAOA,SAAS4M,IACP,IAAIlM,EAAQ,CAAE6Q,KAAMisD,EAAQziD,OAAQA,GACpC,OAAO,SAAUzd,GAGf,OAFAA,EAAKsP,SAAW,IAAI8wD,EAASh9D,GAC7Bi9D,IACOrgE,CACT,CACF,CAUA,SAASogE,EAASh9D,GAChB0J,KAAK1J,MAAQA,EACb0J,KAAKtJ,IAAM,CAAEyQ,KAAMisD,EAAQziD,OAAQA,GACnC3Q,KAAKT,OAASyB,EAAQzB,MACxB,CAKA+zD,EAASn1C,UAAUkH,QAAUxY,EAE7B,IAAI2mD,EAAa,GAQjB,SAAS9pB,EAAM+pB,GACb,IAAIC,EAAM,IAAIlzD,MACZQ,EAAQzB,OAAS,IAAM6zD,EAAS,IAAMziD,EAAS,KAAO8iD,GAQxD,GANAC,EAAIxuB,OAASuuB,EACbC,EAAIC,SAAW3yD,EAAQzB,OACvBm0D,EAAIvsD,KAAOisD,EACXM,EAAI/iD,OAASA,EACb+iD,EAAIn0D,OAASsN,GAET7L,EAAQ4yD,OAGV,MAAMF,EAFNF,EAAW9/D,KAAKggE,EAIpB,CAQA,SAASpxD,EAAMqb,GACb,IAAIk2C,EAAIl2C,EAAGpb,KAAKsK,GAChB,GAAKgnD,EAAL,CACA,IAAIV,EAAMU,EAAE,GAGZ,OAFAR,EAAeF,GACftmD,EAAQA,EAAMzT,MAAM+5D,EAAIv9D,QACjBi+D,CAJO,CAKhB,CAKA,SAASN,IACPjxD,EAAMswD,EACR,CAQA,SAASkB,EAASxhC,GAChB,IAAIyhC,EAEJ,IADAzhC,EAAQA,GAAS,GACTyhC,EAAIzZ,MACA,IAANyZ,GACFzhC,EAAM5+B,KAAKqgE,GAGf,OAAOzhC,CACT,CAQA,SAASgoB,IACP,IAAIxV,EAAMtiC,IACV,GAnJgB,KAmJKqK,EAAM23B,OAAO,IAlJvB,KAkJyC33B,EAAM23B,OAAO,GAAjE,CAGA,IADA,IAAI3tC,EAAI,EAENq8D,GAAgBrmD,EAAM23B,OAAO3tC,KAtJpB,KAuJIgW,EAAM23B,OAAO3tC,IAxJZ,KAwJmCgW,EAAM23B,OAAO3tC,EAAI,OAEhEA,EAIJ,GAFAA,GAAK,EAEDq8D,IAAiBrmD,EAAM23B,OAAO3tC,EAAI,GACpC,OAAO6yC,EAAM,0BAGf,IAAIypB,EAAMtmD,EAAMzT,MAAM,EAAGvC,EAAI,GAM7B,OALA8Z,GAAU,EACV0iD,EAAeF,GACftmD,EAAQA,EAAMzT,MAAMvC,GACpB8Z,GAAU,EAEHm0B,EAAI,CACT7nC,KApKa,UAqKbq9C,QAAS6Y,GAvBgE,CAyB7E,CAQA,SAAS52C,IACP,IAAIuoB,EAAMtiC,IAGN/O,EAAO6O,EAAMuwD,GACjB,GAAKp/D,EAAL,CAIA,GAHA6mD,KAGKh4C,EAAMwwD,GAAc,OAAOppB,EAAM,wBAGtC,IAAIsqB,EAAM1xD,EAAMywD,GAEZkB,EAAMnvB,EAAI,CACZ7nC,KA7LiB,cA8LjBuf,SAAU8sB,EAAK71C,EAAK,GAAGyO,QAAQwwD,EAAeQ,IAC9Cv2D,MAAOq3D,EACH1qB,EAAK0qB,EAAI,GAAG9xD,QAAQwwD,EAAeQ,IACnCA,IAMN,OAFA5wD,EAAM0wD,GAECiB,CApBU,CAqBnB,CAyBA,OADAV,IAjBA,WACE,IAKIW,EALAC,EAAQ,GAMZ,IAJAL,EAASK,GAIDD,EAAO33C,MACA,IAAT23C,IACFC,EAAMzgE,KAAKwgE,GACXJ,EAASK,IAIb,OAAOA,CACT,CAGOh4C,EACT,C,+FChPO,MAAM9G,EAAY,CACvBnE,SAQF,SAA2BnU,EAASC,EAAImU,GACtC,OAgBA,SAAe7e,GACb,OAAO+K,EAAAA,EAAAA,IAAc/K,IAAQwK,EAAAA,EAAAA,GAAaC,EAAS8J,EAAO,aAA7B/J,CAA2CxK,GAAQuU,EAAMvU,EACxF,EAgBA,SAASuU,EAAMvU,GACb,OAAgB,OAATA,IAAiB4L,EAAAA,EAAAA,IAAmB5L,GAAQ0K,EAAG1K,GAAQ6e,EAAI7e,EACpE,CACF,EA7CEgf,SAAS,E","sources":["../node_modules/micromark-util-classify-character/index.js","../node_modules/react-virtual/node_modules/@reach/observe-rect/dist/observe-rect.esm.js","../node_modules/react-virtual/src/useIsomorphicLayoutEffect.js","../node_modules/react-virtual/src/useRect.js","../node_modules/react-virtual/src/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/ccount/index.js","../node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/lib/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../node_modules/mdast-util-gfm-footnote/lib/index.js","../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/handle/break.js","../node_modules/mdast-util-to-markdown/lib/handle/code.js","../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../node_modules/mdast-util-to-markdown/node_modules/unist-util-visit/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/html.js","../node_modules/mdast-util-to-markdown/lib/handle/image.js","../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../node_modules/mdast-util-to-markdown/lib/handle/link.js","../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../node_modules/mdast-util-phrasing/node_modules/unist-util-is/lib/index.js","../node_modules/mdast-util-phrasing/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../node_modules/mdast-util-to-markdown/lib/handle/index.js","../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../node_modules/longest-streak/index.js","../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../node_modules/mdast-util-to-markdown/lib/handle/list.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../node_modules/mdast-util-to-markdown/lib/handle/root.js","../node_modules/mdast-util-to-markdown/lib/handle/text.js","../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../node_modules/micromark-extension-gfm-table/lib/infer.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/remark-gfm-4/lib/index.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/mdast-util-gfm/lib/index.js","../node_modules/hast-util-to-jsx-runtime/node_modules/style-to-object/src/index.ts","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/devlop/lib/default.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/schema.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/merge.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/normalize.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/info.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/types.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/defined-info.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/create.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xlink.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xml.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xmlns.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/aria.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/html.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/svg.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/index.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/find.js","../node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/hast-to-react.js","../node_modules/hast-util-to-jsx-runtime/node_modules/style-to-object/esm/index.mjs","../node_modules/hast-util-to-jsx-runtime/node_modules/unist-util-position/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/hast-util-to-jsx-runtime/node_modules/comma-separated-tokens/index.js","../node_modules/hast-util-to-jsx-runtime/node_modules/space-separated-tokens/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/micromark/lib/parse.js","../node_modules/react-markdown-10/node_modules/remark-parse/lib/index.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/mdast-util-to-hast/node_modules/unist-util-position/lib/index.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/node_modules/unist-util-visit/lib/index.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/unified/node_modules/bail/index.js","../node_modules/unified/node_modules/is-plain-obj/index.js","../node_modules/unified/node_modules/trough/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown-10/lib/index.js","../node_modules/react-markdown-10/node_modules/unist-util-visit/lib/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/unist-util-visit-parents/node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/extend/index.js","../node_modules/hast-util-to-jsx-runtime/node_modules/inline-style-parser/index.js","../node_modules/micromark-core-commonmark/lib/blank-line.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","var props = ['bottom', 'height', 'left', 'right', 'top', 'width'];\n\nvar rectChanged = function rectChanged(a, b) {\n  if (a === void 0) {\n    a = {};\n  }\n\n  if (b === void 0) {\n    b = {};\n  }\n\n  return props.some(function (prop) {\n    return a[prop] !== b[prop];\n  });\n};\n\nvar observedNodes =\n/*#__PURE__*/\nnew Map();\nvar rafId;\n\nvar run = function run() {\n  var changedStates = [];\n  observedNodes.forEach(function (state, node) {\n    var newRect = node.getBoundingClientRect();\n\n    if (rectChanged(newRect, state.rect)) {\n      state.rect = newRect;\n      changedStates.push(state);\n    }\n  });\n  changedStates.forEach(function (state) {\n    state.callbacks.forEach(function (cb) {\n      return cb(state.rect);\n    });\n  });\n  rafId = window.requestAnimationFrame(run);\n};\n\nfunction observeRect(node, cb) {\n  return {\n    observe: function observe() {\n      var wasEmpty = observedNodes.size === 0;\n\n      if (observedNodes.has(node)) {\n        observedNodes.get(node).callbacks.push(cb);\n      } else {\n        observedNodes.set(node, {\n          rect: undefined,\n          hasRectChanged: false,\n          callbacks: [cb]\n        });\n      }\n\n      if (wasEmpty) run();\n    },\n    unobserve: function unobserve() {\n      var state = observedNodes.get(node);\n\n      if (state) {\n        // Remove the callback\n        var index = state.callbacks.indexOf(cb);\n        if (index >= 0) state.callbacks.splice(index, 1); // Remove the node reference\n\n        if (!state.callbacks.length) observedNodes[\"delete\"](node); // Stop the loop\n\n        if (!observedNodes.size) cancelAnimationFrame(rafId);\n      }\n    }\n  };\n}\n\nexport default observeRect;\n//# sourceMappingURL=observe-rect.esm.js.map\n","import React from 'react'\n\nexport default typeof window !== 'undefined'\n  ? React.useLayoutEffect\n  : React.useEffect\n","import React from 'react'\nimport observeRect from '@reach/observe-rect'\nimport useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect'\n\nexport default function useRect(\n  nodeRef,\n  initialRect = { width: 0, height: 0 }\n) {\n  const [element, setElement] = React.useState(nodeRef.current)\n  const [rect, dispatch] = React.useReducer(rectReducer, initialRect)\n  const initialRectSet = React.useRef(false)\n\n  useIsomorphicLayoutEffect(() => {\n    if (nodeRef.current !== element) {\n      setElement(nodeRef.current)\n    }\n  })\n\n  useIsomorphicLayoutEffect(() => {\n    if (element && !initialRectSet.current) {\n      initialRectSet.current = true\n      const rect = element.getBoundingClientRect()\n      dispatch({ rect })\n    }\n  }, [element])\n\n  React.useEffect(() => {\n    if (!element) {\n      return\n    }\n\n    const observer = observeRect(element, rect => {\n      dispatch({ rect })\n    })\n\n    observer.observe()\n\n    return () => {\n      observer.unobserve()\n    }\n  }, [element])\n\n  return rect\n}\n\nfunction rectReducer(state, action) {\n  const rect = action.rect\n  if (state.height !== rect.height || state.width !== rect.width) {\n    return rect\n  }\n  return state\n}\n","import React from 'react'\nimport useRect from './useRect'\nimport useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect'\n\nconst defaultEstimateSize = () => 50\n\nconst defaultKeyExtractor = index => index\n\nconst defaultMeasureSize = (el, horizontal) => {\n  const key = horizontal ? 'offsetWidth' : 'offsetHeight'\n\n  return el[key]\n}\n\nexport const defaultRangeExtractor = range => {\n  const start = Math.max(range.start - range.overscan, 0)\n  const end = Math.min(range.end + range.overscan, range.size - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nexport function useVirtual({\n  size = 0,\n  estimateSize = defaultEstimateSize,\n  overscan = 1,\n  paddingStart = 0,\n  paddingEnd = 0,\n  parentRef,\n  horizontal,\n  scrollToFn,\n  useObserver,\n  initialRect,\n  onScrollElement,\n  scrollOffsetFn,\n  keyExtractor = defaultKeyExtractor,\n  measureSize = defaultMeasureSize,\n  rangeExtractor = defaultRangeExtractor,\n}) {\n  const sizeKey = horizontal ? 'width' : 'height'\n  const scrollKey = horizontal ? 'scrollLeft' : 'scrollTop'\n\n  const latestRef = React.useRef({\n    scrollOffset: 0,\n    measurements: [],\n  })\n\n  const [scrollOffset, setScrollOffset] = React.useState(0)\n  latestRef.current.scrollOffset = scrollOffset\n\n  const useMeasureParent = useObserver || useRect\n\n  const { [sizeKey]: outerSize } = useMeasureParent(parentRef, initialRect)\n\n  latestRef.current.outerSize = outerSize\n\n  const defaultScrollToFn = React.useCallback(\n    offset => {\n      if (parentRef.current) {\n        parentRef.current[scrollKey] = offset\n      }\n    },\n    [parentRef, scrollKey]\n  )\n\n  const resolvedScrollToFn = scrollToFn || defaultScrollToFn\n\n  scrollToFn = React.useCallback(\n    offset => {\n      resolvedScrollToFn(offset, defaultScrollToFn)\n    },\n    [defaultScrollToFn, resolvedScrollToFn]\n  )\n\n  const [measuredCache, setMeasuredCache] = React.useState({})\n\n  const measure = React.useCallback(() => setMeasuredCache({}), [])\n\n  const pendingMeasuredCacheIndexesRef = React.useRef([])\n\n  const measurements = React.useMemo(() => {\n    const min =\n      pendingMeasuredCacheIndexesRef.current.length > 0\n        ? Math.min(...pendingMeasuredCacheIndexesRef.current)\n        : 0\n    pendingMeasuredCacheIndexesRef.current = []\n\n    const measurements = latestRef.current.measurements.slice(0, min)\n\n    for (let i = min; i < size; i++) {\n      const key = keyExtractor(i)\n      const measuredSize = measuredCache[key]\n      const start = measurements[i - 1] ? measurements[i - 1].end : paddingStart\n      const size =\n        typeof measuredSize === 'number' ? measuredSize : estimateSize(i)\n      const end = start + size\n      measurements[i] = { index: i, start, size, end, key }\n    }\n    return measurements\n  }, [estimateSize, measuredCache, paddingStart, size, keyExtractor])\n\n  const totalSize = (measurements[size - 1]?.end || paddingStart) + paddingEnd\n\n  latestRef.current.measurements = measurements\n  latestRef.current.totalSize = totalSize\n\n  const element = onScrollElement ? onScrollElement.current : parentRef.current\n\n  const scrollOffsetFnRef = React.useRef(scrollOffsetFn)\n  scrollOffsetFnRef.current = scrollOffsetFn\n\n  useIsomorphicLayoutEffect(() => {\n    if (!element) {\n      setScrollOffset(0)\n\n      return\n    }\n\n    const onScroll = event => {\n      const offset = scrollOffsetFnRef.current\n        ? scrollOffsetFnRef.current(event)\n        : element[scrollKey]\n\n      setScrollOffset(offset)\n    }\n\n    onScroll()\n\n    element.addEventListener('scroll', onScroll, {\n      capture: false,\n      passive: true,\n    })\n\n    return () => {\n      element.removeEventListener('scroll', onScroll)\n    }\n  }, [element, scrollKey])\n\n  const { start, end } = calculateRange(latestRef.current)\n\n  const indexes = React.useMemo(\n    () =>\n      rangeExtractor({\n        start,\n        end,\n        overscan,\n        size: measurements.length,\n      }),\n    [start, end, overscan, measurements.length, rangeExtractor]\n  )\n\n  const measureSizeRef = React.useRef(measureSize)\n  measureSizeRef.current = measureSize\n\n  const virtualItems = React.useMemo(() => {\n    const virtualItems = []\n\n    for (let k = 0, len = indexes.length; k < len; k++) {\n      const i = indexes[k]\n      const measurement = measurements[i]\n\n      const item = {\n        ...measurement,\n        measureRef: el => {\n          if (el) {\n            const measuredSize = measureSizeRef.current(el, horizontal)\n\n            if (measuredSize !== item.size) {\n              const { scrollOffset } = latestRef.current\n\n              if (item.start < scrollOffset) {\n                defaultScrollToFn(scrollOffset + (measuredSize - item.size))\n              }\n\n              pendingMeasuredCacheIndexesRef.current.push(i)\n\n              setMeasuredCache(old => ({\n                ...old,\n                [item.key]: measuredSize,\n              }))\n            }\n          }\n        },\n      }\n\n      virtualItems.push(item)\n    }\n\n    return virtualItems\n  }, [indexes, defaultScrollToFn, horizontal, measurements])\n\n  const mountedRef = React.useRef(false)\n\n  useIsomorphicLayoutEffect(() => {\n    if (mountedRef.current) {\n      setMeasuredCache({})\n    }\n    mountedRef.current = true\n  }, [estimateSize])\n\n  const scrollToOffset = React.useCallback(\n    (toOffset, { align = 'start' } = {}) => {\n      const { scrollOffset, outerSize } = latestRef.current\n\n      if (align === 'auto') {\n        if (toOffset <= scrollOffset) {\n          align = 'start'\n        } else if (toOffset >= scrollOffset + outerSize) {\n          align = 'end'\n        } else {\n          align = 'start'\n        }\n      }\n\n      if (align === 'start') {\n        scrollToFn(toOffset)\n      } else if (align === 'end') {\n        scrollToFn(toOffset - outerSize)\n      } else if (align === 'center') {\n        scrollToFn(toOffset - outerSize / 2)\n      }\n    },\n    [scrollToFn]\n  )\n\n  const tryScrollToIndex = React.useCallback(\n    (index, { align = 'auto', ...rest } = {}) => {\n      const { measurements, scrollOffset, outerSize } = latestRef.current\n\n      const measurement = measurements[Math.max(0, Math.min(index, size - 1))]\n\n      if (!measurement) {\n        return\n      }\n\n      if (align === 'auto') {\n        if (measurement.end >= scrollOffset + outerSize) {\n          align = 'end'\n        } else if (measurement.start <= scrollOffset) {\n          align = 'start'\n        } else {\n          return\n        }\n      }\n\n      const toOffset =\n        align === 'center'\n          ? measurement.start + measurement.size / 2\n          : align === 'end'\n          ? measurement.end\n          : measurement.start\n\n      scrollToOffset(toOffset, { align, ...rest })\n    },\n    [scrollToOffset, size]\n  )\n\n  const scrollToIndex = React.useCallback(\n    (...args) => {\n      // We do a double request here because of\n      // dynamic sizes which can cause offset shift\n      // and end up in the wrong spot. Unfortunately,\n      // we can't know about those dynamic sizes until\n      // we try and render them. So double down!\n      tryScrollToIndex(...args)\n      requestAnimationFrame(() => {\n        tryScrollToIndex(...args)\n      })\n    },\n    [tryScrollToIndex]\n  )\n\n  return {\n    virtualItems,\n    totalSize,\n    scrollToOffset,\n    scrollToIndex,\n    measure,\n  }\n}\n\nconst findNearestBinarySearch = (low, high, getCurrentValue, value) => {\n  while (low <= high) {\n    let middle = ((low + high) / 2) | 0\n    let currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({ measurements, outerSize, scrollOffset }) {\n  const size = measurements.length - 1\n  const getOffset = index => measurements[index].start\n\n  let start = findNearestBinarySearch(0, size, getOffset, scrollOffset)\n  let end = start\n\n  while (end < size && measurements[end].end < scrollOffset + outerSize) {\n    end++\n  }\n\n  return { start, end }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {import('unist-util-visit-parents').BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteDefinition')\n  const subexit = state.enter('label')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    state.indentLines(state.containerFlow(node, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('../types.js').ConstructName} ConstructName\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('mdast').Html} Html\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').State} State\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Exit} Exit\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n}\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst protocolAutolink = {\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n\n/** @type {ConstructRecord} */\nconst text = {}\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  }\n}\n\n/** @type {Code} */\nlet code = 48\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, protocolAutolink]\ntext[104] = [emailAutolink, protocolAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean | undefined} */\n  let dot\n  /** @type {boolean} */\n  let data\n  return start\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n    if (code === 64) {\n      effects.consume(code)\n      return emailDomain\n    }\n    return nok(code)\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(\n        emailDomainDotTrail,\n        emailDomainAfter,\n        emailDomainDot\n      )(code)\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true\n      effects.consume(code)\n      return emailDomain\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code)\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code)\n    dot = true\n    return emailDomain\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return wwwStart\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww.call(self, self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww')\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(\n      wwwPrefix,\n      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),\n      nok\n    )(code)\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this\n  let buffer = ''\n  let seen = false\n  return protocolStart\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if (\n      (code === 72 || code === 104) &&\n      previousProtocol.call(self, self.previous) &&\n      !previousUnbalanced(self.events)\n    ) {\n      effects.enter('literalAutolink')\n      effects.enter('literalAutolinkHttp')\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code)\n      effects.consume(code)\n      return protocolPrefixInside\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase()\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code)\n        return protocolSlashesInside\n      }\n    }\n    return nok(code)\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code)\n      if (seen) {\n        return afterProtocol\n      }\n      seen = true\n      return protocolSlashesInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null ||\n      asciiControl(code) ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code)\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0\n  return wwwPrefixInside\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++\n      effects.consume(code)\n      return wwwPrefixInside\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code)\n      return wwwPrefixAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment\n  /** @type {boolean | undefined} */\n  let seen\n  return domainInside\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code)\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return domainAfter(code)\n    }\n    seen = true\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment\n      underscoreInLastSegment = undefined\n    }\n    effects.consume(code)\n    return domainInside\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code)\n    }\n    return ok(code)\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0\n  let sizeClose = 0\n  return pathInside\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++\n      effects.consume(code)\n      return pathInside\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code)\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 38 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 60 ||\n      code === 63 ||\n      code === 93 ||\n      code === 95 ||\n      code === 126\n    ) {\n      return effects.check(trail, ok, pathAtPunctuation)(code)\n    }\n    if (\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    effects.consume(code)\n    return pathInside\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++\n    }\n    effects.consume(code)\n    return pathInside\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (\n      code === 33 ||\n      code === 34 ||\n      code === 39 ||\n      code === 41 ||\n      code === 42 ||\n      code === 44 ||\n      code === 46 ||\n      code === 58 ||\n      code === 59 ||\n      code === 63 ||\n      code === 95 ||\n      code === 126\n    ) {\n      effects.consume(code)\n      return trail\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code)\n      return trailCharRefStart\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code)\n      return trailBracketAfter\n    }\n    if (\n      // `<` is an end.\n      code === 60 ||\n      // So is whitespace.\n      code === null ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (\n      code === null ||\n      code === 40 ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code) ||\n      unicodeWhitespace(code)\n    ) {\n      return ok(code)\n    }\n    return trail(code)\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharRefInside(code) : nok(code)\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharRefInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code)\n      return trail\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return trailCharRefInside\n    }\n\n    // It’s not a trail.\n    return nok(code)\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code)\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 91 ||\n    code === 93 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code)\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code))\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n  while (index--) {\n    const token = events[index][1]\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > 999 ||\n      // Closing brace with nothing.\n      (code === 93 && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === null ||\n      code === 91 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (default: `true`).\n *\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\n\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {}\n  let single = options_.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n  if (single === null || single === undefined) {\n    single = true\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open &&\n            // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            }\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ]\n            const insideSpan = context.parser.constructs.insideSpan.null\n            if (insideSpan) {\n              // Between.\n              splice(\n                nextEvents,\n                nextEvents.length,\n                0,\n                resolveAll(insideSpan, events.slice(open + 1, index), context)\n              )\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n    return events\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous)\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = []\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImpl(this, index, remove, add)\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImpl(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0]\n    })\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length\n    /** @type {Array<Array<Event>>} */\n    const vecs = []\n    while (index > 0) {\n      index -= 1\n      vecs.push(\n        events.slice(this.map[index][0] + this.map[index][1]),\n        this.map[index][2]\n      )\n\n      // Truncate rest.\n      events.length = this.map[index][0]\n    }\n    vecs.push([...events])\n    events.length = 0\n    let slice = vecs.pop()\n    while (slice) {\n      events.push(...slice)\n      slice = vecs.pop()\n    }\n\n    // Truncate everything.\n    this.map.length = 0\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImpl(editMap, at, remove, add) {\n  let index = 0\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add)\n      // }\n\n      return\n    }\n    index += 1\n  }\n  editMap.map.push([at, remove, add])\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {EditMap} from './edit-map.js'\nimport {gfmTableAlign} from './infer.js'\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  let size = 0\n  let sizeB = 0\n  /** @type {boolean | undefined} */\n  let seen\n  return start\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1\n    while (index > -1) {\n      const type = self.events[index][1].type\n      if (\n        type === 'lineEnding' ||\n        // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n        type === 'linePrefix'\n      )\n        index--\n      else break\n    }\n    const tail = index > -1 ? self.events[index][1].type : null\n    const next =\n      tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    return next(code)\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead')\n    effects.enter('tableRow')\n    return headRowStart(code)\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code)\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1\n    return headRowBreak(code)\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true\n        effects.exit('tableRow')\n        effects.enter('lineEnding')\n        effects.consume(code)\n        effects.exit('lineEnding')\n        return headDelimiterStart\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code)\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, 'whitespace')(code)\n    }\n    sizeB += 1\n    if (seen) {\n      seen = false\n      // Header cell count.\n      size += 1\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      // Whether a delimiter was seen.\n      seen = true\n      return headRowBreak\n    }\n\n    // Anything else is cell data.\n    effects.enter('data')\n    return headRowData(code)\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return headRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? headRowEscape : headRowData\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return headRowData\n    }\n    return headRowData(code)\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    effects.enter('tableDelimiterRow')\n    // Track if we’ve seen a `:` or `|`.\n    seen = false\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        headDelimiterBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return headDelimiterBefore(code)\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code)\n    }\n    if (code === 124) {\n      seen = true\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return headDelimiterCellBefore\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)\n    }\n    return headDelimiterValueBefore(code)\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1\n      seen = true\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterLeftAlignmentAfter\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      return headDelimiterFiller(code)\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return headDelimiterFiller\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true\n      effects.exit('tableDelimiterFiller')\n      effects.enter('tableDelimiterMarker')\n      effects.consume(code)\n      effects.exit('tableDelimiterMarker')\n      return headDelimiterRightAlignmentAfter\n    }\n    effects.exit('tableDelimiterFiller')\n    return headDelimiterRightAlignmentAfter(code)\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)\n    }\n    return headDelimiterCellAfter(code)\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code)\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow')\n      effects.exit('tableHead')\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code)\n    }\n    return headDelimiterNok(code)\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code)\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow')\n    return bodyRowBreak(code)\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return bodyRowBreak\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow')\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, 'whitespace')(code)\n    }\n\n    // Anything else is cell content.\n    effects.enter('data')\n    return bodyRowData(code)\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('data')\n      return bodyRowBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? bodyRowEscape : bodyRowData\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return bodyRowData\n    }\n    return bodyRowData(code)\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  let inFirstCellAwaitingPipe = true\n  /** @type {RowKind} */\n  let rowKind = 0\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0]\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0]\n  let afterHeadAwaitingFirstBodyRow = false\n  let lastTableEnd = 0\n  /** @type {Token | undefined} */\n  let currentTable\n  /** @type {Token | undefined} */\n  let currentBody\n  /** @type {Token | undefined} */\n  let currentCell\n  const map = new EditMap()\n  while (++index < events.length) {\n    const event = events[index]\n    const token = event[1]\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n          currentBody = undefined\n          lastTableEnd = 0\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        }\n        map.add(index, 0, [['enter', currentTable, context]])\n      } else if (\n        token.type === 'tableRow' ||\n        token.type === 'tableDelimiterRow'\n      ) {\n        inFirstCellAwaitingPipe = true\n        currentCell = undefined\n        lastCell = [0, 0, 0, 0]\n        cell = [0, index + 1, 0, 0]\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          }\n          map.add(index, 0, [['enter', currentBody, context]])\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1\n      }\n      // Cell data.\n      else if (\n        rowKind &&\n        (token.type === 'data' ||\n          token.type === 'tableDelimiterMarker' ||\n          token.type === 'tableDelimiterFiller')\n      ) {\n        inFirstCellAwaitingPipe = false\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n            lastCell = [0, 0, 0, 0]\n          }\n          cell[2] = index\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1]\n            currentCell = flushCell(\n              map,\n              context,\n              lastCell,\n              rowKind,\n              undefined,\n              currentCell\n            )\n          }\n          lastCell = cell\n          cell = [lastCell[1], index, 0, 0]\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true\n      lastTableEnd = index\n    } else if (\n      token.type === 'tableRow' ||\n      token.type === 'tableDelimiterRow'\n    ) {\n      lastTableEnd = index\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1]\n        currentCell = flushCell(\n          map,\n          context,\n          lastCell,\n          rowKind,\n          index,\n          currentCell\n        )\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell)\n      }\n      rowKind = 0\n    } else if (\n      rowKind &&\n      (token.type === 'data' ||\n        token.type === 'tableDelimiterMarker' ||\n        token.type === 'tableDelimiterFiller')\n    ) {\n      cell[3] = index\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody)\n  }\n  map.consume(context.events)\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1\n  while (++index < context.events.length) {\n    const event = context.events[index]\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index)\n    }\n  }\n  return events\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName =\n    rowKind === 1\n      ? 'tableHeader'\n      : rowKind === 2\n      ? 'tableDelimiter'\n      : 'tableData'\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent'\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]))\n    map.add(range[0], 0, [['exit', previousCell, context]])\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1])\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  }\n  map.add(range[1], 0, [['enter', previousCell, context]])\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2])\n    const relatedEnd = getPoint(context.events, range[3])\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    }\n    map.add(range[2], 0, [['enter', valueToken, context]])\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]]\n      const end = context.events[range[3]]\n      start[1].end = Object.assign({}, end[1].end)\n      start[1].type = 'chunkText'\n      start[1].contentType = 'text'\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1\n        const b = range[3] - range[2] - 1\n        map.add(a, b, [])\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]])\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd))\n    map.add(rowEnd, 0, [['exit', previousCell, context]])\n    previousCell = undefined\n  }\n  return previousCell\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = []\n  const related = getPoint(context.events, index)\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related)\n    exits.push(['exit', tableBody, context])\n  }\n  table.end = Object.assign({}, related)\n  exits.push(['exit', table, context])\n  map.add(index + 1, 0, exits)\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index]\n  const side = event[0] === 'enter' ? 'start' : 'end'\n  return event[1][side]\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null ||\n      // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n    return nok(code)\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code)\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )(code)\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, 'whitespace')\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code)\n  }\n}\n","/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","import type { Declaration } from 'inline-style-parser';\nimport parse from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {undefined}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from '../cjs/index.js';\n\n// ensure compatibility with rollup umd build\nexport default StyleToObject.default || StyleToObject;\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// Register MDX nodes in mdast:\n/// <reference types=\"mdast-util-mdx-expression\" />\n/// <reference types=\"mdast-util-mdx-jsx\" />\n/// <reference types=\"mdast-util-mdxjs-esm\" />\n\n/**\n * @typedef {import('estree').Identifier} Identifier\n * @typedef {import('estree').Literal} Literal\n * @typedef {import('estree').MemberExpression} MemberExpression\n * @typedef {import('estree').Expression} Expression\n * @typedef {import('estree').Program} Program\n *\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Parents} Parents\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('mdast-util-mdx-expression').MdxFlowExpressionHast} MdxFlowExpression\n * @typedef {import('mdast-util-mdx-expression').MdxTextExpressionHast} MdxTextExpression\n *\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxFlowElementHast} MdxJsxFlowElement\n * @typedef {import('mdast-util-mdx-jsx').MdxJsxTextElementHast} MdxJsxTextElement\n *\n * @typedef {import('mdast-util-mdxjs-esm').MdxjsEsmHast} MdxjsEsm\n *\n * @typedef {import('property-information').Schema} Schema\n *\n * @typedef {import('unist').Position} Position\n *\n * @typedef {import('./components.js').Components} Components\n */\n\n/**\n * @typedef {JSX.Element | string | null | undefined} Child\n *   Child.\n *\n * @callback Create\n *   Create something in development or production.\n * @param {Nodes} node\n *   hast node.\n * @param {unknown} type\n *   Fragment symbol or tag name.\n * @param {Props} props\n *   Properties and children.\n * @param {string | undefined} key\n *   Key.\n * @returns {JSX.Element}\n *   Result.\n *\n * @callback CreateEvaluater\n *   Create an evaluator that turns ESTree ASTs from embedded MDX into values.\n * @returns {Evaluater}\n *   Evaluater.\n *\n * @typedef {'html' | 'react'} ElementAttributeNameCase\n *   Casing to use for attribute names.\n *\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`.\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`.\n *\n * @callback EvaluateExpression\n *   Turn an MDX expression into a value.\n * @param {Expression} expression\n *   ESTree expression.\n * @returns {unknown}\n *   Result of expression.\n *\n * @callback EvaluateProgram\n *   Turn an MDX program (export/import statements) into a value.\n * @param {Program} expression\n *   ESTree program.\n * @returns {unknown}\n *   Result of program;\n *   should likely be `undefined` as ESM changes the scope but doesn’t yield\n *   something.\n *\n * @typedef Evaluater\n *   Evaluator that turns ESTree ASTs from embedded MDX into values.\n * @property {EvaluateExpression} evaluateExpression\n *   Evaluate an expression.\n * @property {EvaluateProgram} evaluateProgram\n *   Evaluate a program.\n *\n * @typedef {[string, Value]} Field\n *   Property field.\n *\n * @typedef {unknown} Fragment\n *   Represent the children, typically a symbol.\n *\n * @callback Jsx\n *   Create a production element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} [key]\n *   Dynamicly generated key to use.\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @callback JsxDev\n *   Create a development element.\n * @param {unknown} type\n *   Element type: `Fragment` symbol, tag name (`string`), component.\n * @param {Props} props\n *   Element props, `children`, and maybe `node`.\n * @param {string | undefined} key\n *   Dynamicly generated key to use.\n * @param {boolean} isStaticChildren\n *   Whether two or more children are passed (in an array), which is whether\n *   `jsxs` or `jsx` would be used.\n * @param {Source} source\n *   Info about source.\n * @param {undefined} self\n *   Nothing (this is used by frameworks that have components, we don’t).\n * @returns {JSX.Element}\n *   Element from your framework.\n *\n * @typedef {{children?: Array<Child> | Child, node?: Element | MdxJsxFlowElement | MdxJsxTextElement | undefined, [prop: string]: Array<Child> | Child | Element | MdxJsxFlowElement | MdxJsxTextElement | Value | undefined}} Props\n *   Properties and children.\n *\n * @typedef RegularFields\n *   Configuration.\n * @property {Partial<Components> | null | undefined} [components]\n *   Components to use (optional).\n * @property {CreateEvaluater | null | undefined} [createEvaluater]\n *   Create an evaluator that turns ESTree ASTs into values (optional).\n * @property {ElementAttributeNameCase | null | undefined} [elementAttributeNameCase='react']\n *   Specify casing to use for attribute names (default: `'react'`).\n * @property {string | null | undefined} [filePath]\n *   File path to the original source file (optional).\n *\n *   Passed in source info to `jsxDEV` when using the automatic runtime with\n *   `development: true`.\n * @property {boolean | null | undefined} [ignoreInvalidStyle=false]\n *   Ignore invalid CSS in `style` props (default: `false`);\n *   the default behavior is to throw an error.\n * @property {boolean | null | undefined} [passKeys=true]\n *   Generate keys to optimize frameworks that support them (default: `true`).\n *\n *   > 👉 **Note**: Solid currently fails if keys are passed.\n * @property {boolean | null | undefined} [passNode=false]\n *   Pass the hast element node to components (default: `false`).\n * @property {Space | null | undefined} [space='html']\n *   Whether `tree` is in the `'html'` or `'svg'` space (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n * @property {StylePropertyNameCase | null | undefined} [stylePropertyNameCase='dom']\n *   Specify casing to use for property names in `style` objects (default:\n *   `'dom'`).\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props\n *   (default: `true`).\n *\n * @typedef RuntimeDevelopment\n *   Runtime fields when development is on.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {true} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev} jsxDEV\n *   Development JSX.\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef RuntimeProduction\n *   Runtime fields when development is off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {false | null | undefined} [development]\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off) (optional).\n * @property {Jsx} jsx\n *   Dynamic JSX.\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx} jsxs\n *   Static JSX.\n *\n * @typedef RuntimeUnknown\n *   Runtime fields when development might be on or off.\n * @property {Fragment} Fragment\n *   Fragment.\n * @property {boolean} development\n *   Whether to use `jsxDEV` (when on) or `jsx` and `jsxs` (when off).\n * @property {Jsx | null | undefined} [jsx]\n *   Dynamic JSX (optional).\n * @property {JsxDev | null | undefined} [jsxDEV]\n *   Development JSX (optional).\n * @property {Jsx | null | undefined} [jsxs]\n *   Static JSX (optional).\n *\n * @typedef Source\n *   Info about source.\n * @property {number | undefined} columnNumber\n *   Column where thing starts (0-indexed).\n * @property {string | undefined} fileName\n *   Name of source file.\n * @property {number | undefined} lineNumber\n *   Line where thing starts (1-indexed).\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use `xast` if you need to support SVG as XML.\n *\n * @typedef State\n *   Info passed around.\n * @property {unknown} Fragment\n *   Fragment symbol.\n * @property {Array<Parents>} ancestors\n *   Stack of parents.\n * @property {Partial<Components>} components\n *   Components to swap.\n * @property {Create} create\n *   Create something in development or production.\n * @property {ElementAttributeNameCase} elementAttributeNameCase\n *   Casing to use for attribute names.\n * @property {Evaluater | undefined} evaluater\n *   Evaluator that turns ESTree ASTs into values.\n * @property {string | undefined} filePath\n *   File path.\n * @property {boolean} ignoreInvalidStyle\n *   Ignore invalid CSS in `style` props.\n * @property {boolean} passKeys\n *   Generate keys to optimize frameworks that support them.\n * @property {boolean} passNode\n *   Pass `node` to components.\n * @property {Schema} schema\n *   Current schema.\n * @property {StylePropertyNameCase} stylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n * @property {boolean} tableCellAlignToStyle\n *   Turn obsolete `align` props on `td` and `th` into CSS `style` props.\n *\n * @typedef {Record<string, string>} Style\n *   Style map.\n *\n * @typedef {'css' | 'dom'} StylePropertyNameCase\n *   Casing to use for property names in `style` objects.\n *\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`.\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`.\n *\n * @typedef {Style | boolean | number | string} Value\n *   Primitive property value and `Style` map.\n */\n\n/**\n * @typedef {RuntimeDevelopment & RegularFields} Development\n *   Configuration (development).\n * @typedef {Development | Production | Unknown} Options\n *   Configuration.\n * @typedef {RegularFields & RuntimeProduction} Production\n *   Configuration (production).\n * @typedef {RegularFields & RuntimeUnknown} Unknown\n *   Configuration (production or development).\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToObject from 'style-to-object'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\nconst dashSomething = /-([a-z])/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JSX.Element}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsm} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElement | MdxJsxTextElement} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElement | MdxJsxTextElement} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  /** @type {Style} */\n  const result = {}\n\n  try {\n    // @ts-expect-error: `style-to-object` types are broken.\n    styleToObject(value, replacer)\n  } catch (error) {\n    if (!state.ignoreInvalidStyle) {\n      const cause = /** @type {Error} */ (error)\n      const message = new VFileMessage('Cannot parse `style` attribute', {\n        ancestors: state.ancestors,\n        cause,\n        ruleId: 'style',\n        source: 'hast-util-to-jsx-runtime'\n      })\n      message.file = state.filePath || undefined\n      message.url = docs + '#cannot-parse-style-attribute'\n\n      throw message\n    }\n  }\n\n  return result\n\n  /**\n   * Add a CSS property (normal, so with dashes) to `result` as a DOM CSS\n   * property.\n   *\n   * @param {string} name\n   *   Key.\n   * @param {string} value\n   *   Value\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function replacer(name, value) {\n    let key = name\n\n    if (key.slice(0, 2) !== '--') {\n      if (key.slice(0, 4) === '-ms-') key = 'ms-' + key.slice(4)\n      key = key.replace(dashSomething, toCamel)\n    }\n\n    result[key] = value\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {keyof JSX.IntrinsicElements} */ (result.value)\n\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$1` capitalized.\n *\n * @param {string} _\n *   Whatever.\n * @param {string} $1\n *   Single ASCII alphabetical.\n * @returns {string}\n *   Capitalized `$1`.\n */\nfunction toCamel(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push[...newElements]` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events.get(lineIndex)[1].start);\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {undefined}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {undefined}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {undefined}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {undefined}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {undefined}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {undefined}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = Object.assign({}, events[definition][1].end);\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  while (++index < events.length) {\n    const token = events[index][1];\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      events.splice(index + 1, token.type === \"labelImage\" ? 4 : 2);\n      token.type = \"data\";\n      index++;\n    }\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  const label = {\n    type: \"label\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  };\n  const text = {\n    type: \"labelText\",\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = Object.assign({}, events[open][1].end);\n          const end = Object.assign({}, events[index][1].start);\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: Object.assign({}, events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: Object.assign({}, events[index][1].start),\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          };\n          events[open][1].end = Object.assign({}, openingSequence.start);\n          events[index][1].start = Object.assign({}, closingSequence.end);\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {undefined}\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlpha, asciiAlphanumeric, markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Omit<Parent, 'children' | 'type'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | null | undefined | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {undefined | void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Fragment | Nodes>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {(this: CompileContext) => undefined} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {(this: CompileContext, node: Nodes, token: Token, onError?: OnEnterError) => undefined} enter\n *   Enter a node.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => undefined} exit\n *   Exit a node.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n * @property {CompileData} data\n *   Info passed around; key/value store.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {undefined}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Nodes} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const def = state.footnoteById.get(state.footnoteOrder[referenceIndex])\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const def = state.definitionById.get(id)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > 👉 **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","// Include `data` fields in mdast and `raw` nodes in hast.\n/// <reference types=\"mdast-util-to-hast\" />\n\n/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} ToHastOptions\n * @typedef {import('unified').Processor} Processor\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * *   if a processor is given, runs the (rehype) plugins used on it with a\n *     hast tree, then discards the result (*bridge mode*)\n * *   otherwise, returns a hast tree, the plugins used after `remarkRehype`\n *     are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**: It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * *   `rehype-stringify` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful if\n *     you completely trust authors\n * *   `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only way\n *     to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given, configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(options || destination)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === ext.codePointAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n * @typedef {import('vfile-message').Options} MessageOptions\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {Options | URL | VFile | Value} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {string | null | undefined} [basename]\n *   Set `basename` (name).\n * @property {string | null | undefined} [cwd]\n *   Set `cwd` (working directory).\n * @property {Data | null | undefined} [data]\n *   Set `data` (associated info).\n * @property {string | null | undefined} [dirname]\n *   Set `dirname` (path w/o basename).\n * @property {string | null | undefined} [extname]\n *   Set `extname` (extension with dot).\n * @property {Array<string> | null | undefined} [history]\n *   Set `history` (paths the file moved between).\n * @property {URL | string | null | undefined} [path]\n *   Set `path` (current path).\n * @property {string | null | undefined} [stem]\n *   Set `stem` (name without extension).\n * @property {Value | null | undefined} [value]\n *   Set `value` (the contents of the file).\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/60adcb0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {Record<string, unknown> & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template [Settings=ReporterSettings]\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {path} from 'vfile/do-not-use-conditional-minpath'\nimport {proc} from 'vfile/do-not-use-conditional-minproc'\nimport {urlToPath, isUrl} from 'vfile/do-not-use-conditional-minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const func = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return func.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        const names = Object.getOwnPropertyNames(func)\n\n        for (const p of names) {\n          const descriptor = Object.getOwnPropertyDescriptor(func, p)\n          if (descriptor) Object.defineProperty(apply, p, descriptor)\n        }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@link CompileResultMap `CompileResultMap`}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@link Node `Node`}\n *   and {@link VFile `VFile`} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@link CompileResultMap `CompileResultMap`}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@link VFile `VFile`} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@link Node `Node`}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > 👉 **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be\n *       `string`.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@link Transformer `Transformer`}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@link Parser `Parser`}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@link Compiler `Compiler`}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > 👉 **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@link VFile `VFile`} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@link VFile `VFile`}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@link Processor `Processor`}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > 👉 **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > 👉 **Note**: to register custom data in TypeScript, augment the\n   * > {@link Data `Data`} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > 👉 **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > 👉 **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > 👉 **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > 👉 **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > 👉 **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > 👉 **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > 👉 **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@link CompileResultMap `CompileResultMap`}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > 👉 **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @import {Element, Nodes, Parents, Root} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {ComponentType, JSX, ReactElement, ReactNode} from 'react'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {BuildVisitor} from 'unist-util-visit'\n * @import {PluggableList, Processor} from 'unified'\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n */\n\n/**\n * @typedef ExtraProps\n *   Extra fields we pass.\n * @property {Element | undefined} [node]\n *   passed when `passNode` is on.\n */\n\n/**\n * @typedef {{\n *   [Key in keyof JSX.IntrinsicElements]?: ComponentType<JSX.IntrinsicElements[Key] & ExtraProps> | keyof JSX.IntrinsicElements\n * }} Components\n *   Map tag names to components.\n */\n\n/**\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n */\n\n/**\n * @typedef HooksOptionsOnly\n *   Configuration specifically for {@linkcode MarkdownHooks}.\n * @property {ReactNode | null | undefined} [fallback]\n *   Content to render while the processor processing the markdown (optional).\n */\n\n/**\n * @typedef {Options & HooksOptionsOnly} HooksOptions\n *   Configuration for {@linkcode MarkdownHooks};\n *   extends the regular {@linkcode Options} with a `fallback` prop.\n */\n\n/**\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport {useEffect, useState} from 'react'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {from: 'className', id: 'remove-classname'},\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * This is a synchronous component.\n * When using async plugins,\n * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function Markdown(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  return post(processor.runSync(processor.parse(file), file), options)\n}\n\n/**\n * Component to render markdown with support for async plugins\n * through async/await.\n *\n * Components returning promises are supported on the server.\n * For async support on the client,\n * see {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Promise<ReactElement>}\n *   Promise to a React element.\n */\nexport async function MarkdownAsync(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  const tree = await processor.run(processor.parse(file), file)\n  return post(tree, options)\n}\n\n/**\n * Component to render markdown with support for async plugins through hooks.\n *\n * This uses `useEffect` and `useState` hooks.\n * Hooks run on the client and do not immediately render something.\n * For async support on the server,\n * see {@linkcode MarkdownAsync}.\n *\n * @param {Readonly<HooksOptions>} options\n *   Props.\n * @returns {ReactNode}\n *   React node.\n */\nexport function MarkdownHooks(options) {\n  const processor = createProcessor(options)\n  const [error, setError] = useState(\n    /** @type {Error | undefined} */ (undefined)\n  )\n  const [tree, setTree] = useState(/** @type {Root | undefined} */ (undefined))\n\n  useEffect(\n    function () {\n      let cancelled = false\n      const file = createFile(options)\n\n      processor.run(processor.parse(file), file, function (error, tree) {\n        if (!cancelled) {\n          setError(error)\n          setTree(tree)\n        }\n      })\n\n      /**\n       * @returns {undefined}\n       *   Nothing.\n       */\n      return function () {\n        cancelled = true\n      }\n    },\n    [\n      options.children,\n      options.rehypePlugins,\n      options.remarkPlugins,\n      options.remarkRehypeOptions\n    ]\n  )\n\n  if (error) throw error\n\n  return tree ? post(tree, options) : options.fallback\n}\n\n/**\n * Set up the `unified` processor.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}\n *   Result.\n */\nfunction createProcessor(options) {\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  return processor\n}\n\n/**\n * Set up the virtual file.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {VFile}\n *   Result.\n */\nfunction createFile(options) {\n  const children = options.children || ''\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  return file\n}\n\n/**\n * Process the result from unified some more.\n *\n * @param {Nodes} tree\n *   Tree.\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nfunction post(tree, options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  visit(tree, transform)\n\n  return toJsxRuntime(tree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {BuildVisitor<Root>} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n          ? disallowedElements.includes(node.tagName)\n          : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon === -1 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash !== -1 && colon > slash) ||\n    (questionMark !== -1 && colon > questionMark) ||\n    (numberSign !== -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}"],"names":["classifyCharacter","code","markdownLineEndingOrSpace","unicodeWhitespace","unicodePunctuation","rafId","props","observedNodes","Map","run","changedStates","forEach","state","node","a","b","newRect","getBoundingClientRect","rect","some","prop","push","callbacks","cb","window","requestAnimationFrame","useIsomorphicLayoutEffect","React","useRect","nodeRef","initialRect","width","height","_React$useState","current","element","setElement","_React$useReducer","rectReducer","dispatch","initialRectSet","_rect","observer","observe","wasEmpty","size","has","get","set","undefined","hasRectChanged","unobserve","index","indexOf","splice","length","cancelAnimationFrame","action","defaultEstimateSize","defaultKeyExtractor","defaultMeasureSize","el","horizontal","defaultRangeExtractor","range","start","Math","max","overscan","end","min","arr","i","useVirtual","_ref","_measurements","_ref$size","_ref$estimateSize","estimateSize","_ref$overscan","_ref$paddingStart","paddingStart","_ref$paddingEnd","paddingEnd","parentRef","scrollToFn","useObserver","onScrollElement","scrollOffsetFn","_ref$keyExtractor","keyExtractor","_ref$measureSize","measureSize","_ref$rangeExtractor","rangeExtractor","sizeKey","scrollKey","latestRef","scrollOffset","measurements","setScrollOffset","outerSize","defaultScrollToFn","offset","resolvedScrollToFn","_React$useState2","measuredCache","setMeasuredCache","measure","pendingMeasuredCacheIndexesRef","apply","slice","key","measuredSize","_start","_size","_end","totalSize","scrollOffsetFnRef","onScroll","event","addEventListener","capture","passive","removeEventListener","_calculateRange","_ref4","getOffset","findNearestBinarySearch","calculateRange","indexes","measureSizeRef","virtualItems","_loop","k","len","item","_extends","measureRef","_scrollOffset","old","_extends2","mountedRef","scrollToOffset","toOffset","_temp","_ref2$align","align","_latestRef$current","tryScrollToIndex","_temp2","_ref3","_ref3$align","rest","_objectWithoutPropertiesLoose","_latestRef$current2","measurement","scrollToIndex","_len","arguments","args","Array","_key","low","high","getCurrentValue","value","middle","currentValue","factorySpace","effects","ok","type","limit","Number","POSITIVE_INFINITY","markdownSpace","enter","prefix","consume","exit","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","regex","test","String","fromCharCode","list","remove","items","parameters","chunkStart","from","unshift","resolveAll","constructs","events","context","called","resolve","includes","ccount","character","source","TypeError","count","convert","castFactory","isArray","tests","checks","any","this","anyFactory","check","checkAsRecord","all","nodeAsRecord","propsFactory","typeFactory","Error","testFunction","parent","Boolean","looksLikeANode","call","findAndReplace","tree","options","ignored","ignore","pairs","tupleOrList","result","tuple","toExpression","toFunction","toPairs","pairIndex","visitParents","visitor","parents","grandparent","siblings","children","find","replace","change","nodes","lastIndex","match","exec","position","matchObject","input","stack","global","handler","RegExp","string","escape","inConstruct","notInConstruct","enterLiteralAutolink","token","title","url","enterLiteralAutolinkValue","config","autolinkProtocol","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","data","assert","sliceSerialize","exitLiteralAutolinkEmail","autolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","_","protocol","domain","path","previous","parts","split","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","label","email","charCodeAt","enterFootnoteDefinition","identifier","enterFootnoteDefinitionLabelString","buffer","exitFootnoteDefinitionLabelString","resume","normalizeIdentifier","toLowerCase","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","footnoteReference","info","tracker","createTracker","move","subexit","safe","associationId","before","after","footnoteDefinition","shift","indentLines","containerFlow","map","line","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","codePointAt","listInScope","none","hardBreak","_1","unsafe","pattern","checkQuote","marker","quote","emphasis","checkEmphasis","formatHeadingAsSetext","literalWithBreak","testOrVisitor","visitorOrReverse","maybeReverse","reverse","visit","EXIT","depth","toString","setext","html","image","suffix","alt","imageReference","referenceType","reference","inlineCode","sequence","expression","compilePattern","atBreak","formatLinkAsAutolink","raw","resourceLink","link","linkReference","text","checkBullet","bullet","checkRule","rule","phrasing","strong","checkStrong","handle","blockquote","break","fence","checkFence","fences","lang","formatCodeAsIndented","repeat","substring","expected","longestStreak","encode","meta","definition","heading","rank","lastIndexOf","toUpperCase","closeAtx","bulletCurrent","ordered","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItem","listItemIndent","style","checkListItemIndent","incrementListMarker","spread","ceil","paragraph","root","d","thematicBreak","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","$0","$1","gfmTableToMarkdown","settings","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","handlers","defaultHandlers","table","serializeData","handleTableRowAsData","handleTableAsData","tableCell","handleTableCell","tableRow","matrix","concat","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","cell","lines","delimiterStart","delimiterEnd","join","markdownTable","exitCheck","checked","exitParagraphWithTaskListItem","head","firstParaghraph","sibling","column","Object","assign","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","tokenize","nok","wwwPrefixInside","wwwPrefixAfter","partial","underscoreInLastSegment","underscoreInLastLastSegment","seen","domainInside","domainAfter","domainAtPunctuation","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharRefStart","trailBracketAfter","trailCharRefInside","emailDomainDotTrail","wwwAutolink","self","previousWww","previousUnbalanced","attempt","wwwAfter","protocolAutolink","previousProtocol","fromCodePoint","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_balanced","_gfmAutolinkLiteralWalkedInto","indent","tail","tokenizePotentialGfmFootnoteCall","defined","parser","gfmFootnotes","labelStart","id","now","resolveToPotentialGfmFootnoteCall","_bufferIndex","chunk","contentType","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","_container","labelAtMarker","labelInside","labelAfter","labelEscape","whitespaceAfter","tokenizeDefinitionContinuation","blankLine","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","tokenizer","more","_open","_close","open","strikethrough","nextEvents","insideSpan","null","attentionMarkers","EditMap","constructor","add","editMap","at","addImpl","sort","vecs","pop","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","next","bodyRowStart","headRowBefore","lazy","headRowBreak","headRowStart","interrupt","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","disable","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","side","tasklistCheck","_gfmTasklistFirstContentOfListItem","inside","close","spaceThenNonSpace","emptyOptions","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","combineExtensions","document","continuation","resolveTo","flow","gfm","transforms","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","canContainEols","tableData","tableHeader","codeText","taskListCheckValueChecked","taskListCheckValueUnchecked","extensions","delete","gfmToMarkdown","exports","iterator","styleObject","declarations","inline_style_parser_1","default","hasIterator","declaration","property","__importDefault","require","one","includeImageAlt","includeHtml","values","unreachable","hasOwnProperty","syntaxExtension","extension","hook","left","right","existing","nameRe","nameReJsx","name","jsx","re","empty","Schema","normal","space","merge","definitions","normalize","prototype","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","keys","types","DefinedInfo","mask","super","mark","own","create","properties","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","charSet","cite","className","cols","colSpan","content","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","hidden","href","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","language","loading","loop","manifest","maxLength","media","method","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shape","slot","span","spellCheck","src","srcDoc","srcLang","srcSet","step","tabIndex","target","translate","typeMustMatch","useMap","wrap","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","rules","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","opacity","operator","order","orient","orientation","origin","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","rotate","rx","ry","scale","seed","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","htmlBase","svgBase","valid","dash","cap","kebab","camelcase","charAt","hastToReact","StyleToObject","point","pointStart","stringifyPosition","pos","VFileMessage","causeOrReason","optionsOrParentOrPlace","reason","legacyCause","place","ancestors","cause","message","ruleId","fatal","file","actual","note","emptyMap","dashSomething","tableElements","Set","tableCellElement","docs","toJsxRuntime","Fragment","filePath","development","jsxDEV","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","parentSchema","tagName","findComponentFromName","alignValue","createProperty","createElementProps","createChildren","child","thing","addNode","addChildren","estree","body","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","countsByName","Type","dashes","isNaN","padRight","padLeft","trim","commas","styleToObject","replacer","error","toCamel","parseStyle","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","isIdentifierName","computed","optional","toDash","urlAttributes","icon","SpliceBuffer","initial","RangeError","setCursor","stop","deleteCount","trunc","removed","chunkedPush","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","_tokenizer","_isInFirstContentOfListItem","subcontent","eventIndex","startPosition","startPositions","childEvents","gaps","stream","adjust","breaks","sliceStream","defineSkip","write","contentStart","contentInitial","lineStart","childFlow","childToken","lineStartOffset","continued","containerState","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","containerContinue","flowContinue","writeToChild","eof","entry","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","field","notText","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","_index","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","sliceChunks","chunkIndex","go","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","initialSize","atMarker","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","factoryTitle","factoryWhitespace","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","textContent","numeric","characterEscape","lineEnding","labelEnd","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","group","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","attention","openingSequence","closingSequence","use","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","between","tailExitIndex","headEnterIndex","resolveText","search","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decode","$2","hex","fromMarkdown","encoding","opener","onenterdata","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","hardBreakTrailing","htmlFlowData","htmlTextData","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","setextHeadingSlurpLineEnding","atHardBreak","inReference","ancestor","decodeString","fragment","characterReferenceType","compiler","postprocess","defaultConstructs","parse","atCarriageReturn","endPosition","TextDecoder","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","deserializer","$","out","unpair","Date","flags","BigInt","EMPTY","asString","shouldSkip","TYPE","serialize","json","lossy","serializer","strict","pair","valueOf","toJSON","entries","toISOString","structuredClone","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","pointEnd","revert","subtype","contents","listItemLoose","trimLines","last","trimLine","patch","applyData","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","definitionById","loose","listLoose","firstRow","tableContent","cellIndex","cells","toml","yaml","createState","footnoteById","trimMarkdownSpaceStart","passThrough","shallow","unknownHandler","defaultUnknownHandler","hName","hChildren","hProperties","toHast","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","bail","isPlainObject","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","middlewareIndex","callback","output","middleware","wrapped","fnExpectsCallback","done","Promise","then","middelware","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","func","setPrototypeOf","names","getOwnPropertyNames","p","descriptor","getOwnPropertyDescriptor","defineProperty","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","copy","attacher","extend","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","processor","createProcessor","createFile","post","rehypePlugins","remarkPlugins","remarkRehypeOptions","allowedElements","allowElement","disallowedElements","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","deprecation","hasOwn","colon","questionMark","numberSign","CONTINUE","SKIP","factory","subresult","grandparents","toResult","nodeAsParent","toStr","gOPD","obj","hasOwnConstructor","hasIsPrototypeOf","setProperty","enumerable","configurable","newValue","writable","getProperty","module","copyIsArray","clone","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","str","lineno","updatePosition","Position","whitespace","errorsList","msg","err","filename","silent","m","comments","c","val","ret","decl","decls"],"sourceRoot":""}