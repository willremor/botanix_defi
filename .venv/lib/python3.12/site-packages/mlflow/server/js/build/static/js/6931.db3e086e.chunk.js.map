{"version":3,"file":"static/js/6931.db3e086e.chunk.js","mappings":"8KAM6C,IAAAA,EAAA,CAAAC,KAAA,SAAAC,OAAA,UA0E7C,UAjE8BC,EAC5BC,UACAC,OACAC,cAAcC,EAAAA,GACdC,qBACAC,oBAEA,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,aACzBC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAEvCG,EAAAA,EAAAA,YAAU,KACR,IAAIC,EAEJ,MAAMC,EACJT,GAAsBC,GAClBS,EAAAA,EAAAA,IAAkCb,EAAMI,IACxCU,EAAAA,EAAAA,IAAuBd,EAAMD,GAQnC,OANAE,EAAYW,GAAaG,MAAMC,IAC7BL,EAASM,IAAIC,gBAAgBF,GAC7BV,EAAYK,GACZF,GAAW,EAAM,IAGZ,KACDE,GAAQM,IAAIE,gBAAgBR,EAAO,CACxC,GACA,CAACZ,EAASC,EAAMG,EAAoBC,EAAeH,IAEtD,MAAMmB,EAAa,CACjBC,oBAAqB,CACnBC,QAAS,GACTC,SAAU,SACVC,WAAY,QACZC,UAAW,QAEbC,OAAQ,CAAEC,QAAS,QACnBC,MAAO,CACLC,SAAU,OACVC,UAAW,SACXC,UAAW,MACXJ,QAAS,UAIb,OACEK,EAAAA,EAAAA,GAAA,OAAKC,IAAGtC,EAAcuC,UACpBC,EAAAA,EAAAA,IAAA,OAAKF,IAAKb,EAAWC,oBAAoBa,SAAA,CACtC1B,IAAWwB,EAAAA,EAAAA,GAACI,EAAAA,eAAc,CAACC,QAAM,IACjChC,IACC2B,EAAAA,EAAAA,GAAA,SACEC,IAAKzB,EAAUY,EAAWM,OAASN,EAAWQ,MAC9CU,IAAKjC,EACLkC,UAAQ,EACRC,QAAQ,OACR,aAAW,QAAON,UAElBF,EAAAA,EAAAA,GAAA,SAAOS,KAAK,WAAWC,QAAQ,KAAKJ,IAAI,GAAGK,SAAO,UAIpD,C","sources":["experiment-tracking/components/artifact-view-components/ShowArtifactVideoView.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { LegacySkeleton } from '@databricks/design-system';\nimport {\n  getArtifactBlob,\n  getArtifactLocationUrl,\n  getLoggedModelArtifactLocationUrl,\n} from '../../../common/utils/ArtifactUtils';\nimport type { LoggedModelArtifactViewerProps } from './ArtifactViewComponents.types';\n\ntype Props = {\n  runUuid: string;\n  path: string;\n  getArtifact?: (...args: any[]) => any;\n} & LoggedModelArtifactViewerProps;\n\nconst ShowArtifactVideoView = ({\n  runUuid,\n  path,\n  getArtifact = getArtifactBlob,\n  isLoggedModelsMode,\n  loggedModelId,\n}: Props) => {\n  const [videoUrl, setVideoUrl] = useState<string>();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let objUrl: string | undefined;\n\n    const artifactUrl =\n      isLoggedModelsMode && loggedModelId\n        ? getLoggedModelArtifactLocationUrl(path, loggedModelId)\n        : getArtifactLocationUrl(path, runUuid);\n\n    getArtifact(artifactUrl).then((blob: Blob) => {\n      objUrl = URL.createObjectURL(blob);\n      setVideoUrl(objUrl);\n      setLoading(false);\n    });\n\n    return () => {\n      if (objUrl) URL.revokeObjectURL(objUrl);\n    };\n  }, [runUuid, path, isLoggedModelsMode, loggedModelId, getArtifact]);\n\n  const classNames = {\n    videoOuterContainer: {\n      padding: 10,\n      overflow: 'hidden',\n      background: 'black',\n      minHeight: '100%',\n    },\n    hidden: { display: 'none' },\n    video: {\n      maxWidth: '100%',\n      maxHeight: '62.5vh',\n      objectFit: 'fit',\n      display: 'block',\n    },\n  };\n\n  return (\n    <div css={{ flex: 1 }}>\n      <div css={classNames.videoOuterContainer}>\n        {loading && <LegacySkeleton active />}\n        {videoUrl && (\n          <video\n            css={loading ? classNames.hidden : classNames.video}\n            src={videoUrl}\n            controls\n            preload=\"auto\"\n            aria-label=\"video\"\n          >\n            <track kind=\"captions\" srcLang=\"en\" src=\"\" default />\n          </video>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ShowArtifactVideoView;\n"],"names":["_ref","name","styles","ShowArtifactVideoView","runUuid","path","getArtifact","getArtifactBlob","isLoggedModelsMode","loggedModelId","videoUrl","setVideoUrl","useState","loading","setLoading","useEffect","objUrl","artifactUrl","getLoggedModelArtifactLocationUrl","getArtifactLocationUrl","then","blob","URL","createObjectURL","revokeObjectURL","classNames","videoOuterContainer","padding","overflow","background","minHeight","hidden","display","video","maxWidth","maxHeight","objectFit","_jsx","css","children","_jsxs","LegacySkeleton","active","src","controls","preload","kind","srcLang","default"],"sourceRoot":""}