{"version":3,"file":"static/js/2121.02d55e17.chunk.js","mappings":"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","sources":["shared/web-shared/model-trace-explorer/assessments-pane/utils.tsx","shared/web-shared/snippet/theme/databricks-duotone-dark.ts","shared/web-shared/model-trace-explorer/assessments-pane/ExpectationValuePreview.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerSkeleton.tsx","shared/web-shared/global-settings/getUser.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerResizablePane.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerSearchBox.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTree.utils.ts","shared/web-shared/model-trace-explorer/ModelTraceExplorerViewStateContext.tsx","shared/web-shared/model-trace-explorer/hooks/useModelTraceSearch.tsx","shared/web-shared/model-trace-explorer/constants.ts","shared/web-shared/model-trace-explorer/ModelTraceExplorerHighlightedCodeSnippet.tsx","shared/web-shared/genai-markdown-renderer/TableRenderer.tsx","shared/web-shared/genai-markdown-renderer/GenAIMarkdownRenderer.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerCodeSnippetBody.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerHighlightedSnippetTitle.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerCodeSnippet.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerAttributesTab.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatToolParam.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatTool.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatMessageHeader.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerToolCallMessage.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatMessage.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatRenderer.utils.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerConversation.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerCollapsibleSection.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerChatTab.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerDefaultSpanView.tsx","shared/web-shared/model-trace-explorer/key-value-tag/KeyValueTag.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerRetrieverDocumentFull.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerRetrieverDocumentPreview.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerRetrieverDocument.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerRenderModeToggle.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerRetrieverSpanView.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerContentTab.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerEventsTab.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerBadge.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentPaneToggle.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentCreateNameTypeahead.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentsPane.utils.tsx","shared/web-shared/model-trace-explorer/assessments-pane/components/BooleanInput.tsx","shared/web-shared/model-trace-explorer/assessments-pane/components/NumericInput.tsx","shared/web-shared/model-trace-explorer/assessments-pane/components/TextInput.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorer.request.utils.tsx","shared/web-shared/model-trace-explorer/api.ts","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentCreateForm.tsx","shared/web-shared/model-trace-explorer/assessments-pane/components/JsonInput.tsx","shared/web-shared/model-trace-explorer/hooks/useCreateAssessment.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentCreateButton.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentActionsOverflowMenu.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentDeleteModal.tsx","shared/web-shared/model-trace-explorer/hooks/useOverrideAssessment.tsx","shared/web-shared/model-trace-explorer/hooks/useUpdateAssessment.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentEditForm.tsx","shared/web-shared/model-trace-explorer/assessments-pane/SpanNameDetailViewLink.tsx","shared/web-shared/model-trace-explorer/assessments-pane/ExpectationItem.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentDisplayValue.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentSourceName.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentItemHeader.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackErrorItem.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackHistoryItem.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackHistoryModal.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackItemContent.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackItem.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackValueGroupSourceCounts.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackValueGroup.tsx","shared/web-shared/model-trace-explorer/assessments-pane/FeedbackGroup.tsx","shared/web-shared/model-trace-explorer/assessments-pane/AssessmentsPane.tsx","shared/web-shared/model-trace-explorer/right-pane/ModelTraceExplorerRightPaneTabs.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTreeFilterButton.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTreeHeader.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTreeHierarchyBars.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTreeSpanTooltip.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTreeNode.tsx","shared/web-shared/model-trace-explorer/timeline-tree/gantt/TimelineTreeGanttNode.tsx","shared/web-shared/model-trace-explorer/timeline-tree/gantt/TimelineTreeGanttBars.tsx","shared/web-shared/model-trace-explorer/timeline-tree/TimelineTree.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerDetailView.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerErrorState.tsx","shared/web-shared/model-trace-explorer/hooks/useGetModelTraceInfoV3.tsx","shared/web-shared/model-trace-explorer/field-renderers/ModelTraceExplorerChatToolsRenderer.tsx","shared/web-shared/model-trace-explorer/field-renderers/ModelTraceExplorerRetrieverFieldRenderer.tsx","shared/web-shared/model-trace-explorer/field-renderers/ModelTraceExplorerTextFieldRenderer.tsx","shared/web-shared/model-trace-explorer/field-renderers/ModelTraceExplorerFieldRenderer.tsx","shared/web-shared/model-trace-explorer/summary-view/ModelTraceExplorerSummaryViewExceptionsSection.tsx","shared/web-shared/model-trace-explorer/summary-view/ModelTraceExplorerSummaryIntermediateNode.tsx","shared/web-shared/model-trace-explorer/summary-view/ModelTraceExplorerSummarySpans.tsx","shared/web-shared/model-trace-explorer/summary-view/ModelTraceExplorerSummaryView.tsx","shared/web-shared/model-trace-explorer/ModelTraceHeaderDetails.tsx","shared/web-shared/model-trace-explorer/TagUtils.ts","shared/web-shared/model-trace-explorer/ModelTraceExplorer.tsx","shared/web-shared/copy/useCopyController.tsx","shared/web-shared/snippet/theme/databricks-light.ts","shared/web-shared/model-trace-explorer/contexts/AssessmentSchemaContext.tsx","shared/web-shared/model-trace-explorer/contexts/AssessmentSchemaContext.utils.tsx","shared/web-shared/model-trace-explorer/ModelTraceExplorerIcon.tsx","shared/web-shared/model-trace-explorer/chat-utils/anthropic.ts","shared/web-shared/model-trace-explorer/chat-utils/autogen.ts","shared/web-shared/model-trace-explorer/chat-utils/bedrock.ts","shared/web-shared/model-trace-explorer/chat-utils/gemini.ts","shared/web-shared/model-trace-explorer/chat-utils/openai.ts","shared/web-shared/model-trace-explorer/chat-utils/langchain.ts","shared/web-shared/model-trace-explorer/chat-utils/llamaindex.ts","shared/web-shared/model-trace-explorer/chat-utils/dspy.ts"],"sourcesContent":["import type { Assessment } from '../ModelTrace.types';\n\nexport const getAssessmentValue = (assessment: Assessment) => {\n  if ('feedback' in assessment) {\n    return assessment.feedback.value;\n  }\n\n  if ('value' in assessment.expectation) {\n    return assessment.expectation.value;\n  }\n\n  return assessment.expectation.serialized_value.value;\n};\n","/**\n * Adapted from `duotone-dark`\n * Ref: https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/b2457268891948f7005ccf539a70c000f0695bde/src/styles/prism/duotone-dark.js\n */\n\nconst databricksDuotoneDarkTheme = {\n  'code[class*=\"language-\"]': {\n    fontFamily:\n      'Consolas, Menlo, Monaco, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Courier New\", Courier, monospace',\n    fontSize: '14px',\n    lineHeight: '1.375',\n    direction: 'ltr',\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    background: '#2a2734',\n    color: '#5DFAFC', // D\n  },\n  'pre[class*=\"language-\"]': {\n    fontFamily:\n      'Consolas, Menlo, Monaco, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", \"Courier New\", Courier, monospace',\n    fontSize: '14px',\n    lineHeight: '1.375',\n    direction: 'ltr',\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    background: '#2a2734',\n    color: '#5DFAFC', // D\n    padding: '1em',\n    margin: '.5em 0',\n    overflow: 'auto',\n  },\n  'pre > code[class*=\"language-\"]': {\n    fontSize: '1em',\n  },\n  'pre[class*=\"language-\"]::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"] ::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"]::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"] ::-moz-selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"]::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'pre[class*=\"language-\"] ::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"]::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  'code[class*=\"language-\"] ::selection': {\n    textShadow: 'none',\n    background: '#6a51e6',\n  },\n  ':not(pre) > code[class*=\"language-\"]': {\n    padding: '.1em',\n    borderRadius: '.3em',\n  },\n  comment: {\n    color: '#6c6783',\n  },\n  prolog: {\n    color: '#6c6783',\n  },\n  doctype: {\n    color: '#6c6783',\n  },\n  cdata: {\n    color: '#6c6783',\n  },\n  punctuation: {\n    color: '#6c6783',\n  },\n  namespace: {\n    Opacity: '.7',\n  },\n  tag: {\n    color: '#3AACE2', // D\n  },\n  operator: {\n    color: '#3AACE2', // D\n  },\n  number: {\n    color: '#3AACE2', // D\n  },\n  property: {\n    color: '#5DFAFC', // D\n  },\n  function: {\n    color: '#5DFAFC', // D\n  },\n  'tag-id': {\n    color: '#eeebff',\n  },\n  selector: {\n    color: '#eeebff',\n  },\n  'atrule-id': {\n    color: '#eeebff',\n  },\n  'code.language-javascript': {\n    color: '#c4b9fe',\n  },\n  'attr-name': {\n    color: '#c4b9fe',\n  },\n  'code.language-css': {\n    color: '#ffffff', // D\n  },\n  'code.language-scss': {\n    color: '#ffffff', // D\n  },\n  boolean: {\n    color: '#ffffff', // D\n  },\n  string: {\n    color: '#ffffff', // D\n  },\n  entity: {\n    color: '#ffffff', // D\n    cursor: 'help',\n  },\n  url: {\n    color: '#ffffff', // D\n  },\n  '.language-css .token.string': {\n    color: '#ffffff', // D\n  },\n  '.language-scss .token.string': {\n    color: '#ffffff', // D\n  },\n  '.style .token.string': {\n    color: '#ffffff', // D\n  },\n  'attr-value': {\n    color: '#ffffff', // D\n  },\n  keyword: {\n    color: '#ffffff', // D\n  },\n  control: {\n    color: '#ffffff', // D\n  },\n  directive: {\n    color: '#ffffff', // D\n  },\n  unit: {\n    color: '#ffffff', // D\n  },\n  statement: {\n    color: '#ffffff', // D\n  },\n  regex: {\n    color: '#ffffff', // D\n  },\n  atrule: {\n    color: '#ffffff', // D\n  },\n  placeholder: {\n    color: '#ffffff', // D\n  },\n  variable: {\n    color: '#ffffff', // D\n  },\n  deleted: {\n    textDecoration: 'line-through',\n  },\n  inserted: {\n    borderBottom: '1px dotted #eeebff',\n    textDecoration: 'none',\n  },\n  italic: {\n    fontStyle: 'italic',\n  },\n  important: {\n    fontWeight: 'bold',\n    color: '#c4b9fe',\n  },\n  bold: {\n    fontWeight: 'bold',\n  },\n  'pre > code.highlight': {\n    Outline: '.4em solid #8a75f5',\n    OutlineOffset: '.4em',\n  },\n  '.line-numbers.line-numbers .line-numbers-rows': {\n    borderRightColor: '#2c2937',\n  },\n  '.line-numbers .line-numbers-rows > span:before': {\n    color: '#3c3949',\n  },\n  '.line-highlight.line-highlight': {\n    background: 'linear-gradient(to right, rgba(224, 145, 66, 0.2) 70%, rgba(224, 145, 66, 0))',\n  },\n};\n\nexport default databricksDuotoneDarkTheme;\n","import { isString, isObject, isNil } from 'lodash';\n\nimport { Tag, Tooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nconst SingleExpectationValuePreview = ({ objectKey, value }: { objectKey?: string; value: any }) => {\n  const { theme } = useDesignSystemTheme();\n  const displayValue = isString(value) ? value : JSON.stringify(value);\n\n  return (\n    <Tooltip content={displayValue} componentId=\"shared.model-trace-explorer.expectation-value-preview-tooltip\">\n      <Tag\n        color=\"indigo\"\n        componentId=\"shared.model-trace-explorer.expectation-array-item-tag\"\n        css={{ width: 'min-content', maxWidth: '100%' }}\n      >\n        <Typography.Text css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n          {objectKey && (\n            <Typography.Text bold css={{ marginRight: theme.spacing.xs }}>\n              {objectKey}:\n            </Typography.Text>\n          )}\n          {displayValue}\n        </Typography.Text>\n      </Tag>\n    </Tooltip>\n  );\n};\n\nexport const ExpectationValuePreview = ({\n  parsedValue,\n  singleLine = false,\n}: {\n  parsedValue: any;\n  singleLine?: boolean;\n}): React.ReactElement | null => {\n  const { theme } = useDesignSystemTheme();\n\n  if (isNil(parsedValue)) {\n    return null;\n  }\n\n  if (Array.isArray(parsedValue)) {\n    return singleLine ? (\n      <SingleExpectationValuePreview value={parsedValue} />\n    ) : (\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.sm,\n        }}\n      >\n        {parsedValue.map((item, index) => (\n          <SingleExpectationValuePreview value={item} key={index} />\n        ))}\n      </div>\n    );\n  }\n\n  if (isObject(parsedValue)) {\n    return singleLine ? (\n      <SingleExpectationValuePreview value={parsedValue} />\n    ) : (\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.sm,\n        }}\n      >\n        {Object.entries(parsedValue).map(([key, value]) => (\n          <SingleExpectationValuePreview key={key} objectKey={key} value={value} />\n        ))}\n      </div>\n    );\n  }\n\n  return <SingleExpectationValuePreview value={parsedValue} />;\n};\n","import { TableSkeleton, TitleSkeleton, useDesignSystemTheme } from '@databricks/design-system';\n\nexport const ModelTraceExplorerSkeleton = ({ label }: { label?: React.ReactNode }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div css={{ display: 'flex', height: '100%' }}>\n      <div css={{ flex: 1 }}>\n        <div css={{ padding: theme.spacing.sm, borderBottom: `1px solid ${theme.colors.border}` }}>\n          <TitleSkeleton label={label} />\n        </div>\n        <div\n          css={{\n            borderRadius: theme.legacyBorders.borderRadiusMd,\n            overflow: 'hidden',\n            display: 'flex',\n          }}\n        >\n          <div css={{ flex: 1, padding: theme.spacing.sm, borderRight: `1px solid ${theme.colors.border}` }}>\n            <TableSkeleton lines={5} />\n          </div>\n          <div css={{ flex: 2, padding: theme.spacing.sm }}>\n            <TableSkeleton lines={5} />\n          </div>\n        </div>\n      </div>\n      <div css={{ padding: theme.spacing.md, overflowY: 'auto', flex: 1 }}>\n        <TableSkeleton lines={12} />\n      </div>\n    </div>\n  );\n};\n","export const getUser = () => {\n  // return a dummy user as the OSS backend\n  // does not transmit user info to frontend\n  return 'User';\n};\n","import { Global } from '@emotion/react';\nimport { clamp } from 'lodash';\nimport React, { forwardRef, useCallback, useImperativeHandle, useLayoutEffect, useRef, useState } from 'react';\nimport { ResizableBox } from 'react-resizable';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { useResizeObserver } from '../hooks';\n\ninterface ModelTraceExplorerResizablePaneProps {\n  initialRatio: number;\n  paneWidth: number;\n  setPaneWidth: (paneWidth: number) => void;\n  leftChild: React.ReactNode;\n  leftMinWidth: number;\n  rightChild: React.ReactNode;\n  rightMinWidth: number;\n}\n\nexport interface ModelTraceExplorerResizablePaneRef {\n  updateRatio: (newPaneWidth: number) => void;\n}\n\n/**\n * This component takes a left and right child, and adds\n * a draggable handle between them to resize. It handles\n * logic such as preserving the ratio of the pane width\n * when the container/window is resized, and also ensures\n * that the left and right panes conform to specified min\n * widths.\n */\nconst ModelTraceExplorerResizablePane = forwardRef<\n  ModelTraceExplorerResizablePaneRef,\n  ModelTraceExplorerResizablePaneProps\n>(({ initialRatio, paneWidth, setPaneWidth, leftChild, leftMinWidth, rightChild, rightMinWidth }, ref) => {\n  const [isResizing, setIsResizing] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const containerWidth = useResizeObserver({ ref: containerRef })?.width;\n  // if container width is not available, don't set a max width\n  const maxWidth = (containerWidth ?? Infinity) - rightMinWidth;\n\n  const ratio = useRef(initialRatio);\n  const { theme } = useDesignSystemTheme();\n\n  const updateRatio = useCallback(\n    // used by the parent component to update the ratio when\n    // the pane is resized via the show/hide gantt button\n    (newPaneWidth: number) => {\n      if (containerWidth) {\n        ratio.current = newPaneWidth / containerWidth;\n      }\n    },\n    [containerWidth],\n  );\n\n  useImperativeHandle(ref, () => ({\n    updateRatio,\n  }));\n\n  useLayoutEffect(() => {\n    // preserve the ratio of the pane width when the container is resized\n    if (containerWidth) {\n      setPaneWidth(clamp(containerWidth * ratio.current, leftMinWidth, maxWidth));\n    }\n  }, [containerWidth, maxWidth, leftMinWidth, rightMinWidth, setPaneWidth]);\n\n  return (\n    <div\n      ref={containerRef}\n      css={{\n        display: 'flex',\n        flex: 1,\n        overflow: 'hidden',\n        flexDirection: 'row',\n      }}\n    >\n      {isResizing && (\n        <Global\n          styles={{\n            'body, :host': {\n              userSelect: 'none',\n            },\n          }}\n        />\n      )}\n      <ResizableBox\n        axis=\"x\"\n        width={paneWidth}\n        css={{ display: 'flex', flex: `0 0 ${paneWidth}px` }}\n        handle={\n          <div css={{ width: 0, position: 'relative' }}>\n            <div\n              css={{\n                position: 'relative',\n                width: theme.spacing.sm,\n                marginLeft: -theme.spacing.xs,\n                minHeight: '100%',\n                cursor: 'ew-resize',\n                backgroundColor: `rgba(0,0,0,0)`,\n                zIndex: 1,\n                ':hover': {\n                  backgroundColor: `rgba(0,0,0,0.1)`,\n                },\n              }}\n            />\n          </div>\n        }\n        onResize={(e, { size }) => {\n          const clampedSize = clamp(size.width, leftMinWidth, maxWidth);\n          setPaneWidth(clampedSize);\n          if (containerWidth) {\n            ratio.current = clampedSize / containerWidth;\n          }\n        }}\n        onResizeStart={() => setIsResizing(true)}\n        onResizeStop={() => setIsResizing(false)}\n        minConstraints={[leftMinWidth, Infinity]}\n        maxConstraints={[maxWidth, Infinity]}\n      >\n        {leftChild}\n      </ResizableBox>\n      {rightChild}\n    </div>\n  );\n});\n\nexport default ModelTraceExplorerResizablePane;\n","import React, { useState } from 'react';\nimport { useDebouncedCallback } from 'use-debounce';\n\nimport {\n  Button,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Input,\n  SearchIcon,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\n\nimport type { SearchMatch } from './ModelTrace.types';\n\nconst ModelTraceExplorerSearchBox = ({\n  searchFilter,\n  setSearchFilter,\n  matchData,\n  handleNextSearchMatch,\n  handlePreviousSearchMatch,\n}: {\n  searchFilter: string;\n  setSearchFilter: (searchFilter: string) => void;\n  matchData: {\n    match: SearchMatch | null;\n    totalMatches: number;\n    currentMatchIndex: number;\n  };\n  handleNextSearchMatch: () => void;\n  handlePreviousSearchMatch: () => void;\n}) => {\n  const [searchValue, setSearchValue] = useState(searchFilter);\n  const debouncedSetSearchFilter = useDebouncedCallback(setSearchFilter, 350);\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        gap: theme.spacing.sm,\n      }}\n    >\n      <Input\n        componentId=\"shared.model-trace-explorer.search-input\"\n        allowClear\n        placeholder=\"Search\"\n        value={searchValue}\n        onClear={() => {\n          setSearchFilter('');\n          setSearchValue('');\n        }}\n        onChange={(e) => {\n          setSearchValue(e.target.value);\n          debouncedSetSearchFilter(e.target.value.toLowerCase());\n        }}\n        prefix={<SearchIcon />}\n        css={{\n          width: '100%',\n          boxSizing: 'border-box',\n        }}\n      />\n      {matchData.match && (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'row',\n            marginLeft: theme.spacing.xs,\n            marginRight: theme.spacing.sm,\n            alignItems: 'center',\n          }}\n        >\n          <Typography.Text css={{ whiteSpace: 'nowrap', marginRight: theme.spacing.sm }}>\n            {matchData.currentMatchIndex + 1} / {matchData.totalMatches}\n          </Typography.Text>\n          <Button\n            data-testid=\"prev-search-match\"\n            icon={<ChevronUpIcon />}\n            onClick={handlePreviousSearchMatch}\n            componentId=\"shared.model-trace-explorer.prev-search-match\"\n          />\n          <Button\n            data-testid=\"next-search-match\"\n            icon={<ChevronDownIcon />}\n            onClick={handleNextSearchMatch}\n            componentId=\"shared.model-trace-explorer.next-search-match\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ModelTraceExplorerSearchBox;\n","import { values } from 'lodash';\nimport { useState } from 'react';\n\nimport type { TimelineTreeNode } from './TimelineTree.types';\nimport type { ModelTraceSpanNode } from '../ModelTrace.types';\n\n// expand all nodes by default\nexport const DEFAULT_EXPAND_DEPTH = Infinity;\nexport const SPAN_INDENT_WIDTH = 16;\nexport const SPAN_ROW_HEIGHT = 32;\nexport const TimelineTreeZIndex = {\n  HIGH: 5,\n  NORMAL: 3,\n  LOW: 1,\n};\n\n// Gets the min and max start and end times of the tree\nexport const getTimelineTreeSpanConstraints = (\n  nodes: TimelineTreeNode[],\n  constraints = { min: Number.MAX_SAFE_INTEGER, max: 0 },\n) => {\n  nodes.forEach((node) => {\n    const { start, end, children } = node;\n    if (start < constraints.min) {\n      constraints.min = start;\n    }\n    if (end > constraints.max) {\n      constraints.max = end;\n    }\n    getTimelineTreeSpanConstraints(children ?? [], constraints);\n  });\n\n  return constraints;\n};\n\n// Gets a flat list of all expanded nodes in the tree\nexport const getTimelineTreeExpandedNodesList = <T extends TimelineTreeNode & { children?: T[] }>(\n  nodes: T[],\n  expandedKeys: Set<string | number>,\n) => {\n  const expandedNodesFlat: T[] = [];\n  const traverseExpanded = (traversedNode: T | undefined) => {\n    if (!traversedNode) {\n      return;\n    }\n    expandedNodesFlat.push(traversedNode);\n    if (expandedKeys.has(traversedNode.key)) {\n      traversedNode.children?.forEach(traverseExpanded);\n    }\n  };\n\n  nodes.forEach(traverseExpanded);\n  return expandedNodesFlat;\n};\n\n// Gets a flat list of all nodes in the tree (regardless of expansion status)\nexport const getTimelineTreeNodesList = <T extends TimelineTreeNode & { children?: T[] }>(nodes: T[]) => {\n  const expandedNodesFlat: T[] = [];\n  const traverseExpanded = (traversedNode: T | undefined) => {\n    if (!traversedNode) {\n      return;\n    }\n    expandedNodesFlat.push(traversedNode);\n    traversedNode.children?.forEach(traverseExpanded);\n  };\n\n  nodes.forEach(traverseExpanded);\n  return expandedNodesFlat;\n};\n\nexport const getTimelineTreeNodesMap = <T extends TimelineTreeNode & { children?: T[] }>(\n  nodes: T[],\n  expandDepth = Infinity,\n) => {\n  const nodesMap: { [nodeId: string]: T } = {};\n\n  const traverse = (traversedNode: T | undefined, depth: number) => {\n    if (!traversedNode || depth > expandDepth) {\n      return;\n    }\n    nodesMap[traversedNode.key] = traversedNode;\n    traversedNode.children?.forEach((child: T) => traverse(child, depth + 1));\n  };\n\n  nodes.forEach(traverse, 0);\n  return nodesMap;\n};\n\nexport const useTimelineTreeExpandedNodes = <T extends ModelTraceSpanNode & { children?: T[] }>(\n  params: {\n    rootNodes?: T[];\n    // nodes beyond this depth will be collapsed\n    initialExpandDepth?: number;\n  } = {},\n) => {\n  const [expandedKeys, setExpandedKeys] = useState<Set<string | number>>(() => {\n    if (params.rootNodes) {\n      const list = values(getTimelineTreeNodesMap(params.rootNodes, params.initialExpandDepth)).map((node) => node.key);\n      return new Set(list);\n    }\n    return new Set();\n  });\n\n  return {\n    expandedKeys,\n    setExpandedKeys,\n  };\n};\n\nexport const useTimelineTreeSelectedNode = () => {\n  const [selectedNode, setSelectedNode] = useState<ModelTraceSpanNode | undefined>(undefined);\n\n  return {\n    selectedNode,\n    setSelectedNode,\n  };\n};\n\nexport const spanTimeFormatter = (executionTimeUs: number) => {\n  // Convert to different units based on the time scale\n  if (executionTimeUs === 0) {\n    return '0s';\n  } else if (executionTimeUs >= 60 * 1e6) {\n    // More than or equal to 1 minute\n    const executionTimeMin = executionTimeUs / 1e6 / 60;\n    return `${executionTimeMin.toFixed(2)}m`;\n  } else if (executionTimeUs >= 1e5) {\n    // More than or equal to 0.1 second. this\n    // is to avoid showing 3-digit ms numbers\n    const executionTimeSec = executionTimeUs / 1e6;\n    return `${executionTimeSec.toFixed(2)}s`;\n  } else {\n    // Less than 0.1 second (milliseconds)\n    const executionTimeMs = executionTimeUs / 1e3;\n    return `${executionTimeMs.toFixed(2)}ms`;\n  }\n};\n\nexport const getActiveChildIndex = (node: ModelTraceSpanNode, activeNodeId: string): number => {\n  if (node.key === activeNodeId) {\n    return 0;\n  }\n\n  return (node.children ?? []).findIndex((child) => getActiveChildIndex(child, activeNodeId) > -1);\n};\n\nexport const getModelTraceSpanNodeDepth = (node: ModelTraceSpanNode): number => {\n  if (!node.children || node.children?.length === 0) {\n    return 0;\n  }\n\n  const childDepths = node.children.map(getModelTraceSpanNodeDepth);\n  return Math.max(...childDepths) + 1;\n};\n\nexport const getSpanNodeParentIds = (node: ModelTraceSpanNode, nodeMap: { [nodeId: string]: ModelTraceSpanNode }) => {\n  const parents = new Set<string | number>();\n\n  let currentNode = node;\n  while (currentNode && currentNode.parentId) {\n    parents.add(currentNode.parentId);\n    currentNode = nodeMap[currentNode.parentId];\n  }\n\n  return parents;\n};\n","import { createContext, useContext, useMemo, useState } from 'react';\n\nimport type { ModelTrace, ModelTraceExplorerTab, ModelTraceSpanNode } from './ModelTrace.types';\nimport { parseModelTraceToTree, searchTreeBySpanId } from './ModelTraceExplorer.utils';\nimport { getTimelineTreeNodesMap } from './timeline-tree/TimelineTree.utils';\n\nexport type ModelTraceExplorerViewState = {\n  rootNode: ModelTraceSpanNode | null;\n  nodeMap: Record<string, ModelTraceSpanNode>;\n  activeView: 'summary' | 'detail';\n  setActiveView: (view: 'summary' | 'detail') => void;\n  selectedNode: ModelTraceSpanNode | undefined;\n  setSelectedNode: (node: ModelTraceSpanNode | undefined) => void;\n  activeTab: ModelTraceExplorerTab;\n  setActiveTab: (tab: ModelTraceExplorerTab) => void;\n  showTimelineTreeGantt: boolean;\n  setShowTimelineTreeGantt: (show: boolean) => void;\n  assessmentsPaneExpanded: boolean;\n  setAssessmentsPaneExpanded: (expanded: boolean) => void;\n  assessmentsPaneEnabled: boolean;\n};\n\nexport const ModelTraceExplorerViewStateContext = createContext<ModelTraceExplorerViewState>({\n  rootNode: null,\n  nodeMap: {},\n  activeView: 'summary',\n  setActiveView: () => {},\n  selectedNode: undefined,\n  setSelectedNode: () => {},\n  activeTab: 'content',\n  setActiveTab: () => {},\n  showTimelineTreeGantt: false,\n  setShowTimelineTreeGantt: () => {},\n  assessmentsPaneExpanded: false,\n  setAssessmentsPaneExpanded: () => {},\n  assessmentsPaneEnabled: true,\n});\n\nexport const useModelTraceExplorerViewState = () => {\n  return useContext(ModelTraceExplorerViewStateContext);\n};\n\nexport const ModelTraceExplorerViewStateProvider = ({\n  modelTrace,\n  initialActiveView,\n  selectedSpanIdOnRender,\n  // assessments pane is disabled if\n  // the trace doesn't exist in the backend\n  // (i.e. if the traceinfo fetch fails)\n  assessmentsPaneEnabled,\n  children,\n}: {\n  modelTrace: ModelTrace;\n  initialActiveView: 'summary' | 'detail';\n  selectedSpanIdOnRender?: string;\n  children: React.ReactNode;\n  assessmentsPaneEnabled: boolean;\n}) => {\n  const rootNode = useMemo(() => parseModelTraceToTree(modelTrace), [modelTrace]);\n  const nodeMap = useMemo(() => (rootNode ? getTimelineTreeNodesMap([rootNode]) : {}), [rootNode]);\n  const selectedSpanOnRender = searchTreeBySpanId(rootNode, selectedSpanIdOnRender);\n  const defaultSelectedNode = selectedSpanOnRender ?? rootNode ?? undefined;\n  const hasAssessments = (defaultSelectedNode?.assessments?.length ?? 0) > 0;\n\n  const [activeView, setActiveView] = useState<'summary' | 'detail'>(initialActiveView);\n  const [selectedNode, setSelectedNode] = useState<ModelTraceSpanNode | undefined>(defaultSelectedNode);\n  const [activeTab, setActiveTab] = useState<ModelTraceExplorerTab>(selectedNode?.chatMessages ? 'chat' : 'content');\n  const [showTimelineTreeGantt, setShowTimelineTreeGantt] = useState(false);\n  const [assessmentsPaneExpanded, setAssessmentsPaneExpanded] = useState(hasAssessments);\n\n  const value = useMemo(\n    () => ({\n      rootNode,\n      nodeMap,\n      activeView,\n      setActiveView,\n      activeTab,\n      setActiveTab,\n      selectedNode,\n      setSelectedNode,\n      showTimelineTreeGantt,\n      setShowTimelineTreeGantt,\n      assessmentsPaneExpanded,\n      setAssessmentsPaneExpanded,\n      assessmentsPaneEnabled,\n    }),\n    [\n      activeView,\n      nodeMap,\n      activeTab,\n      rootNode,\n      selectedNode,\n      showTimelineTreeGantt,\n      setShowTimelineTreeGantt,\n      assessmentsPaneExpanded,\n      setAssessmentsPaneExpanded,\n      assessmentsPaneEnabled,\n    ],\n  );\n\n  return (\n    <ModelTraceExplorerViewStateContext.Provider value={value}>{children}</ModelTraceExplorerViewStateContext.Provider>\n  );\n};\n","import { compact, isNil } from 'lodash';\nimport { useCallback, useLayoutEffect, useMemo, useState } from 'react';\n\nimport type {\n  ModelTraceExplorerTab,\n  ModelTraceSpanNode,\n  SearchMatch,\n  SpanFilterState,\n  ModelTrace,\n} from '../ModelTrace.types';\nimport { searchTree } from '../ModelTraceExplorer.utils';\nimport {\n  getSpanNodeParentIds,\n  getTimelineTreeNodesList,\n  getTimelineTreeNodesMap,\n} from '../timeline-tree/TimelineTree.utils';\n\nconst getDefaultSpanFilterState = (treeNode: ModelTraceSpanNode | null): SpanFilterState => {\n  const spanTypeDisplayState: Record<string, boolean> = {};\n\n  // populate the spanTypeDisplayState with\n  // all span types that exist on the trace\n  if (treeNode) {\n    const allSpanTypes = compact(getTimelineTreeNodesList<ModelTraceSpanNode>([treeNode]).map((node) => node.type));\n    allSpanTypes.forEach((spanType) => {\n      spanTypeDisplayState[spanType] = true;\n    });\n  }\n\n  return {\n    showParents: true,\n    showExceptions: true,\n    spanTypeDisplayState,\n  };\n};\n\nconst getTabForMatch = (match: SearchMatch): ModelTraceExplorerTab => {\n  switch (match.section) {\n    case 'inputs':\n    case 'outputs':\n      return 'content';\n    case 'attributes':\n      return 'attributes';\n    case 'events':\n      return 'events';\n    default:\n      // shouldn't happen\n      return 'content';\n  }\n};\n\nexport const useModelTraceSearch = ({\n  treeNode,\n  selectedNode,\n  setSelectedNode,\n  setActiveTab,\n  setExpandedKeys,\n  modelTraceInfo,\n}: {\n  treeNode: ModelTraceSpanNode | null;\n  selectedNode: ModelTraceSpanNode | undefined;\n  setSelectedNode: (node: ModelTraceSpanNode) => void;\n  setActiveTab: (tab: ModelTraceExplorerTab) => void;\n  setExpandedKeys: React.Dispatch<React.SetStateAction<Set<string | number>>>;\n  modelTraceInfo: ModelTrace['info'] | null;\n}): {\n  searchFilter: string;\n  setSearchFilter: (filter: string) => void;\n  spanFilterState: SpanFilterState;\n  setSpanFilterState: (state: SpanFilterState) => void;\n  filteredTreeNodes: ModelTraceSpanNode[];\n  matchData: {\n    match: SearchMatch | null;\n    totalMatches: number;\n    currentMatchIndex: number;\n  };\n  handleNextSearchMatch: () => void;\n  handlePreviousSearchMatch: () => void;\n} => {\n  const [searchFilter, setSearchFilter] = useState<string>('');\n  const [spanFilterState, setSpanFilterState] = useState<SpanFilterState>(() => getDefaultSpanFilterState(treeNode));\n  const [activeMatchIndex, setActiveMatchIndex] = useState(0);\n  const { filteredTreeNodes, matches } = useMemo(() => {\n    if (isNil(treeNode)) {\n      return {\n        filteredTreeNodes: [],\n        matches: [],\n      };\n    }\n\n    return searchTree(treeNode, searchFilter, spanFilterState);\n    // use the span ID to determine whether the state should be recomputed.\n    // using the whole object seems to cause the state to be reset at\n    // unexpected times.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [treeNode?.key, searchFilter, spanFilterState, modelTraceInfo]);\n\n  const nodeMap = useMemo(() => {\n    return getTimelineTreeNodesMap(filteredTreeNodes);\n  }, [filteredTreeNodes]);\n\n  const selectMatch = useCallback(\n    (newMatchIndex: number) => {\n      if (newMatchIndex >= matches.length || newMatchIndex < 0) {\n        return;\n      }\n      setActiveMatchIndex(newMatchIndex);\n      const match = matches[newMatchIndex];\n      setSelectedNode(match.span);\n      setActiveTab(getTabForMatch(match));\n      // Make sure parents are expanded\n      const parents = getSpanNodeParentIds(match.span, nodeMap);\n      setExpandedKeys((expandedKeys) => {\n        // set.union seems to not be available in all environments\n        return new Set([...expandedKeys, ...parents]);\n      });\n    },\n    [matches, setSelectedNode, setActiveTab, nodeMap, setExpandedKeys],\n  );\n\n  const handleNextSearchMatch = useCallback(() => {\n    selectMatch(activeMatchIndex + 1);\n  }, [activeMatchIndex, selectMatch]);\n\n  const handlePreviousSearchMatch = useCallback(() => {\n    selectMatch(activeMatchIndex - 1);\n  }, [activeMatchIndex, selectMatch]);\n\n  useLayoutEffect(() => {\n    if (filteredTreeNodes.length === 0) {\n      return;\n    }\n\n    // this case can trigger on two conditions:\n    // 1. the search term is cleared, therefore there are no matches\n    // 2. the search term only matches on span names, which don't count\n    //    as matches since we don't support jumping to them.\n    if (matches.length === 0) {\n      // if the selected node is no longer in the tree, then select\n      // the first node. this can occur from condition #2 above\n      const selectedNodeKey = selectedNode?.key ?? '';\n      if (!(selectedNodeKey in nodeMap)) {\n        const newSpan = filteredTreeNodes[0];\n        setSelectedNode(newSpan);\n        setActiveTab(newSpan?.chatMessages ? 'chat' : 'content');\n      } else {\n        // another reason the tree can change is if modelTraceInfo changes.\n        // (e.g. tags/assessments were updated). if this happens, we need\n        // to reselect the updated node from the node map, otherwise the\n        // updates will not be reflected in the UI.\n        setSelectedNode(nodeMap[selectedNodeKey]);\n      }\n\n      // otherwise, if search was cleared, then we don't want to\n      // do anything. this is to preserve the user's context\n      // (e.g. they've jumped to a span and now want to dive deeper)\n      return;\n    }\n\n    // when matches update, select the first match\n    setActiveMatchIndex(0);\n    setSelectedNode(matches[0].span);\n    setActiveTab(getTabForMatch(matches[0]));\n    // don't subscribe to selectedNode to prevent infinite loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filteredTreeNodes, matches, setSelectedNode]);\n\n  return {\n    matchData: {\n      match: matches[activeMatchIndex] ?? null,\n      totalMatches: matches.length,\n      currentMatchIndex: activeMatchIndex,\n    },\n    searchFilter: searchFilter.toLowerCase().trim(),\n    setSearchFilter,\n    spanFilterState,\n    setSpanFilterState,\n    filteredTreeNodes,\n    handleNextSearchMatch,\n    handlePreviousSearchMatch,\n  };\n};\n","export const ACTIVE_HIGHLIGHT_COLOR = 'yellow500';\nexport const INACTIVE_HIGHLIGHT_COLOR = 'yellow200';\n","import React, { useCallback, useMemo } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { SearchMatch } from './ModelTrace.types';\nimport { getHighlightedSpanComponents } from './ModelTraceExplorer.utils';\nimport { ACTIVE_HIGHLIGHT_COLOR, INACTIVE_HIGHLIGHT_COLOR } from './constants';\n\nexport const ModelTraceExplorerHighlightedCodeSnippet = ({\n  searchFilter,\n  data,\n  activeMatch,\n  containsActiveMatch,\n}: {\n  searchFilter: string;\n  data: string;\n  activeMatch: SearchMatch;\n  containsActiveMatch: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const scrollToActiveMatch = useCallback((node: HTMLElement | null) => {\n    node?.scrollIntoView({ block: 'nearest', inline: 'nearest' });\n  }, []);\n\n  const spans = useMemo(() => {\n    if (!searchFilter) {\n      return [];\n    }\n\n    return getHighlightedSpanComponents({\n      data,\n      searchFilter,\n      activeMatchBackgroundColor: theme.colors[ACTIVE_HIGHLIGHT_COLOR],\n      inactiveMatchBackgroundColor: theme.colors[INACTIVE_HIGHLIGHT_COLOR],\n      containsActiveMatch,\n      activeMatch,\n      scrollToActiveMatch,\n    });\n  }, [searchFilter, data, theme, containsActiveMatch, activeMatch, scrollToActiveMatch]);\n\n  return (\n    <pre\n      css={{\n        whiteSpace: 'pre-wrap',\n        backgroundColor: theme.colors.backgroundSecondary,\n        padding: theme.spacing.sm,\n        fontSize: theme.typography.fontSizeSm,\n      }}\n    >\n      {spans}\n    </pre>\n  );\n};\n","import React from 'react';\nimport { useVirtual } from 'react-virtual';\n\nimport { Table, TableCell, TableHeader, TableRow, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { ReactMarkdownProps } from './types';\n\nexport function useParsedTableComponents({ children }: ReactMarkdownProps<'table'>): {\n  header: React.ReactNode | undefined;\n  rows: React.ReactElement[];\n  isValid: boolean;\n} {\n  if (!children) {\n    return {\n      header: undefined,\n      rows: [],\n      isValid: false,\n    };\n  }\n\n  const childArray = React.Children.toArray(children);\n\n  const header = childArray[0] ?? undefined;\n\n  // Parse rows, expect all children after the header to be tbody element containing the rows\n  const rows: React.ReactElement[] = childArray.slice(1).flatMap((child) => {\n    if (React.isValidElement(child)) {\n      return React.Children.toArray(child.props.children).filter((c): c is React.ReactElement =>\n        React.isValidElement(c),\n      );\n    }\n    return [];\n  });\n\n  return {\n    header,\n    rows,\n    isValid: true,\n  };\n}\n\nconst BasicTable = ({ children }: ReactMarkdownProps<'table'>) => {\n  return (\n    // Tables with many columns were not scrollable but instead become squished rendering the content unreadable\n    // Fixed by wrapping the table in a div with overflow auto and setting the table to display inline-flex\n    <div data-testid=\"basic-table\" css={{ overflow: 'auto' }}>\n      {/* Table has a \"height: 100%\" style that causes layout issues in some cases */}\n      <Table\n        scrollable\n        css={{\n          height: 'auto',\n          minHeight: 'initial',\n          display: 'inline-flex',\n          // Tables in tool call responses were not taking up the full width of the container\n          minWidth: '100%',\n          zIndex: 0, // Ensure the raised header doesn't cover elements outside the table\n        }}\n        children={children}\n      />\n    </div>\n  );\n};\n\nexport const TableRenderer = ({ children, node }: ReactMarkdownProps<'table'>) => {\n  const { header, rows, isValid } = useParsedTableComponents({ children, node });\n\n  if (!isValid) {\n    // If for some reason the table is not valid, fall back to the basic table\n    return <BasicTable children={children} node={node} />;\n  }\n\n  return <VirtualizedTable header={header} rows={rows} />;\n};\n\nconst MAX_TABLE_HEIGHT = 420;\n\nconst OVERSCAN = 20;\n\nconst VirtualizedTable = ({ header, rows }: { header: React.ReactNode; rows: React.ReactNode[] }) => {\n  const { theme } = useDesignSystemTheme();\n\n  const parentRef = React.useRef<HTMLDivElement>(null);\n\n  const rowVirtualizer = useVirtual({\n    size: rows.length,\n    parentRef,\n    overscan: OVERSCAN,\n  });\n\n  const { virtualItems, totalSize } = rowVirtualizer;\n\n  return (\n    <div\n      data-testid=\"virtualized-table\"\n      ref={parentRef}\n      css={{\n        overflow: 'auto',\n        maxHeight: MAX_TABLE_HEIGHT,\n        border: '1px solid',\n        borderColor: theme.colors.border,\n        borderRadius: theme.borders.borderRadiusMd,\n        marginBottom: theme.spacing.md,\n        zIndex: 0, // Ensure the raised header doesn't cover elements outside the table\n      }}\n    >\n      <Table\n        css={{\n          height: 'auto',\n          minHeight: 'initial',\n          display: 'inline-flex',\n          minWidth: '100%',\n        }}\n      >\n        {header}\n        <div\n          css={{\n            position: 'relative',\n            height: `${totalSize}px`,\n            width: '100%',\n            // Remove bottom border from the last row\n            '& > div:last-child [role=\"cell\"]': { borderBottom: 'none' },\n          }}\n        >\n          {virtualItems.map((virtualRow) => {\n            const rowIndex = virtualRow.index;\n            const rowElement = rows[rowIndex];\n\n            return (\n              <div\n                ref={virtualRow.measureRef}\n                key={rowIndex}\n                css={{\n                  position: 'absolute',\n                  top: `${virtualRow.start}px`,\n                  width: '100%',\n                }}\n              >\n                {rowElement}\n              </div>\n            );\n          })}\n        </div>\n      </Table>\n    </div>\n  );\n};\n\nexport const VirtualizedTableRow = ({ children, node }: ReactMarkdownProps<'tr'>) => {\n  const isHeader = node?.children.some((child) => child.tagName === 'th');\n  const { theme } = useDesignSystemTheme();\n  return (\n    <TableRow\n      style={\n        isHeader\n          ? { position: 'sticky', top: 0, zIndex: 1, backgroundColor: theme.colors.backgroundPrimary }\n          : undefined\n      }\n      children={children}\n      isHeader={isHeader}\n    />\n  );\n};\n\nexport const VirtualizedTableCell = ({ children, node }: ReactMarkdownProps<'td' | 'th'>) => {\n  const isHeader = node?.tagName === 'th';\n  const { theme } = useDesignSystemTheme();\n\n  if (isHeader) {\n    return (\n      <TableHeader\n        data-testid=\"virtualized-table-header\"\n        componentId=\"virtualized-table-header\"\n        css={{ paddingLeft: theme.spacing.sm, borderColor: theme.colors.border, color: theme.colors.textPrimary }}\n        children={children}\n      />\n    );\n  }\n\n  return <TableCell children={children} />;\n};\n","import React, { type ComponentType, useMemo } from 'react';\nimport type { Components, Options, UrlTransform } from 'react-markdown-10';\nimport ReactMarkdown, { defaultUrlTransform } from 'react-markdown-10';\nimport remarkGfm from 'remark-gfm-4';\n\nimport { TableCell, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { CodeSnippetLanguage } from '@databricks/web-shared/snippet';\nimport { CodeSnippet, SnippetCopyAction } from '@databricks/web-shared/snippet';\nimport { TableRenderer, VirtualizedTableCell, VirtualizedTableRow } from './TableRenderer';\nimport type { ReactMarkdownComponent, ReactMarkdownComponents, ReactMarkdownProps } from './types';\n\n/**\n * NOTE: react-markdown sanitizes urls by default, including `data:` urls, with the `urlTransform` prop, documented here: https://github.com/remarkjs/react-markdown?tab=readme-ov-file#defaulturltransformurl\n * It uses `micromark-util-sanitize-uri` package under the hood to escape urls and prevent injection: https://github.com/micromark/micromark/tree/main/packages/micromark-util-sanitize-uri#readme\n * We can allow jpeg and png data urls, and use the default transformer for everything else.\n */\nconst urlTransform: UrlTransform = (value) => {\n  if (value.startsWith('data:image/png') || value.startsWith('data:image/jpeg')) {\n    return value;\n  }\n  return defaultUrlTransform(value);\n};\n\nexport const GenAIMarkdownRenderer = (props: { children: string; components?: ExtendedComponents }) => {\n  const components: Components = useMemo(\n    () => getMarkdownComponents({ extensions: props.components }),\n    [props.components],\n  );\n  return (\n    <ReactMarkdown components={components} remarkPlugins={RemarkPlugins} urlTransform={urlTransform}>\n      {props.children}\n    </ReactMarkdown>\n  );\n};\n\nconst CodeMarkdownComponent = ({\n  codeBlock,\n  codeInline,\n  node,\n  ...codeProps\n}: Required<ExtededCodeRenderers> & ReactMarkdownProps<'code'>) => {\n  const language = React.useMemo(() => {\n    const match = /language-(\\w+)/.exec(codeProps.className ?? '');\n    return match && match[1] ? match[1] : undefined;\n  }, [codeProps.className]);\n\n  if (node?.position?.start.line === node?.position?.end.line) {\n    return React.createElement(codeInline, codeProps);\n  }\n\n  return React.createElement(codeBlock, { ...codeProps, language });\n};\n\nconst InlineCode = ({ children }: ReactMarkdownProps<'code'>) => <Typography.Text code>{children}</Typography.Text>;\n\n/**\n * Since this component is quite expensive to render we memoize it so if multiple\n * code blocks are being rendered, we only update the code blocks with changing props\n */\nconst CodeBlock = React.memo(({ children, language }: ReactMarkdownProps<'code'> & { language?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  const code = String(children).replace(/\\n$/, '');\n  return (\n    <div css={{ position: 'relative' }}>\n      <CodeSnippet\n        actions={<SnippetCopyAction componentId=\"genai.util.markdown-copy-code-block\" copyText={code} />}\n        theme={theme.isDarkMode ? 'duotoneDark' : 'light'}\n        children={code}\n        language={language && isCodeSnippetLanguage(language) ? language : 'text'}\n        style={{\n          padding: '8px 0',\n          borderRadius: 8,\n          width: '100%',\n          boxSizing: 'border-box',\n          // Setting a reasonable max height to avoid long code blocks taking up the entire screen.\n          // Component handles scrolling inside it gracefully\n          maxHeight: 640,\n          // Using column-reverse flex layout so the scroll position will stick to the bottom\n          // as new content is streamed in.\n          display: 'flex',\n          flexDirection: 'column-reverse',\n        }}\n        showLineNumbers\n      />\n    </div>\n  );\n});\n\nconst RemarkPlugins: Options['remarkPlugins'] = [remarkGfm];\n\n// react-markdown handles both inline and block code rendering in the same component\n// however, we want to render them differently so we need to split them into two components.\n// This also allows callees to override the default renderers separately\ntype ExtededCodeRenderers = {\n  codeInline?: ReactMarkdownComponent<'code'>;\n  codeBlock?: ComponentType<React.PropsWithChildren<Omit<ReactMarkdownProps<'code'>, 'ref'> & { language?: string }>>;\n};\n\ntype ExtendedComponents = Omit<ReactMarkdownComponents, 'code'> & ExtededCodeRenderers;\n\nexport const getMarkdownComponents = (props: { extensions?: ExtendedComponents }) =>\n  ({\n    a: ({ href, children }) => (\n      <Typography.Link\n        componentId=\"codegen_webapp_js_genai_util_markdown.tsx_71\"\n        href={href}\n        // If the link is to the footnote (starts with #user-content-fn), set id so footnote can link back to it\n        id={\n          href?.startsWith('#user-content-fn-') ? href.replace('#user-content-fn-', 'user-content-fnref-') : undefined\n        }\n        disabled={href?.startsWith('.')}\n        // If the link is to the footnote, add brackets around the children to make it appear as a footnote reference\n        children={href?.startsWith('#user-content-fn-') ? <>[{children}]</> : children}\n        // If the link is an id link, don't open in new tab\n        openInNewTab={!(href && href.startsWith('#'))}\n      />\n    ),\n    code: (codeProps) => (\n      <CodeMarkdownComponent\n        {...codeProps}\n        codeBlock={props.extensions?.codeBlock ?? CodeBlock} // Optionally override the default code block renderer\n        codeInline={props.extensions?.codeInline ?? InlineCode} // Optionally override the default inline code renderer\n      />\n    ),\n    p: ({ children }) => <Typography.Paragraph children={children} />,\n    h1: ({ children }) => <Typography.Title level={1} children={children} />,\n    h2: ({ children }) => <Typography.Title level={2} children={children} />,\n    h3: ({ children }) => <Typography.Title level={3} children={children} />,\n    h4: ({ children }) => <Typography.Title level={4} children={children} />,\n    h5: ({ children }) => <Typography.Title level={5} children={children} />,\n    table: ({ children, node }) => <TableRenderer children={children} node={node} />,\n    tr: ({ children, node }) => <VirtualizedTableRow children={children} node={node} />,\n    th: ({ children, node }) => <VirtualizedTableCell children={children} node={node} />,\n    // Without the multiline prop, the table cell will add ellipsis to the text effictively hiding the content\n    // for long text. This is not the desired behavior for markdown tables.\n    td: ({ children }) => <TableCell children={children} multiline />,\n    // Design system's table does not use thead and tbody elements\n    thead: ({ children }) => <>{children}</>,\n    tbody: ({ children }) => <>{children}</>,\n    img: ({ src, alt }) => <img src={src} alt={alt} css={{ maxWidth: '100%' }} />,\n  } satisfies ReactMarkdownComponents);\n\nconst isCodeSnippetLanguage = (languageString: string): languageString is CodeSnippetLanguage => {\n  // Casting the string to string literal so we can exhaust the union\n  const typeCast = languageString as CodeSnippetLanguage;\n  switch (typeCast) {\n    case 'go':\n    case 'java':\n    case 'javascript':\n    case 'json':\n    case 'python':\n    case 'sql':\n    case 'text':\n    case 'yaml':\n      return true;\n    default:\n      return false;\n  }\n};\n","import { isNil, isString } from 'lodash';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { Button, ChevronDownIcon, ChevronUpIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { SearchMatch } from './ModelTrace.types';\nimport { CodeSnippetRenderMode } from './ModelTrace.types';\nimport { ModelTraceExplorerHighlightedCodeSnippet } from './ModelTraceExplorerHighlightedCodeSnippet';\nimport { GenAIMarkdownRenderer } from '../genai-markdown-renderer';\n// eslint-disable-next-line import/no-deprecated\nimport { CodeSnippet, SnippetCopyAction } from '../snippet';\n\nconst MAX_LINES_FOR_PREVIEW = 4;\n// the `isContentLong` check does not work for\n// markdown rendering, since the content is wrapped\nconst MAX_CHARS_FOR_PREVIEW = 300;\n\nexport function ModelTraceExplorerCodeSnippetBody({\n  data,\n  searchFilter = '',\n  activeMatch = null,\n  containsActiveMatch = false,\n  renderMode = CodeSnippetRenderMode.JSON,\n  initialExpanded = false,\n}: {\n  data: string;\n  searchFilter?: string;\n  activeMatch?: SearchMatch | null;\n  containsActiveMatch?: boolean;\n  renderMode?: CodeSnippetRenderMode;\n  initialExpanded?: boolean;\n}) {\n  const containsMatches = Boolean(searchFilter) && !isNil(activeMatch) && data.toLowerCase().includes(searchFilter);\n  const { theme } = useDesignSystemTheme();\n  const [isContentLong, setIsContentLong] = useState(renderMode === 'json');\n  const [expanded, setExpanded] = useState(initialExpanded || containsMatches);\n  const snippetRef = useRef<HTMLPreElement>(null);\n  // if the data is rendered in text / markdown mode, then\n  // we need to parse it so that the newlines are unescaped\n  const dataToTruncate: string = useMemo(() => {\n    if (renderMode === 'json') {\n      return data;\n    }\n\n    const parsedData = JSON.parse(data);\n    if (isString(parsedData)) {\n      return parsedData;\n    }\n\n    return data;\n  }, [data, renderMode]);\n\n  const expandable =\n    isContentLong ||\n    dataToTruncate.split('\\n').length > MAX_LINES_FOR_PREVIEW ||\n    dataToTruncate.length > MAX_CHARS_FOR_PREVIEW;\n\n  // Truncate after first 3 lines if not expanded\n  const displayedData = useMemo(() => {\n    if (expandable && !expanded) {\n      const split = dataToTruncate.split('\\n').slice(0, MAX_LINES_FOR_PREVIEW).join('\\n');\n      return split.length > MAX_CHARS_FOR_PREVIEW ? split.slice(0, MAX_CHARS_FOR_PREVIEW) : split;\n    }\n\n    return dataToTruncate;\n  }, [dataToTruncate, expandable, expanded]);\n\n  useEffect(() => {\n    if (snippetRef.current) {\n      setIsContentLong(snippetRef.current.scrollWidth > snippetRef.current.clientWidth);\n    }\n  }, [renderMode, data]);\n\n  // add a ref to the <pre> component within <CodeSnippet>.\n  // we use the ref to check whether the <pre>'s content is overflowing\n  const PreWithRef = useCallback((preProps: any) => <pre {...preProps} ref={snippetRef} />, []);\n\n  if (containsMatches) {\n    return (\n      // if the snippet contains matches, render the search-highlighted version\n      <ModelTraceExplorerHighlightedCodeSnippet\n        data={data}\n        searchFilter={searchFilter}\n        activeMatch={activeMatch}\n        containsActiveMatch={!activeMatch.isKeyMatch && containsActiveMatch}\n      />\n    );\n  }\n\n  return (\n    <div css={{ position: 'relative' }}>\n      {renderMode === 'markdown' ? (\n        <div\n          css={{\n            padding: theme.spacing.md,\n            backgroundColor: theme.colors.backgroundSecondary,\n            marginBottom: -theme.spacing.md,\n          }}\n        >\n          <GenAIMarkdownRenderer>{displayedData}</GenAIMarkdownRenderer>\n        </div>\n      ) : (\n        <>\n          <SnippetCopyAction\n            key=\"copy-snippet\"\n            componentId=\"shared.model-trace-explorer.copy-snippet\"\n            copyText={data}\n            size=\"small\"\n            css={{ position: 'absolute', top: theme.spacing.xs, right: theme.spacing.xs, zIndex: 1 }}\n          />\n          {/* eslint-disable-next-line import/no-deprecated */}\n          <CodeSnippet\n            PreTag={PreWithRef}\n            showLineNumbers\n            language={renderMode}\n            lineProps={{ style: { wordBreak: 'break-word', whiteSpace: 'pre-wrap' } }}\n            wrapLines={expanded}\n            theme={theme.isDarkMode ? 'duotoneDark' : 'light'}\n            style={{\n              backgroundColor: theme.colors.backgroundSecondary,\n              padding: theme.spacing.sm,\n              paddingBottom: expandable ? 0 : theme.spacing.sm,\n              paddingRight: theme.spacing.md * 2,\n              overflow: expanded ? 'auto' : 'hidden',\n              textOverflow: 'ellipsis',\n              fontSize: theme.typography.fontSizeSm,\n              lineHeight: theme.typography.lineHeightBase,\n            }}\n          >\n            {displayedData}\n          </CodeSnippet>\n        </>\n      )}\n      {expandable && (\n        <div css={{ backgroundColor: theme.colors.backgroundSecondary }}>\n          <Button\n            css={{ width: '100%', padding: 0 }}\n            componentId={\n              expanded ? 'shared.model-trace-explorer.snippet-see-less' : 'shared.model-trace-explorer.snippet-see-more'\n            }\n            icon={expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n            type=\"tertiary\"\n            onClick={() => setExpanded(!expanded)}\n          >\n            {expanded ? (\n              <FormattedMessage\n                defaultMessage=\"See less\"\n                description=\"Model trace explorer > selected span > code snippet > see less button\"\n              />\n            ) : (\n              <FormattedMessage\n                defaultMessage=\"See more\"\n                description=\"Model trace explorer > selected span > code snippet > see more button\"\n              />\n            )}\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useCallback } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { ACTIVE_HIGHLIGHT_COLOR, INACTIVE_HIGHLIGHT_COLOR } from './constants';\n\nexport const ModelTraceExplorerHighlightedSnippetTitle = ({\n  title,\n  searchFilter,\n  isActiveMatch,\n}: {\n  title: string;\n  searchFilter: string;\n  isActiveMatch: boolean;\n}): React.ReactElement => {\n  const { theme } = useDesignSystemTheme();\n  const scrollToActiveMatch = useCallback((node: HTMLElement | null) => {\n    node?.scrollIntoView({ block: 'nearest', inline: 'nearest' });\n  }, []);\n\n  const titleLower = title.toLowerCase();\n  if (!titleLower.includes(searchFilter)) {\n    return <div>{title}</div>;\n  }\n\n  const startIdx = titleLower.indexOf(searchFilter);\n  const endIdx = startIdx + searchFilter.length;\n  const backgroundColor = isActiveMatch ? theme.colors[ACTIVE_HIGHLIGHT_COLOR] : theme.colors[INACTIVE_HIGHLIGHT_COLOR];\n\n  return (\n    <div>\n      {title.slice(0, startIdx)}\n      <span ref={isActiveMatch ? scrollToActiveMatch : null} css={{ backgroundColor, scrollMarginTop: 50 }}>\n        {title.slice(startIdx, endIdx)}\n      </span>\n      {title.slice(endIdx)}\n    </div>\n  );\n};\n","import { isString } from 'lodash';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { ChevronDownIcon, DropdownMenu, Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { SearchMatch } from './ModelTrace.types';\nimport { CodeSnippetRenderMode } from './ModelTrace.types';\nimport { ModelTraceExplorerCodeSnippetBody } from './ModelTraceExplorerCodeSnippetBody';\nimport { ModelTraceExplorerHighlightedSnippetTitle } from './ModelTraceExplorerHighlightedSnippetTitle';\n\n// return the initial render mode if specified, otherwise\n// default to markdown for string data and json for non-string data\nfunction getInitialRenderMode(dataIsString: boolean, initialRenderMode?: CodeSnippetRenderMode) {\n  if (initialRenderMode) {\n    return initialRenderMode;\n  }\n\n  if (dataIsString) {\n    return CodeSnippetRenderMode.MARKDOWN;\n  }\n\n  return CodeSnippetRenderMode.JSON;\n}\n\nfunction getRenderModeDisplayText(renderMode: CodeSnippetRenderMode) {\n  switch (renderMode) {\n    case CodeSnippetRenderMode.JSON:\n      return 'JSON';\n    case CodeSnippetRenderMode.TEXT:\n      return 'Text';\n    case CodeSnippetRenderMode.MARKDOWN:\n      return 'Markdown';\n    case CodeSnippetRenderMode.PYTHON:\n      return 'Python';\n  }\n}\n\nexport function ModelTraceExplorerCodeSnippet({\n  title,\n  tokens,\n  data,\n  searchFilter = '',\n  activeMatch = null,\n  containsActiveMatch = false,\n  initialRenderMode,\n}: {\n  title: string;\n  tokens?: number;\n  data: string;\n  searchFilter?: string;\n  // the current active search match\n  activeMatch?: SearchMatch | null;\n  // whether the snippet being rendered contains the\n  // current active match (either in the key or value)\n  containsActiveMatch?: boolean;\n  initialRenderMode?: CodeSnippetRenderMode;\n}) {\n  const parsedData = useMemo(() => JSON.parse(data), [data]);\n  const dataIsString = isString(parsedData);\n  const { theme } = useDesignSystemTheme();\n  // string data can be rendered in multiple formats\n  const [renderMode, setRenderMode] = useState<CodeSnippetRenderMode>(\n    getInitialRenderMode(dataIsString, initialRenderMode),\n  );\n  const isTitleMatch = containsActiveMatch && (activeMatch?.isKeyMatch ?? false);\n  const shouldShowRenderModeDropdown = dataIsString && !searchFilter;\n\n  // we need to reset the render mode when the data changes\n  useEffect(() => {\n    setRenderMode(getInitialRenderMode(dataIsString, initialRenderMode));\n  }, [dataIsString, initialRenderMode]);\n\n  return (\n    <div\n      css={{\n        position: 'relative',\n      }}\n    >\n      <div\n        css={{\n          borderRadius: theme.borders.borderRadiusSm,\n          border: `1px solid ${theme.colors.border}`,\n          overflow: 'hidden',\n        }}\n      >\n        {(title || shouldShowRenderModeDropdown) && (\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              padding: theme.spacing.sm,\n            }}\n          >\n            {/* TODO: support other types of formatting, e.g. markdown */}\n            <Typography.Title\n              css={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                whiteSpace: 'nowrap',\n              }}\n              level={4}\n              color=\"secondary\"\n              withoutMargins\n            >\n              <ModelTraceExplorerHighlightedSnippetTitle\n                title={title}\n                searchFilter={searchFilter}\n                isActiveMatch={isTitleMatch}\n              />\n            </Typography.Title>\n            <div css={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n              {shouldShowRenderModeDropdown && (\n                <DropdownMenu.Root>\n                  <DropdownMenu.Trigger asChild>\n                    <Tag\n                      componentId=\"shared.model-trace-explorer.snippet-render-mode-tag\"\n                      css={{\n                        height: 'min-content',\n                        margin: 0,\n                      }}\n                    >\n                      {/* for some reason `cursor: pointer` doesn't work if you set it on the Tag css */}\n                      <div css={{ paddingLeft: theme.spacing.xs, marginRight: theme.spacing.xs, cursor: 'pointer' }}>\n                        <Typography.Text size=\"sm\" color=\"secondary\">\n                          {getRenderModeDisplayText(renderMode)}\n                        </Typography.Text>\n                        <ChevronDownIcon />\n                      </div>\n                    </Tag>\n                  </DropdownMenu.Trigger>\n                  <DropdownMenu.Content>\n                    <DropdownMenu.RadioGroup\n                      componentId=\"shared.model-trace-explorer.snippet-render-mode-radio\"\n                      value={renderMode}\n                      onValueChange={(value) => setRenderMode(value as CodeSnippetRenderMode)}\n                    >\n                      {Object.values(CodeSnippetRenderMode).map((mode) => {\n                        if (mode === CodeSnippetRenderMode.PYTHON) {\n                          return null;\n                        }\n                        return (\n                          <DropdownMenu.RadioItem key={mode} value={mode}>\n                            <DropdownMenu.ItemIndicator />\n                            {getRenderModeDisplayText(mode)}\n                          </DropdownMenu.RadioItem>\n                        );\n                      })}\n                    </DropdownMenu.RadioGroup>\n                    <DropdownMenu.Arrow />\n                  </DropdownMenu.Content>\n                </DropdownMenu.Root>\n              )}\n            </div>\n          </div>\n        )}\n        <ModelTraceExplorerCodeSnippetBody\n          data={data}\n          searchFilter={searchFilter}\n          activeMatch={activeMatch}\n          containsActiveMatch={containsActiveMatch}\n          renderMode={renderMode}\n        />\n      </div>\n    </div>\n  );\n}\n","import { isNil, keys } from 'lodash';\n\nimport { Empty, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { ModelTraceSpanNode, SearchMatch } from '../ModelTrace.types';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\n\nexport function ModelTraceExplorerAttributesTab({\n  activeSpan,\n  searchFilter,\n  activeMatch,\n}: {\n  activeSpan: ModelTraceSpanNode;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const { attributes } = activeSpan;\n  const containsAttributes = keys(attributes).length > 0;\n  const isActiveMatchSpan = !isNil(activeMatch) && activeMatch.span.key === activeSpan.key;\n\n  if (!containsAttributes || isNil(attributes)) {\n    return (\n      <div css={{ marginTop: theme.spacing.md }}>\n        <Empty\n          description={\n            <FormattedMessage\n              defaultMessage=\"No attributes found\"\n              description=\"Empty state for the attributes tab in the model trace explorer. Attributes are properties of a span that the user defines.\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        padding: theme.spacing.md,\n      }}\n    >\n      {Object.entries(attributes).map(([key, value]) => (\n        <ModelTraceExplorerCodeSnippet\n          key={key}\n          title={key}\n          data={JSON.stringify(value, null, 2)}\n          searchFilter={searchFilter}\n          activeMatch={activeMatch}\n          containsActiveMatch={isActiveMatchSpan && activeMatch.section === 'attributes' && activeMatch.key === key}\n        />\n      ))}\n    </div>\n  );\n}\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { ModelTraceChatToolParamProperty } from '../ModelTrace.types';\n\nexport function ModelTraceExplorerChatToolParam({\n  paramName,\n  paramProperties,\n  isRequired,\n}: {\n  paramName: string;\n  paramProperties: ModelTraceChatToolParamProperty;\n  isRequired: boolean;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  const { type, description, enum: enumValues } = paramProperties;\n\n  const hasAdditionalInfo = type || description || enumValues;\n\n  const borderStyles = hasAdditionalInfo\n    ? {\n        borderTopLeftRadius: theme.borders.borderRadiusMd,\n        borderTopRightRadius: theme.borders.borderRadiusMd,\n        borderBottom: `1px solid ${theme.colors.border}`,\n      }\n    : {\n        borderRadius: theme.borders.borderRadiusMd,\n      };\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        borderRadius: theme.borders.borderRadiusMd,\n        border: `1px solid ${theme.colors.border}`,\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          backgroundColor: theme.colors.backgroundSecondary,\n          padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n          gap: theme.spacing.sm,\n          ...borderStyles,\n        }}\n      >\n        <Typography.Title withoutMargins style={{ whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden' }}>\n          {paramName}\n        </Typography.Title>\n        {isRequired && (\n          <Typography.Text withoutMargins color=\"error\">\n            <FormattedMessage\n              defaultMessage=\"required\"\n              description=\"Text displayed next to a function parameter to indicate that it is required\"\n            />\n          </Typography.Text>\n        )}\n      </div>\n      {hasAdditionalInfo && (\n        <div\n          css={{\n            display: 'grid',\n            gridTemplateColumns: 'auto 1fr',\n            gridTemplateRows: 'auto',\n            gap: theme.spacing.md,\n            padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n          }}\n        >\n          {type && (\n            <>\n              <Typography.Text withoutMargins bold>\n                <FormattedMessage\n                  defaultMessage=\"Type\"\n                  description=\"Row heading in a table that contains the type of a function parameter (e.g. string, boolean)\"\n                />\n              </Typography.Text>\n              <Typography.Text withoutMargins code>\n                {type}\n              </Typography.Text>\n            </>\n          )}\n          {description && (\n            <>\n              <Typography.Text withoutMargins bold>\n                <FormattedMessage\n                  defaultMessage=\"Description\"\n                  description=\"Row heading in a table that contains the description of a function parameter.\"\n                />\n              </Typography.Text>\n              <Typography.Text withoutMargins>{description}</Typography.Text>\n            </>\n          )}\n          {enumValues && (\n            <>\n              <Typography.Text withoutMargins bold>\n                <FormattedMessage\n                  defaultMessage=\"Enum Values\"\n                  description=\"Row heading in a table that contains the potential enum values that a function parameter can have.\"\n                />\n              </Typography.Text>\n              <div css={{ display: 'flex', flexDirection: 'row', gap: theme.spacing.sm, flexWrap: 'wrap' }}>\n                {enumValues.map((value) => (\n                  <Typography.Text withoutMargins code key={value}>\n                    {value}\n                  </Typography.Text>\n                ))}\n              </div>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useState } from 'react';\n\nimport { ChevronDownIcon, ChevronRightIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { ModelTraceExplorerChatToolParam } from './ModelTraceExplorerChatToolParam';\nimport type { ModelTraceChatTool } from '../ModelTrace.types';\n\nexport function ModelTraceExplorerChatTool({ tool }: { tool: ModelTraceChatTool }) {\n  const { theme } = useDesignSystemTheme();\n  const [expanded, setExpanded] = useState(false);\n\n  const description = tool.function.description;\n  const paramProperties = tool.function.parameters?.properties;\n  const requiredParams = tool.function.parameters?.required ?? [];\n\n  // tools only need to have names, so it's\n  // possible that no additional info exists\n  const isExpandable = description || paramProperties;\n\n  const hoverStyles = isExpandable\n    ? { ':hover': { backgroundColor: theme.colors.actionIconBackgroundHover, cursor: 'pointer' } }\n    : {};\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        borderRadius: theme.borders.borderRadiusMd,\n        border: `1px solid ${theme.colors.border}`,\n        backgroundColor: theme.colors.backgroundPrimary,\n      }}\n      data-testid=\"model-trace-explorer-chat-tool\"\n    >\n      <div\n        role=\"button\"\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          gap: theme.spacing.sm,\n          alignItems: 'center',\n          borderBottom: isExpandable && expanded ? `1px solid ${theme.colors.border}` : 'none',\n          padding: theme.spacing.sm,\n          ...hoverStyles,\n        }}\n        onClick={() => setExpanded(!expanded)}\n        data-testid=\"model-trace-explorer-chat-tool-toggle\"\n      >\n        {isExpandable && (expanded ? <ChevronDownIcon /> : <ChevronRightIcon />)}\n        <Typography.Text\n          bold\n          withoutMargins\n          style={{ whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden' }}\n        >\n          {tool.function.name}\n        </Typography.Text>\n      </div>\n      {isExpandable && expanded && (\n        <div css={{ padding: theme.spacing.sm }}>\n          {description && (\n            <Typography.Paragraph\n              style={{ whiteSpace: 'pre-wrap', marginBottom: theme.spacing.sm, padding: `0px ${theme.spacing.xs}px` }}\n            >\n              {tool.function.description}\n            </Typography.Paragraph>\n          )}\n          {paramProperties && (\n            <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n              {Object.keys(paramProperties).map((key) => (\n                <ModelTraceExplorerChatToolParam\n                  key={key}\n                  paramName={key}\n                  paramProperties={paramProperties[key]}\n                  isRequired={requiredParams.includes(key)}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","import {\n  ChevronRightIcon,\n  ChevronDownIcon,\n  Typography,\n  useDesignSystemTheme,\n  Tooltip,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\nimport { ModelIconType } from '../ModelTrace.types';\nimport { ModelTraceExplorerIcon } from '../ModelTraceExplorerIcon';\n\nconst getRoleIcon = (role: string) => {\n  switch (role) {\n    case 'system':\n      return <ModelTraceExplorerIcon type={ModelIconType.SYSTEM} />;\n    case 'user':\n      return <ModelTraceExplorerIcon type={ModelIconType.USER} />;\n    case 'tool':\n    case 'function':\n      return <ModelTraceExplorerIcon type={ModelIconType.WRENCH} />;\n    default:\n      return <ModelTraceExplorerIcon type={ModelIconType.MODELS} />;\n  }\n};\n\nconst getRoleDisplayText = (message: ModelTraceChatMessage) => {\n  switch (message.role) {\n    case 'system':\n      return (\n        <FormattedMessage\n          defaultMessage=\"System\"\n          description=\"Display text for the 'system' role in a GenAI chat message.\"\n        />\n      );\n    case 'user':\n      return (\n        <FormattedMessage\n          defaultMessage=\"User\"\n          description=\"Display text for the 'user' role in a GenAI chat message.\"\n        />\n      );\n    case 'assistant':\n      return (\n        <FormattedMessage\n          defaultMessage=\"Assistant\"\n          description=\"Display text for the 'assistant' role in a GenAI chat message.\"\n        />\n      );\n    case 'tool':\n      if (message.name) {\n        return message.name;\n      }\n      return (\n        <FormattedMessage\n          defaultMessage=\"Tool\"\n          description=\"Display text for the 'tool' role in a GenAI chat message.\"\n        />\n      );\n    case 'function':\n      return (\n        <FormattedMessage\n          defaultMessage=\"Function\"\n          description=\"Display text for the 'function' role in a GenAI chat message.\"\n        />\n      );\n    default:\n      return message.role;\n  }\n};\n\nexport const ModelTraceExplorerChatMessageHeader = ({\n  isExpandable,\n  expanded,\n  setExpanded,\n  message,\n}: {\n  isExpandable: boolean;\n  expanded: boolean;\n  setExpanded: (expanded: boolean) => void;\n  message: ModelTraceChatMessage;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const hoverStyles = isExpandable\n    ? {\n        ':hover': {\n          backgroundColor: theme.colors.actionIconBackgroundHover,\n          cursor: 'pointer',\n        },\n      }\n    : {};\n\n  return (\n    <div\n      role=\"button\"\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        padding: theme.spacing.sm,\n        gap: theme.spacing.sm,\n        ...hoverStyles,\n      }}\n      onClick={() => setExpanded(!expanded)}\n    >\n      {isExpandable && (expanded ? <ChevronDownIcon /> : <ChevronRightIcon />)}\n      {getRoleIcon(message.role)}\n      {message.tool_call_id ? (\n        <Typography.Text\n          color=\"secondary\"\n          css={{\n            whiteSpace: 'nowrap',\n            display: 'inline-flex',\n            alignItems: 'center',\n            flex: 1,\n            minWidth: 0,\n          }}\n        >\n          <FormattedMessage\n            defaultMessage=\"{toolName} was called in {toolCallId}\"\n            description=\"A message that shows the tool call ID of a tool call chat message.\"\n            values={{\n              toolName: (\n                <Typography.Text css={{ marginRight: theme.spacing.xs }} bold>\n                  {getRoleDisplayText(message)}\n                </Typography.Text>\n              ),\n              toolCallId: (\n                <Tooltip componentId=\"test\" content={message.tool_call_id}>\n                  <div\n                    css={{ display: 'inline-flex', flexShrink: 1, overflow: 'hidden', marginLeft: theme.spacing.xs }}\n                  >\n                    <Typography.Text css={{ textOverflow: 'ellipsis', overflow: 'hidden', whiteSpace: 'nowrap' }} code>\n                      {message.tool_call_id}\n                    </Typography.Text>\n                  </div>\n                </Tooltip>\n              ),\n            }}\n          />\n        </Typography.Text>\n      ) : (\n        <Typography.Text bold>{getRoleDisplayText(message)}</Typography.Text>\n      )}\n    </div>\n  );\n};\n","import { FunctionIcon, Tag, Tooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { ModelTraceToolCall } from '../ModelTrace.types';\nimport { ModelTraceExplorerCodeSnippetBody } from '../ModelTraceExplorerCodeSnippetBody';\n\nexport function ModelTraceExplorerToolCallMessage({ toolCall }: { toolCall: ModelTraceToolCall }) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div key={toolCall.id} css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n      <Typography.Text\n        color=\"secondary\"\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          padding: `0px ${theme.spacing.sm + theme.spacing.xs}px`,\n        }}\n      >\n        <FormattedMessage\n          defaultMessage=\"called {functionName} in {toolCallId}\"\n          description=\"A message that shows the tool calls that an AI assistant made. The full message reads (for example): 'Assistant called get_weather in id_123'.\"\n          values={{\n            functionName: (\n              <Tag\n                color=\"purple\"\n                componentId=\"shared.model-trace-explorer.function-name-tag\"\n                css={{ margin: `0px ${theme.spacing.xs}px` }}\n              >\n                <FunctionIcon />\n                <Typography.Text css={{ whiteSpace: 'nowrap', marginLeft: theme.spacing.xs }}>\n                  {toolCall.function.name}\n                </Typography.Text>\n              </Tag>\n            ),\n            toolCallId: (\n              <Tooltip componentId=\"test\" content={toolCall.id}>\n                <div css={{ display: 'inline-flex', flexShrink: 1, overflow: 'hidden', marginLeft: theme.spacing.xs }}>\n                  <Typography.Text\n                    css={{\n                      textOverflow: 'ellipsis',\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                    }}\n                    code\n                    color=\"secondary\"\n                  >\n                    {toolCall.id}\n                  </Typography.Text>\n                </div>\n              </Tooltip>\n            ),\n          }}\n        />\n      </Typography.Text>\n      <ModelTraceExplorerCodeSnippetBody data={toolCall.function.arguments} />\n    </div>\n  );\n}\n","import { isNil } from 'lodash';\nimport { useState } from 'react';\n\nimport { Button, ChevronDownIcon, ChevronUpIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { GenAIMarkdownRenderer } from '@databricks/web-shared/genai-markdown-renderer';\n\nimport { ModelTraceExplorerChatMessageHeader } from './ModelTraceExplorerChatMessageHeader';\nimport { CONTENT_TRUNCATION_LIMIT } from './ModelTraceExplorerChatRenderer.utils';\nimport { ModelTraceExplorerToolCallMessage } from './ModelTraceExplorerToolCallMessage';\nimport { CodeSnippetRenderMode, type ModelTraceChatMessage } from '../ModelTrace.types';\nimport { ModelTraceExplorerCodeSnippetBody } from '../ModelTraceExplorerCodeSnippetBody';\n\nconst tryGetJsonContent = (content: string) => {\n  try {\n    return {\n      content: JSON.stringify(JSON.parse(content), null, 2),\n      isJson: true,\n    };\n  } catch (error) {\n    return {\n      content,\n      isJson: false,\n    };\n  }\n};\n\nfunction ModelTraceExplorerChatMessageContent({\n  content,\n  shouldDisplayCodeSnippet,\n}: {\n  content: string;\n  shouldDisplayCodeSnippet: boolean;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  if (!content) {\n    return null;\n  }\n\n  if (shouldDisplayCodeSnippet) {\n    return (\n      <ModelTraceExplorerCodeSnippetBody\n        data={content}\n        searchFilter=\"\"\n        activeMatch={null}\n        containsActiveMatch={false}\n        renderMode={CodeSnippetRenderMode.JSON}\n      />\n    );\n  }\n\n  return (\n    <div\n      css={{\n        padding: theme.spacing.sm,\n        paddingTop: 0,\n        // genai markdown renderer uses default paragraph sizing which has\n        // a bottom margin that we can't get rid of. workaround by setting\n        // negative margin in a wrapper.\n        marginBottom: -theme.typography.fontSizeBase,\n      }}\n    >\n      <GenAIMarkdownRenderer>{content}</GenAIMarkdownRenderer>\n    </div>\n  );\n}\n\nexport function ModelTraceExplorerChatMessage({\n  message,\n  className,\n}: {\n  message: ModelTraceChatMessage;\n  className?: string;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const [expanded, setExpanded] = useState(false);\n  const { content, isJson } = tryGetJsonContent(message.content ?? '');\n\n  // tool call responses can be JSON, and in these cases\n  // it's more helpful to display the message as JSON\n  const shouldDisplayCodeSnippet = isJson && (message.role === 'tool' || message.role === 'function');\n  // if the content is JSON, truncation will be handled by the code\n  // snippet. otherwise, we need to truncate the content manually.\n  const isExpandable = !shouldDisplayCodeSnippet && content.length > CONTENT_TRUNCATION_LIMIT;\n\n  const displayedContent = isExpandable && !expanded ? `${content.slice(0, CONTENT_TRUNCATION_LIMIT)}...` : content;\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        borderRadius: theme.borders.borderRadiusSm,\n        border: `1px solid ${theme.colors.border}`,\n        backgroundColor: theme.colors.backgroundPrimary,\n        overflow: 'hidden',\n      }}\n      className={className}\n    >\n      <ModelTraceExplorerChatMessageHeader\n        isExpandable={isExpandable}\n        expanded={expanded}\n        setExpanded={setExpanded}\n        message={message}\n      />\n      <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n        {!isNil(message.tool_calls) &&\n          message.tool_calls.map((toolCall) => (\n            <ModelTraceExplorerToolCallMessage key={toolCall.id} toolCall={toolCall} />\n          ))}\n        <ModelTraceExplorerChatMessageContent\n          content={displayedContent}\n          shouldDisplayCodeSnippet={shouldDisplayCodeSnippet}\n        />\n      </div>\n      {isExpandable && (\n        <Button\n          componentId={\n            expanded\n              ? 'shared.model-trace-explorer.chat-message-see-less'\n              : 'shared.model-trace-explorer.chat-message-see-more'\n          }\n          icon={expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          type=\"tertiary\"\n          onClick={() => setExpanded(!expanded)}\n          css={{\n            display: 'flex',\n            width: '100%',\n            padding: theme.spacing.md,\n            borderRadius: '0px !important',\n          }}\n        >\n          {expanded ? (\n            <FormattedMessage\n              defaultMessage=\"See less\"\n              description=\"A button label in a message renderer that truncates long content when clicked.\"\n            />\n          ) : (\n            <FormattedMessage\n              defaultMessage=\"See more\"\n              description=\"A button label in a message renderer that expands truncated content when clicked.\"\n            />\n          )}\n        </Button>\n      )}\n    </div>\n  );\n}\n","export const CONTENT_TRUNCATION_LIMIT = 300;\n","import { isNil } from 'lodash';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { ModelTraceExplorerChatMessage } from './ModelTraceExplorerChatMessage';\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\n\nexport function ModelTraceExplorerConversation({ messages }: { messages: ModelTraceChatMessage[] | null }) {\n  const { theme } = useDesignSystemTheme();\n\n  if (isNil(messages)) {\n    return null;\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n      }}\n    >\n      {messages.map((message, index) => (\n        <ModelTraceExplorerChatMessage key={index} message={message} />\n      ))}\n    </div>\n  );\n}\n","import { useState } from 'react';\n\nimport { Button, ChevronDownIcon, ChevronRightIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nexport const ModelTraceExplorerCollapsibleSection = ({\n  sectionKey,\n  title,\n  children,\n  withBorder = false,\n  className,\n}: {\n  sectionKey: string;\n  title: React.ReactNode;\n  children: React.ReactNode;\n  withBorder?: boolean;\n  className?: string;\n}) => {\n  const [expanded, setExpanded] = useState(true);\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      className={className}\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        borderRadius: theme.borders.borderRadiusMd,\n      }}\n    >\n      <div\n        css={{\n          alignItems: 'center',\n          display: 'flex',\n          flexDirection: 'row',\n          gap: theme.spacing.xs,\n          padding: withBorder ? theme.spacing.sm : 0,\n          background: withBorder ? theme.colors.backgroundSecondary : undefined,\n          borderTopLeftRadius: theme.borders.borderRadiusMd,\n          borderTopRightRadius: theme.borders.borderRadiusMd,\n          borderBottomLeftRadius: expanded ? 0 : theme.borders.borderRadiusMd,\n          borderBottomRightRadius: expanded ? 0 : theme.borders.borderRadiusMd,\n          border: withBorder ? `1px solid ${theme.colors.border}` : undefined,\n          marginBottom: withBorder ? 0 : theme.spacing.sm,\n        }}\n      >\n        <Button\n          size=\"small\"\n          componentId={`shared.model-trace-explorer.expand-${sectionKey}`}\n          type=\"tertiary\"\n          icon={expanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n          onClick={() => setExpanded(!expanded)}\n        />\n        <Typography.Title withoutMargins level={4} css={{ width: '100%' }}>\n          {title}\n        </Typography.Title>\n      </div>\n      {expanded && (\n        <div\n          css={{\n            border: withBorder ? `1px solid ${theme.colors.border}` : undefined,\n            borderTop: 'none',\n            borderBottomLeftRadius: withBorder ? theme.borders.borderRadiusMd : undefined,\n            borderBottomRightRadius: withBorder ? theme.borders.borderRadiusMd : undefined,\n            padding: withBorder ? theme.spacing.sm : 0,\n          }}\n        >\n          {children}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerChatTool } from './ModelTraceExplorerChatTool';\nimport { ModelTraceExplorerConversation } from './ModelTraceExplorerConversation';\nimport type { ModelTraceChatMessage, ModelTraceChatTool } from '../ModelTrace.types';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\n\nexport function ModelTraceExplorerChatTab({\n  chatMessages,\n  chatTools,\n}: {\n  chatMessages: ModelTraceChatMessage[];\n  chatTools?: ModelTraceChatTool[];\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        overflowY: 'auto',\n        padding: theme.spacing.md,\n      }}\n      data-testid=\"model-trace-explorer-chat-tab\"\n    >\n      {chatTools && (\n        <ModelTraceExplorerCollapsibleSection\n          css={{ marginBottom: theme.spacing.sm }}\n          title={\n            <FormattedMessage\n              defaultMessage=\"Tools\"\n              description=\"Section header in the chat tab that displays all tools that were available for the chat model to call during execution\"\n            />\n          }\n          sectionKey=\"messages\"\n        >\n          <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n            {chatTools.map((tool) => (\n              <ModelTraceExplorerChatTool key={tool.function.name} tool={tool} />\n            ))}\n          </div>\n        </ModelTraceExplorerCollapsibleSection>\n      )}\n\n      <ModelTraceExplorerCollapsibleSection\n        title={\n          <FormattedMessage\n            defaultMessage=\"Messages\"\n            description=\"Section header in the chat tab that displays the message history between the user and the chat model\"\n          />\n        }\n        sectionKey=\"messages\"\n      >\n        <ModelTraceExplorerConversation messages={chatMessages} />\n      </ModelTraceExplorerCollapsibleSection>\n    </div>\n  );\n}\n","import { isNil } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { ModelTraceSpanNode, SearchMatch } from '../ModelTrace.types';\nimport { createListFromObject } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\n\nexport function ModelTraceExplorerDefaultSpanView({\n  activeSpan,\n  className,\n  searchFilter,\n  activeMatch,\n}: {\n  activeSpan: ModelTraceSpanNode | undefined;\n  className?: string;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const inputList = useMemo(() => createListFromObject(activeSpan?.inputs), [activeSpan]);\n  const outputList = useMemo(() => createListFromObject(activeSpan?.outputs), [activeSpan]);\n\n  if (isNil(activeSpan)) {\n    return null;\n  }\n\n  const containsInputs = inputList.length > 0;\n  const containsOutputs = outputList.length > 0;\n\n  const isActiveMatchSpan = !isNil(activeMatch) && activeMatch.span.key === activeSpan.key;\n\n  return (\n    <div data-testid=\"model-trace-explorer-default-span-view\">\n      {containsInputs && (\n        <ModelTraceExplorerCollapsibleSection\n          withBorder\n          css={{ marginBottom: theme.spacing.sm }}\n          sectionKey=\"input\"\n          title={\n            <div\n              css={{\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                width: '100%',\n              }}\n            >\n              <FormattedMessage\n                defaultMessage=\"Inputs\"\n                description=\"Model trace explorer > selected span > inputs header\"\n              />\n            </div>\n          }\n        >\n          <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n            {inputList.map(({ key, value }, index) => (\n              <ModelTraceExplorerCodeSnippet\n                key={key || index}\n                title={key}\n                data={value}\n                searchFilter={searchFilter}\n                activeMatch={activeMatch}\n                containsActiveMatch={isActiveMatchSpan && activeMatch.section === 'inputs' && activeMatch.key === key}\n              />\n            ))}\n          </div>\n        </ModelTraceExplorerCollapsibleSection>\n      )}\n      {containsOutputs && (\n        <ModelTraceExplorerCollapsibleSection\n          withBorder\n          sectionKey=\"output\"\n          title={\n            <div css={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', width: '100%' }}>\n              <FormattedMessage\n                defaultMessage=\"Outputs\"\n                description=\"Model trace explorer > selected span > outputs header\"\n              />\n            </div>\n          }\n        >\n          <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n            {outputList.map(({ key, value }) => (\n              <ModelTraceExplorerCodeSnippet\n                key={key}\n                title={key}\n                data={value}\n                searchFilter={searchFilter}\n                activeMatch={activeMatch}\n                containsActiveMatch={isActiveMatchSpan && activeMatch.section === 'outputs' && activeMatch.key === key}\n              />\n            ))}\n          </div>\n        </ModelTraceExplorerCollapsibleSection>\n      )}\n    </div>\n  );\n}\n","import type { Interpolation, Theme } from '@emotion/react';\n\nimport { Tag, Tooltip, Typography } from '@databricks/design-system';\n\n// max characters for key + value before truncation\nconst MAX_CHARS_LENGTH = 18;\n\nconst getTruncatedStyles = (shouldTruncate: boolean): Interpolation<Theme> =>\n  shouldTruncate\n    ? {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n      }\n    : { whiteSpace: 'nowrap' };\n\n/**\n * A <Tag /> wrapper used for displaying key-value entity\n */\nexport const KeyValueTag = ({\n  itemKey,\n  itemValue,\n  charLimit = MAX_CHARS_LENGTH,\n  maxWidth = 150,\n  className,\n}: {\n  itemKey: string;\n  itemValue: string;\n  charLimit?: number;\n  maxWidth?: number;\n  className?: string;\n}) => {\n  const { shouldTruncateKey, shouldTruncateValue } = getKeyAndValueComplexTruncation(itemKey, itemValue, charLimit);\n\n  return (\n    <Tooltip componentId=\"shared.model-trace-explorer.key-value-tag.hover-tooltip\" content={`${itemKey}: ${itemValue}`}>\n      <Tag componentId=\"shared.model-trace-explorer.key-value-tag\" className={className}>\n        <span css={{ maxWidth, display: 'inline-flex' }}>\n          <Typography.Text bold css={getTruncatedStyles(shouldTruncateKey)} size=\"sm\">\n            {itemKey}\n          </Typography.Text>\n          :&nbsp;\n          <Typography.Text css={getTruncatedStyles(shouldTruncateValue)} size=\"sm\">\n            {itemValue}\n          </Typography.Text>\n        </span>\n      </Tag>\n    </Tooltip>\n  );\n};\n\nexport function getKeyAndValueComplexTruncation(\n  key: string,\n  value: string,\n  charLimit: number,\n): { shouldTruncateKey: boolean; shouldTruncateValue: boolean } {\n  const fullLength = key.length + value.length;\n  const isKeyLonger = key.length > value.length;\n  const shorterLength = isKeyLonger ? value.length : key.length;\n\n  // No need to truncate if tag is short enough\n  if (fullLength <= charLimit) return { shouldTruncateKey: false, shouldTruncateValue: false };\n  // If the shorter string is too long, truncate both key and value.\n  if (shorterLength > charLimit / 2) return { shouldTruncateKey: true, shouldTruncateValue: true };\n\n  // Otherwise truncate the longer string\n  return {\n    shouldTruncateKey: isKeyLonger,\n    shouldTruncateValue: !isKeyLonger,\n  };\n}\n","import { Button, ChevronUpIcon, FileDocumentIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { GenAIMarkdownRenderer } from '../../genai-markdown-renderer';\nimport { KeyValueTag } from '../key-value-tag/KeyValueTag';\n\nexport function ModelTraceExplorerRetrieverDocumentFull({\n  text,\n  metadataTags,\n  setExpanded,\n  logDocumentClick,\n}: {\n  text: string;\n  metadataTags: { key: string; value: string }[];\n  setExpanded: (expanded: boolean) => void;\n  logDocumentClick?: (action: string) => void;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column' }}>\n      <div\n        role=\"button\"\n        onClick={() => {\n          setExpanded(false);\n          logDocumentClick?.('collapse');\n        }}\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          cursor: 'pointer',\n          padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n          height: theme.typography.lineHeightBase,\n          boxSizing: 'content-box',\n          '&:hover': {\n            backgroundColor: theme.colors.backgroundSecondary,\n          },\n        }}\n      >\n        <FileDocumentIcon />\n      </div>\n      <div css={{ padding: theme.spacing.md, paddingBottom: 0 }}>\n        <GenAIMarkdownRenderer>{text}</GenAIMarkdownRenderer>\n      </div>\n      <div css={{ padding: theme.spacing.md, paddingTop: 0 }}>\n        {metadataTags.map(({ key, value }) => (\n          <KeyValueTag key={key} itemKey={key} itemValue={value} />\n        ))}\n      </div>\n      <Button\n        css={{ width: '100%', padding: theme.spacing.sm }}\n        componentId=\"shared.model-trace-explorer.retriever-document-collapse\"\n        icon={<ChevronUpIcon />}\n        type=\"tertiary\"\n        onClick={() => setExpanded(false)}\n      >\n        <FormattedMessage\n          defaultMessage=\"See less\"\n          description=\"Model trace explorer > selected span > code snippet > see less button\"\n        />\n      </Button>\n    </div>\n  );\n}\n","import { FileDocumentIcon, Tag, Tooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { KeyValueTag } from '../key-value-tag/KeyValueTag';\n\nexport function ModelTraceExplorerRetrieverDocumentPreview({\n  text,\n  metadataTags,\n  setExpanded,\n  logDocumentClick,\n}: {\n  text: string;\n  metadataTags: { key: string; value: string }[];\n  setExpanded: (expanded: boolean) => void;\n  logDocumentClick?: (action: string) => void;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      role=\"button\"\n      onClick={() => {\n        setExpanded(true);\n        logDocumentClick?.('expand');\n      }}\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,\n        gap: theme.spacing.sm,\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        cursor: 'pointer',\n        '&:hover': {\n          backgroundColor: theme.colors.backgroundSecondary,\n        },\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          gap: theme.spacing.sm,\n          alignItems: 'center',\n          minWidth: 0,\n          flexShrink: 1,\n        }}\n      >\n        <FileDocumentIcon />\n        <Typography.Text ellipsis size=\"md\">\n          {text}\n        </Typography.Text>\n      </div>\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          gap: theme.spacing.sm,\n        }}\n      >\n        {metadataTags.length > 0 ? (\n          <KeyValueTag css={{ margin: 0 }} itemKey={metadataTags[0].key} itemValue={metadataTags[0].value} />\n        ) : null}\n        {metadataTags.length > 1 ? (\n          <Tooltip\n            componentId=\"shared.model-trace-explorer.tag-count.hover-tooltip\"\n            content={metadataTags.slice(1).map(({ key, value }) => (\n              <span key={key} css={{ display: 'inline-block' }}>\n                {`${key}: ${value}`}\n              </span>\n            ))}\n          >\n            <Tag componentId=\"shared.model-trace-explorer.tag-count\" css={{ whiteSpace: 'nowrap', margin: 0 }}>\n              +{metadataTags.length - 1}\n            </Tag>\n          </Tooltip>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n","import { useCallback, useState } from 'react';\n\nimport { ModelTraceExplorerRetrieverDocumentFull } from './ModelTraceExplorerRetrieverDocumentFull';\nimport { ModelTraceExplorerRetrieverDocumentPreview } from './ModelTraceExplorerRetrieverDocumentPreview';\nimport { createListFromObject } from '../ModelTraceExplorer.utils';\n\nexport function ModelTraceExplorerRetrieverDocument({\n  text,\n  metadata,\n}: {\n  text: string;\n  metadata: { [key: string]: any };\n}) {\n  const [expanded, setExpanded] = useState(false);\n  const metadataTags = createListFromObject(metadata);\n\n  return expanded ? (\n    <ModelTraceExplorerRetrieverDocumentFull\n      // comment to prevent copybara formatting\n      text={text}\n      metadataTags={metadataTags}\n      setExpanded={setExpanded}\n    />\n  ) : (\n    <ModelTraceExplorerRetrieverDocumentPreview\n      // comment to prevent copybara formatting\n      text={text}\n      metadataTags={metadataTags}\n      setExpanded={setExpanded}\n    />\n  );\n}\n","import {\n  MIcon,\n  SegmentedControlButton,\n  SegmentedControlGroup,\n  TextBoxIcon,\n  Tooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nexport function ModelTraceExplorerRenderModeToggle({\n  shouldRenderMarkdown,\n  setShouldRenderMarkdown,\n}: {\n  shouldRenderMarkdown: boolean;\n  setShouldRenderMarkdown: (value: boolean) => void;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <SegmentedControlGroup\n      data-testid=\"model-trace-explorer-render-mode-toggle\"\n      name=\"render-mode\"\n      size=\"small\"\n      componentId={`shared.model-trace-explorer.toggle-markdown-rendering-${!shouldRenderMarkdown}`}\n      value={shouldRenderMarkdown}\n      onChange={(event) => {\n        setShouldRenderMarkdown(event.target.value);\n      }}\n    >\n      <SegmentedControlButton data-testid=\"model-trace-explorer-render-raw-input-button\" value={false}>\n        <Tooltip\n          componentId=\"shared.model-trace-explorer.raw-input-rendering-tooltip\"\n          content={\n            <FormattedMessage\n              defaultMessage=\"Raw input\"\n              description=\"Tooltip content for a button that changes the render mode of the data to raw input (JSON)\"\n            />\n          }\n        >\n          <div css={{ display: 'flex', alignItems: 'center' }}>\n            <TextBoxIcon css={{ fontSize: theme.typography.fontSizeLg }} />\n          </div>\n        </Tooltip>\n      </SegmentedControlButton>\n      <SegmentedControlButton data-testid=\"model-trace-explorer-render-default-button\" value>\n        <Tooltip\n          componentId=\"shared.model-trace-explorer.default-rendering-tooltip\"\n          content={\n            <FormattedMessage\n              defaultMessage=\"Default rendering\"\n              description=\"Tooltip content for a button that changes the render mode to default\"\n            />\n          }\n        >\n          <div css={{ display: 'flex', alignItems: 'center' }}>\n            <MIcon css={{ fontSize: theme.typography.fontSizeLg }} />\n          </div>\n        </Tooltip>\n      </SegmentedControlButton>\n    </SegmentedControlGroup>\n  );\n}\n","import { isNil } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerRetrieverDocument } from './ModelTraceExplorerRetrieverDocument';\nimport type { ModelTraceSpanNode, RetrieverDocument, SearchMatch } from '../ModelTrace.types';\nimport { createListFromObject } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\nimport { ModelTraceExplorerRenderModeToggle } from '../ModelTraceExplorerRenderModeToggle';\n\nexport function ModelTraceExplorerRetrieverSpanView({\n  activeSpan,\n  className,\n  searchFilter,\n  activeMatch,\n}: {\n  activeSpan: ModelTraceSpanNode;\n  className?: string;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const [shouldRenderMarkdown, setShouldRenderMarkdown] = useState(true);\n  const inputList = useMemo(() => createListFromObject(activeSpan.inputs), [activeSpan]);\n\n  const outputs = activeSpan.outputs as RetrieverDocument[];\n\n  const containsInputs = inputList.length > 0;\n\n  // search highlighting is not supported in markdown rendering, so\n  // if there is an active match in the documents, we have to render\n  // them as code snippets.\n  const isActiveMatchSpan = !isNil(activeMatch) && activeMatch.span.key === activeSpan.key;\n  const outputsContainsActiveMatch = isActiveMatchSpan && activeMatch.section === 'outputs';\n\n  return (\n    <div className={className} data-testid=\"model-trace-explorer-retriever-span-view\">\n      {containsInputs && (\n        <ModelTraceExplorerCollapsibleSection\n          sectionKey=\"input\"\n          css={{ marginBottom: theme.spacing.sm }}\n          title={\n            <FormattedMessage\n              defaultMessage=\"Inputs\"\n              description=\"Model trace explorer > selected span > inputs header\"\n            />\n          }\n        >\n          <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n            {inputList.map(({ key, value }, index) => (\n              <ModelTraceExplorerCodeSnippet\n                key={key || index}\n                title={key}\n                data={value}\n                searchFilter={searchFilter}\n                activeMatch={activeMatch}\n                containsActiveMatch={isActiveMatchSpan && activeMatch.section === 'inputs' && activeMatch.key === key}\n              />\n            ))}\n          </div>\n        </ModelTraceExplorerCollapsibleSection>\n      )}\n\n      <ModelTraceExplorerCollapsibleSection\n        sectionKey=\"output\"\n        title={\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              width: '100%',\n            }}\n          >\n            <div css={{ display: 'flex', flexDirection: 'row', gap: theme.spacing.sm }}>\n              <FormattedMessage\n                defaultMessage=\"Documents\"\n                description=\"Model trace explorer > retriever span > documents header\"\n              />\n              <Tag componentId=\"shared.model-trace-explorer.document-count\">{outputs.length}</Tag>\n            </div>\n            {!outputsContainsActiveMatch && (\n              <ModelTraceExplorerRenderModeToggle\n                shouldRenderMarkdown={shouldRenderMarkdown}\n                setShouldRenderMarkdown={setShouldRenderMarkdown}\n              />\n            )}\n          </div>\n        }\n      >\n        {shouldRenderMarkdown && !outputsContainsActiveMatch ? (\n          <div\n            css={{\n              border: `1px solid ${theme.colors.border}`,\n              borderRadius: theme.legacyBorders.borderRadiusMd,\n            }}\n          >\n            {outputs.map((document, idx) => (\n              <div\n                key={idx}\n                css={{ borderBottom: idx !== outputs.length - 1 ? `1px solid ${theme.colors.border}` : '' }}\n              >\n                <ModelTraceExplorerRetrieverDocument\n                  key={idx}\n                  text={document.page_content}\n                  metadata={document.metadata}\n                />\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div\n            css={{\n              border: `1px solid ${theme.colors.border}`,\n              borderRadius: theme.legacyBorders.borderRadiusMd,\n              padding: theme.spacing.md,\n            }}\n          >\n            <ModelTraceExplorerCodeSnippet\n              title=\"\"\n              data={JSON.stringify(outputs, null, 2)}\n              searchFilter={searchFilter}\n              activeMatch={activeMatch}\n              containsActiveMatch={isActiveMatchSpan && activeMatch.section === 'outputs'}\n            />\n          </div>\n        )}\n      </ModelTraceExplorerCollapsibleSection>\n    </div>\n  );\n}\n","import { isNil } from 'lodash';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { ModelTraceExplorerDefaultSpanView } from './ModelTraceExplorerDefaultSpanView';\nimport { ModelTraceExplorerRetrieverSpanView } from './ModelTraceExplorerRetrieverSpanView';\nimport type { ModelTraceSpanNode, SearchMatch } from '../ModelTrace.types';\nimport { isRenderableRetrieverSpan } from '../ModelTraceExplorer.utils';\n\nexport function ModelTraceExplorerContentTab({\n  activeSpan,\n  className,\n  searchFilter,\n  activeMatch,\n}: {\n  activeSpan: ModelTraceSpanNode | undefined;\n  className?: string;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n}) {\n  const { theme } = useDesignSystemTheme();\n\n  if (!isNil(activeSpan) && isRenderableRetrieverSpan(activeSpan)) {\n    return (\n      <div\n        css={{\n          overflowY: 'auto',\n          padding: theme.spacing.md,\n        }}\n        className={className}\n        data-testid=\"model-trace-explorer-content-tab\"\n      >\n        <ModelTraceExplorerRetrieverSpanView\n          activeSpan={activeSpan}\n          className={className}\n          searchFilter={searchFilter}\n          activeMatch={activeMatch}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      css={{\n        overflowY: 'auto',\n        padding: theme.spacing.md,\n      }}\n      className={className}\n      data-testid=\"model-trace-explorer-content-tab\"\n    >\n      <ModelTraceExplorerDefaultSpanView\n        activeSpan={activeSpan}\n        className={className}\n        searchFilter={searchFilter}\n        activeMatch={activeMatch}\n      />\n    </div>\n  );\n}\n","import { isNil } from 'lodash';\n\nimport { Empty, Typography, useDesignSystemTheme, XCircleIcon } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { CodeSnippetRenderMode, type ModelTraceSpanNode, type SearchMatch } from '../ModelTrace.types';\nimport { getEventAttributeKey } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\n\nexport function ModelTraceExplorerEventsTab({\n  activeSpan,\n  searchFilter,\n  activeMatch,\n}: {\n  activeSpan: ModelTraceSpanNode;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const { events } = activeSpan;\n  const isActiveMatchSpan = !isNil(activeMatch) && activeMatch.span.key === activeSpan.key;\n\n  if (!Array.isArray(events) || events.length === 0) {\n    return (\n      <div css={{ marginTop: theme.spacing.md }}>\n        <Empty\n          description={\n            <FormattedMessage\n              defaultMessage=\"No events found\"\n              description=\"Empty state for the events tab in the model trace explorer. Events are logs of arbitrary things (e.g. exceptions) that occur during the execution of a span, and can be user-defined.\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div css={{ padding: theme.spacing.md }}>\n      {events.map((event, index) => {\n        const attributes = event.attributes;\n        const title =\n          event.name === 'exception' ? (\n            <>\n              <XCircleIcon css={{ marginRight: theme.spacing.sm }} color=\"danger\" />\n              <Typography.Text color=\"error\" bold>\n                Exception\n              </Typography.Text>\n            </>\n          ) : (\n            event.name\n          );\n\n        if (!attributes) return null;\n\n        return (\n          <ModelTraceExplorerCollapsibleSection\n            key={`${event.name}-${index}`}\n            sectionKey={event.name}\n            title={title}\n            withBorder\n          >\n            <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n              {Object.keys(attributes).map((attribute) => {\n                const key = getEventAttributeKey(event.name, index, attribute);\n\n                return (\n                  <ModelTraceExplorerCodeSnippet\n                    key={key}\n                    title={attribute}\n                    data={JSON.stringify(attributes[attribute], null, 2)}\n                    searchFilter={searchFilter}\n                    activeMatch={activeMatch}\n                    containsActiveMatch={\n                      isActiveMatchSpan && activeMatch.section === 'events' && activeMatch.key === key\n                    }\n                    initialRenderMode={CodeSnippetRenderMode.TEXT}\n                  />\n                );\n              })}\n            </div>\n          </ModelTraceExplorerCollapsibleSection>\n        );\n      })}\n    </div>\n  );\n}\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\nexport function ModelTraceExplorerBadge({ count }: { count: number }) {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: theme.typography.fontSizeBase,\n        height: theme.typography.fontSizeBase,\n        backgroundColor: theme.colors.actionDangerPrimaryBackgroundDefault,\n        padding: theme.spacing.xs,\n        marginLeft: theme.spacing.xs,\n        boxSizing: 'border-box',\n      }}\n    >\n      <span css={{ color: theme.colors.actionPrimaryTextDefault, fontSize: 11 }}>{count}</span>\n    </div>\n  );\n}\n","import { GavelIcon, SegmentedControlGroup, SegmentedControlButton } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const AssessmentPaneToggle = () => {\n  const { assessmentsPaneExpanded, setAssessmentsPaneExpanded, assessmentsPaneEnabled } =\n    useModelTraceExplorerViewState();\n\n  return (\n    <SegmentedControlGroup\n      css={{ display: 'block' }}\n      name=\"shared.model-trace-explorer.assessments-pane-toggle\"\n      componentId=\"shared.model-trace-explorer.assessments-pane-toggle\"\n      value={assessmentsPaneExpanded}\n      size=\"small\"\n    >\n      <SegmentedControlButton\n        value\n        disabled={!assessmentsPaneEnabled}\n        icon={<GavelIcon />}\n        onClick={() => setAssessmentsPaneExpanded?.(!assessmentsPaneExpanded)}\n        css={{\n          '& > span': {\n            display: 'flex',\n            alignItems: 'center',\n          },\n        }}\n      >\n        {!assessmentsPaneExpanded && (\n          <FormattedMessage\n            defaultMessage=\"Assessments\"\n            description=\"Label for the assessments pane of the model trace explorer.\"\n          />\n        )}\n      </SegmentedControlButton>\n    </SegmentedControlGroup>\n  );\n};\n","import type { Dispatch, SetStateAction } from 'react';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport {\n  FormUI,\n  TypeaheadComboboxInput,\n  TypeaheadComboboxMenu,\n  TypeaheadComboboxMenuItem,\n  TypeaheadComboboxRoot,\n  useComboboxState,\n} from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nimport type { AssessmentSchema } from '../contexts/AssessmentSchemaContext';\nimport { useAssessmentSchemas } from '../contexts/AssessmentSchemaContext';\n\nconst getDefaultSchema = (name: string): AssessmentSchema => ({\n  name,\n  assessmentType: 'feedback',\n  dataType: 'boolean',\n});\n\nexport const AssessmentCreateNameTypeahead = ({\n  name,\n  setName,\n  nameError,\n  setNameError,\n  handleChangeSchema,\n}: {\n  name: string;\n  setName: Dispatch<SetStateAction<string>>;\n  nameError: React.ReactNode | null;\n  setNameError: Dispatch<SetStateAction<React.ReactNode | null>>;\n  handleChangeSchema: (schema: AssessmentSchema | null) => void;\n}) => {\n  const { schemas } = useAssessmentSchemas();\n  const intl = useIntl();\n  const schemaNames = schemas.map((schema) => schema.name ?? '');\n\n  const [selectedItem, setSelectedItem] = useState<AssessmentSchema | null>(null);\n  const [itemsTest, setItemsTest] = useState<(AssessmentSchema | null)[]>(schemas);\n\n  const items = useMemo(() => {\n    const filteredItems = [...itemsTest];\n\n    // hack to allow creating a new assessment name even if it's not in\n    // the schemas. basically creates a fake schema with the name of the\n    // input value so it always shows up in the typeahead\n    if (name && !schemaNames.includes(name)) {\n      const newSchema = getDefaultSchema(name);\n      filteredItems.unshift(newSchema);\n    }\n\n    return filteredItems;\n  }, [name, itemsTest, schemaNames]);\n\n  const formOnChange = useCallback(\n    (newSelectedItem: AssessmentSchema | null) => {\n      setSelectedItem(newSelectedItem);\n      handleChangeSchema(newSelectedItem);\n      setNameError(null);\n    },\n    [handleChangeSchema, setNameError],\n  );\n\n  const comboboxState = useComboboxState<AssessmentSchema | null>({\n    componentId: 'shared.model-trace-explorer.assessment-name-typeahead',\n    allItems: schemas,\n    items,\n    setItems: setItemsTest,\n    multiSelect: false,\n    setInputValue: (value) => {\n      setName(value);\n      setNameError(null);\n    },\n    itemToString: (item) => item?.name ?? '',\n    matcher: (item, query) => item?.name?.toLowerCase().includes(query.toLowerCase()) ?? false,\n    formValue: selectedItem,\n    formOnChange,\n    preventUnsetOnBlur: true,\n  });\n\n  return (\n    <TypeaheadComboboxRoot\n      onKeyDown={(e) => {\n        // disable left and right to prevent the previous/next\n        // trace interaction while typing an assessment name,\n        // but still allow up and down for tabbing through\n        // typeahead options\n        if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n          e.stopPropagation();\n        }\n      }}\n      id=\"shared.model-trace-explorer.assessment-name-typeahead\"\n      comboboxState={comboboxState}\n    >\n      <TypeaheadComboboxInput\n        data-testid=\"assessment-name-typeahead-input\"\n        placeholder={intl.formatMessage({\n          defaultMessage: 'Enter an assessment name',\n          description: 'Placeholder for the assessment name typeahead',\n        })}\n        validationState={nameError ? 'error' : undefined}\n        comboboxState={comboboxState}\n        formOnChange={formOnChange}\n        onPressEnter={() => {\n          if (items.length > 0) {\n            formOnChange(items[0]);\n          }\n        }}\n        allowClear\n        showComboboxToggleButton\n      />\n      {nameError && <FormUI.Message type=\"error\" message={nameError} />}\n      <TypeaheadComboboxMenu comboboxState={comboboxState}>\n        {items.map((item, index) => (\n          <TypeaheadComboboxMenuItem\n            data-testid={`assessment-name-typeahead-item-${item?.name ?? ''}`}\n            key={`assessment-name-typeahead-${item?.name ?? ''}`}\n            item={item}\n            index={index}\n            comboboxState={comboboxState}\n          >\n            {item?.name ?? ''}\n          </TypeaheadComboboxMenuItem>\n        ))}\n      </TypeaheadComboboxMenu>\n    </TypeaheadComboboxRoot>\n  );\n};\n","import { FormattedMessage } from '@databricks/i18n';\n\nimport type { Expectation, Feedback } from '../ModelTrace.types';\n\nexport type AssessmentFormInputDataType = 'string' | 'boolean' | 'number' | 'json';\n\nexport const ASSESSMENT_PANE_MIN_WIDTH = 250;\n\n// assessment names from databricks judges can sometimes have several\n// prefixes that function like namespaces. for example:\n//\n// metric/global_guideline_adherence/api_code\n//\n// in this case, we only want to display the last element, as that\n// is the most helpful name to the user (and to save ui space).\n// if there are more slashes beyond that, we assume the user added\n// it themselves, so we retain them.\nexport const getAssessmentDisplayName = (name: string): string => {\n  const split = name.split('/');\n  if (split.length === 1) {\n    return name;\n  } else if (split.length === 2) {\n    return split[1];\n  }\n  return split.slice(2).join('/');\n};\n\n// forked from mlflow/web/js/src/common/utils/Utils.tsx\nexport const timeSinceStr = (date: any, referenceDate = new Date()) => {\n  const seconds = Math.max(0, Math.floor((referenceDate.getTime() - date) / 1000));\n  let interval = Math.floor(seconds / 31536000);\n\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 year} other {# years}} ago\"\n        description=\"Text for time in years since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  interval = Math.floor(seconds / 2592000);\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 month} other {# months}} ago\"\n        description=\"Text for time in months since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  interval = Math.floor(seconds / 86400);\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 day} other {# days}} ago\"\n        description=\"Text for time in days since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  interval = Math.floor(seconds / 3600);\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 hour} other {# hours}} ago\"\n        description=\"Text for time in hours since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  interval = Math.floor(seconds / 60);\n  if (interval >= 1) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"{timeSince, plural, =1 {1 minute} other {# minutes}} ago\"\n        description=\"Text for time in minutes since given date for MLflow views\"\n        values={{ timeSince: interval }}\n      />\n    );\n  }\n  return (\n    <FormattedMessage\n      defaultMessage=\"{timeSince, plural, =1 {1 second} other {# seconds}} ago\"\n      description=\"Text for time in seconds since given date for MLflow views\"\n      values={{ timeSince: seconds }}\n    />\n  );\n};\n\nexport const getParsedExpectationValue = (expectation: Expectation) => {\n  if ('value' in expectation) {\n    return expectation.value;\n  }\n\n  try {\n    // at the moment, \"JSON_FORMAT\" is the only serialization format\n    // that is supported. in the future, we may switch on the\n    // expectation.serialized_value.serialization_format field\n    // to determine how to parse the value.\n    return JSON.parse(expectation.serialized_value.value);\n  } catch (e) {\n    return expectation.serialized_value.value;\n  }\n};\n\nexport const getCreateAssessmentPayloadValue = ({\n  formValue,\n  dataType,\n  isFeedback,\n}: {\n  formValue: string | boolean | number | null;\n  dataType: AssessmentFormInputDataType;\n  isFeedback: boolean;\n}): { feedback: Feedback } | { expectation: Expectation } => {\n  if (isFeedback) {\n    return { feedback: { value: formValue } };\n  }\n\n  if (dataType === 'json') {\n    return { expectation: { serialized_value: { value: String(formValue), serialization_format: 'JSON_FORMAT' } } };\n  }\n\n  return { expectation: { value: formValue } };\n};\n","import { SegmentedControlButton, SegmentedControlGroup } from '@databricks/design-system';\n\nimport type { AssessmentValueInputFieldProps } from './types';\n\nexport const BooleanInput = ({\n  value,\n  valueError,\n  setValue,\n  setValueError,\n  isSubmitting,\n}: AssessmentValueInputFieldProps) => {\n  return (\n    <div>\n      <SegmentedControlGroup\n        data-testid=\"assessment-value-boolean-input\"\n        componentId=\"shared.model-trace-explorer.assessment-value-boolean-input\"\n        name=\"shared.model-trace-explorer.assessment-value-boolean-input\"\n        value={value}\n        disabled={isSubmitting}\n        onChange={(e) => {\n          setValue(e.target.value);\n          setValueError(null);\n        }}\n      >\n        <SegmentedControlButton value>True</SegmentedControlButton>\n        <SegmentedControlButton value={false}>False</SegmentedControlButton>\n      </SegmentedControlGroup>\n      {valueError && <div css={{ marginTop: '8px', color: 'red' }}>{valueError}</div>}\n    </div>\n  );\n};\n","import { Input } from '@databricks/design-system';\n\nimport type { AssessmentValueInputFieldProps } from './types';\n\nexport const NumericInput = ({\n  value,\n  valueError,\n  setValue,\n  setValueError,\n  isSubmitting,\n}: AssessmentValueInputFieldProps) => {\n  return (\n    <div>\n      <Input\n        data-testid=\"assessment-value-number-input\"\n        componentId=\"shared.model-trace-explorer.assessment-value-number-input\"\n        value={String(value)}\n        onKeyDown={(e) => e.stopPropagation()}\n        onChange={(e) => {\n          setValue(e.target.value ? Number(e.target.value) : '');\n          setValueError(null);\n        }}\n        type=\"number\"\n        disabled={isSubmitting}\n        allowClear\n      />\n      {valueError && <div css={{ marginTop: '8px', color: 'red' }}>{valueError}</div>}\n    </div>\n  );\n};\n","import { Input } from '@databricks/design-system';\n\nimport type { AssessmentValueInputFieldProps } from './types';\n\nexport const TextInput = ({\n  value,\n  valueError,\n  setValue,\n  setValueError,\n  isSubmitting,\n}: AssessmentValueInputFieldProps) => {\n  return (\n    <div>\n      <Input\n        data-testid=\"assessment-value-string-input\"\n        componentId=\"shared.model-trace-explorer.assessment-value-string-input\"\n        value={String(value)}\n        onKeyDown={(e) => e.stopPropagation()}\n        onChange={(e) => {\n          setValue(e.target.value);\n          setValueError(null);\n        }}\n        disabled={isSubmitting}\n        allowClear\n      />\n      {valueError && <div css={{ marginTop: '8px', color: 'red' }}>{valueError}</div>}\n    </div>\n  );\n};\n","import { matchPredefinedError } from '@databricks/web-shared/errors';\n\n// eslint-disable-next-line no-restricted-globals -- See go/spog-fetch\nconst fetchFn = fetch;\n\nfunction serializeRequestBody(payload: any | FormData | Blob) {\n  if (payload === undefined) {\n    return undefined;\n  }\n  return typeof payload === 'string' || payload instanceof FormData || payload instanceof Blob\n    ? payload\n    : JSON.stringify(payload);\n}\n\nexport const fetchAPI = async (url: string, method: 'POST' | 'GET' | 'PATCH' | 'DELETE' = 'GET', body?: any) => {\n  const response = await fetchFn(url, {\n    method,\n    body: serializeRequestBody(body),\n    headers: body ? { 'Content-Type': 'application/json' } : {},\n  });\n  if (!response.ok) {\n    const predefinedError = matchPredefinedError(response);\n    if (predefinedError) {\n      try {\n        // Attempt to use message from the response\n        const message = (await response.json()).message;\n        predefinedError.message = message ?? predefinedError.message;\n      } catch {\n        // If the message can't be parsed, use default one\n      }\n      throw predefinedError;\n    }\n  }\n  return response.json();\n};\n","import type { Assessment, Expectation, Feedback } from './ModelTrace.types';\nimport { fetchAPI } from './ModelTraceExplorer.request.utils';\n\nexport const deleteAssessment = ({ traceId, assessmentId }: { traceId: string; assessmentId: string }) =>\n  fetchAPI(`/ajax-api/3.0/mlflow/traces/${traceId}/assessments/${assessmentId}`, 'DELETE');\n\n// these fields are set by the server on create\nexport type CreateAssessmentPayload = {\n  assessment: Omit<Assessment, 'assessment_id' | 'create_time' | 'last_update_time'>;\n};\n\nexport const createAssessment = ({ payload }: { payload: CreateAssessmentPayload }) =>\n  fetchAPI(`/ajax-api/3.0/mlflow/traces/${payload.assessment.trace_id}/assessments`, 'POST', payload);\n\nexport const fetchTraceInfoV3 = ({ traceId }: { traceId: string }) =>\n  fetchAPI(`/ajax-api/3.0/mlflow/traces/${traceId}`);\n\nexport type UpdateAssessmentPayload = {\n  // we only support updating these fields\n  assessment: {\n    feedback?: Feedback;\n    expectation?: Expectation;\n    rationale?: string;\n    metadata?: Record<string, string>;\n  };\n  // comma-separated list of fields to update\n  update_mask: string;\n};\n\nexport const updateAssessment = ({\n  traceId,\n  assessmentId,\n  payload,\n}: {\n  traceId: string;\n  assessmentId: string;\n  payload: UpdateAssessmentPayload;\n}) => fetchAPI(`/ajax-api/3.0/mlflow/traces/${traceId}/assessments/${assessmentId}`, 'PATCH', payload);\n","import { isNil } from 'lodash';\nimport { forwardRef, useCallback, useState } from 'react';\n\nimport {\n  Button,\n  Input,\n  SimpleSelect,\n  SimpleSelectOption,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { getUser } from '@databricks/web-shared/global-settings';\n\nimport { AssessmentCreateNameTypeahead } from './AssessmentCreateNameTypeahead';\nimport type { AssessmentFormInputDataType } from './AssessmentsPane.utils';\nimport { getCreateAssessmentPayloadValue } from './AssessmentsPane.utils';\nimport { BooleanInput } from './components/BooleanInput';\nimport { JsonInput } from './components/JsonInput';\nimport { NumericInput } from './components/NumericInput';\nimport { TextInput } from './components/TextInput';\nimport type { AssessmentValueInputFieldProps } from './components/types';\nimport type { CreateAssessmentPayload } from '../api';\nimport type { AssessmentSchema } from '../contexts/AssessmentSchemaContext';\nimport { useCreateAssessment } from '../hooks/useCreateAssessment';\n\nconst ComponentMap: Record<AssessmentFormInputDataType, React.ComponentType<AssessmentValueInputFieldProps>> = {\n  json: JsonInput,\n  string: TextInput,\n  boolean: BooleanInput,\n  number: NumericInput,\n};\n\ntype AssessmentCreateFormProps = {\n  assessmentName?: string;\n  spanId?: string;\n  traceId: string;\n  setExpanded: (expanded: boolean) => void;\n};\n\nexport const AssessmentCreateForm = forwardRef<HTMLDivElement, AssessmentCreateFormProps>(\n  (\n    {\n      assessmentName,\n      spanId,\n      traceId,\n      // used to close the form\n      // after the assessment is created\n      setExpanded,\n    },\n    ref,\n  ) => {\n    const { theme } = useDesignSystemTheme();\n\n    const [name, setName] = useState('');\n    const [assessmentType, setAssessmentType] = useState<'feedback' | 'expectation'>('feedback');\n    const [dataType, setDataType] = useState<AssessmentFormInputDataType>('boolean');\n    const [value, setValue] = useState<string | boolean | number>(true);\n    const [rationale, setRationale] = useState('');\n    const [nameError, setNameError] = useState<React.ReactNode | null>(null);\n    const [valueError, setValueError] = useState<React.ReactNode | null>(null);\n    const isNamePrefilled = !isNil(assessmentName);\n\n    // default to string if somehow the data type is not supported\n    const InputComponent = ComponentMap[dataType] ?? ComponentMap['string'];\n\n    const { createAssessmentMutation, isLoading } = useCreateAssessment({\n      traceId,\n      onSettled: () => {\n        setExpanded(false);\n      },\n    });\n\n    const handleCreate = useCallback(async () => {\n      if (dataType === 'json') {\n        try {\n          // validate JSON\n          JSON.parse(value as string);\n        } catch (e) {\n          setValueError(\n            <FormattedMessage\n              defaultMessage=\"The provided value is not valid JSON\"\n              description=\"Error message for invalid JSON in an assessment creation form\"\n            />,\n          );\n          return;\n        }\n      }\n\n      if (!isNamePrefilled && name === '') {\n        setNameError(\n          <FormattedMessage\n            defaultMessage=\"Please enter a name\"\n            description=\"Error message for empty assessment name in a creation form\"\n          />,\n        );\n        return;\n      }\n\n      const valueObj = getCreateAssessmentPayloadValue({\n        formValue: value,\n        dataType,\n        isFeedback: assessmentType === 'feedback',\n      });\n\n      const payload: CreateAssessmentPayload = {\n        assessment: {\n          assessment_name: isNamePrefilled ? assessmentName : name,\n          trace_id: traceId,\n          source: {\n            source_type: 'HUMAN',\n            source_id: getUser() ?? '',\n          },\n          span_id: spanId,\n          rationale,\n          ...valueObj,\n        },\n      };\n\n      createAssessmentMutation(payload);\n    }, [\n      dataType,\n      value,\n      assessmentType,\n      isNamePrefilled,\n      assessmentName,\n      name,\n      traceId,\n      spanId,\n      rationale,\n      createAssessmentMutation,\n    ]);\n\n    const handleChangeSchema = useCallback((schema: AssessmentSchema | null) => {\n      // clear the form back to defaults\n      if (!schema) {\n        setName('');\n        setAssessmentType('feedback');\n        setDataType('boolean');\n        setValue(true);\n        setRationale('');\n        setValueError(null);\n        return;\n      }\n\n      setName(schema.name);\n      setAssessmentType(schema.assessmentType);\n      setDataType(schema.dataType);\n\n      // set the appropriate empty value for the data type\n      switch (schema.dataType) {\n        case 'string':\n        case 'json':\n          setValue('');\n          break;\n        case 'number':\n          setValue(0);\n          break;\n        case 'boolean':\n          setValue(true);\n          break;\n      }\n    }, []);\n\n    return (\n      <div\n        ref={ref}\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.xs,\n          marginTop: theme.spacing.sm,\n          border: `1px solid ${theme.colors.border}`,\n          padding: theme.spacing.sm,\n          borderRadius: theme.borders.borderRadiusSm,\n        }}\n      >\n        <Typography.Text size=\"sm\" color=\"secondary\">\n          <FormattedMessage\n            defaultMessage=\"Assessment Type\"\n            description=\"Field label for assessment type in a creation form\"\n          />\n        </Typography.Text>\n        <SimpleSelect\n          id=\"shared.model-trace-explorer.assessment-type-select\"\n          componentId=\"shared.model-trace-explorer.assessment-type-select\"\n          value={assessmentType}\n          disabled={isLoading}\n          onChange={(e) => {\n            setAssessmentType(e.target.value as 'feedback' | 'expectation');\n            // JSON data is not available for feedback\n            if (e.target.value === 'feedback' && dataType === 'json') {\n              setDataType('string');\n            }\n          }}\n        >\n          <SimpleSelectOption value=\"feedback\">\n            <FormattedMessage defaultMessage=\"Feedback\" description=\"Feedback select menu option for assessment type\" />\n          </SimpleSelectOption>\n          <SimpleSelectOption value=\"expectation\">\n            <FormattedMessage\n              defaultMessage=\"Expectation\"\n              description=\"Expectation select menu option for assessment type\"\n            />\n          </SimpleSelectOption>\n        </SimpleSelect>\n        <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n          <FormattedMessage\n            defaultMessage=\"Assessment Name\"\n            description=\"Field label for assessment name in a creation form\"\n          />\n        </Typography.Text>\n        {isNamePrefilled ? (\n          <Typography.Text>{assessmentName}</Typography.Text>\n        ) : (\n          <AssessmentCreateNameTypeahead\n            name={name}\n            setName={setName}\n            handleChangeSchema={handleChangeSchema}\n            nameError={nameError}\n            setNameError={setNameError}\n          />\n        )}\n        <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n          <FormattedMessage\n            defaultMessage=\"Data Type\"\n            description=\"Field label for assessment data type in a creation form\"\n          />\n        </Typography.Text>\n        <SimpleSelect\n          id=\"shared.model-trace-explorer.assessment-data-type-select\"\n          componentId=\"shared.model-trace-explorer.assessment-data-type-select\"\n          value={dataType}\n          disabled={isLoading}\n          onChange={(e) => {\n            setDataType(e.target.value as AssessmentFormInputDataType);\n            setValueError(null);\n          }}\n        >\n          {assessmentType === 'expectation' && (\n            <SimpleSelectOption value=\"json\">\n              <FormattedMessage defaultMessage=\"JSON\" description=\"JSON select menu option for assessment data type\" />\n            </SimpleSelectOption>\n          )}\n          <SimpleSelectOption value=\"string\">\n            <FormattedMessage\n              defaultMessage=\"String\"\n              description=\"String select menu option for assessment data type\"\n            />\n          </SimpleSelectOption>\n          <SimpleSelectOption value=\"boolean\">\n            <FormattedMessage\n              defaultMessage=\"Boolean\"\n              description=\"Boolean select menu option for assessment data type\"\n            />\n          </SimpleSelectOption>\n          <SimpleSelectOption value=\"number\">\n            <FormattedMessage\n              defaultMessage=\"Number\"\n              description=\"Numeric select menu option for assessment data type\"\n            />\n          </SimpleSelectOption>\n        </SimpleSelect>\n        <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n          <FormattedMessage defaultMessage=\"Value\" description=\"Field label for assessment value in a creation form\" />\n        </Typography.Text>\n        <InputComponent\n          value={value}\n          valueError={valueError}\n          setValue={setValue}\n          setValueError={setValueError}\n          isSubmitting={isLoading}\n        />\n        <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n          <FormattedMessage\n            defaultMessage=\"Rationale\"\n            description=\"Field label for assessment rationale in a creation form\"\n          />\n        </Typography.Text>\n        <Input.TextArea\n          componentId=\"shared.model-trace-explorer.assessment-rationale-input\"\n          value={rationale}\n          autoSize={{ minRows: 1, maxRows: 5 }}\n          disabled={isLoading}\n          onKeyDown={(e) => e.stopPropagation()}\n          onChange={(e) => setRationale(e.target.value)}\n        />\n        <div css={{ display: 'flex', justifyContent: 'flex-end', marginTop: theme.spacing.xs }}>\n          <Button\n            componentId=\"shared.model-trace-explorer.assessment-create-button\"\n            disabled={isLoading}\n            onClick={() => setExpanded(false)}\n          >\n            <FormattedMessage\n              defaultMessage=\"Cancel\"\n              description=\"Button label for cancelling the creation of an assessment\"\n            />\n          </Button>\n          <Button\n            css={{ marginLeft: theme.spacing.sm }}\n            type=\"primary\"\n            componentId=\"shared.model-trace-explorer.assessment-create-button\"\n            onClick={handleCreate}\n            loading={isLoading}\n          >\n            <FormattedMessage defaultMessage=\"Create\" description=\"Button label for creating an assessment\" />\n          </Button>\n        </div>\n      </div>\n    );\n  },\n);\n","import { FormUI, Input } from '@databricks/design-system';\n\nimport type { AssessmentValueInputFieldProps } from './types';\n\nexport const JsonInput = ({\n  value,\n  valueError,\n  setValue,\n  setValueError,\n  isSubmitting,\n}: AssessmentValueInputFieldProps) => {\n  return (\n    <div>\n      <Input.TextArea\n        data-testid=\"assessment-value-json-input\"\n        componentId=\"shared.model-trace-explorer.assessment-edit-value-string-input\"\n        value={String(value)}\n        autoSize={{ minRows: 1, maxRows: 5 }}\n        onKeyDown={(e) => e.stopPropagation()}\n        onChange={(e) => {\n          setValue(e.target.value);\n          setValueError(null);\n        }}\n        validationState={valueError ? 'error' : undefined}\n        disabled={isSubmitting}\n      />\n      {valueError && (\n        <FormUI.Message\n          id=\"shared.model-trace-explorer.assessment-edit-value-json-error\"\n          message={valueError}\n          type=\"error\"\n        />\n      )}\n    </div>\n  );\n};\n","import { useIntl } from '@databricks/i18n';\nimport { useMutation, useQueryClient } from '@databricks/web-shared/query-client';\n\nimport { FETCH_TRACE_INFO_QUERY_KEY, displayErrorNotification } from '../ModelTraceExplorer.utils';\nimport { createAssessment } from '../api';\nimport type { CreateAssessmentPayload } from '../api';\n\nexport const useCreateAssessment = ({\n  traceId,\n  onSuccess,\n  onError,\n  onSettled,\n}: {\n  traceId: string;\n  onSuccess?: () => void;\n  onError?: (error: any) => void;\n  onSettled?: () => void;\n}) => {\n  const intl = useIntl();\n  const queryClient = useQueryClient();\n  const { mutate: createAssessmentMutation, isLoading } = useMutation({\n    mutationFn: (payload: CreateAssessmentPayload) => createAssessment({ payload }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [FETCH_TRACE_INFO_QUERY_KEY, traceId] });\n      onSuccess?.();\n    },\n    onError: (error) => {\n      displayErrorNotification(\n        intl.formatMessage(\n          {\n            defaultMessage: 'Failed to create assessment. Error: {error}',\n            description: 'Error message when creating an assessment fails',\n          },\n          {\n            error: error instanceof Error ? error.message : String(error),\n          },\n        ),\n      );\n      onError?.(error);\n    },\n    onSettled: () => {\n      onSettled?.();\n    },\n  });\n\n  return {\n    createAssessmentMutation,\n    isLoading,\n  };\n};\n","import { useEffect, useRef, useState } from 'react';\n\nimport { Button, PlusIcon } from '@databricks/design-system';\n\nimport { AssessmentCreateForm } from './AssessmentCreateForm';\n\nexport const AssessmentCreateButton = ({\n  title,\n  assessmentName,\n  spanId,\n  traceId,\n}: {\n  title: React.ReactNode;\n  assessmentName?: string;\n  spanId?: string;\n  traceId: string;\n}) => {\n  const [expanded, setExpanded] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (expanded && ref.current) {\n      // scroll form into view after the form is expanded\n      ref.current.scrollIntoView({ behavior: 'smooth', block: 'start' });\n    }\n  }, [expanded]);\n\n  return (\n    <div>\n      <Button\n        size=\"small\"\n        componentId=\"shared.model-trace-explorer.add-new-assessment\"\n        icon={<PlusIcon />}\n        onClick={() => setExpanded(true)}\n      >\n        {title}\n      </Button>\n      {expanded && (\n        <AssessmentCreateForm\n          ref={ref}\n          assessmentName={assessmentName}\n          spanId={spanId}\n          traceId={traceId}\n          setExpanded={setExpanded}\n        />\n      )}\n    </div>\n  );\n};\n","import { PencilIcon, TrashIcon, OverflowIcon, Button, DropdownMenu } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { getUser } from '@databricks/web-shared/global-settings';\n\nimport type { Assessment } from '../ModelTrace.types';\n\nexport const AssessmentActionsOverflowMenu = ({\n  assessment,\n  setIsEditing,\n  setShowDeleteModal,\n}: {\n  assessment: Assessment;\n  setIsEditing?: (isEditing: boolean) => void;\n  setShowDeleteModal: (showDeleteModal: boolean) => void;\n}) => {\n  const isFeedback = 'feedback' in assessment;\n  const user = getUser() ?? '';\n\n  const doesUserHavePermissions =\n    user === assessment.source.source_id || (isFeedback && assessment.source.source_type !== 'HUMAN');\n  const showEditButton = doesUserHavePermissions && setIsEditing;\n\n  return (\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger asChild>\n        <Button componentId=\"shared.model-trace-explorer.assessment-more-button\" icon={<OverflowIcon />} size=\"small\" />\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content minWidth={100}>\n        {showEditButton && (\n          <DropdownMenu.Item\n            componentId=\"shared.model-trace-explorer.assessment-edit-button\"\n            onClick={() => setIsEditing?.(true)}\n          >\n            <DropdownMenu.IconWrapper>\n              <PencilIcon />\n            </DropdownMenu.IconWrapper>\n            <FormattedMessage defaultMessage=\"Edit\" description=\"Edit assessment menu item\" />\n          </DropdownMenu.Item>\n        )}\n        <DropdownMenu.Item\n          componentId=\"shared.model-trace-explorer.assessment-delete-button\"\n          onClick={() => setShowDeleteModal(true)}\n        >\n          <DropdownMenu.IconWrapper>\n            <TrashIcon />\n          </DropdownMenu.IconWrapper>\n          <FormattedMessage defaultMessage=\"Delete\" description=\"Delete assessment menu item\" />\n        </DropdownMenu.Item>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import { useCallback } from 'react';\n\nimport { Modal } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from '@databricks/i18n';\nimport { useMutation, useQueryClient } from '@databricks/web-shared/query-client';\n\nimport type { Assessment } from '../ModelTrace.types';\nimport { displayErrorNotification, FETCH_TRACE_INFO_QUERY_KEY } from '../ModelTraceExplorer.utils';\nimport { deleteAssessment } from '../api';\n\nexport const AssessmentDeleteModal = ({\n  assessment,\n  isModalVisible,\n  setIsModalVisible,\n}: {\n  assessment: Assessment;\n  isModalVisible: boolean;\n  setIsModalVisible: (isModalVisible: boolean) => void;\n}) => {\n  const intl = useIntl();\n  const queryClient = useQueryClient();\n\n  const { mutate: deleteAssessmentMutation, isLoading } = useMutation({\n    mutationFn: () => deleteAssessment({ traceId: assessment.trace_id, assessmentId: assessment.assessment_id }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [FETCH_TRACE_INFO_QUERY_KEY, assessment.trace_id] });\n    },\n    onError: (error) => {\n      displayErrorNotification(\n        intl.formatMessage(\n          {\n            defaultMessage: 'Failed to delete assessment. Error: {error}',\n            description: 'Error message when deleting an assessment fails.',\n          },\n          {\n            error: error instanceof Error ? error.message : String(error),\n          },\n        ),\n      );\n    },\n    onSettled: () => {\n      setIsModalVisible(false);\n    },\n  });\n\n  const handleDelete = useCallback(() => {\n    deleteAssessmentMutation();\n  }, [deleteAssessmentMutation]);\n\n  return (\n    <Modal\n      componentId=\"shared.model-trace-explorer.assessment-delete-modal\"\n      visible={isModalVisible}\n      onOk={handleDelete}\n      okButtonProps={{ danger: true, loading: isLoading }}\n      okText={<FormattedMessage defaultMessage=\"Delete\" description=\"Delete assessment modal button text\" />}\n      onCancel={() => {\n        setIsModalVisible(false);\n      }}\n      cancelText={<FormattedMessage defaultMessage=\"Cancel\" description=\"Delete assessment modal cancel button text\" />}\n      confirmLoading={isLoading}\n      title={<FormattedMessage defaultMessage=\"Delete assessment\" description=\"Delete assessments modal title\" />}\n    >\n      <FormattedMessage\n        defaultMessage=\"Are you sure you want to delete this assessment?\"\n        description=\"Delete assessments modal confirmation text\"\n      />\n    </Modal>\n  );\n};\n","import { omit } from 'lodash';\n\nimport { useIntl } from '@databricks/i18n';\nimport { getUser } from '@databricks/web-shared/global-settings';\nimport { useMutation, useQueryClient } from '@databricks/web-shared/query-client';\n\nimport type { Assessment, Expectation, Feedback } from '../ModelTrace.types';\nimport { displayErrorNotification, FETCH_TRACE_INFO_QUERY_KEY } from '../ModelTraceExplorer.utils';\nimport type { CreateAssessmentPayload } from '../api';\nimport { createAssessment } from '../api';\n\nexport const useOverrideAssessment = ({\n  traceId,\n  onSuccess,\n  onError,\n  onSettled,\n}: {\n  traceId: string;\n  onSuccess?: () => void;\n  onError?: (error: any) => void;\n  onSettled?: () => void;\n}) => {\n  const intl = useIntl();\n  const queryClient = useQueryClient();\n\n  const { mutate: overrideAssessmentMutation, isLoading } = useMutation({\n    mutationFn: ({\n      oldAssessment,\n      value,\n      rationale,\n    }: {\n      oldAssessment: Assessment;\n      value: { feedback: Feedback } | { expectation: Expectation };\n      rationale?: string;\n    }) => {\n      const newAssessment: Assessment = {\n        ...oldAssessment,\n        ...value,\n        rationale,\n        source: {\n          source_id: getUser() ?? '',\n          source_type: 'HUMAN',\n        },\n        overrides: oldAssessment.assessment_id,\n      };\n      const payload: CreateAssessmentPayload = {\n        assessment: omit(newAssessment, 'assessment_id', 'create_time', 'last_update_time', 'overriddenAssessments'),\n      };\n      return createAssessment({ payload });\n    },\n    onError: (error) => {\n      displayErrorNotification(\n        intl.formatMessage(\n          {\n            defaultMessage: 'Failed to override assessment. Error: {error}',\n            description: 'Error message when overriding an assessment fails',\n          },\n          {\n            error: error instanceof Error ? error.message : String(error),\n          },\n        ),\n      );\n      onError?.(error);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [FETCH_TRACE_INFO_QUERY_KEY, traceId] });\n      onSuccess?.();\n    },\n    onSettled: () => {\n      onSettled?.();\n    },\n  });\n\n  return {\n    overrideAssessmentMutation,\n    isLoading,\n  };\n};\n","import { useIntl } from '@databricks/i18n';\nimport { useMutation, useQueryClient } from '@databricks/web-shared/query-client';\n\nimport type { Assessment } from '../ModelTrace.types';\nimport { displayErrorNotification, FETCH_TRACE_INFO_QUERY_KEY } from '../ModelTraceExplorer.utils';\nimport type { UpdateAssessmentPayload } from '../api';\nimport { updateAssessment } from '../api';\n\n// This API is used to update an assessment in place.\n// To override an assessment (preserving the original)\n// use `useOverrideAssessment` instead\nexport const useUpdateAssessment = ({\n  assessment,\n  onSuccess,\n  onError,\n  onSettled,\n}: {\n  assessment: Assessment;\n  onSuccess?: () => void;\n  onError?: (error: any) => void;\n  onSettled?: () => void;\n}) => {\n  const intl = useIntl();\n  const queryClient = useQueryClient();\n\n  const { mutate: updateAssessmentMutation, isLoading } = useMutation({\n    mutationFn: (payload: UpdateAssessmentPayload) =>\n      updateAssessment({ traceId: assessment.trace_id, assessmentId: assessment.assessment_id, payload }),\n    onError: (error) => {\n      displayErrorNotification(\n        intl.formatMessage(\n          {\n            defaultMessage: 'Failed to update assessment. Error: {error}',\n            description: 'Error message when updating an assessment fails',\n          },\n          {\n            error: error instanceof Error ? error.message : String(error),\n          },\n        ),\n      );\n      onError?.(error);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [FETCH_TRACE_INFO_QUERY_KEY, assessment.trace_id] });\n      onSuccess?.();\n    },\n    onSettled: () => {\n      onSettled?.();\n    },\n  });\n\n  return {\n    updateAssessmentMutation,\n    isLoading,\n  };\n};\n","import { useCallback, useState } from 'react';\n\nimport {\n  Typography,\n  useDesignSystemTheme,\n  SimpleSelect,\n  SimpleSelectOption,\n  SegmentedControlGroup,\n  SegmentedControlButton,\n  Input,\n  Button,\n  FormUI,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { getUser } from '@databricks/web-shared/global-settings';\n\nimport type { AssessmentFormInputDataType } from './AssessmentsPane.utils';\nimport { getCreateAssessmentPayloadValue } from './AssessmentsPane.utils';\nimport { getAssessmentValue } from './utils';\nimport type { Assessment } from '../ModelTrace.types';\nimport type { UpdateAssessmentPayload } from '../api';\nimport { useOverrideAssessment } from '../hooks/useOverrideAssessment';\nimport { useUpdateAssessment } from '../hooks/useUpdateAssessment';\n\n// default to the original type of the value if possible. however,\n// we only support editing simple types in the UI (i.e. not arrays / objects)\n// so if the value does not fit, we just default to boolean for simplicity\nconst getDefaultType = (value: any, isFeedback: boolean): AssessmentFormInputDataType => {\n  if (typeof value === 'string') {\n    // treat empty strings as null, default to boolean\n    if (value === '') {\n      return 'boolean';\n    }\n\n    if (isFeedback) {\n      return 'string';\n    }\n\n    try {\n      JSON.parse(value);\n      return 'json';\n    } catch (e) {\n      // not valid JSON, default to string\n      return 'string';\n    }\n  }\n\n  if (typeof value === 'boolean' || typeof value === 'number') {\n    return typeof value as 'boolean' | 'number';\n  }\n  return 'boolean';\n};\n\nconst getDefaultValue = (value: any): string | boolean | number | null => {\n  if (typeof value === 'string') {\n    // treat empty strings as null\n    return value || null;\n  }\n  if (typeof value === 'boolean' || typeof value === 'number') {\n    return value;\n  }\n  return null;\n};\n\nexport const AssessmentEditForm = ({\n  assessment,\n  onSuccess,\n  onSettled,\n  onCancel,\n}: {\n  assessment: Assessment;\n  onSuccess?: () => void;\n  onSettled?: () => void;\n  onCancel: () => void;\n}) => {\n  const isFeedback = 'feedback' in assessment;\n  const initialValue = getAssessmentValue(assessment);\n  const defaultType = getDefaultType(initialValue, isFeedback);\n  const defaultValue = getDefaultValue(initialValue);\n  const user = getUser() ?? '';\n\n  const { theme } = useDesignSystemTheme();\n  const [dataType, setDataType] = useState<AssessmentFormInputDataType>(defaultType);\n  const [value, setValue] = useState<string | boolean | number | null>(defaultValue);\n  const [rationale, setRationale] = useState(assessment.rationale);\n  const [valueError, setValueError] = useState<React.ReactNode | null>(null);\n\n  const { updateAssessmentMutation, isLoading: isUpdating } = useUpdateAssessment({\n    assessment,\n    onSuccess,\n    onSettled,\n  });\n\n  const { overrideAssessmentMutation, isLoading: isOverwriting } = useOverrideAssessment({\n    traceId: assessment.trace_id,\n    onSuccess,\n    onSettled,\n  });\n\n  const isLoading = isUpdating || isOverwriting;\n\n  const handleUpdate = useCallback(async () => {\n    if (dataType === 'json') {\n      try {\n        JSON.parse(value as string);\n      } catch (e) {\n        setValueError(\n          <FormattedMessage\n            defaultMessage=\"The provided value is not valid JSON\"\n            description=\"Error message for invalid JSON in an assessment edit form\"\n          />,\n        );\n        return;\n      }\n    }\n\n    const valueObj = getCreateAssessmentPayloadValue({\n      formValue: value,\n      dataType,\n      isFeedback,\n    });\n\n    // if a user edits their own assessment, we update it in\n    // place as they are likely just correcting a mistake.\n    // expectation edits should always call the update API\n    if (user === assessment.source.source_id || !isFeedback) {\n      const payload: UpdateAssessmentPayload = {\n        assessment: {\n          ...valueObj,\n          rationale,\n        },\n        update_mask: `${isFeedback ? 'feedback' : 'expectation'},rationale`,\n      };\n\n      updateAssessmentMutation(payload);\n    } else {\n      overrideAssessmentMutation({\n        oldAssessment: assessment,\n        value: valueObj,\n        ...(rationale ? { rationale } : {}),\n      });\n    }\n  }, [dataType, value, isFeedback, user, assessment, rationale, updateAssessmentMutation, overrideAssessmentMutation]);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.xs,\n        marginTop: theme.spacing.sm,\n        border: `1px solid ${theme.colors.border}`,\n        padding: theme.spacing.sm,\n        borderRadius: theme.borders.borderRadiusSm,\n      }}\n    >\n      <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n        <FormattedMessage\n          defaultMessage=\"Data Type\"\n          description=\"Field label for assessment data type in an edit form\"\n        />\n      </Typography.Text>\n      <SimpleSelect\n        id=\"shared.model-trace-explorer.assessment-edit-data-type-select\"\n        componentId=\"shared.model-trace-explorer.assessment-edit-data-type-select\"\n        value={dataType}\n        disabled={isLoading}\n        onChange={(e) => {\n          setDataType(e.target.value as AssessmentFormInputDataType);\n          setValueError(null);\n        }}\n      >\n        {!isFeedback && (\n          <SimpleSelectOption value=\"json\">\n            <FormattedMessage defaultMessage=\"JSON\" description=\"JSON select menu option for assessment data type\" />\n          </SimpleSelectOption>\n        )}\n        <SimpleSelectOption value=\"string\">\n          <FormattedMessage defaultMessage=\"String\" description=\"String select menu option for assessment data type\" />\n        </SimpleSelectOption>\n        <SimpleSelectOption value=\"boolean\">\n          <FormattedMessage\n            defaultMessage=\"Boolean\"\n            description=\"Boolean select menu option for assessment data type\"\n          />\n        </SimpleSelectOption>\n        <SimpleSelectOption value=\"number\">\n          <FormattedMessage defaultMessage=\"Number\" description=\"Numeric select menu option for assessment data type\" />\n        </SimpleSelectOption>\n      </SimpleSelect>\n      <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n        <FormattedMessage defaultMessage=\"Value\" description=\"Field label for assessment value in an edit form\" />\n      </Typography.Text>\n      {dataType === 'json' && (\n        <>\n          <Input.TextArea\n            componentId=\"shared.model-trace-explorer.assessment-edit-value-string-input\"\n            value={String(value)}\n            rows={3}\n            onKeyDown={(e) => e.stopPropagation()}\n            onChange={(e) => {\n              setValue(e.target.value);\n              setValueError(null);\n            }}\n            validationState={valueError ? 'error' : undefined}\n            disabled={isLoading}\n          />\n          {valueError && (\n            <FormUI.Message\n              id=\"shared.model-trace-explorer.assessment-edit-value-json-error\"\n              message={valueError}\n              type=\"error\"\n            />\n          )}\n        </>\n      )}\n      {dataType === 'string' && (\n        <Input\n          componentId=\"shared.model-trace-explorer.assessment-edit-value-string-input\"\n          value={String(value)}\n          onKeyDown={(e) => e.stopPropagation()}\n          onChange={(e) => {\n            setValue(e.target.value);\n            setValueError(null);\n          }}\n          disabled={isLoading}\n          allowClear\n        />\n      )}\n      {dataType === 'boolean' && (\n        <SegmentedControlGroup\n          componentId=\"shared.model-trace-explorer.assessment-edit-value-boolean-input\"\n          name=\"shared.model-trace-explorer.assessment-edit-value-boolean-input\"\n          value={value}\n          disabled={isLoading}\n          onChange={(e) => {\n            setValue(e.target.value);\n            setValueError(null);\n          }}\n        >\n          <SegmentedControlButton value>True</SegmentedControlButton>\n          <SegmentedControlButton value={false}>False</SegmentedControlButton>\n        </SegmentedControlGroup>\n      )}\n      {dataType === 'number' && (\n        <Input\n          componentId=\"shared.model-trace-explorer.assessment-edit-value-number-input\"\n          value={String(value)}\n          onKeyDown={(e) => e.stopPropagation()}\n          onChange={(e) => {\n            setValue(e.target.value ? Number(e.target.value) : '');\n            setValueError(null);\n          }}\n          type=\"number\"\n          disabled={isLoading}\n          allowClear\n        />\n      )}\n      <Typography.Text css={{ marginTop: theme.spacing.xs }} size=\"sm\" color=\"secondary\">\n        <FormattedMessage\n          defaultMessage=\"Rationale\"\n          description=\"Field label for assessment rationale in an edit form\"\n        />\n      </Typography.Text>\n      <Input.TextArea\n        componentId=\"shared.model-trace-explorer.assessment-edit-rationale-input\"\n        value={rationale}\n        autoSize={{ minRows: 1, maxRows: 5 }}\n        disabled={isLoading}\n        onKeyDown={(e) => e.stopPropagation()}\n        onChange={(e) => setRationale(e.target.value)}\n      />\n      <div css={{ display: 'flex', justifyContent: 'flex-end', marginTop: theme.spacing.xs }}>\n        <Button\n          componentId=\"shared.model-trace-explorer.assessment-edit-cancel-button\"\n          disabled={isLoading}\n          onClick={onCancel}\n        >\n          <FormattedMessage\n            defaultMessage=\"Cancel\"\n            description=\"Button label for cancelling the edit of an assessment\"\n          />\n        </Button>\n        <Button\n          css={{ marginLeft: theme.spacing.sm }}\n          type=\"primary\"\n          componentId=\"shared.model-trace-explorer.assessment-edit-save-button\"\n          onClick={handleUpdate}\n          loading={isLoading}\n        >\n          <FormattedMessage defaultMessage=\"Save\" description=\"Button label for saving an edit to an assessment\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { ModelTraceSpanNode } from '../ModelTrace.types';\nimport { ModelSpanType } from '../ModelTrace.types';\nimport { getIconTypeForSpan, getSpanExceptionCount } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerIcon } from '../ModelTraceExplorerIcon';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const SpanNameDetailViewLink = ({ node }: { node: ModelTraceSpanNode }) => {\n  const { theme } = useDesignSystemTheme();\n  const { setSelectedNode, setActiveView, setShowTimelineTreeGantt } = useModelTraceExplorerViewState();\n  const hasException = getSpanExceptionCount(node) > 0;\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        marginRight: theme.spacing.xs,\n        gap: theme.spacing.xs,\n        '&:hover': {\n          textDecoration: 'underline',\n          textDecorationColor: hasException\n            ? theme.colors.actionDangerDefaultTextDefault\n            : theme.colors.actionDefaultTextDefault,\n          cursor: 'pointer',\n        },\n      }}\n      onClick={() => {\n        setSelectedNode(node);\n        setActiveView('detail');\n        setShowTimelineTreeGantt(false);\n      }}\n    >\n      <ModelTraceExplorerIcon\n        hasException={hasException}\n        type={getIconTypeForSpan(node.type ?? ModelSpanType.UNKNOWN)}\n      />\n      <Typography.Text\n        color={hasException ? 'error' : 'primary'}\n        css={{ marginLeft: theme.spacing.xs, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}\n      >\n        {node.title}\n      </Typography.Text>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { AssessmentActionsOverflowMenu } from './AssessmentActionsOverflowMenu';\nimport { AssessmentDeleteModal } from './AssessmentDeleteModal';\nimport { AssessmentEditForm } from './AssessmentEditForm';\nimport { getParsedExpectationValue } from './AssessmentsPane.utils';\nimport { ExpectationValuePreview } from './ExpectationValuePreview';\nimport { SpanNameDetailViewLink } from './SpanNameDetailViewLink';\nimport type { ExpectationAssessment } from '../ModelTrace.types';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const ExpectationItem = ({ expectation }: { expectation: ExpectationAssessment }) => {\n  const { theme } = useDesignSystemTheme();\n  const [isEditing, setIsEditing] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const { nodeMap, activeView } = useModelTraceExplorerViewState();\n\n  const associatedSpan = expectation.span_id ? nodeMap[expectation.span_id] : null;\n  // the summary view displays all assessments regardless of span, so\n  // we need some way to indicate which span an assessment is associated with.\n  const showAssociatedSpan = activeView === 'summary' && associatedSpan;\n\n  const parsedValue = getParsedExpectationValue(expectation.expectation);\n\n  return (\n    <div\n      css={{\n        padding: theme.spacing.sm + theme.spacing.xs,\n        paddingTop: theme.spacing.sm,\n        border: `1px solid ${theme.colors.border}`,\n        borderRadius: theme.borders.borderRadiusMd,\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n      }}\n    >\n      <div css={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n        <Typography.Text bold css={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n          {expectation.assessment_name}\n        </Typography.Text>\n        <AssessmentActionsOverflowMenu\n          assessment={expectation}\n          setIsEditing={setIsEditing}\n          setShowDeleteModal={setShowDeleteModal}\n        />\n        <AssessmentDeleteModal\n          assessment={expectation}\n          isModalVisible={showDeleteModal}\n          setIsModalVisible={setShowDeleteModal}\n        />\n      </div>\n      {isEditing ? (\n        <AssessmentEditForm\n          assessment={expectation}\n          onSuccess={() => setIsEditing(false)}\n          onCancel={() => setIsEditing(false)}\n        />\n      ) : (\n        <ExpectationValuePreview parsedValue={parsedValue} />\n      )}\n      {showAssociatedSpan && (\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n          <Typography.Text size=\"sm\" color=\"secondary\">\n            <FormattedMessage defaultMessage=\"Span\" description=\"Label for the associated span of an assessment\" />\n          </Typography.Text>\n          <SpanNameDetailViewLink node={associatedSpan} />\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport type { TagColors } from '@databricks/design-system';\nimport {\n  CheckCircleIcon,\n  DangerIcon,\n  Tag,\n  Tooltip,\n  useDesignSystemTheme,\n  XCircleIcon,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\n// displays a single JSON-strigified assessment value as a tag\nexport const AssessmentDisplayValue = ({ jsonValue }: { jsonValue: string }) => {\n  const { theme } = useDesignSystemTheme();\n\n  // treat empty strings as null\n  if (!jsonValue || jsonValue === '\"\"') {\n    return null;\n  }\n\n  let parsedValue: any;\n  try {\n    parsedValue = JSON.parse(jsonValue);\n  } catch (e) {\n    // if the value is not valid JSON, just use the string value\n    parsedValue = jsonValue;\n  }\n\n  let color: TagColors = 'default';\n  let children: React.ReactNode = JSON.stringify(parsedValue, null, 2);\n  if (parsedValue === 'yes') {\n    color = 'lime';\n    children = (\n      <>\n        <CheckCircleIcon css={{ marginRight: theme.spacing.xs }} />\n        <FormattedMessage defaultMessage=\"Yes\" description=\"Label for an assessment with a 'yes' value\" />\n      </>\n    );\n  } else if (parsedValue === 'no') {\n    color = 'coral';\n    children = (\n      <>\n        <XCircleIcon css={{ marginRight: theme.spacing.xs }} />\n        <FormattedMessage defaultMessage=\"No\" description=\"Label for an assessment with a 'no' value\" />\n      </>\n    );\n  } else if (typeof parsedValue === 'string') {\n    children = parsedValue;\n  } else if (parsedValue === null) {\n    // feedback can only have null values if they are errors\n    color = 'coral';\n    children = (\n      <>\n        <DangerIcon css={{ marginRight: theme.spacing.xs }} />\n        <FormattedMessage defaultMessage=\"Error\" description=\"Label for an assessment with an error\" />\n      </>\n    );\n  } else if (parsedValue === true) {\n    color = 'lime';\n    children = (\n      <>\n        <CheckCircleIcon css={{ marginRight: theme.spacing.xs }} />\n        <FormattedMessage defaultMessage=\"True\" description=\"Label for an assessment with a 'true' boolean value\" />\n      </>\n    );\n  } else if (parsedValue === false) {\n    color = 'coral';\n    children = (\n      <>\n        <XCircleIcon css={{ marginRight: theme.spacing.xs }} />\n        <FormattedMessage defaultMessage=\"False\" description=\"Label for an assessment with a 'false' boolean value\" />\n      </>\n    );\n  }\n\n  return (\n    <Tooltip componentId=\"shared.model-trace-explorer.assesment-value-tooltip\" content={children}>\n      <Tag\n        css={{ display: 'inline-flex', maxWidth: '100%', minWidth: theme.spacing.md, marginRight: 0 }}\n        componentId=\"shared.model-trace-explorer.assesment-value-tag\"\n        color={color}\n      >\n        <span\n          css={{\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            textWrap: 'nowrap',\n          }}\n        >\n          {children}\n        </span>\n      </Tag>\n    </Tooltip>\n  );\n};\n","import { Tooltip, useDesignSystemTheme, Typography } from '@databricks/design-system';\n\nimport type { AssessmentSource } from '../ModelTrace.types';\n\nexport const AssessmentSourceName = ({ source }: { source: AssessmentSource }) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Tooltip componentId=\"shared.model-trace-explorer.assessment-source-name\" content={source.source_id}>\n      {/* wrap in span so the tooltip can show up */}\n      <span\n        css={{\n          flexShrink: 1,\n          overflow: 'hidden',\n          textOverflow: 'ellipsis',\n          textWrap: 'nowrap',\n          marginLeft: theme.spacing.sm,\n          minWidth: theme.spacing.md,\n        }}\n      >\n        <Typography.Text>\n          <span css={{ color: theme.colors.blue500 }}>{source.source_id}</span>\n        </Typography.Text>\n      </span>\n    </Tooltip>\n  );\n};\n","import { useState } from 'react';\n\nimport { useDesignSystemTheme, Typography, SparkleIcon, UserIcon, CodeIcon } from '@databricks/design-system';\n\nimport { AssessmentActionsOverflowMenu } from './AssessmentActionsOverflowMenu';\nimport { AssessmentDeleteModal } from './AssessmentDeleteModal';\nimport { AssessmentSourceName } from './AssessmentSourceName';\nimport { timeSinceStr } from './AssessmentsPane.utils';\nimport type { Assessment } from '../ModelTrace.types';\n\nconst getSourceIcon = (source: Assessment['source']) => {\n  switch (source.source_type) {\n    case 'HUMAN':\n      return UserIcon;\n    case 'LLM_JUDGE':\n      return SparkleIcon;\n    default:\n      return CodeIcon;\n  }\n};\n\nexport const AssessmentItemHeader = ({\n  // connector is not displayed in history items\n  renderConnector = true,\n  assessment,\n  setIsEditing,\n}: {\n  renderConnector?: boolean;\n  assessment: Assessment;\n  setIsEditing?: (isEditing: boolean) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const SourceIcon = getSourceIcon(assessment.source);\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n      {renderConnector && (\n        <div\n          css={{\n            position: 'absolute',\n            left: -1,\n            top: 0,\n            width: 10,\n            height: theme.typography.lineHeightBase,\n            boxSizing: 'border-box',\n            borderBottomLeftRadius: theme.borders.borderRadiusMd,\n            borderBottom: `1px solid ${theme.colors.border}`,\n            borderLeft: `1px solid ${theme.colors.border}`,\n          }}\n        />\n      )}\n      <SourceIcon\n        size={theme.typography.fontSizeSm}\n        css={{\n          padding: 2,\n          backgroundColor: theme.colors.actionIconBackgroundHover,\n          borderRadius: theme.borders.borderRadiusFull,\n        }}\n      />\n      <AssessmentSourceName source={assessment.source} />\n      <div\n        css={{\n          marginLeft: 'auto',\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          gap: theme.spacing.xs,\n        }}\n      >\n        {assessment.last_update_time && (\n          <Typography.Text\n            color=\"secondary\"\n            size=\"sm\"\n            css={{\n              marginLeft: theme.spacing.sm,\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              textWrap: 'nowrap',\n            }}\n          >\n            {timeSinceStr(new Date(assessment.last_update_time))}\n          </Typography.Text>\n        )}\n        <AssessmentActionsOverflowMenu\n          assessment={assessment}\n          setIsEditing={setIsEditing}\n          setShowDeleteModal={setShowDeleteModal}\n        />\n        <AssessmentDeleteModal\n          assessment={assessment}\n          isModalVisible={showDeleteModal}\n          setIsModalVisible={setShowDeleteModal}\n        />\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { Alert, Modal, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { CodeSnippetRenderMode, type AssessmentError } from '../ModelTrace.types';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\n\nexport const FeedbackErrorItem = ({ error }: { error: AssessmentError }) => {\n  const { theme } = useDesignSystemTheme();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n      <Alert\n        type=\"error\"\n        closable={false}\n        message={error.error_code}\n        componentId=\"shared.model-trace-explorer.feedback-error-item\"\n        description={\n          <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n            <span>{error.error_message}</span>\n            {error.stack_trace && (\n              <Typography.Link\n                componentId=\"shared.model-trace-explorer.feedback-error-item-stack-trace-link\"\n                onClick={() => setIsModalVisible(true)}\n              >\n                <FormattedMessage\n                  defaultMessage=\"View stack trace\"\n                  description=\"Link to view the stack trace for an assessment error\"\n                />\n              </Typography.Link>\n            )}\n          </div>\n        }\n      />\n      {error.stack_trace && (\n        <Modal\n          title={\n            <FormattedMessage\n              defaultMessage=\"Error stack trace\"\n              description=\"Title of the assessment error stack trace modal\"\n            />\n          }\n          visible={isModalVisible}\n          componentId=\"shared.model-trace-explorer.feedback-error-stack-trace-modal\"\n          footer={null}\n          onCancel={() => setIsModalVisible(false)}\n        >\n          <ModelTraceExplorerCodeSnippet\n            data={JSON.stringify(error.stack_trace)}\n            title=\"\"\n            initialRenderMode={CodeSnippetRenderMode.TEXT}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n};\n","import { isNil } from 'lodash';\n\nimport { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { GenAIMarkdownRenderer } from '@databricks/web-shared/genai-markdown-renderer';\n\nimport { AssessmentDisplayValue } from './AssessmentDisplayValue';\nimport { AssessmentItemHeader } from './AssessmentItemHeader';\nimport { FeedbackErrorItem } from './FeedbackErrorItem';\nimport type { FeedbackAssessment } from '../ModelTrace.types';\n\n// this is mostly a copy of FeedbackItem, but with\n// different styling and no ability to edit.\nexport const FeedbackHistoryItem = ({ feedback }: { feedback: FeedbackAssessment }) => {\n  const { theme } = useDesignSystemTheme();\n  const value = feedback.feedback.value;\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        position: 'relative',\n      }}\n    >\n      <AssessmentItemHeader renderConnector={false} assessment={feedback} />\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.xs,\n          marginLeft: 10,\n          paddingLeft: theme.spacing.md,\n          paddingTop: theme.spacing.sm,\n          paddingBottom: theme.spacing.md,\n          paddingRight: theme.spacing.lg,\n          borderLeft: `1px solid ${theme.colors.border}`,\n        }}\n      >\n        {!isNil(feedback.feedback.error) ? (\n          <FeedbackErrorItem error={feedback.feedback.error} />\n        ) : (\n          <>\n            <Typography.Text size=\"sm\" color=\"secondary\">\n              <FormattedMessage defaultMessage=\"Feedback\" description=\"Label for the value of an feedback assessment\" />\n            </Typography.Text>\n            <div>\n              <AssessmentDisplayValue jsonValue={JSON.stringify(value)} />\n            </div>\n          </>\n        )}\n        {feedback.rationale && (\n          <>\n            <Typography.Text size=\"sm\" color=\"secondary\" css={{ marginTop: theme.spacing.xs }}>\n              <FormattedMessage\n                defaultMessage=\"Rationale\"\n                description=\"Label for the rationale of an expectation assessment\"\n              />\n            </Typography.Text>\n            <GenAIMarkdownRenderer>{feedback.rationale}</GenAIMarkdownRenderer>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useMemo } from 'react';\n\nimport { Modal } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { FeedbackHistoryItem } from './FeedbackHistoryItem';\nimport type { Assessment, FeedbackAssessment } from '../ModelTrace.types';\n\n// helper function to traverse the linked list of overridden\n// assessments. this function handles cycles by keeping track\n// of the assessments we've seen. the backend should prevent\n// such cases from existing, but we should be defensive.\nconst flattenOverrides = (assessment: Assessment) => {\n  const seen = new Set<string>();\n  const flattened = [];\n\n  let currentAssessment: Assessment | undefined = assessment;\n  while (currentAssessment && !seen.has(currentAssessment.assessment_id)) {\n    seen.add(currentAssessment.assessment_id);\n    flattened.push(currentAssessment);\n    currentAssessment = currentAssessment.overriddenAssessment;\n  }\n\n  return flattened;\n};\n\nexport const FeedbackHistoryModal = ({\n  isModalVisible,\n  setIsModalVisible,\n  feedback,\n}: {\n  isModalVisible: boolean;\n  setIsModalVisible: (isModalVisible: boolean) => void;\n  feedback: FeedbackAssessment;\n}) => {\n  const assessmentHistory = useMemo(() => flattenOverrides(feedback), [feedback]);\n\n  return (\n    <Modal\n      componentId=\"shared.model-trace-explorer.feedback-history-modal\"\n      visible={isModalVisible}\n      footer={null}\n      onCancel={() => {\n        setIsModalVisible(false);\n      }}\n      title={\n        <FormattedMessage\n          defaultMessage=\"Edit history\"\n          description=\"Title of a modal that shows the edit history of an assessment\"\n        />\n      }\n    >\n      {assessmentHistory.map((assessment) =>\n        'feedback' in assessment ? <FeedbackHistoryItem key={assessment.assessment_id} feedback={assessment} /> : null,\n      )}\n    </Modal>\n  );\n};\n","import { isNil } from 'lodash';\nimport { useState } from 'react';\n\nimport { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { GenAIMarkdownRenderer } from '@databricks/web-shared/genai-markdown-renderer';\n\nimport { AssessmentDisplayValue } from './AssessmentDisplayValue';\nimport { FeedbackErrorItem } from './FeedbackErrorItem';\nimport { FeedbackHistoryModal } from './FeedbackHistoryModal';\nimport { SpanNameDetailViewLink } from './SpanNameDetailViewLink';\nimport type { FeedbackAssessment } from '../ModelTrace.types';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const FeedbackItemContent = ({ feedback }: { feedback: FeedbackAssessment }) => {\n  const [isHistoryModalVisible, setIsHistoryModalVisible] = useState(false);\n  const { theme } = useDesignSystemTheme();\n  const { nodeMap, activeView } = useModelTraceExplorerViewState();\n\n  const value = feedback.feedback.value;\n\n  const associatedSpan = feedback.span_id ? nodeMap[feedback.span_id] : null;\n  // the summary view displays all assessments regardless of span, so\n  // we need some way to indicate which span an assessment is associated with.\n  const showAssociatedSpan = activeView === 'summary' && associatedSpan;\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm, marginLeft: theme.spacing.lg }}>\n      {!isNil(feedback.feedback.error) && <FeedbackErrorItem error={feedback.feedback.error} />}\n      {showAssociatedSpan && (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: theme.spacing.xs,\n          }}\n        >\n          <Typography.Text size=\"sm\" color=\"secondary\">\n            <FormattedMessage defaultMessage=\"Span\" description=\"Label for the associated span of an assessment\" />\n          </Typography.Text>\n          <SpanNameDetailViewLink node={associatedSpan} />\n        </div>\n      )}\n      {isNil(feedback.feedback.error) && (\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n          <Typography.Text size=\"sm\" color=\"secondary\">\n            <FormattedMessage defaultMessage=\"Feedback\" description=\"Label for the value of an feedback assessment\" />\n          </Typography.Text>\n          <div css={{ display: 'flex', gap: theme.spacing.xs }}>\n            <AssessmentDisplayValue jsonValue={JSON.stringify(value)} />\n            {feedback.overriddenAssessment && (\n              <>\n                <span onClick={() => setIsHistoryModalVisible(true)}>\n                  <Typography.Text\n                    css={{\n                      '&:hover': {\n                        textDecoration: 'underline',\n                        cursor: 'pointer',\n                      },\n                    }}\n                    color=\"secondary\"\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"(edited)\"\n                      description=\"Link text in an edited assessment that allows the user to click to see the previous value\"\n                    />\n                  </Typography.Text>\n                </span>\n                <FeedbackHistoryModal\n                  isModalVisible={isHistoryModalVisible}\n                  setIsModalVisible={setIsHistoryModalVisible}\n                  feedback={feedback}\n                />\n              </>\n            )}\n          </div>\n        </div>\n      )}\n      {feedback.rationale && (\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.xs }}>\n          <Typography.Text size=\"sm\" color=\"secondary\">\n            <FormattedMessage\n              defaultMessage=\"Rationale\"\n              description=\"Label for the rationale of an expectation assessment\"\n            />\n          </Typography.Text>\n          <div css={{ '& > div:last-of-type': { marginBottom: 0 } }}>\n            <GenAIMarkdownRenderer>{feedback.rationale}</GenAIMarkdownRenderer>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { AssessmentEditForm } from './AssessmentEditForm';\nimport { AssessmentItemHeader } from './AssessmentItemHeader';\nimport { FeedbackItemContent } from './FeedbackItemContent';\nimport type { FeedbackAssessment } from '../ModelTrace.types';\n\nexport const FeedbackItem = ({ feedback }: { feedback: FeedbackAssessment }) => {\n  const { theme } = useDesignSystemTheme();\n  const [isEditing, setIsEditing] = useState(false);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.xs,\n        paddingLeft: theme.spacing.lg / 2,\n        marginLeft: theme.spacing.lg / 2,\n        paddingTop: theme.spacing.sm,\n        paddingBottom: theme.spacing.sm,\n        borderLeft: `1px solid ${theme.colors.border}`,\n        position: 'relative',\n      }}\n    >\n      <AssessmentItemHeader assessment={feedback} setIsEditing={setIsEditing} />\n      {isEditing ? (\n        <AssessmentEditForm\n          assessment={feedback}\n          onSuccess={() => setIsEditing(false)}\n          onCancel={() => setIsEditing(false)}\n        />\n      ) : (\n        <FeedbackItemContent feedback={feedback} />\n      )}\n    </div>\n  );\n};\n","import { countBy } from 'lodash';\n\nimport { CodeIcon, SparkleIcon, Tag, Typography, useDesignSystemTheme, UserIcon } from '@databricks/design-system';\n\nimport type { AssessmentSourceType, FeedbackAssessment } from '../ModelTrace.types';\n\nconst getSourceTypeIcon = (sourceType: AssessmentSourceType) => {\n  const smallIconStyles = {\n    '& > svg': {\n      width: 12,\n      height: 12,\n    },\n  };\n  switch (sourceType) {\n    case 'HUMAN':\n      return <UserIcon css={smallIconStyles} />;\n    case 'LLM_JUDGE':\n      return <SparkleIcon css={smallIconStyles} />;\n    case 'CODE':\n      return <CodeIcon css={smallIconStyles} />;\n    default:\n      return null;\n  }\n};\n\nexport const FeedbackValueGroupSourceCounts = ({ feedbacks }: { feedbacks: FeedbackAssessment[] }) => {\n  const { theme } = useDesignSystemTheme();\n\n  if (feedbacks.length < 2) {\n    return null;\n  }\n\n  const sourceCounts = countBy(feedbacks, (feedback) => feedback.source.source_type);\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center', marginLeft: theme.spacing.xs }}>\n      {Object.entries(sourceCounts).map(([sourceType, count]) => (\n        <Tag\n          componentId={`shared.model-trace-explorer.feedback-source-count-${sourceType}`}\n          css={{\n            margin: 0,\n          }}\n          key={sourceType}\n        >\n          <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n            {getSourceTypeIcon(sourceType as AssessmentSourceType)}\n            <Typography.Text>{count}</Typography.Text>\n          </div>\n        </Tag>\n      ))}\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { Button, ChevronDownIcon, ChevronRightIcon, useDesignSystemTheme } from '@databricks/design-system';\n\nimport { AssessmentDisplayValue } from './AssessmentDisplayValue';\nimport { FeedbackItem } from './FeedbackItem';\nimport { FeedbackValueGroupSourceCounts } from './FeedbackValueGroupSourceCounts';\nimport type { FeedbackAssessment } from '../ModelTrace.types';\n\nexport const FeedbackValueGroup = ({\n  jsonValue,\n  feedbacks,\n}: {\n  jsonValue: string;\n  feedbacks: FeedbackAssessment[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [expanded, setExpanded] = useState(false);\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column' }}>\n      <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n        <Button\n          componentId=\"shared.model-trace-explorer.toggle-assessment-expanded\"\n          css={{ flexShrink: 0 }}\n          size=\"small\"\n          icon={expanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n          onClick={() => setExpanded(!expanded)}\n        />\n        <AssessmentDisplayValue jsonValue={jsonValue} />\n        <FeedbackValueGroupSourceCounts feedbacks={feedbacks} />\n      </div>\n      {expanded && (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          {feedbacks.map((feedback) =>\n            // don't display assessments that have been overridden\n            feedback?.valid === false ? null : <FeedbackItem feedback={feedback} key={feedback.assessment_id} />,\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { isNil } from 'lodash';\nimport { useState } from 'react';\n\nimport { useDesignSystemTheme, Typography, Button, PlusIcon, Tooltip, DangerIcon } from '@databricks/design-system';\n\nimport { AssessmentCreateForm } from './AssessmentCreateForm';\nimport { getAssessmentDisplayName } from './AssessmentsPane.utils';\nimport { FeedbackValueGroup } from './FeedbackValueGroup';\nimport type { FeedbackAssessment } from '../ModelTrace.types';\n\nexport const FeedbackGroup = ({\n  name,\n  valuesMap,\n  traceId,\n  activeSpanId,\n}: {\n  name: string;\n  valuesMap: { [value: string]: FeedbackAssessment[] };\n  traceId: string;\n  activeSpanId?: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const displayName = getAssessmentDisplayName(name);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const hasError = Object.values(valuesMap)\n    .flat()\n    .some((feedback) => !isNil(feedback.feedback.error));\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        marginBottom: theme.spacing.sm,\n        border: `1px solid ${theme.colors.border}`,\n        borderRadius: theme.borders.borderRadiusMd,\n        padding: theme.spacing.sm + theme.spacing.xs,\n        paddingTop: theme.spacing.sm,\n        gap: theme.spacing.sm,\n      }}\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: theme.spacing.sm,\n        }}\n      >\n        <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm, flex: 1, minWidth: 0 }}>\n          <Typography.Text bold css={{ overflow: 'hidden', textOverflow: 'ellipsis', textWrap: 'nowrap' }}>\n            {displayName}\n          </Typography.Text>\n          {hasError && <DangerIcon css={{ flexShrink: 0 }} color=\"danger\" />}\n        </div>\n        <Tooltip content=\"Add new feedback\" componentId=\"shared.model-trace-explorer.add-feedback-in-group-tooltip\">\n          <Button\n            componentId=\"shared.model-trace-explorer.add-feedback\"\n            css={{ flexShrink: 0, marginRight: -theme.spacing.xs }}\n            size=\"small\"\n            icon={<PlusIcon />}\n            onClick={() => setShowCreateForm(true)}\n          />\n        </Tooltip>\n      </div>\n      {Object.entries(valuesMap).map(([jsonValue, feedbacks]) => (\n        <FeedbackValueGroup jsonValue={jsonValue} feedbacks={feedbacks} key={jsonValue} />\n      ))}\n      {showCreateForm && (\n        <AssessmentCreateForm\n          assessmentName={name}\n          spanId={activeSpanId}\n          traceId={traceId}\n          setExpanded={setShowCreateForm}\n        />\n      )}\n    </div>\n  );\n};\n","import { isNil, partition } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { Button, CloseIcon, Tooltip, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { AssessmentCreateButton } from './AssessmentCreateButton';\nimport { ASSESSMENT_PANE_MIN_WIDTH } from './AssessmentsPane.utils';\nimport { ExpectationItem } from './ExpectationItem';\nimport { FeedbackGroup } from './FeedbackGroup';\nimport type { Assessment, FeedbackAssessment } from '../ModelTrace.types';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\ntype GroupedFeedbacksByValue = { [value: string]: FeedbackAssessment[] };\n\ntype GroupedFeedbacks = [assessmentName: string, feedbacks: GroupedFeedbacksByValue][];\n\nconst groupFeedbacks = (feedbacks: FeedbackAssessment[]): GroupedFeedbacks => {\n  const aggregated: Record<string, GroupedFeedbacksByValue> = {};\n  feedbacks.forEach((feedback) => {\n    if (feedback.valid === false) {\n      return;\n    }\n\n    let value = null;\n    if (feedback.feedback.value !== '') {\n      value = JSON.stringify(feedback.feedback.value);\n    }\n\n    const { assessment_name } = feedback;\n    if (!aggregated[assessment_name]) {\n      aggregated[assessment_name] = {};\n    }\n\n    const group = aggregated[assessment_name];\n    if (!isNil(value)) {\n      if (!group[value]) {\n        group[value] = [];\n      }\n      group[value].push(feedback);\n    }\n  });\n\n  return Object.entries(aggregated).toSorted(([leftName], [rightName]) => leftName.localeCompare(rightName));\n};\n\nexport const AssessmentsPane = ({\n  assessments,\n  traceId,\n  activeSpanId,\n}: {\n  assessments: Assessment[];\n  traceId: string;\n  activeSpanId?: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { setAssessmentsPaneExpanded } = useModelTraceExplorerViewState();\n  const [feedbacks, expectations] = useMemo(\n    () => partition(assessments, (assessment) => 'feedback' in assessment),\n    [assessments],\n  );\n  const groupedFeedbacks = useMemo(() => groupFeedbacks(feedbacks), [feedbacks]);\n  const sortedExpectations = expectations.toSorted((left, right) =>\n    left.assessment_name.localeCompare(right.assessment_name),\n  );\n\n  return (\n    <div\n      data-testid=\"assessments-pane\"\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        padding: theme.spacing.sm,\n        paddingTop: theme.spacing.xs,\n        height: '100%',\n        borderLeft: `1px solid ${theme.colors.border}`,\n        overflowY: 'scroll',\n        minWidth: ASSESSMENT_PANE_MIN_WIDTH,\n        width: '100%',\n        boxSizing: 'border-box',\n      }}\n    >\n      <div css={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\n        <Typography.Text css={{ marginBottom: theme.spacing.sm }} bold>\n          <FormattedMessage defaultMessage=\"Assessments\" description=\"Label for the assessments pane\" />\n        </Typography.Text>\n        {setAssessmentsPaneExpanded && (\n          <Tooltip\n            componentId=\"shared.model-trace-explorer.close-assessments-pane-tooltip\"\n            content={\n              <FormattedMessage\n                defaultMessage=\"Hide assessments\"\n                description=\"Tooltip for a button that closes the assessments pane\"\n              />\n            }\n          >\n            <Button\n              data-testid=\"close-assessments-pane-button\"\n              componentId=\"shared.model-trace-explorer.close-assessments-pane\"\n              size=\"small\"\n              icon={<CloseIcon />}\n              onClick={() => setAssessmentsPaneExpanded(false)}\n            />\n          </Tooltip>\n        )}\n      </div>\n      {groupedFeedbacks.map(([name, valuesMap]) => (\n        <FeedbackGroup key={name} name={name} valuesMap={valuesMap} traceId={traceId} activeSpanId={activeSpanId} />\n      ))}\n      {sortedExpectations.length > 0 && (\n        <>\n          <Typography.Text color=\"secondary\" css={{ marginBottom: theme.spacing.sm }}>\n            <FormattedMessage\n              defaultMessage=\"Expectations\"\n              description=\"Label for the expectations section in the assessments pane\"\n            />\n          </Typography.Text>\n          <div\n            css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm, marginBottom: theme.spacing.sm }}\n          >\n            {sortedExpectations.map((expectation) => (\n              <ExpectationItem expectation={expectation} key={expectation.assessment_id} />\n            ))}\n          </div>\n        </>\n      )}\n      <AssessmentCreateButton\n        title={\n          <FormattedMessage\n            defaultMessage=\"Add new assessment\"\n            description=\"Label for the button to add a new assessment\"\n          />\n        }\n        spanId={activeSpanId}\n        traceId={traceId}\n      />\n    </div>\n  );\n};\n","import type { Interpolation, Theme } from '@emotion/react';\nimport { isNil } from 'lodash';\nimport React, { useState } from 'react';\n\nimport { Empty, Tabs, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerAttributesTab } from './ModelTraceExplorerAttributesTab';\nimport { ModelTraceExplorerChatTab } from './ModelTraceExplorerChatTab';\nimport { ModelTraceExplorerContentTab } from './ModelTraceExplorerContentTab';\nimport { ModelTraceExplorerEventsTab } from './ModelTraceExplorerEventsTab';\nimport type { ModelTraceExplorerTab, ModelTraceSpanNode, SearchMatch } from '../ModelTrace.types';\nimport { getSpanExceptionCount } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerBadge } from '../ModelTraceExplorerBadge';\nimport ModelTraceExplorerResizablePane from '../ModelTraceExplorerResizablePane';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\nimport { AssessmentPaneToggle } from '../assessments-pane/AssessmentPaneToggle';\nimport { AssessmentsPane } from '../assessments-pane/AssessmentsPane';\nimport { ASSESSMENT_PANE_MIN_WIDTH } from '../assessments-pane/AssessmentsPane.utils';\n\nexport const CONTENT_PANE_MIN_WIDTH = 250;\n// used by the parent component to set min-width on the resizable box\nexport const RIGHT_PANE_MIN_WIDTH = CONTENT_PANE_MIN_WIDTH + ASSESSMENT_PANE_MIN_WIDTH;\nconst DEFAULT_SPLIT_RATIO = 0.7;\n\nfunction ModelTraceExplorerRightPaneTabsImpl({\n  activeSpan,\n  searchFilter,\n  activeMatch,\n  activeTab,\n  setActiveTab,\n}: {\n  activeSpan: ModelTraceSpanNode | undefined;\n  searchFilter: string;\n  activeMatch: SearchMatch | null;\n  activeTab: ModelTraceExplorerTab;\n  setActiveTab: (tab: ModelTraceExplorerTab) => void;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const [paneWidth, setPaneWidth] = useState(500);\n  const contentStyle: Interpolation<Theme> = { flex: 1, marginTop: -theme.spacing.md, overflowY: 'auto' };\n  const { assessmentsPaneExpanded, assessmentsPaneEnabled } = useModelTraceExplorerViewState();\n\n  if (isNil(activeSpan)) {\n    return <Empty description=\"Please select a span to view more information\" />;\n  }\n\n  const exceptionCount = getSpanExceptionCount(activeSpan);\n  const hasException = exceptionCount > 0;\n  const tabContent = (\n    <Tabs.Root\n      componentId=\"shared.model-trace-explorer.right-pane-tabs\"\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        flex: 1,\n        borderLeft: `1px solid ${theme.colors.border}`,\n        minWidth: 200,\n        position: 'relative',\n      }}\n      value={activeTab}\n      onValueChange={(tab: string) => setActiveTab(tab as ModelTraceExplorerTab)}\n    >\n      <div\n        css={{\n          position: 'absolute',\n          right: assessmentsPaneExpanded ? theme.spacing.xs : theme.spacing.md,\n          top: theme.spacing.xs,\n        }}\n      >\n        <AssessmentPaneToggle />\n      </div>\n      <Tabs.List\n        css={{\n          padding: 0,\n          paddingLeft: theme.spacing.md,\n          paddingRight: theme.spacing.sm,\n          boxSizing: 'border-box',\n          width: '100%',\n        }}\n      >\n        {activeSpan.chatMessages && (\n          <Tabs.Trigger value=\"chat\">\n            <FormattedMessage defaultMessage=\"Chat\" description=\"Label for the chat tab of the model trace explorer.\" />\n          </Tabs.Trigger>\n        )}\n        <Tabs.Trigger value=\"content\">\n          <FormattedMessage\n            defaultMessage=\"Inputs / Outputs\"\n            description=\"Label for the inputs and outputs tab of the model trace explorer.\"\n          />\n        </Tabs.Trigger>\n        {/* no i18n for attributes and events as these are properties specified by code,\n            and it might be confusing for users to have different labels here */}\n        <Tabs.Trigger value=\"attributes\">Attributes</Tabs.Trigger>\n        <Tabs.Trigger value=\"events\">\n          Events {hasException && <ModelTraceExplorerBadge count={exceptionCount} />}\n        </Tabs.Trigger>\n      </Tabs.List>\n      {activeSpan.chatMessages && (\n        <Tabs.Content css={contentStyle} value=\"chat\">\n          <ModelTraceExplorerChatTab chatMessages={activeSpan.chatMessages} chatTools={activeSpan.chatTools} />\n        </Tabs.Content>\n      )}\n      <Tabs.Content css={contentStyle} value=\"content\">\n        <ModelTraceExplorerContentTab activeSpan={activeSpan} searchFilter={searchFilter} activeMatch={activeMatch} />\n      </Tabs.Content>\n      <Tabs.Content css={contentStyle} value=\"attributes\">\n        <ModelTraceExplorerAttributesTab\n          activeSpan={activeSpan}\n          searchFilter={searchFilter}\n          activeMatch={activeMatch}\n        />\n      </Tabs.Content>\n      <Tabs.Content css={contentStyle} value=\"events\">\n        <ModelTraceExplorerEventsTab activeSpan={activeSpan} searchFilter={searchFilter} activeMatch={activeMatch} />\n      </Tabs.Content>\n    </Tabs.Root>\n  );\n\n  return assessmentsPaneEnabled && assessmentsPaneExpanded ? (\n    <ModelTraceExplorerResizablePane\n      initialRatio={DEFAULT_SPLIT_RATIO}\n      paneWidth={paneWidth}\n      setPaneWidth={setPaneWidth}\n      leftChild={tabContent}\n      leftMinWidth={CONTENT_PANE_MIN_WIDTH}\n      rightChild={\n        <AssessmentsPane\n          assessments={activeSpan.assessments}\n          traceId={activeSpan.traceId}\n          activeSpanId={activeSpan.parentId ? String(activeSpan.key) : undefined}\n        />\n      }\n      rightMinWidth={ASSESSMENT_PANE_MIN_WIDTH}\n    />\n  ) : (\n    tabContent\n  );\n}\n\nexport const ModelTraceExplorerRightPaneTabs = React.memo(ModelTraceExplorerRightPaneTabsImpl);\n","import {\n  Button,\n  Checkbox,\n  FilterIcon,\n  InfoTooltip,\n  Popover,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport type { SpanFilterState } from '../ModelTrace.types';\nimport { getDisplayNameForSpanType, getIconTypeForSpan } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerIcon } from '../ModelTraceExplorerIcon';\n\nexport const TimelineTreeFilterButton = ({\n  spanFilterState,\n  setSpanFilterState,\n}: {\n  spanFilterState: SpanFilterState;\n  setSpanFilterState: (state: SpanFilterState) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Popover.Root componentId=\"shared.model-trace-explorer.timeline-tree-filter-popover\">\n      <Popover.Trigger asChild>\n        <Button\n          componentId=\"shared.model-trace-explorer.timeline-tree-filter-button\"\n          icon={<FilterIcon />}\n          size=\"small\"\n        >\n          <FormattedMessage defaultMessage=\"Filter\" description=\"Label for the filter button in the trace explorer.\" />\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content align=\"start\">\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm, paddingBottom: theme.spacing.xs }}>\n          <Typography.Text bold>\n            <FormattedMessage\n              defaultMessage=\"Filter\"\n              description=\"Label for the span filters popover in the trace explorer.\"\n            />\n          </Typography.Text>\n          <Typography.Text color=\"secondary\">\n            <FormattedMessage\n              defaultMessage=\"Span type\"\n              description=\"Section label for span type filters in the trace explorer.\"\n            />\n          </Typography.Text>\n          {Object.entries(spanFilterState.spanTypeDisplayState).map(([spanType, shouldDisplay]) => {\n            const icon = <ModelTraceExplorerIcon type={getIconTypeForSpan(spanType)} />;\n            return (\n              <Checkbox\n                key={spanType}\n                componentId={`shared.model-trace-explorer.toggle-span-filter_${spanType}-${!shouldDisplay}`}\n                style={{ width: '100%' }}\n                isChecked={shouldDisplay}\n                onChange={() =>\n                  setSpanFilterState({\n                    ...spanFilterState,\n                    spanTypeDisplayState: {\n                      ...spanFilterState.spanTypeDisplayState,\n                      [spanType]: !shouldDisplay,\n                    },\n                  })\n                }\n              >\n                {icon}\n                <Typography.Text css={{ marginLeft: theme.spacing.xs }}>\n                  {getDisplayNameForSpanType(spanType)}\n                </Typography.Text>\n              </Checkbox>\n            );\n          })}\n          <Typography.Text color=\"secondary\">\n            <FormattedMessage\n              defaultMessage=\"Settings\"\n              description=\"Section label for filter settings in the trace explorer.\"\n            />\n          </Typography.Text>\n          <Checkbox\n            componentId={`shared.model-trace-explorer.toggle-show-parents_${!spanFilterState.showParents}`}\n            style={{ width: '100%' }}\n            isChecked={spanFilterState.showParents}\n            onChange={() =>\n              setSpanFilterState({\n                ...spanFilterState,\n                showParents: !spanFilterState.showParents,\n              })\n            }\n          >\n            <Typography.Text css={{ marginRight: theme.spacing.xs }}>\n              <FormattedMessage\n                defaultMessage=\"Show all parent spans\"\n                description=\"Checkbox label for a setting that enables showing all parent spans in the trace explorer regardless of filter conditions.\"\n              />\n            </Typography.Text>\n            <InfoTooltip\n              componentId=\"shared.model-trace-explorer.show-parents-tooltip\"\n              content={\n                <FormattedMessage\n                  defaultMessage=\"Always show parents of matched spans, regardless of filter conditions\"\n                  description=\"Tooltip for a span filter setting that enables showing parents of matched spans\"\n                />\n              }\n            />\n          </Checkbox>\n          <Checkbox\n            componentId={`shared.model-trace-explorer.toggle-show-parents_${!spanFilterState.showExceptions}`}\n            style={{ width: '100%' }}\n            isChecked={spanFilterState.showExceptions}\n            onChange={() =>\n              setSpanFilterState({\n                ...spanFilterState,\n                showExceptions: !spanFilterState.showExceptions,\n              })\n            }\n          >\n            <Typography.Text css={{ marginRight: theme.spacing.xs }}>\n              <FormattedMessage\n                defaultMessage=\"Show exceptions\"\n                description=\"Checkbox label for a setting that enables showing spans with exceptions in the trace explorer regardless of filter conditions.\"\n              />\n            </Typography.Text>\n            <InfoTooltip\n              componentId=\"shared.model-trace-explorer.show-exceptions-tooltip\"\n              content={\n                <FormattedMessage\n                  defaultMessage=\"Always show spans with exceptions, regardless of filter conditions\"\n                  description=\"Tooltip for a span filter setting that enables showing spans with exceptions\"\n                />\n              }\n            />\n          </Checkbox>\n        </div>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n","import {\n  BarsAscendingVerticalIcon,\n  ListBorderIcon,\n  SegmentedControlButton,\n  SegmentedControlGroup,\n  Tooltip,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { TimelineTreeFilterButton } from './TimelineTreeFilterButton';\nimport type { SpanFilterState } from '../ModelTrace.types';\n\nexport const TimelineTreeHeader = ({\n  showTimelineInfo,\n  setShowTimelineInfo,\n  spanFilterState,\n  setSpanFilterState,\n}: {\n  showTimelineInfo: boolean;\n  setShowTimelineInfo: (showTimelineInfo: boolean) => void;\n  spanFilterState: SpanFilterState;\n  setSpanFilterState: (state: SpanFilterState) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        padding: `${theme.spacing.xs}px ${theme.spacing.sm}px`,\n        paddingBottom: 3,\n        borderBottom: `1px solid ${theme.colors.border}`,\n        boxSizing: 'border-box',\n        paddingLeft: theme.spacing.sm,\n        alignItems: 'center',\n        display: 'flex',\n        justifyContent: 'space-between',\n      }}\n    >\n      <Typography.Text bold>\n        <FormattedMessage\n          defaultMessage=\"Trace breakdown\"\n          description=\"Header for the span tree within the MLflow trace UI\"\n        />\n      </Typography.Text>\n      <div css={{ display: 'flex', flexDirection: 'row', gap: theme.spacing.sm }}>\n        <TimelineTreeFilterButton spanFilterState={spanFilterState} setSpanFilterState={setSpanFilterState} />\n        <SegmentedControlGroup\n          name=\"size-story\"\n          value={showTimelineInfo}\n          onChange={(event) => {\n            setShowTimelineInfo(event.target.value);\n          }}\n          size=\"small\"\n          componentId=\"shared.model-trace-explorer.toggle-show-timeline\"\n        >\n          <SegmentedControlButton\n            data-testid=\"hide-timeline-info-button\"\n            icon={\n              <Tooltip\n                componentId=\"shared.model-trace-explorer.hide-timeline-info-tooltip\"\n                content={\n                  <FormattedMessage\n                    defaultMessage=\"Show span tree\"\n                    description=\"Tooltip for a button that show the span tree view of the trace UI.\"\n                  />\n                }\n              >\n                <ListBorderIcon />\n              </Tooltip>\n            }\n            value={false}\n          />\n          <SegmentedControlButton\n            data-testid=\"show-timeline-info-button\"\n            icon={\n              <Tooltip\n                componentId=\"shared.model-trace-explorer.show-timeline-info-tooltip\"\n                content={\n                  <FormattedMessage\n                    defaultMessage=\"Show execution timeline\"\n                    description=\"Tooltip for a button that shows execution timeline info in the trace UI.\"\n                  />\n                }\n              >\n                <BarsAscendingVerticalIcon />\n              </Tooltip>\n            }\n            value\n          />\n        </SegmentedControlGroup>\n      </div>\n    </div>\n  );\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { HierarchyBar } from './TimelineTree.types';\nimport { SPAN_INDENT_WIDTH, SPAN_ROW_HEIGHT, TimelineTreeZIndex } from './TimelineTree.utils';\n\nconst IconBottomConnector = ({ active }: { active: boolean }) => {\n  const { theme } = useDesignSystemTheme();\n  const borderColor = active ? theme.colors.blue500 : theme.colors.border;\n\n  return (\n    <div\n      css={{\n        position: 'absolute',\n        left: '100%',\n        bottom: 0,\n        // not sure why the +1 is necessary but\n        // there is a 1 pixel misalignment with the\n        // left connector otherwise\n        width: SPAN_INDENT_WIDTH / 2 + 1,\n        height: theme.spacing.md,\n        boxSizing: 'border-box',\n        borderTopRightRadius: theme.borders.borderRadiusMd,\n        borderTop: `1px solid ${borderColor}`,\n        borderRight: `1px solid ${borderColor}`,\n        zIndex: TimelineTreeZIndex.LOW, // render behind the span's icon\n      }}\n    />\n  );\n};\n\nconst IconLeftConnector = ({ active }: { active: boolean }) => {\n  const { theme } = useDesignSystemTheme();\n  const borderColor = active ? theme.colors.blue500 : theme.colors.border;\n\n  return (\n    <div\n      css={{\n        position: 'absolute',\n        left: '50%',\n        top: 0,\n        width: SPAN_INDENT_WIDTH / 2,\n        height: theme.spacing.md,\n        boxSizing: 'border-box',\n        borderBottomLeftRadius: theme.borders.borderRadiusMd,\n        borderBottom: `1px solid ${borderColor}`,\n        borderLeft: `1px solid ${borderColor}`,\n        zIndex: active ? TimelineTreeZIndex.NORMAL : TimelineTreeZIndex.LOW,\n      }}\n    />\n  );\n};\n\nconst VerticalConnector = ({ active }: { active: boolean }) => {\n  const { theme } = useDesignSystemTheme();\n  const borderColor = active ? theme.colors.blue500 : theme.colors.border;\n\n  return (\n    <div\n      css={{\n        position: 'absolute',\n        width: SPAN_INDENT_WIDTH / 2,\n        left: '50%',\n        height: SPAN_ROW_HEIGHT,\n        borderLeft: `1px solid ${borderColor}`,\n        boxSizing: 'border-box',\n        zIndex: active ? TimelineTreeZIndex.NORMAL : TimelineTreeZIndex.LOW,\n      }}\n    />\n  );\n};\n\n/**\n * This component renders the bars that represent the hierarchical\n * connections in the span tree.\n */\nexport const TimelineTreeHierarchyBars = ({\n  isActiveSpan,\n  isInActiveChain,\n  linesToRender,\n  hasChildren,\n  isExpanded,\n}: {\n  // whether or not the current span is active\n  isActiveSpan: boolean;\n  // true if the span is either active or a parent of the active span\n  isInActiveChain: boolean;\n  // an array of bars to render to the left of the span icon / name\n  linesToRender: Array<HierarchyBar>;\n  hasChildren: boolean;\n  isExpanded: boolean;\n}) => {\n  if (linesToRender.length === 0) {\n    return (\n      <div\n        css={{\n          width: 0,\n          height: SPAN_ROW_HEIGHT,\n          boxSizing: 'border-box',\n          position: 'relative',\n        }}\n      >\n        {hasChildren && <IconBottomConnector active={isInActiveChain && !isActiveSpan} />}\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {linesToRender.map(({ shouldRender, isActive }, idx) => (\n        // for each depth level, render a spacer. depending on the span's\n        // position within the tree, the spacer might be empty or contain\n        // a vertical bar\n        <div\n          key={idx}\n          css={{\n            width: SPAN_INDENT_WIDTH,\n            height: SPAN_ROW_HEIGHT,\n            boxSizing: 'border-box',\n            position: 'relative',\n          }}\n        >\n          {shouldRender && (\n            // render a vertical bar in the middle of the spacer\n            <VerticalConnector active={isActive} />\n          )}\n          {idx === linesToRender.length - 1 && (\n            // at the last spacer, render a curved\n            // line that connects up to the parent\n            <>\n              <IconLeftConnector active={isInActiveChain} />\n              {hasChildren && isExpanded && <IconBottomConnector active={isInActiveChain && !isActiveSpan} />}\n            </>\n          )}\n        </div>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\n\nimport { Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { spanTimeFormatter } from './TimelineTree.utils';\nimport type { ModelTraceSpanNode } from '../ModelTrace.types';\nimport { ModelSpanType } from '../ModelTrace.types';\nimport { getIconTypeForSpan } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerIcon } from '../ModelTraceExplorerIcon';\n\nexport const TimelineTreeSpanTooltip = ({\n  span,\n  children,\n}: {\n  span: ModelTraceSpanNode;\n  children: React.ReactNode;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const iconType = getIconTypeForSpan(span.type ?? ModelSpanType.UNKNOWN);\n  const primaryTextColor = theme.isDarkMode ? theme.colors.grey800 : theme.colors.grey100;\n  const secondaryTextColor = theme.isDarkMode ? theme.colors.grey500 : theme.colors.grey350;\n\n  return (\n    <Tooltip\n      componentId=\"shared.model-trace-explorer.timeline-tree-node-tooltip\"\n      hideWhenDetached={false}\n      content={\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'row',\n              gap: theme.spacing.xs,\n              alignItems: 'center',\n              overflow: 'hidden',\n              wordBreak: 'break-all',\n            }}\n          >\n            <ModelTraceExplorerIcon type={iconType} isInTooltip />\n            <span css={{ color: primaryTextColor }}>{span.title}</span>\n            <span\n              css={{ marginLeft: theme.spacing.xs, color: secondaryTextColor, fontSize: theme.typography.fontSizeSm }}\n            >\n              {spanTimeFormatter(span.end - span.start)}\n            </span>\n          </div>\n          <div css={{ display: 'flex', flexDirection: 'row', color: primaryTextColor }}>\n            <FormattedMessage defaultMessage=\"Start:\" description=\"Label for the start time of a span\" />{' '}\n            {spanTimeFormatter(span.start)}\n            {' | '}\n            <FormattedMessage defaultMessage=\"End:\" description=\"Label for the end time of a span\" />{' '}\n            {spanTimeFormatter(span.end)}\n          </div>\n        </div>\n      }\n      side=\"right\"\n      maxWidth={700}\n    >\n      {children}\n    </Tooltip>\n  );\n};\n","import {\n  Button,\n  Typography,\n  useDesignSystemTheme,\n  ChevronDownIcon,\n  ChevronRightIcon,\n  Tag,\n  GavelIcon,\n} from '@databricks/design-system';\n\nimport type { HierarchyBar } from './TimelineTree.types';\nimport { getActiveChildIndex, TimelineTreeZIndex } from './TimelineTree.utils';\nimport { TimelineTreeHierarchyBars } from './TimelineTreeHierarchyBars';\nimport { TimelineTreeSpanTooltip } from './TimelineTreeSpanTooltip';\nimport { type ModelTraceSpanNode } from '../ModelTrace.types';\nimport { getSpanExceptionCount } from '../ModelTraceExplorer.utils';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const TimelineTreeNode = ({\n  node,\n  selectedKey,\n  expandedKeys,\n  setExpandedKeys,\n  traceStartTime,\n  traceEndTime,\n  onSelect,\n  linesToRender,\n}: {\n  node: ModelTraceSpanNode;\n  selectedKey: string | number;\n  expandedKeys: Set<string | number>;\n  setExpandedKeys: (keys: Set<string | number>) => void;\n  traceStartTime: number;\n  traceEndTime: number;\n  onSelect: ((node: ModelTraceSpanNode) => void) | undefined;\n  // a boolean array that signifies whether or not a vertical\n  // connecting line is supposed to in at the `i`th spacer. see\n  // TimelineTreeHierarchyBars for more details.\n  linesToRender: Array<HierarchyBar>;\n}) => {\n  const expanded = expandedKeys.has(node.key);\n  const { theme } = useDesignSystemTheme();\n  const hasChildren = (node.children ?? []).length > 0;\n  const { setAssessmentsPaneExpanded } = useModelTraceExplorerViewState();\n\n  const isActive = selectedKey === node.key;\n  const activeChildIndex = getActiveChildIndex(node, String(selectedKey));\n  // true if a span has active children OR is the active span\n  const isInActiveChain = activeChildIndex > -1;\n\n  const hasException = getSpanExceptionCount(node) > 0;\n\n  const backgroundColor = isActive ? theme.colors.actionDefaultBackgroundHover : 'transparent';\n\n  return (\n    <>\n      <TimelineTreeSpanTooltip span={node}>\n        <div\n          data-testid={`timeline-tree-node-${node.key}`}\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            width: '100%',\n            cursor: 'pointer',\n            boxSizing: 'border-box',\n            backgroundColor,\n            ':hover': {\n              backgroundColor: theme.colors.actionDefaultBackgroundHover,\n            },\n            ':active': {\n              backgroundColor: theme.colors.actionDefaultBackgroundPress,\n            },\n          }}\n          onClick={() => {\n            onSelect?.(node);\n          }}\n        >\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'row',\n              alignItems: 'center',\n              // add padding to root nodes, because they have no connecting lines\n              padding: `0px ${theme.spacing.sm}px`,\n              justifyContent: 'space-between',\n              overflow: 'hidden',\n              flex: 1,\n            }}\n          >\n            <div css={{ display: 'flex', flexDirection: 'row', alignItems: 'center', overflow: 'hidden', flex: 1 }}>\n              {hasChildren ? (\n                <Button\n                  size=\"small\"\n                  data-testid={`toggle-span-expanded-${node.key}`}\n                  css={{ flexShrink: 0, marginRight: theme.spacing.xs }}\n                  icon={expanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n                  onClick={(event) => {\n                    // prevent the node from being selected when the expand button is clicked\n                    event.stopPropagation();\n                    const newExpandedKeys = new Set(expandedKeys);\n                    if (expanded) {\n                      newExpandedKeys.delete(node.key);\n                    } else {\n                      newExpandedKeys.add(node.key);\n                    }\n                    setExpandedKeys(newExpandedKeys);\n                  }}\n                  componentId=\"shared.model-trace-explorer.toggle-span\"\n                />\n              ) : (\n                <div css={{ width: 24, marginRight: theme.spacing.xs }} />\n              )}\n              <TimelineTreeHierarchyBars\n                isActiveSpan={isActive}\n                isInActiveChain={isInActiveChain}\n                linesToRender={linesToRender}\n                hasChildren={hasChildren}\n                isExpanded={expanded}\n              />\n              <span\n                css={{\n                  flexShrink: 0,\n                  marginRight: theme.spacing.xs,\n                  borderRadius: theme.borders.borderRadiusSm,\n                  border: `1px solid ${\n                    activeChildIndex > -1 ? theme.colors.blue500 : theme.colors.backgroundSecondary\n                  }`,\n                  zIndex: TimelineTreeZIndex.NORMAL,\n                }}\n              >\n                {node.icon}\n              </span>\n              <Typography.Text\n                color={hasException ? 'error' : 'primary'}\n                css={{\n                  overflow: 'hidden',\n                  whiteSpace: 'nowrap',\n                  textOverflow: 'ellipsis',\n                  flex: 1,\n                }}\n              >\n                {node.title}\n              </Typography.Text>\n              {node.assessments.length > 0 && (\n                <Tag\n                  color=\"indigo\"\n                  data-testid={`assessment-tag-${node.key}`}\n                  componentId=\"shared.model-trace-explorer.assessment-count\"\n                  css={{\n                    margin: 0,\n                    borderRadius: theme.borders.borderRadiusSm,\n                  }}\n                  onClick={() => setAssessmentsPaneExpanded?.(true)}\n                >\n                  <GavelIcon />\n                  <Typography.Text css={{ marginLeft: theme.spacing.xs }}>{node.assessments.length}</Typography.Text>\n                </Tag>\n              )}\n            </div>\n          </div>\n        </div>\n      </TimelineTreeSpanTooltip>\n      {expanded &&\n        node.children?.map((child, idx) => (\n          <TimelineTreeNode\n            key={child.key}\n            node={child}\n            expandedKeys={expandedKeys}\n            setExpandedKeys={setExpandedKeys}\n            selectedKey={selectedKey}\n            traceStartTime={traceStartTime}\n            traceEndTime={traceEndTime}\n            onSelect={onSelect}\n            linesToRender={linesToRender.concat({\n              // render the connecting line at this depth\n              // if there are more children to render\n              shouldRender: idx < (node.children?.length ?? 0) - 1,\n              // make the vertical line blue if the active span\n              // is below this child\n              isActive: idx < activeChildIndex,\n            })}\n          />\n        ))}\n    </>\n  );\n};\n","import { useLayoutEffect, useRef } from 'react';\n\nimport { useDesignSystemTheme, Typography, Button, ChevronDownIcon, ChevronRightIcon } from '@databricks/design-system';\n\nimport type { ModelTraceSpanNode } from '../../ModelTrace.types';\nimport { spanTimeFormatter, TimelineTreeZIndex } from '../TimelineTree.utils';\nimport { TimelineTreeSpanTooltip } from '../TimelineTreeSpanTooltip';\n\nexport const TimelineTreeGanttNode = ({\n  node,\n  selectedKey,\n  leftOffset,\n  width,\n  onSelect,\n  expandedKeys,\n  setExpandedKeys,\n}: {\n  node: ModelTraceSpanNode;\n  selectedKey: string | number;\n  leftOffset: number;\n  width: number;\n  onSelect: ((node: ModelTraceSpanNode) => void) | undefined;\n  expandedKeys: Set<string | number>;\n  setExpandedKeys: (keys: Set<string | number>) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const titleInBarRef = useRef<HTMLSpanElement>(null);\n  const titleBesideBarRef = useRef<HTMLSpanElement>(null);\n  const isActive = selectedKey === node.key;\n  const backgroundColor = isActive ? theme.colors.actionDefaultBackgroundHover : 'transparent';\n  const hasChildren = (node.children ?? []).length > 0;\n  const expanded = expandedKeys.has(node.key);\n\n  useLayoutEffect(() => {\n    if (!titleInBarRef.current || !titleBesideBarRef.current) {\n      return;\n    }\n\n    const spanWidth = Math.max(titleInBarRef.current.offsetWidth, titleBesideBarRef.current.offsetWidth);\n\n    if (spanWidth < width - theme.spacing.sm) {\n      titleInBarRef.current.style.display = 'inline';\n      titleBesideBarRef.current.style.display = 'none';\n    } else {\n      titleInBarRef.current.style.display = 'none';\n      titleBesideBarRef.current.style.display = 'inline';\n    }\n  }, [theme.spacing.sm, width]);\n\n  return (\n    <TimelineTreeSpanTooltip span={node}>\n      <div\n        key={node.key}\n        css={{\n          display: 'flex',\n          flexDirection: 'row',\n          cursor: 'pointer',\n          boxSizing: 'border-box',\n          paddingLeft: theme.spacing.xs,\n          paddingRight: theme.spacing.sm,\n          paddingTop: theme.spacing.xs,\n          paddingBottom: theme.spacing.xs,\n          backgroundColor: backgroundColor,\n          alignItems: 'center',\n          ':hover': {\n            backgroundColor: theme.colors.actionDefaultBackgroundHover,\n          },\n          ':active': {\n            backgroundColor: theme.colors.actionDefaultBackgroundPress,\n          },\n          zIndex: TimelineTreeZIndex.NORMAL,\n        }}\n        onClick={() => onSelect?.(node)}\n      >\n        {hasChildren ? (\n          <Button\n            size=\"small\"\n            data-testid={`toggle-timeline-span-expanded-${node.key}`}\n            css={{ flexShrink: 0, marginRight: theme.spacing.xs }}\n            icon={expanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n            onClick={(event) => {\n              // prevent the node from being selected when the expand button is clicked\n              event.stopPropagation();\n              const newExpandedKeys = new Set(expandedKeys);\n              if (expanded) {\n                newExpandedKeys.delete(node.key);\n              } else {\n                newExpandedKeys.add(node.key);\n              }\n              setExpandedKeys(newExpandedKeys);\n            }}\n            componentId=\"shared.model-trace-explorer.toggle-timeline-span\"\n          />\n        ) : (\n          <div css={{ width: 24, marginRight: theme.spacing.xs }} />\n        )}\n        <div css={{ width: leftOffset, flexShrink: 0 }} />\n        <div\n          css={{\n            position: 'relative',\n            width,\n            height: theme.typography.lineHeightBase,\n            backgroundColor: theme.colors.blue600,\n            borderRadius: theme.borders.borderRadiusSm,\n            flexShrink: 0,\n          }}\n        >\n          <Typography.Text>\n            <span\n              ref={titleInBarRef}\n              css={{\n                marginLeft: theme.spacing.xs,\n                color: theme.colors.white,\n                display: 'none',\n              }}\n            >\n              {node.title}\n            </span>\n          </Typography.Text>\n        </div>\n        <div css={{ flex: 1, overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis' }}>\n          <Typography.Text>\n            <span\n              ref={titleBesideBarRef}\n              css={{\n                marginLeft: theme.spacing.xs,\n                color: theme.colors.textPrimary,\n              }}\n            >\n              {node.title}\n            </span>\n          </Typography.Text>\n          <Typography.Text css={{ marginLeft: theme.spacing.xs }} color=\"secondary\">\n            {spanTimeFormatter(node.end - node.start)}\n          </Typography.Text>\n        </div>\n      </div>\n    </TimelineTreeSpanTooltip>\n  );\n};\n","import { useMemo, useRef } from 'react';\n\nimport { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useResizeObserver } from '@databricks/web-shared/hooks';\n\nimport { TimelineTreeGanttNode } from './TimelineTreeGanttNode';\nimport type { ModelTraceSpanNode } from '../../ModelTrace.types';\nimport { spanTimeFormatter, TimelineTreeZIndex } from '../TimelineTree.utils';\n\n// the amount of space required to accomodate the collapse buttons\nconst TIMELINE_BAR_LEFT_OFFSET = 32;\n\n// this function generates an array of \"nice\" x-ticks (e.g. nearest 0.1, 0.2, 0.5 to the value)\nfunction getNiceXTicks(left: number, right: number, graphWidth: number, minPixelsBetweenTicks = 60): number[] {\n  const range = right - left;\n  if (range <= 0 || graphWidth <= 0) return [];\n\n  const maxTickCount = Math.floor(graphWidth / minPixelsBetweenTicks);\n  if (maxTickCount < 1) return [];\n\n  // Step 1: raw interval\n  const rawInterval = range / maxTickCount;\n\n  // Step 2: round to a \"nice\" interval\n  const magnitude = Math.pow(10, Math.floor(Math.log10(rawInterval)));\n  const residual = rawInterval / magnitude;\n\n  let niceFraction;\n  if (residual <= 1) niceFraction = 1;\n  else if (residual <= 2) niceFraction = 2;\n  else if (residual <= 5) niceFraction = 5;\n  else niceFraction = 10;\n\n  const niceInterval = niceFraction * magnitude;\n\n  // Step 3: extend right bound so we always overshoot it\n  // this guarantees that there will be enough space to\n  // render the span labels.\n  const extendedRight = right + 2 * niceInterval;\n\n  // Step 4: Generate tick positions\n  const firstTick = Math.ceil(left / niceInterval) * niceInterval;\n  const ticks: number[] = [];\n\n  for (let tick = firstTick; tick <= extendedRight; tick += niceInterval) {\n    ticks.push(Number(tick.toFixed(10))); // Avoid float errors\n  }\n\n  return ticks;\n}\n\n// converts timestamp numbers to real pixel values\nfunction scaleX(value: number, left: number, right: number, width: number) {\n  return ((value - left) / (right - left)) * width;\n}\n\nexport const TimelineTreeGanttBars = ({\n  nodes,\n  selectedKey,\n  onSelect,\n  traceStartTime,\n  traceEndTime,\n  expandedKeys,\n  setExpandedKeys,\n}: {\n  nodes: ModelTraceSpanNode[];\n  selectedKey: string | number;\n  onSelect: ((node: ModelTraceSpanNode) => void) | undefined;\n  traceStartTime: number;\n  traceEndTime: number;\n  expandedKeys: Set<string | number>;\n  setExpandedKeys: (keys: Set<string | number>) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const treeContainerRef = useRef<HTMLDivElement>(null);\n  const treeElementWidth = useResizeObserver({ ref: treeContainerRef })?.width ?? 0;\n  const initialXTicks = useMemo(\n    () => getNiceXTicks(traceStartTime, traceEndTime, treeElementWidth),\n    [traceEndTime, traceStartTime, treeElementWidth],\n  );\n  const left = Math.min(...initialXTicks);\n  // for the right limit of the graph, we take the average of the last\n  // two ticks so that the graph does not end directly on a line. if\n  // the graph ends on the line, the ticklabel at the top might render\n  // slightly off screen, which looks bad\n  const right = (initialXTicks[initialXTicks.length - 1] + initialXTicks[initialXTicks.length - 2]) / 2;\n  // pop the last tick since we will not render it (it's beyond the right limit)\n  const xTicks = initialXTicks.slice(0, -1);\n\n  const scaleDurationToTreeWidth = (value: number) => scaleX(value, left, right, treeElementWidth);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        position: 'relative',\n        boxSizing: 'border-box',\n      }}\n    >\n      {/* gantt bar header with the tick labels */}\n      <div\n        ref={treeContainerRef}\n        css={{\n          display: 'flex',\n          width: '100%',\n          flexDirection: 'row',\n          height: theme.typography.lineHeightBase,\n          paddingLeft: TIMELINE_BAR_LEFT_OFFSET,\n          paddingRight: theme.spacing.lg,\n          boxSizing: 'border-box',\n          position: 'sticky',\n          top: 0,\n          backgroundColor: theme.colors.backgroundPrimary,\n          zIndex: TimelineTreeZIndex.HIGH,\n        }}\n      >\n        <div\n          data-testid=\"time-marker-area\"\n          css={{\n            position: 'relative',\n          }}\n        >\n          {xTicks.map((n) => (\n            <Typography.Text\n              css={{\n                position: 'absolute',\n                transform: `translateX(-50%)`,\n                left: scaleDurationToTreeWidth(n),\n                whiteSpace: 'nowrap',\n              }}\n              key={n}\n            >\n              {spanTimeFormatter(n)}\n            </Typography.Text>\n          ))}\n        </div>\n      </div>\n      {/* vertical gantt markers */}\n      <div\n        css={{\n          flex: 1,\n          pointerEvents: 'none',\n          zIndex: TimelineTreeZIndex.LOW,\n        }}\n      >\n        <div\n          css={{\n            position: 'absolute',\n            height: '100%',\n            width: '100%',\n          }}\n        >\n          {xTicks.map((n) => (\n            <div\n              key={n}\n              css={{\n                position: 'absolute',\n                left: scaleDurationToTreeWidth(n) + TIMELINE_BAR_LEFT_OFFSET,\n                borderRight: `1px solid ${theme.colors.border}`,\n                height: '100%',\n              }}\n            />\n          ))}\n        </div>\n      </div>\n      {/* colored horizontal gantt bars */}\n      {nodes.map((node) => {\n        const leftOffset = scaleDurationToTreeWidth(node.start);\n        const width = scaleDurationToTreeWidth(node.end) - leftOffset;\n        return (\n          <TimelineTreeGanttNode\n            key={node.key}\n            selectedKey={selectedKey}\n            onSelect={onSelect}\n            node={node}\n            leftOffset={leftOffset}\n            width={width}\n            expandedKeys={expandedKeys}\n            setExpandedKeys={setExpandedKeys}\n          />\n        );\n      })}\n    </div>\n  );\n};\n","import { useCallback, useMemo } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { getTimelineTreeExpandedNodesList } from './TimelineTree.utils';\nimport { TimelineTreeHeader } from './TimelineTreeHeader';\nimport { TimelineTreeNode } from './TimelineTreeNode';\nimport { TimelineTreeGanttBars } from './gantt/TimelineTreeGanttBars';\nimport type { ModelTraceSpanNode, SpanFilterState } from '../ModelTrace.types';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\n\nexport const TimelineTree = <NodeType extends ModelTraceSpanNode & { children?: NodeType[] }>({\n  rootNodes,\n  selectedNode,\n  setSelectedNode,\n  traceStartTime,\n  traceEndTime,\n  expandedKeys,\n  setExpandedKeys,\n  spanFilterState,\n  setSpanFilterState,\n  className,\n}: {\n  selectedNode?: NodeType;\n  setSelectedNode: (node: ModelTraceSpanNode) => void;\n  traceStartTime: number;\n  traceEndTime: number;\n  rootNodes: NodeType[];\n  expandedKeys: Set<string | number>;\n  setExpandedKeys: (keys: Set<string | number>) => void;\n  spanFilterState: SpanFilterState;\n  setSpanFilterState: (state: SpanFilterState) => void;\n  className?: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const onSpanClick = useCallback(\n    (node) => {\n      setSelectedNode?.(node);\n    },\n    [\n      // comment to prevent prettier format after copybara\n      setSelectedNode,\n    ],\n  );\n\n  const { showTimelineTreeGantt: showTimelineInfo, setShowTimelineTreeGantt: setShowTimelineInfo } =\n    useModelTraceExplorerViewState();\n\n  const expandedNodesList = useMemo(\n    () => getTimelineTreeExpandedNodesList(rootNodes, expandedKeys),\n    [rootNodes, expandedKeys],\n  );\n\n  const treeElement = useMemo(\n    () => (\n      <div\n        css={{\n          flex: 1,\n          overflow: 'auto',\n          minHeight: '100%',\n          boxSizing: 'border-box',\n          display: 'flex',\n          flexDirection: 'column',\n        }}\n      >\n        {showTimelineInfo ? (\n          <TimelineTreeGanttBars\n            nodes={expandedNodesList}\n            selectedKey={selectedNode?.key ?? ''}\n            onSelect={onSpanClick}\n            traceStartTime={traceStartTime}\n            traceEndTime={traceEndTime}\n            expandedKeys={expandedKeys}\n            setExpandedKeys={setExpandedKeys}\n          />\n        ) : (\n          rootNodes.map((node) => (\n            <TimelineTreeNode\n              key={node.key}\n              node={node}\n              expandedKeys={expandedKeys}\n              setExpandedKeys={setExpandedKeys}\n              selectedKey={selectedNode?.key ?? ''}\n              traceStartTime={traceStartTime}\n              traceEndTime={traceEndTime}\n              onSelect={onSpanClick}\n              linesToRender={[]}\n            />\n          ))\n        )}\n      </div>\n    ),\n    [\n      showTimelineInfo,\n      expandedNodesList,\n      selectedNode?.key,\n      onSpanClick,\n      traceStartTime,\n      traceEndTime,\n      rootNodes,\n      expandedKeys,\n      setExpandedKeys,\n    ],\n  );\n\n  return (\n    <div\n      css={{\n        height: '100%',\n        borderRadius: theme.legacyBorders.borderRadiusMd,\n        overflow: 'hidden',\n        display: 'flex',\n      }}\n      className={className}\n    >\n      <div\n        css={{\n          overflow: 'hidden',\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n        }}\n      >\n        <div css={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n          <TimelineTreeHeader\n            showTimelineInfo={showTimelineInfo}\n            setShowTimelineInfo={setShowTimelineInfo}\n            spanFilterState={spanFilterState}\n            setSpanFilterState={setSpanFilterState}\n          />\n          {rootNodes.length > 0 ? (\n            <div css={{ flex: 1, overflowY: 'auto', display: 'flex' }}>{treeElement}</div>\n          ) : (\n            <div\n              css={{\n                flex: 1,\n                display: 'flex',\n                justifyContent: 'center',\n                padding: theme.spacing.md,\n                paddingTop: theme.spacing.lg,\n              }}\n            >\n              <FormattedMessage\n                defaultMessage=\"No results found. Try using a different search term.\"\n                description=\"Model trace explorer > no results found\"\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { values, isString } from 'lodash';\nimport { useLayoutEffect, useMemo, useRef, useState } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { ModelTrace, ModelTraceSpanNode } from './ModelTrace.types';\nimport type { ModelTraceExplorerResizablePaneRef } from './ModelTraceExplorerResizablePane';\nimport ModelTraceExplorerResizablePane from './ModelTraceExplorerResizablePane';\nimport ModelTraceExplorerSearchBox from './ModelTraceExplorerSearchBox';\nimport { useModelTraceExplorerViewState } from './ModelTraceExplorerViewStateContext';\nimport { useModelTraceSearch } from './hooks/useModelTraceSearch';\nimport { ModelTraceExplorerRightPaneTabs, RIGHT_PANE_MIN_WIDTH } from './right-pane/ModelTraceExplorerRightPaneTabs';\nimport { TimelineTree } from './timeline-tree';\nimport {\n  DEFAULT_EXPAND_DEPTH,\n  getModelTraceSpanNodeDepth,\n  getTimelineTreeNodesMap,\n  SPAN_INDENT_WIDTH,\n  useTimelineTreeExpandedNodes,\n} from './timeline-tree/TimelineTree.utils';\n\n// this is the number of large spacings we need in order to\n// properly calculate the min width for the left pane. it's:\n// - 1 for left and right padding\n// - 4 for the right collapse button + time marker\n// - 1 for span icon\n// - 1 for buffer (leave some space to render text)\nconst LEFT_PANE_MIN_WIDTH_LARGE_SPACINGS = 7;\nconst LEFT_PANE_HEADER_MIN_WIDTH_PX = 275;\n\nconst getDefaultSplitRatio = (): number => {\n  if (window.innerWidth <= 768) {\n    return 0.33;\n  }\n\n  return 0.25;\n};\n\nexport const ModelTraceExplorerDetailView = ({\n  modelTrace,\n  className,\n  selectedSpanId,\n  onSelectSpan,\n}: {\n  modelTrace: ModelTrace;\n  className?: string;\n  selectedSpanId?: string;\n  onSelectSpan?: (selectedSpanId?: string) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const initialRatio = getDefaultSplitRatio();\n  const paneRef = useRef<ModelTraceExplorerResizablePaneRef>(null);\n  const [paneWidth, setPaneWidth] = useState(500);\n\n  const {\n    rootNode: treeNode,\n    selectedNode,\n    setSelectedNode,\n    activeTab,\n    setActiveTab,\n  } = useModelTraceExplorerViewState();\n\n  const { expandedKeys, setExpandedKeys } = useTimelineTreeExpandedNodes({\n    rootNodes: treeNode ? [treeNode] : [],\n    // nodes beyond this depth will be collapsed\n    initialExpandDepth: DEFAULT_EXPAND_DEPTH,\n  });\n\n  const {\n    matchData,\n    searchFilter,\n    setSearchFilter,\n    spanFilterState,\n    setSpanFilterState,\n    filteredTreeNodes,\n    handleNextSearchMatch,\n    handlePreviousSearchMatch,\n  } = useModelTraceSearch({\n    treeNode,\n    selectedNode,\n    setSelectedNode,\n    setActiveTab,\n    setExpandedKeys,\n    modelTraceInfo: modelTrace?.info,\n  });\n\n  const onSelectNode = (node?: ModelTraceSpanNode) => {\n    setSelectedNode(node);\n    // Open left most tab when a span is clicked\n    setActiveTab(node?.chatMessages ? 'chat' : 'content');\n    if (isString(node?.key)) {\n      onSelectSpan?.(node?.key);\n    }\n  };\n\n  // initial render\n  useLayoutEffect(() => {\n    // expand all nodes up to the default depth when the tree changes\n    const list = values(getTimelineTreeNodesMap(filteredTreeNodes, DEFAULT_EXPAND_DEPTH)).map((node) => node.key);\n    setExpandedKeys(new Set(list));\n  }, [filteredTreeNodes, setExpandedKeys]);\n\n  const leftPaneMinWidth = useMemo(() => {\n    // min width necessary to render all the spans in the tree accounting for indentation\n    const minWidthForSpans =\n      Math.max(...filteredTreeNodes.map(getModelTraceSpanNodeDepth)) * SPAN_INDENT_WIDTH +\n      LEFT_PANE_MIN_WIDTH_LARGE_SPACINGS * theme.spacing.lg;\n    // min width necessary to render the header, given that it has a bunch of buttons\n    return Math.max(LEFT_PANE_HEADER_MIN_WIDTH_PX, minWidthForSpans);\n  }, [filteredTreeNodes, theme.spacing.lg]);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        flex: 1,\n        minHeight: 0,\n      }}\n      className={className}\n    >\n      <div\n        css={{\n          padding: theme.spacing.xs,\n          borderBottom: `1px solid ${theme.colors.border}`,\n        }}\n      >\n        <ModelTraceExplorerSearchBox\n          searchFilter={searchFilter}\n          setSearchFilter={setSearchFilter}\n          matchData={matchData}\n          handleNextSearchMatch={handleNextSearchMatch}\n          handlePreviousSearchMatch={handlePreviousSearchMatch}\n        />\n      </div>\n      <ModelTraceExplorerResizablePane\n        ref={paneRef}\n        initialRatio={initialRatio}\n        paneWidth={paneWidth}\n        setPaneWidth={setPaneWidth}\n        leftChild={\n          <div\n            css={{\n              display: 'flex',\n              flexDirection: 'column',\n              flex: 1,\n              minWidth: leftPaneMinWidth,\n            }}\n          >\n            <TimelineTree\n              rootNodes={filteredTreeNodes}\n              selectedNode={selectedNode}\n              traceStartTime={treeNode?.start ?? 0}\n              traceEndTime={treeNode?.end ?? 0}\n              setSelectedNode={onSelectNode}\n              css={{ flex: 1 }}\n              expandedKeys={expandedKeys}\n              setExpandedKeys={setExpandedKeys}\n              spanFilterState={spanFilterState}\n              setSpanFilterState={setSpanFilterState}\n            />\n          </div>\n        }\n        leftMinWidth={leftPaneMinWidth}\n        rightChild={\n          <ModelTraceExplorerRightPaneTabs\n            activeSpan={selectedNode}\n            searchFilter={searchFilter}\n            activeMatch={matchData.match}\n            activeTab={activeTab}\n            setActiveTab={setActiveTab}\n          />\n        }\n        rightMinWidth={RIGHT_PANE_MIN_WIDTH}\n      />\n    </div>\n  );\n};\n","import { DangerIcon, Empty } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nexport const ModelTraceExplorerErrorState = () => {\n  return (\n    <Empty\n      title={\n        <FormattedMessage\n          defaultMessage=\"Trace failed to render\"\n          description=\"Title for the error state in the model trace explorer\"\n        />\n      }\n      description={\n        <FormattedMessage\n          defaultMessage=\"Unfortunately, the trace could not be rendered due to an unknown error. You can reload the page to try again. If the problem persists, please contact support.\"\n          description=\"Description for the error state in the model trace explorer\"\n        />\n      }\n      image={<DangerIcon />}\n    />\n  );\n};\n","import { useQuery } from '@databricks/web-shared/query-client';\n\nimport type { ModelTrace } from '../ModelTrace.types';\nimport { FETCH_TRACE_INFO_QUERY_KEY } from '../ModelTraceExplorer.utils';\nimport { fetchTraceInfoV3 } from '../api';\n\nexport const useGetModelTraceInfoV3 = ({\n  traceId,\n  setModelTrace,\n  setAssessmentsPaneEnabled,\n  enabled = true,\n}: {\n  traceId: string;\n  setModelTrace: React.Dispatch<React.SetStateAction<ModelTrace>>;\n  setAssessmentsPaneEnabled: React.Dispatch<React.SetStateAction<boolean>>;\n  enabled?: boolean;\n}) => {\n  const queryKey = [FETCH_TRACE_INFO_QUERY_KEY, traceId];\n\n  return useQuery({\n    queryKey,\n    queryFn: () => fetchTraceInfoV3({ traceId }),\n    onSuccess: (response) => {\n      setModelTrace((prevModelTrace: ModelTrace) => ({\n        data: prevModelTrace.data,\n        info: response?.trace?.trace_info ?? {},\n      }));\n      setAssessmentsPaneEnabled(true);\n    },\n    onError: () => {\n      setAssessmentsPaneEnabled(false);\n    },\n    enabled,\n  });\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { ModelTraceChatTool } from '../ModelTrace.types';\nimport { ModelTraceExplorerChatTool } from '../right-pane/ModelTraceExplorerChatTool';\n\nexport const ModelTraceExplorerChatToolsRenderer = ({\n  title,\n  tools,\n}: {\n  title: string;\n  tools: ModelTraceChatTool[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        padding: theme.spacing.sm,\n        border: `1px solid ${theme.colors.border}`,\n        borderRadius: theme.borders.borderRadiusSm,\n      }}\n    >\n      {title && (\n        <Typography.Text css={{ marginLeft: theme.spacing.xs }} bold>\n          {title}\n        </Typography.Text>\n      )}\n      {tools.map((tool) => (\n        <ModelTraceExplorerChatTool key={tool.function.name} tool={tool} />\n      ))}\n    </div>\n  );\n};\n","import { Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { RetrieverDocument } from '../ModelTrace.types';\nimport { ModelTraceExplorerRetrieverDocument } from '../right-pane/ModelTraceExplorerRetrieverDocument';\n\nexport const ModelTraceExplorerRetrieverFieldRenderer = ({\n  title,\n  documents,\n}: {\n  title: string;\n  documents: RetrieverDocument[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        backgroundColor: theme.colors.backgroundPrimary,\n        borderRadius: theme.borders.borderRadiusSm,\n        border: `1px solid ${theme.colors.border}`,\n      }}\n    >\n      {title && (\n        <div\n          css={{\n            padding: `${theme.spacing.xs}px ${theme.spacing.sm}px`,\n            borderBottom: `1px solid ${theme.colors.border}`,\n          }}\n        >\n          <Typography.Text bold>{title}</Typography.Text>\n        </div>\n      )}\n      {documents.map((document, idx) => (\n        <div key={idx} css={{ borderBottom: idx !== documents.length - 1 ? `1px solid ${theme.colors.border}` : '' }}>\n          <ModelTraceExplorerRetrieverDocument key={idx} text={document.page_content} metadata={document.metadata} />\n        </div>\n      ))}\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { ChevronDownIcon, ChevronRightIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\nimport { GenAIMarkdownRenderer } from '@databricks/web-shared/genai-markdown-renderer';\n\nconst STRING_TRUNCATION_LIMIT = 400;\n\nexport const ModelTraceExplorerTextFieldRenderer = ({ title, value }: { title: string; value: string }) => {\n  const { theme } = useDesignSystemTheme();\n  const [expanded, setExpanded] = useState(false);\n\n  const isExpandable = value.length > STRING_TRUNCATION_LIMIT;\n  const displayValue =\n    !expanded && value.length > STRING_TRUNCATION_LIMIT ? value.slice(0, STRING_TRUNCATION_LIMIT) + '...' : value;\n\n  const hoverStyles = isExpandable\n    ? { ':hover': { backgroundColor: theme.colors.actionIconBackgroundHover, cursor: 'pointer' } }\n    : {};\n\n  return (\n    <div\n      css={{\n        border: `1px solid ${theme.colors.border}`,\n        borderRadius: theme.borders.borderRadiusSm,\n      }}\n    >\n      {title && (\n        <div\n          role=\"button\"\n          css={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            padding: `${theme.spacing.sm}px ${theme.spacing.sm + theme.spacing.xs}px`,\n            ...hoverStyles,\n          }}\n          onClick={() => setExpanded(!expanded)}\n        >\n          <Typography.Text bold>{title}</Typography.Text>\n          {isExpandable && (expanded ? <ChevronDownIcon /> : <ChevronRightIcon />)}\n        </div>\n      )}\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.sm,\n          paddingLeft: theme.spacing.sm + theme.spacing.xs,\n          paddingRight: theme.spacing.sm + theme.spacing.xs,\n          paddingTop: title ? 0 : theme.spacing.sm,\n          paddingBottom: theme.spacing.sm,\n          // get rid of last margin in markdown renderer\n          '& > div:last-of-type': {\n            marginBottom: 0,\n          },\n        }}\n      >\n        <GenAIMarkdownRenderer>{displayValue}</GenAIMarkdownRenderer>\n        {isExpandable && (\n          <Typography.Link\n            onClick={() => setExpanded(!expanded)}\n            componentId=\"shared.model-trace-explorer.text-field-see-more-link\"\n          >\n            {expanded ? (\n              <FormattedMessage\n                defaultMessage=\"See less\"\n                description=\"Button to collapse a long text field in the trace explorer summary field renderer\"\n              />\n            ) : (\n              <FormattedMessage\n                defaultMessage=\"See more\"\n                description=\"Button to expand a long text field in the trace explorer summary field renderer\"\n              />\n            )}\n          </Typography.Link>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { every, isString } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { ModelTraceExplorerChatToolsRenderer } from './ModelTraceExplorerChatToolsRenderer';\nimport { ModelTraceExplorerRetrieverFieldRenderer } from './ModelTraceExplorerRetrieverFieldRenderer';\nimport { ModelTraceExplorerTextFieldRenderer } from './ModelTraceExplorerTextFieldRenderer';\nimport { CodeSnippetRenderMode } from '../ModelTrace.types';\nimport { isModelTraceChatTool, isRetrieverDocument, normalizeConversation } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCodeSnippet } from '../ModelTraceExplorerCodeSnippet';\nimport { ModelTraceExplorerConversation } from '../right-pane/ModelTraceExplorerConversation';\n\nexport const ModelTraceExplorerFieldRenderer = ({\n  title,\n  data,\n  renderMode,\n}: {\n  title: string;\n  data: string;\n  renderMode: 'default' | 'json' | 'text';\n}) => {\n  const parsedData = useMemo(() => {\n    try {\n      return JSON.parse(data);\n    } catch (e) {\n      return data;\n    }\n  }, [data]);\n\n  const dataIsString = isString(parsedData);\n  const chatMessages = normalizeConversation(parsedData);\n  const isChatTools = Array.isArray(parsedData) && parsedData.length > 0 && every(parsedData, isModelTraceChatTool);\n  const isRetrieverDocuments =\n    Array.isArray(parsedData) && parsedData.length > 0 && every(parsedData, isRetrieverDocument);\n\n  if (renderMode === 'json') {\n    return <ModelTraceExplorerCodeSnippet title={title} data={data} initialRenderMode={CodeSnippetRenderMode.JSON} />;\n  }\n\n  if (renderMode === 'text') {\n    return <ModelTraceExplorerCodeSnippet title={title} data={data} initialRenderMode={CodeSnippetRenderMode.TEXT} />;\n  }\n\n  if (dataIsString) {\n    return <ModelTraceExplorerTextFieldRenderer title={title} value={parsedData} />;\n  }\n\n  if (chatMessages && chatMessages.length > 0) {\n    return <ModelTraceExplorerConversation messages={chatMessages} />;\n  }\n\n  if (isChatTools) {\n    return <ModelTraceExplorerChatToolsRenderer title={title} tools={parsedData} />;\n  }\n\n  if (isRetrieverDocuments) {\n    return <ModelTraceExplorerRetrieverFieldRenderer title={title} documents={parsedData} />;\n  }\n\n  return <ModelTraceExplorerCodeSnippet title={title} data={data} />;\n};\n","import { Typography, XCircleIcon, useDesignSystemTheme } from '@databricks/design-system';\n\nimport type { ModelTraceSpanNode } from '../ModelTrace.types';\nimport { getSpanExceptionEvents } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\nimport { ModelTraceExplorerFieldRenderer } from '../field-renderers/ModelTraceExplorerFieldRenderer';\n\nexport const ModelTraceExplorerSummaryViewExceptionsSection = ({ node }: { node: ModelTraceSpanNode }) => {\n  const { theme } = useDesignSystemTheme();\n  const exceptionEvents = getSpanExceptionEvents(node);\n  const isRoot = !node.parentId;\n  // to prevent excessive nesting, we only show the first exception.\n  // it is likely that any given span only has one exception,\n  // since execution usually stops after throwing.\n  const firstException = exceptionEvents[0];\n\n  if (!firstException) {\n    return null;\n  }\n\n  return (\n    <ModelTraceExplorerCollapsibleSection\n      css={{ marginBottom: isRoot ? theme.spacing.sm : 0 }}\n      withBorder={isRoot}\n      key={firstException.name}\n      sectionKey={firstException.name}\n      title={\n        <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}>\n          <XCircleIcon color=\"danger\" />\n          <Typography.Text color=\"error\" bold>\n            Exception\n          </Typography.Text>\n        </div>\n      }\n    >\n      <div\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: theme.spacing.sm,\n          paddingBottom: theme.spacing.sm,\n          paddingLeft: isRoot ? 0 : theme.spacing.lg,\n        }}\n      >\n        {Object.entries(firstException.attributes ?? {}).map(([attribute, value]) => (\n          <ModelTraceExplorerFieldRenderer\n            key={attribute}\n            title={attribute}\n            data={JSON.stringify(value, null, 2)}\n            renderMode=\"text\"\n          />\n        ))}\n      </div>\n    </ModelTraceExplorerCollapsibleSection>\n  );\n};\n","import { useMemo, useState } from 'react';\n\nimport { Button, ChevronRightIcon, ChevronDownIcon, useDesignSystemTheme, Typography } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerSummaryViewExceptionsSection } from './ModelTraceExplorerSummaryViewExceptionsSection';\nimport { type ModelTraceSpanNode } from '../ModelTrace.types';\nimport { createListFromObject, getSpanExceptionEvents } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\nimport { SpanNameDetailViewLink } from '../assessments-pane/SpanNameDetailViewLink';\nimport { ModelTraceExplorerFieldRenderer } from '../field-renderers/ModelTraceExplorerFieldRenderer';\nimport { spanTimeFormatter } from '../timeline-tree/TimelineTree.utils';\n\nconst CONNECTOR_WIDTH = 12;\nconst ROW_HEIGHT = 48;\n\nexport const ModelTraceExplorerSummaryIntermediateNode = ({\n  node,\n  renderMode,\n}: {\n  node: ModelTraceSpanNode;\n  renderMode: 'default' | 'json';\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [expanded, setExpanded] = useState(false);\n  const inputList = useMemo(() => createListFromObject(node.inputs), [node]);\n  const outputList = useMemo(() => createListFromObject(node.outputs), [node]);\n  const exceptionEvents = getSpanExceptionEvents(node);\n\n  const hasException = exceptionEvents.length > 0;\n  const containsInputs = inputList.length > 0;\n  const containsOutputs = outputList.length > 0;\n\n  const { setSelectedNode, setActiveView, setShowTimelineTreeGantt } = useModelTraceExplorerViewState();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        minHeight: ROW_HEIGHT,\n        flexShrink: 0,\n      }}\n    >\n      <div css={{ height: ROW_HEIGHT, display: 'flex', alignItems: 'center' }}>\n        <Button\n          size=\"small\"\n          data-testid={`toggle-span-expanded-${node.key}`}\n          css={{ flexShrink: 0, marginRight: theme.spacing.xs }}\n          icon={expanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n          onClick={() => setExpanded(!expanded)}\n          componentId=\"shared.model-trace-explorer.toggle-span\"\n        />\n      </div>\n      <div\n        css={{\n          position: 'relative',\n          boxSizing: 'border-box',\n          height: '100%',\n          borderLeft: `2px solid ${theme.colors.border}`,\n          width: CONNECTOR_WIDTH,\n        }}\n      >\n        <div\n          css={{\n            position: 'absolute',\n            left: -2,\n            top: 14,\n            height: CONNECTOR_WIDTH,\n            width: CONNECTOR_WIDTH,\n            boxSizing: 'border-box',\n            borderBottomLeftRadius: theme.borders.borderRadiusMd,\n            borderBottom: `2px solid ${theme.colors.border}`,\n            borderLeft: `2px solid ${theme.colors.border}`,\n          }}\n        />\n      </div>\n      <div css={{ display: 'flex', flexDirection: 'column', flex: 1, minWidth: 0 }}>\n        <div css={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Typography.Text color=\"secondary\" css={{ display: 'inline-flex', alignItems: 'center', height: ROW_HEIGHT }}>\n            <FormattedMessage\n              defaultMessage=\"{spanName} was called\"\n              description=\"Label for an intermediate node in the trace explorer summary view, indicating that a span/function was called in the course of execution.\"\n              values={{\n                spanName: <SpanNameDetailViewLink node={node} />,\n              }}\n            />\n          </Typography.Text>\n          <span\n            onClick={() => {\n              setSelectedNode(node);\n              setActiveView('detail');\n              setShowTimelineTreeGantt(true);\n            }}\n          >\n            <Typography.Text\n              css={{\n                '&:hover': {\n                  textDecoration: 'underline',\n                  cursor: 'pointer',\n                },\n              }}\n              color=\"secondary\"\n            >\n              {spanTimeFormatter(node.end - node.start)}\n            </Typography.Text>\n          </span>\n        </div>\n        {expanded && (\n          <div>\n            {hasException && <ModelTraceExplorerSummaryViewExceptionsSection node={node} />}\n            {containsInputs && (\n              <ModelTraceExplorerCollapsibleSection\n                sectionKey=\"input\"\n                title={\n                  <FormattedMessage\n                    defaultMessage=\"Inputs\"\n                    description=\"Model trace explorer > selected span > inputs header\"\n                  />\n                }\n              >\n                <div\n                  css={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: theme.spacing.sm,\n                    paddingLeft: theme.spacing.lg,\n                    marginBottom: containsOutputs ? 0 : theme.spacing.sm,\n                  }}\n                >\n                  {inputList.map(({ key, value }, index) => (\n                    <ModelTraceExplorerFieldRenderer\n                      key={key || index}\n                      title={key}\n                      data={value}\n                      renderMode={renderMode}\n                    />\n                  ))}\n                </div>\n              </ModelTraceExplorerCollapsibleSection>\n            )}\n            {containsOutputs && (\n              <ModelTraceExplorerCollapsibleSection\n                sectionKey=\"output\"\n                title={\n                  <FormattedMessage\n                    defaultMessage=\"Outputs\"\n                    description=\"Model trace explorer > selected span > outputs header\"\n                  />\n                }\n              >\n                <div\n                  css={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    gap: theme.spacing.sm,\n                    paddingLeft: theme.spacing.lg,\n                    marginBottom: theme.spacing.sm,\n                  }}\n                >\n                  {outputList.map(({ key, value }) => (\n                    <ModelTraceExplorerFieldRenderer key={key} title={key} data={value} renderMode={renderMode} />\n                  ))}\n                </div>\n              </ModelTraceExplorerCollapsibleSection>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport { SegmentedControlButton, SegmentedControlGroup, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerSummaryIntermediateNode } from './ModelTraceExplorerSummaryIntermediateNode';\nimport { ModelTraceExplorerSummaryViewExceptionsSection } from './ModelTraceExplorerSummaryViewExceptionsSection';\nimport type { ModelTraceExplorerRenderMode, ModelTraceSpanNode } from '../ModelTrace.types';\nimport { createListFromObject, getSpanExceptionEvents } from '../ModelTraceExplorer.utils';\nimport { ModelTraceExplorerCollapsibleSection } from '../ModelTraceExplorerCollapsibleSection';\nimport { AssessmentPaneToggle } from '../assessments-pane/AssessmentPaneToggle';\nimport { ModelTraceExplorerFieldRenderer } from '../field-renderers/ModelTraceExplorerFieldRenderer';\n\nexport const SUMMARY_SPANS_MIN_WIDTH = 400;\n\nexport const ModelTraceExplorerSummarySpans = ({\n  rootNode,\n  intermediateNodes,\n}: {\n  rootNode: ModelTraceSpanNode;\n  intermediateNodes: ModelTraceSpanNode[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [renderMode, setRenderMode] = useState<ModelTraceExplorerRenderMode>('default');\n\n  const rootInputs = rootNode.inputs;\n  const rootOutputs = rootNode.outputs;\n  const exceptions = getSpanExceptionEvents(rootNode);\n  const hasIntermediateNodes = intermediateNodes.length > 0;\n  const hasExceptions = exceptions.length > 0;\n\n  const inputList = createListFromObject(rootInputs);\n  const outputList = createListFromObject(rootOutputs);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        flex: 1,\n        minHeight: 0,\n        padding: theme.spacing.md,\n        paddingTop: theme.spacing.sm,\n        overflow: 'auto',\n        minWidth: SUMMARY_SPANS_MIN_WIDTH,\n      }}\n    >\n      <div css={{ display: 'flex', flexDirection: 'row', justifyContent: 'flex-end', marginBottom: theme.spacing.sm }}>\n        <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n          <SegmentedControlGroup\n            name=\"render-mode\"\n            componentId=\"shared.model-trace-explorer.summary-view.render-mode\"\n            value={renderMode}\n            size=\"small\"\n            onChange={(event) => setRenderMode(event.target.value)}\n          >\n            <SegmentedControlButton value=\"default\">\n              <FormattedMessage\n                defaultMessage=\"Default\"\n                description=\"Label for the default render mode selector in the model trace explorer summary view\"\n              />\n            </SegmentedControlButton>\n            <SegmentedControlButton value=\"json\">\n              <FormattedMessage\n                defaultMessage=\"JSON\"\n                description=\"Label for the JSON render mode selector in the model trace explorer summary view\"\n              />\n            </SegmentedControlButton>\n          </SegmentedControlGroup>\n          <AssessmentPaneToggle />\n        </div>\n      </div>\n      {hasExceptions && <ModelTraceExplorerSummaryViewExceptionsSection node={rootNode} />}\n      <ModelTraceExplorerCollapsibleSection\n        withBorder\n        title={\n          <FormattedMessage\n            defaultMessage=\"Inputs\"\n            description=\"Model trace explorer > selected span > inputs header\"\n          />\n        }\n        css={{ marginBottom: hasIntermediateNodes ? 0 : theme.spacing.md }}\n        sectionKey=\"summary-inputs\"\n      >\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n          {inputList.map(({ key, value }, index) => (\n            <ModelTraceExplorerFieldRenderer key={key || index} title={key} data={value} renderMode={renderMode} />\n          ))}\n        </div>\n      </ModelTraceExplorerCollapsibleSection>\n      {hasIntermediateNodes &&\n        intermediateNodes.map((node) => (\n          <ModelTraceExplorerSummaryIntermediateNode key={node.key} node={node} renderMode={renderMode} />\n        ))}\n      <ModelTraceExplorerCollapsibleSection\n        withBorder\n        title={\n          <FormattedMessage\n            defaultMessage=\"Outputs\"\n            description=\"Model trace explorer > selected span > outputs header\"\n          />\n        }\n        sectionKey=\"summary-outputs\"\n      >\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n          {outputList.map(({ key, value }, index) => (\n            <ModelTraceExplorerFieldRenderer key={key || index} title={key} data={value} renderMode={renderMode} />\n          ))}\n        </div>\n      </ModelTraceExplorerCollapsibleSection>\n    </div>\n  );\n};\n","import { useMemo, useState } from 'react';\n\nimport { Empty, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { ModelTraceExplorerSummarySpans, SUMMARY_SPANS_MIN_WIDTH } from './ModelTraceExplorerSummarySpans';\nimport { ModelSpanType } from '../ModelTrace.types';\nimport type { ModelTraceSpanNode, ModelTrace } from '../ModelTrace.types';\nimport { getSpanExceptionCount } from '../ModelTraceExplorer.utils';\nimport ModelTraceExplorerResizablePane from '../ModelTraceExplorerResizablePane';\nimport { useModelTraceExplorerViewState } from '../ModelTraceExplorerViewStateContext';\nimport { AssessmentsPane } from '../assessments-pane/AssessmentsPane';\nimport { ASSESSMENT_PANE_MIN_WIDTH } from '../assessments-pane/AssessmentsPane.utils';\nimport { getTimelineTreeNodesList } from '../timeline-tree/TimelineTree.utils';\n\nconst isNodeImportant = (node: ModelTraceSpanNode) => {\n  // root node is shown at top level, so we don't need to\n  // show it in the intermediate nodes list\n  if (!node.parentId) {\n    return false;\n  }\n\n  return (\n    [\n      ModelSpanType.AGENT,\n      ModelSpanType.RETRIEVER,\n      ModelSpanType.CHAT_MODEL,\n      ModelSpanType.TOOL,\n      ModelSpanType.LLM,\n    ].includes(node.type ?? ModelSpanType.UNKNOWN) || getSpanExceptionCount(node) > 0\n  );\n};\n\nexport const ModelTraceExplorerSummaryView = ({ modelTrace }: { modelTrace: ModelTrace }) => {\n  const { theme } = useDesignSystemTheme();\n  const [paneWidth, setPaneWidth] = useState(500);\n  const { rootNode, nodeMap, assessmentsPaneEnabled, assessmentsPaneExpanded } = useModelTraceExplorerViewState();\n\n  const allAssessments = useMemo(() => Object.values(nodeMap).flatMap((node) => node.assessments), [nodeMap]);\n\n  const intermediateNodes = useMemo(() => {\n    if (!rootNode) {\n      return [];\n    }\n\n    // the summary view is meant to be a high-level view of the trace,\n    // so we show \"important\" nodes as a flat list between the inputs\n    // and outputs of the root node.\n    const nodes = getTimelineTreeNodesList([rootNode]);\n    const intermediateNodes = nodes.filter(isNodeImportant);\n\n    return intermediateNodes;\n  }, [rootNode]);\n\n  if (!rootNode) {\n    return (\n      <div css={{ marginTop: theme.spacing.lg }}>\n        <Empty\n          description={\n            <FormattedMessage\n              defaultMessage=\"No span data to display\"\n              description=\"Title for the empty state in the model trace explorer summary view\"\n            />\n          }\n        />\n      </div>\n    );\n  }\n\n  return assessmentsPaneEnabled && assessmentsPaneExpanded ? (\n    <ModelTraceExplorerResizablePane\n      initialRatio={0.75}\n      paneWidth={paneWidth}\n      setPaneWidth={setPaneWidth}\n      leftChild={<ModelTraceExplorerSummarySpans rootNode={rootNode} intermediateNodes={intermediateNodes} />}\n      rightChild={<AssessmentsPane assessments={allAssessments} traceId={rootNode.traceId} activeSpanId={undefined} />}\n      leftMinWidth={SUMMARY_SPANS_MIN_WIDTH}\n      rightMinWidth={ASSESSMENT_PANE_MIN_WIDTH}\n    />\n  ) : (\n    <ModelTraceExplorerSummarySpans rootNode={rootNode} intermediateNodes={intermediateNodes} />\n  );\n};\n","import {\n  Overflow,\n  Tag,\n  TagColors,\n  Typography,\n  useDesignSystemTheme,\n  Tooltip,\n  ClockIcon,\n} from '@databricks/design-system';\nimport { Notification } from '@databricks/design-system';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport type { ModelTrace, ModelTraceInfoV3 } from './ModelTrace.types';\nimport { getModelTraceId } from './ModelTraceExplorer.utils';\nimport { spanTimeFormatter } from './timeline-tree/TimelineTree.utils';\nimport { useModelTraceExplorerViewState } from './ModelTraceExplorerViewStateContext';\nimport { isUserFacingTag, parseJSONSafe, truncateToFirstLineWithMaxLength } from './TagUtils';\n\nconst BASE_TAG_COMPONENT_ID = 'mlflow.model_trace_explorer.header_details';\nconst BASE_NOTIFICATION_COMPONENT_ID = 'mlflow.model_trace_explorer.header_details.notification';\n\nconst ModelTraceHeaderMetricSection = ({\n  label,\n  value,\n  icon,\n  tagKey,\n  color = 'teal',\n  getTruncatedLabel,\n  getComponentId,\n  onCopy,\n}: {\n  label: React.ReactNode;\n  value: string;\n  icon?: React.ReactNode;\n  tagKey: string;\n  color?: TagColors;\n  getTruncatedLabel: (label: string) => string;\n  getComponentId: (key: string) => string;\n  onCopy: () => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(value);\n    onCopy();\n  };\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'row',\n        gap: theme.spacing.sm,\n      }}\n    >\n      <Typography.Text size=\"md\" color=\"secondary\">\n        {label}\n      </Typography.Text>\n      <Tooltip componentId={getComponentId(tagKey)} content={value} maxWidth={400}>\n        <Tag componentId={getComponentId(tagKey)} color={color} onClick={handleClick} css={{ cursor: 'pointer' }}>\n          <span css={{ display: 'flex', flexDirection: 'row', alignItems: 'center', gap: theme.spacing.xs }}>\n            {icon && <span>{icon}</span>}\n            <span>{getTruncatedLabel(value)}</span>\n          </span>\n        </Tag>\n      </Tooltip>\n    </div>\n  );\n};\n\nexport const ModelTraceHeaderDetails = ({ modelTrace }: { modelTrace: ModelTrace }) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const [showNotification, setShowNotification] = useState(false);\n  const { rootNode } = useModelTraceExplorerViewState();\n\n  const tags = Object.entries(modelTrace.info.tags ?? {}).filter(([key]) => isUserFacingTag(key));\n\n  const modelTraceId = getModelTraceId(modelTrace);\n\n  const tokenUsage = useMemo(() => {\n    const tokenUsage = parseJSONSafe(\n      (modelTrace.info as ModelTraceInfoV3)?.trace_metadata?.['mlflow.trace.tokenUsage'] ?? '{}',\n    );\n\n    return tokenUsage;\n  }, [modelTrace.info]);\n\n  const totalTokens = useMemo(() => tokenUsage?.total_tokens, [tokenUsage]);\n\n  const latency = useMemo((): string | undefined => {\n    if (rootNode) {\n      return spanTimeFormatter(rootNode.end - rootNode.start);\n    }\n\n    return undefined;\n  }, [rootNode]);\n\n  const getComponentId = useCallback((key: string) => `${BASE_TAG_COMPONENT_ID}.tag-${key}`, []);\n\n  const handleTagClick = (text: string) => {\n    navigator.clipboard.writeText(text);\n  };\n\n  const getTruncatedLabel = (label: string) => truncateToFirstLineWithMaxLength(label, 40);\n\n  const handleCopy = useCallback(() => {\n    setShowNotification(true);\n    setTimeout(() => setShowNotification(false), 2000);\n  }, []);\n\n  return (\n    <>\n      <div css={{ display: 'flex', flexDirection: 'row', gap: theme.spacing.md, flexWrap: 'wrap' }}>\n        {modelTraceId && (\n          <ModelTraceHeaderMetricSection\n            label={<FormattedMessage defaultMessage=\"ID\" description=\"Label for the ID section\" />}\n            value={modelTraceId}\n            tagKey={modelTraceId}\n            color=\"pink\"\n            getTruncatedLabel={getTruncatedLabel}\n            getComponentId={getComponentId}\n            onCopy={handleCopy}\n          />\n        )}\n        {totalTokens && (\n          <ModelTraceHeaderMetricSection\n            label={<FormattedMessage defaultMessage=\"Token count\" description=\"Label for the token count section\" />}\n            value={totalTokens.toString()}\n            tagKey=\"token-count\"\n            color=\"default\"\n            getTruncatedLabel={getTruncatedLabel}\n            getComponentId={getComponentId}\n            onCopy={handleCopy}\n          />\n        )}\n        {latency && (\n          <ModelTraceHeaderMetricSection\n            label={<FormattedMessage defaultMessage=\"Latency\" description=\"Label for the latency section\" />}\n            icon={<ClockIcon css={{ fontSize: 12, display: 'flex', alignItems: 'center', justifyContent: 'center' }} />}\n            value={latency}\n            tagKey=\"latency\"\n            color=\"default\"\n            getTruncatedLabel={getTruncatedLabel}\n            getComponentId={getComponentId}\n            onCopy={handleCopy}\n          />\n        )}\n        {tags.length > 0 && (\n          <div\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              flexDirection: 'row',\n              gap: theme.spacing.sm,\n            }}\n          >\n            <Typography.Text size=\"md\" color=\"secondary\">\n              <FormattedMessage defaultMessage=\"Tags\" description=\"Label for the tags section\" />\n            </Typography.Text>\n            <Overflow noMargin>\n              {tags.map(([key, value]) => {\n                const tagKey = `${key}-${value}`;\n                const fullText = `${key}: ${value}`;\n\n                return (\n                  <Tooltip key={key} componentId={getComponentId(tagKey)} content={fullText}>\n                    <Tag\n                      componentId={getComponentId(tagKey)}\n                      color=\"teal\"\n                      onClick={() => {\n                        handleTagClick(fullText);\n                        handleCopy();\n                      }}\n                      css={{ cursor: 'pointer' }}\n                    >\n                      {getTruncatedLabel(`${key}: ${value}`)}\n                    </Tag>\n                  </Tooltip>\n                );\n              })}\n            </Overflow>\n          </div>\n        )}\n      </div>\n\n      {showNotification && (\n        <Notification.Provider>\n          <Notification.Root severity=\"success\" componentId={BASE_NOTIFICATION_COMPONENT_ID}>\n            <Notification.Title>\n              <FormattedMessage\n                defaultMessage=\"Copied to clipboard\"\n                description=\"Success message for the notification\"\n              />\n            </Notification.Title>\n          </Notification.Root>\n          <Notification.Viewport />\n        </Notification.Provider>\n      )}\n    </>\n  );\n};\n","import _ from 'lodash';\n\nexport const MLFLOW_INTERNAL_PREFIX = 'mlflow.';\nconst MLFLOW_INTERNAL_PREFIX_UC = '_mlflow_';\n\nexport const isUserFacingTag = (tagKey: string) =>\n  !tagKey.startsWith(MLFLOW_INTERNAL_PREFIX) && !tagKey.startsWith(MLFLOW_INTERNAL_PREFIX_UC);\n\n// Safe JSON.parse that returns undefined instead of throwing an error\nexport const parseJSONSafe = (json: string) => {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    return undefined;\n  }\n};\n\nexport const truncateToFirstLineWithMaxLength = (str: string, maxLength: number): string => {\n  const truncated = _.truncate(str, {\n    length: maxLength,\n  });\n  return _.takeWhile(truncated, (char) => char !== '\\n').join('');\n};\n","import { useEffect, useState } from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\n\nimport { Tabs, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from '@databricks/i18n';\n\nimport { getLargeTraceDisplaySizeThreshold, shouldBlockLargeTraceDisplay } from './FeatureUtils';\nimport type { ModelTrace } from './ModelTrace.types';\nimport { getModelTraceId, getModelTraceSize } from './ModelTraceExplorer.utils';\nimport { ModelTraceExplorerDetailView } from './ModelTraceExplorerDetailView';\nimport { ModelTraceExplorerErrorState } from './ModelTraceExplorerErrorState';\nimport { ModelTraceExplorerGenericErrorState } from './ModelTraceExplorerGenericErrorState';\nimport { ModelTraceExplorerTraceTooLargeView } from './ModelTraceExplorerTraceTooLargeView';\nimport {\n  ModelTraceExplorerViewStateProvider,\n  useModelTraceExplorerViewState,\n} from './ModelTraceExplorerViewStateContext';\nimport { useGetModelTraceInfoV3 } from './hooks/useGetModelTraceInfoV3';\nimport { ModelTraceExplorerSummaryView } from './summary-view/ModelTraceExplorerSummaryView';\nimport { ModelTraceHeaderDetails } from './ModelTraceHeaderDetails';\n\nconst ModelTraceExplorerContent = ({\n  modelTrace,\n  className,\n  selectedSpanId,\n  onSelectSpan,\n}: {\n  modelTrace: ModelTrace;\n  className?: string;\n  selectedSpanId?: string;\n  onSelectSpan?: (selectedSpanId?: string) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { activeView, setActiveView } = useModelTraceExplorerViewState();\n\n  return (\n    <Tabs.Root\n      componentId=\"model-trace-explorer\"\n      value={activeView}\n      onValueChange={(value) => setActiveView(value as 'summary' | 'detail')}\n      css={{\n        '& > div:nth-of-type(2)': {\n          marginBottom: 0,\n          flexShrink: 0,\n        },\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        overflow: 'hidden',\n      }}\n    >\n      <div css={{ paddingLeft: theme.spacing.md, paddingBottom: theme.spacing.sm }}>\n        <ModelTraceHeaderDetails modelTrace={modelTrace} />\n      </div>\n      <Tabs.List css={{ paddingLeft: theme.spacing.md, flexShrink: 0 }}>\n        <Tabs.Trigger value=\"summary\">\n          <FormattedMessage\n            defaultMessage=\"Summary\"\n            description=\"Label for the summary view tab in the model trace explorer\"\n          />\n        </Tabs.Trigger>\n        <Tabs.Trigger value=\"detail\">\n          <FormattedMessage\n            defaultMessage=\"Details & Timeline\"\n            description=\"Label for the details & timeline view tab in the model trace explorer\"\n          />\n        </Tabs.Trigger>\n      </Tabs.List>\n      <Tabs.Content\n        value=\"summary\"\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          minHeight: 0,\n        }}\n      >\n        <ModelTraceExplorerSummaryView modelTrace={modelTrace} />\n      </Tabs.Content>\n      <Tabs.Content\n        value=\"detail\"\n        css={{\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          minHeight: 0,\n        }}\n      >\n        <ModelTraceExplorerDetailView\n          modelTrace={modelTrace}\n          className={className}\n          selectedSpanId={selectedSpanId}\n          onSelectSpan={onSelectSpan}\n        />\n      </Tabs.Content>\n    </Tabs.Root>\n  );\n};\n\nconst ContextProviders = ({ children }: { traceId: string; children: React.ReactNode }) => {\n  return <ErrorBoundary fallbackRender={ModelTraceExplorerErrorState}>{children}</ErrorBoundary>;\n};\n\nexport const ModelTraceExplorerImpl = ({\n  modelTrace: initialModelTrace,\n  className,\n  initialActiveView = 'summary',\n  selectedSpanId,\n  onSelectSpan,\n}: {\n  modelTrace: ModelTrace;\n  className?: string;\n  initialActiveView?: 'summary' | 'detail';\n  selectedSpanId?: string;\n  onSelectSpan?: (selectedSpanId?: string) => void;\n}) => {\n  const [modelTrace, setModelTrace] = useState(initialModelTrace);\n  const [forceDisplay, setForceDisplay] = useState(false);\n  const traceId = getModelTraceId(initialModelTrace);\n  // older traces don't have a size, so we default to 0 to always display them\n  const size = getModelTraceSize(initialModelTrace) ?? 0;\n  // always displayable if the feature flag is disabled\n  const isDisplayable = shouldBlockLargeTraceDisplay() ? size < getLargeTraceDisplaySizeThreshold() : true;\n  const [assessmentsPaneEnabled, setAssessmentsPaneEnabled] = useState(traceId.startsWith('tr-'));\n\n  useGetModelTraceInfoV3({\n    traceId,\n    setModelTrace,\n    setAssessmentsPaneEnabled,\n    enabled: isDisplayable && traceId.startsWith('tr-'),\n  });\n\n  useEffect(() => {\n    setModelTrace(initialModelTrace);\n    // reset the model trace when the traceId changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [traceId]);\n\n  if (!isDisplayable && !forceDisplay) {\n    return <ModelTraceExplorerTraceTooLargeView traceId={traceId} setForceDisplay={setForceDisplay} />;\n  }\n\n  return (\n    <ContextProviders traceId={traceId}>\n      <ModelTraceExplorerViewStateProvider\n        modelTrace={modelTrace}\n        initialActiveView={initialActiveView}\n        selectedSpanIdOnRender={selectedSpanId}\n        assessmentsPaneEnabled={assessmentsPaneEnabled}\n      >\n        <ModelTraceExplorerContent\n          modelTrace={modelTrace}\n          className={className}\n          selectedSpanId={selectedSpanId}\n          onSelectSpan={onSelectSpan}\n        />\n      </ModelTraceExplorerViewStateProvider>\n    </ContextProviders>\n  );\n};\n\nexport const ModelTraceExplorer = ModelTraceExplorerImpl;\n","import type { ReactElement } from 'react';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useClipboard } from 'use-clipboard-copy';\n\nimport { CheckIcon, CopyIcon } from '@databricks/design-system';\nimport { useIntl } from '@databricks/i18n';\n\nexport interface CopyController {\n  actionIcon: ReactElement;\n  tooltipMessage: string;\n  copy: () => void;\n  copied: boolean;\n  ariaLabel: string;\n  tooltipOpen: boolean;\n  handleTooltipOpenChange: (open: boolean) => void;\n}\n\n/**\n * Utility hook that is internal to web-shared, use: `Copyable` or `CopyActionButton`\n *  or if it's a `CodeSnippet`, `SnippetCopyAction`\n */\nexport function useCopyController(text: string, copyTooltip?: string, onCopy?: () => void): CopyController {\n  const intl = useIntl();\n\n  const copyMessage = copyTooltip\n    ? copyTooltip\n    : intl.formatMessage({\n        defaultMessage: 'Copy',\n        description: 'Tooltip message displayed on copy action',\n      });\n\n  const copiedMessage = intl.formatMessage({\n    defaultMessage: 'Copied',\n    description: 'Tooltip message displayed on copy action after it has been clicked',\n  });\n\n  const clipboard = useClipboard();\n  const copiedTimerIdRef = useRef<number>();\n  const [copied, setCopied] = useState(false);\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(copiedTimerIdRef.current);\n    };\n  }, []);\n\n  const copy = () => {\n    clipboard.copy(text);\n    window.clearTimeout(copiedTimerIdRef.current);\n    setCopied(true);\n    onCopy?.();\n    copiedTimerIdRef.current = window.setTimeout(() => {\n      setCopied(false);\n    }, 3000);\n  };\n\n  return {\n    actionIcon: copied ? <CheckIcon /> : <CopyIcon />,\n    tooltipMessage: copied ? copiedMessage : copyMessage,\n    copy,\n    copied,\n    ariaLabel: copyMessage,\n    tooltipOpen: open || copied,\n    handleTooltipOpenChange: setOpen,\n  };\n}\n","/**\n * Adapted from `material-light`\n * Ref: https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/b2457268891948f7005ccf539a70c000f0695bde/src/styles/prism/material-light.js#L1\n *\n * This theme overwrites colors to be similiar to the `@databricks/editor` theme.\n */\n\nconst databricksLightTheme = {\n  'code[class*=\"language-\"]': {\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    wordWrap: 'normal',\n    color: 'rgb(77, 77, 76)', // D\n    background: '#fafafa',\n    fontFamily: 'Monaco, Menlo, Ubuntu Mono, Consolas, source-code-pro, monospace',\n    fontSize: '12px', // D\n    lineHeight: '1.5em',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n  },\n  'pre[class*=\"language-\"]': {\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    wordWrap: 'normal',\n    color: 'rgb(77, 77, 76)', // D\n    background: '#fafafa',\n    fontFamily: 'Monaco, Menlo, Ubuntu Mono, Consolas, source-code-pro, monospace',\n    fontSize: '12px', // D\n    lineHeight: '1.5em',\n    MozTabSize: '4',\n    OTabSize: '4',\n    tabSize: '4',\n    WebkitHyphens: 'none',\n    MozHyphens: 'none',\n    msHyphens: 'none',\n    hyphens: 'none',\n    overflow: 'auto',\n    position: 'relative',\n    margin: '0.5em 0',\n    padding: '1.25em 1em',\n  },\n  'code[class*=\"language-\"]::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"]::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"] ::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"] ::-moz-selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"]::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"]::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'code[class*=\"language-\"] ::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  'pre[class*=\"language-\"] ::selection': {\n    background: '#cceae7',\n    color: '#263238',\n  },\n  ':not(pre) > code[class*=\"language-\"]': {\n    whiteSpace: 'normal',\n    borderRadius: '0.2em',\n    padding: '0.1em',\n  },\n  '.language-css > code': {\n    color: '#f5871f', // D\n  },\n  '.language-sass > code': {\n    color: '#f5871f', // D\n  },\n  '.language-scss > code': {\n    color: '#f5871f', // D\n  },\n  '[class*=\"language-\"] .namespace': {\n    Opacity: '0.7',\n  },\n  atrule: {\n    color: '#7c4dff',\n  },\n  'attr-name': {\n    color: '#39adb5',\n  },\n  'attr-value': {\n    color: '#f6a434',\n  },\n  attribute: {\n    color: '#f6a434',\n  },\n  boolean: {\n    color: '#7c4dff', // D\n  },\n  builtin: {\n    color: '#39adb5',\n  },\n  cdata: {\n    color: '#39adb5',\n  },\n  char: {\n    color: '#39adb5',\n  },\n  class: {\n    color: '#39adb5',\n  },\n  'class-name': {\n    color: '#6182b8',\n  },\n  comment: {\n    color: '#8e908c', // D\n  },\n  constant: {\n    color: '#7c4dff', // D\n  },\n  deleted: {\n    color: '#e53935',\n  },\n  doctype: {\n    color: '#aabfc9',\n  },\n  entity: {\n    color: '#e53935',\n  },\n  function: {\n    color: '#4271ae', // D\n  },\n  hexcode: {\n    color: '#f5871f', // D\n  },\n  id: {\n    color: '#7c4dff',\n    fontWeight: 'bold',\n  },\n  important: {\n    color: '#7c4dff',\n    fontWeight: 'bold',\n  },\n  inserted: {\n    color: '#39adb5',\n  },\n  keyword: {\n    color: '#8959a8', // D\n  },\n  number: {\n    color: '#f5871f', // D\n  },\n  operator: {\n    color: '#3e999f', // D\n  },\n  prolog: {\n    color: '#aabfc9',\n  },\n  property: {\n    color: '#39adb5',\n  },\n  'pseudo-class': {\n    color: '#f6a434',\n  },\n  'pseudo-element': {\n    color: '#f6a434',\n  },\n  punctuation: {\n    color: 'rgb(77, 77, 76)', // D\n  },\n  regex: {\n    color: '#6182b8',\n  },\n  selector: {\n    color: '#e53935',\n  },\n  string: {\n    color: '#3ba85f', // D\n  },\n  symbol: {\n    color: '#7c4dff',\n  },\n  tag: {\n    color: '#e53935',\n  },\n  unit: {\n    color: '#f5871f', // D\n  },\n  url: {\n    color: '#e53935',\n  },\n  variable: {\n    color: '#c72d4c', // D\n  },\n};\n\nexport default databricksLightTheme;\n","import React, { createContext, useContext, type ReactNode, useMemo } from 'react';\n\nimport { parseAssessmentSchemas } from './AssessmentSchemaContext.utils';\nimport type { Assessment } from '../ModelTrace.types';\nimport type { AssessmentFormInputDataType } from '../assessments-pane/AssessmentsPane.utils';\n\nexport type AssessmentSchema = {\n  name: string;\n  assessmentType: 'feedback' | 'expectation';\n  dataType: AssessmentFormInputDataType;\n};\n\ninterface AssessmentSchemaContextValue {\n  schemas: AssessmentSchema[];\n}\n\nconst AssessmentSchemaContext = createContext<AssessmentSchemaContextValue>({\n  schemas: [],\n});\n\ninterface AssessmentSchemaContextProviderProps {\n  children: ReactNode;\n  assessments: Assessment[];\n}\n\nexport const AssessmentSchemaContextProvider: React.FC<AssessmentSchemaContextProviderProps> = ({\n  children,\n  assessments,\n}) => {\n  const schemas = useMemo(() => parseAssessmentSchemas(assessments), [assessments]);\n  const value: AssessmentSchemaContextValue = useMemo(\n    () => ({\n      schemas,\n    }),\n    [schemas],\n  );\n\n  return <AssessmentSchemaContext.Provider value={value}>{children}</AssessmentSchemaContext.Provider>;\n};\n\nexport const useAssessmentSchemas = (): AssessmentSchemaContextValue => {\n  return useContext(AssessmentSchemaContext);\n};\n","import { isNil } from 'lodash';\n\nimport type { AssessmentSchema } from './AssessmentSchemaContext';\nimport type { Assessment } from '../ModelTrace.types';\nimport type { AssessmentFormInputDataType } from '../assessments-pane/AssessmentsPane.utils';\nimport { getAssessmentValue } from '../assessments-pane/utils';\n\n// this function accepts a flat list of assessments (e.g. the result\n// of tracesInfos.flatMap(info => info.assessments)), and returns a\n// list of assessment schemas\nexport const parseAssessmentSchemas = (assessments: Assessment[]): AssessmentSchema[] => {\n  // stores all schemas for which we can determine the data type\n  const schemaMap: { [assessmentName: string]: AssessmentSchema } = {};\n  // stores all schemas with null / undefined values.\n  // after parsing all values, we will merge the two,\n  // keeping the data type from the schemaMap if it exists,\n  // and using `boolean` if it does not.\n  const nullsSchemaMap: { [assessmentName: string]: AssessmentSchema } = {};\n\n  for (const assessment of assessments) {\n    if (schemaMap[assessment.assessment_name]) {\n      continue;\n    }\n\n    // NOTE: the getAssessmentValue function does not parse\n    // serialized JSON, and just returns them as strings.\n    const value = getAssessmentValue(assessment);\n\n    if (isNil(value)) {\n      nullsSchemaMap[assessment.assessment_name] = {\n        name: assessment.assessment_name,\n        assessmentType: 'feedback' in assessment ? 'feedback' : 'expectation',\n        dataType: 'boolean',\n      };\n      continue;\n    }\n\n    const isSerializedExpectation = 'expectation' in assessment && 'serialized_value' in assessment.expectation;\n\n    let dataType: AssessmentFormInputDataType;\n    switch (typeof value) {\n      case 'string':\n        dataType = isSerializedExpectation ? 'json' : 'string';\n        break;\n      case 'boolean':\n        dataType = 'boolean';\n        break;\n      case 'number':\n        dataType = 'number';\n        break;\n      // for unexpected types, just default to boolean\n      default:\n        dataType = 'boolean';\n        break;\n    }\n\n    schemaMap[assessment.assessment_name] = {\n      name: assessment.assessment_name,\n      assessmentType: 'feedback' in assessment ? 'feedback' : 'expectation',\n      dataType,\n    };\n  }\n\n  // combine the two maps, keeping the data type from the schemaMap if it exists,\n  for (const [assessmentName, schema] of Object.entries(nullsSchemaMap)) {\n    if (!(assessmentName in schemaMap)) {\n      schemaMap[assessmentName] = schema;\n    }\n  }\n\n  return Object.values(schemaMap);\n};\n","import {\n  ModelsIcon,\n  ConnectIcon,\n  FileDocumentIcon,\n  useDesignSystemTheme,\n  SortUnsortedIcon,\n  QuestionMarkIcon,\n  CodeIcon,\n  FunctionIcon,\n  NumbersIcon,\n  SearchIcon,\n  WrenchIcon,\n  UserSparkleIcon,\n  ChainIcon,\n  UserIcon,\n  GearIcon,\n  SaveIcon,\n} from '@databricks/design-system';\n\nimport { ModelIconType } from './ModelTrace.types';\n\nexport const ModelTraceExplorerIcon = ({\n  type = ModelIconType.CONNECT,\n  // tooltips have inverted colors so the icon should match it\n  isInTooltip = false,\n  hasException = false,\n  isRootSpan = false,\n}: {\n  type?: ModelIconType;\n  isInTooltip?: boolean;\n  hasException?: boolean;\n  isRootSpan?: boolean;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  // base icon colors depending on span attributes\n  let iconColor: 'ai' | 'danger' | undefined;\n  if (isRootSpan) {\n    iconColor = 'ai';\n  } else if (hasException) {\n    iconColor = 'danger';\n  }\n\n  const iconMap = {\n    [ModelIconType.MODELS]: <ModelsIcon color={iconColor} />,\n    [ModelIconType.DOCUMENT]: <FileDocumentIcon color={iconColor} />,\n    [ModelIconType.CONNECT]: <ConnectIcon color={iconColor} />,\n    [ModelIconType.CODE]: <CodeIcon color={iconColor} />,\n    [ModelIconType.FUNCTION]: <FunctionIcon color={iconColor} />,\n    [ModelIconType.NUMBERS]: <NumbersIcon color={iconColor} />,\n    [ModelIconType.SEARCH]: <SearchIcon color={iconColor} />,\n    [ModelIconType.SORT]: <SortUnsortedIcon color={iconColor} />,\n    [ModelIconType.UNKNOWN]: <QuestionMarkIcon color={iconColor} />,\n    [ModelIconType.WRENCH]: <WrenchIcon color={iconColor} />,\n    [ModelIconType.AGENT]: <UserSparkleIcon color={iconColor} />,\n    [ModelIconType.CHAIN]: <ChainIcon color={iconColor} />,\n    [ModelIconType.USER]: <UserIcon color={iconColor} />,\n    [ModelIconType.SYSTEM]: <GearIcon color={iconColor} />,\n    [ModelIconType.SAVE]: <SaveIcon color={iconColor} />,\n  };\n\n  // custom colors depending on span type\n  // these are not official props on the\n  // icon components, so they must be set\n  // via the `css` prop on the parent\n  let color: string = theme.colors.actionDefaultIconDefault;\n  let tooltipColor: string = theme.colors.actionPrimaryIcon;\n  let backgroundColor: string = theme.colors.backgroundSecondary;\n  switch (type) {\n    case ModelIconType.SEARCH:\n      color = theme.colors.textValidationSuccess;\n      tooltipColor = theme.colors.green500;\n      backgroundColor = theme.isDarkMode ? theme.colors.green800 : theme.colors.green100;\n      break;\n    case ModelIconType.MODELS:\n      color = theme.isDarkMode ? theme.colors.blue500 : theme.colors.turquoise;\n      tooltipColor = theme.isDarkMode ? theme.colors.turquoise : theme.colors.blue500;\n      backgroundColor = theme.isDarkMode ? theme.colors.blue800 : theme.colors.blue100;\n      break;\n    case ModelIconType.WRENCH:\n      color = theme.isDarkMode ? theme.colors.red500 : theme.colors.red700;\n      tooltipColor = theme.isDarkMode ? theme.colors.red700 : theme.colors.red500;\n      backgroundColor = theme.isDarkMode ? theme.colors.red800 : theme.colors.red100;\n      break;\n  }\n\n  return (\n    <div\n      css={{\n        position: 'relative',\n        width: theme.general.iconSize,\n        height: theme.general.iconSize,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: theme.borders.borderRadiusSm,\n        background: isInTooltip ? theme.colors.tooltipBackgroundTooltip : backgroundColor,\n        color: isInTooltip ? tooltipColor : color,\n        svg: { width: theme.general.iconFontSize, height: theme.general.iconFontSize },\n        flexShrink: 0,\n      }}\n    >\n      {hasException && (\n        <div\n          css={{\n            position: 'absolute',\n            top: -theme.spacing.xs,\n            right: -theme.spacing.xs,\n            height: theme.spacing.sm,\n            width: theme.spacing.sm,\n            borderRadius: theme.borders.borderRadiusSm,\n            backgroundColor: theme.colors.actionDangerPrimaryBackgroundDefault,\n            zIndex: 5,\n          }}\n        />\n      )}\n      {iconMap[type]}\n    </div>\n  );\n};\n","import { has, isArray, isNil, isObject, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage, ModelTraceContentParts } from '../ModelTrace.types';\nimport { prettyPrintChatMessage } from '../ModelTraceExplorer.utils';\n\nexport type AnthropicMessagesInput = {\n  messages: AnthropicMessageParam[];\n};\n\nexport type AnthropicMessagesOutput = {\n  id: string;\n  content: AnthropicContentBlock[];\n  role: 'assistant';\n  type: 'message';\n  // model: Model;\n  // stop_reason: StopReason | null;\n  // stop_sequence: string | null;\n  // usage: Usage;\n};\n\ntype AnthropicContentBlock = AnthropicTextBlock | AnthropicToolUseBlock;\n// | ThinkingBlock\n// | RedactedThinkingBlock\n// | ServerToolUseBlock\n// | WebSearchToolResultBlock;\n\ntype AnthropicMessageParam = {\n  content: string | AnthropicContentBlockParam[];\n  role: 'user' | 'assistant';\n};\n\ntype AnthropicContentBlockParam =\n  | AnthropicTextBlockParam\n  | AnthropicImageBlockParam\n  | AnthropicToolUseBlockParam\n  | AnthropicToolResultBlockParam;\n// | DocumentBlockParam\n// | ThinkingBlockParam\n// | RedactedThinkingBlockParam\n// | ServerToolUseBlockParam\n// | WebSearchToolResultBlockParam;\n\ntype AnthropicTextBlockParam = {\n  text: string;\n  type: 'text';\n};\n\ntype AnthropicTextBlock = {\n  text: string;\n  type: 'text';\n};\n\ntype AnthropicImageBlockParam = {\n  source: AnthropicBase64ImageSource | AnthropicURLImageSource;\n  type: 'image';\n};\n\ntype AnthropicBase64ImageSource = {\n  type: 'base64';\n  data: string;\n  media_type: 'image/jpeg' | 'image/png' | 'image/gif' | 'image/webp';\n};\n\ntype AnthropicURLImageSource = {\n  type: 'url';\n  url: string;\n};\n\ntype AnthropicToolUseBlockParam = {\n  id: string;\n  input: Record<string, any>;\n  name: string;\n  type: 'tool_use';\n};\n\ntype AnthropicToolUseBlock = {\n  id: string;\n  input: Record<string, any>;\n  name: string;\n  type: 'tool_use';\n};\n\ntype AnthropicToolResultBlockParam = {\n  content: string;\n  tool_use_id: string;\n  type: 'tool_result';\n};\n\nconst isAnthropicContentBlockParam = (obj: unknown): obj is AnthropicContentBlockParam => {\n  if (isNil(obj)) {\n    return false;\n  }\n\n  if (has(obj, 'type')) {\n    if (obj.type === 'text' && has(obj, 'text') && isString(obj.text)) {\n      return true;\n    }\n\n    if (obj.type === 'image' && has(obj, 'source') && has(obj.source, 'type')) {\n      if (\n        obj.source.type === 'base64' &&\n        has(obj.source, 'media_type') &&\n        isString(obj.source.media_type) &&\n        ['image/jpeg', 'image/png', 'image/gif', 'image/webp'].includes(obj.source.media_type) &&\n        has(obj.source, 'data') &&\n        isString(obj.source.data)\n      ) {\n        return true;\n      }\n\n      if (obj.source.type === 'url' && has(obj.source, 'url') && isString(obj.source.url)) {\n        return true;\n      }\n    }\n\n    if (obj.type === 'tool_use' && has(obj, 'id') && has(obj, 'name') && has(obj, 'input')) {\n      return isString(obj.id) && isString(obj.name) && isObject(obj.input);\n    }\n\n    if (obj.type === 'tool_result' && has(obj, 'tool_use_id') && has(obj, 'content')) {\n      return isString(obj.tool_use_id) && isString(obj.content);\n    }\n  }\n  return false;\n};\n\nconst isAnthropicMessageParam = (obj: unknown): obj is AnthropicMessageParam => {\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  const hasRole = has(obj, 'role') && isString(obj.role) && ['user', 'assistant'].includes(obj.role);\n  const hasContent =\n    'content' in obj &&\n    (isString(obj.content) || (isArray(obj.content) && obj.content.every(isAnthropicContentBlockParam)));\n\n  return hasRole && hasContent;\n};\n\nconst normalizeAnthropicContentBlockParam = (item: AnthropicContentBlockParam): ModelTraceContentParts => {\n  switch (item.type) {\n    case 'text': {\n      return { type: 'text', text: item.text };\n    }\n    case 'image': {\n      switch (item.source.type) {\n        case 'base64': {\n          return {\n            type: 'image_url',\n            image_url: { url: `data:${item.source.media_type};base64,${item.source.data}` },\n          };\n        }\n        case 'url': {\n          return { type: 'image_url', image_url: { url: item.source.url } };\n        }\n      }\n    }\n  }\n  throw new Error(`Unsupported content block type: ${(item as any).type}`);\n};\n\nconst processAnthropicMessageContent = (\n  content: AnthropicContentBlockParam[],\n): {\n  messages: ModelTraceChatMessage[];\n  textParts: ModelTraceContentParts[];\n  toolCalls: any[];\n} => {\n  const messages: ModelTraceChatMessage[] = [];\n  const textParts: ModelTraceContentParts[] = [];\n  const toolCalls: any[] = [];\n\n  for (const item of content) {\n    if (item.type === 'text' || item.type === 'image') {\n      textParts.push(normalizeAnthropicContentBlockParam(item));\n    } else if (item.type === 'tool_use') {\n      toolCalls.push({\n        id: item.id,\n        function: {\n          name: item.name,\n          arguments: JSON.stringify(item.input),\n        },\n      });\n    } else if (item.type === 'tool_result') {\n      messages.push({\n        role: 'tool',\n        tool_call_id: item.tool_use_id,\n        content: item.content,\n      });\n    }\n  }\n\n  return { messages, textParts, toolCalls };\n};\n\nconst processAnthropicMessage = (message: AnthropicMessageParam): ModelTraceChatMessage[] => {\n  const messages: ModelTraceChatMessage[] = [];\n\n  if (typeof message.content === 'string') {\n    const chatMessage = prettyPrintChatMessage({\n      type: 'message',\n      content: message.content,\n      role: message.role,\n    });\n    if (chatMessage) messages.push(chatMessage);\n  } else {\n    const { messages: toolMessages, textParts, toolCalls } = processAnthropicMessageContent(message.content);\n    messages.push(...toolMessages);\n\n    if (textParts.length > 0 || toolCalls.length > 0) {\n      const chatMessage = prettyPrintChatMessage({\n        type: 'message',\n        content: textParts.length > 0 ? textParts : undefined,\n        role: message.role,\n        ...(toolCalls.length > 0 && { tool_calls: toolCalls }),\n      });\n      if (chatMessage) messages.push(chatMessage);\n    }\n  }\n\n  return messages;\n};\n\nexport const normalizeAnthropicChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isObject(obj)) {\n    return null;\n  }\n\n  if ('messages' in obj && isArray(obj.messages) && obj.messages.every(isAnthropicMessageParam)) {\n    const messages: ModelTraceChatMessage[] = [];\n\n    for (const message of obj.messages) {\n      messages.push(...processAnthropicMessage(message));\n    }\n\n    return messages;\n  }\n\n  return null;\n};\n\nexport const normalizeAnthropicChatOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isObject(obj)) {\n    return null;\n  }\n\n  if (has(obj, 'type') && obj.type === 'message' && isAnthropicMessageParam(obj)) {\n    return processAnthropicMessage(obj);\n  }\n\n  return null;\n};\n","import { compact, get, has, isArray, isNil, isObject, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\nimport { prettyPrintChatMessage, prettyPrintToolCall } from '../ModelTraceExplorer.utils';\n\ninterface AutogenFunctionCall {\n  id: string;\n  name: string;\n  arguments: string;\n}\n\ninterface AutogenSystemMessage {\n  source: 'system';\n  content: string;\n}\n\ninterface AutogenUserMessage {\n  source: 'user';\n  content: string | any[];\n}\n\ninterface AutogenAssistantMessage {\n  source: 'assistant';\n  content: string | AutogenFunctionCall[];\n}\n\ninterface AutogenFunctionExecutionResultMessage {\n  source: 'function';\n  content: any;\n}\n\ntype AutogenMessage =\n  | AutogenSystemMessage\n  | AutogenUserMessage\n  | AutogenAssistantMessage\n  | AutogenFunctionExecutionResultMessage;\n\nconst isAutogenFunctionCall = (obj: unknown): obj is AutogenFunctionCall => {\n  return isObject(obj) && isString(get(obj, 'id')) && isString(get(obj, 'name')) && isString(get(obj, 'arguments'));\n};\n\nconst isAutogenMessage = (obj: unknown): obj is AutogenMessage => {\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  // Handle messages with 'type' field (new format)\n  const messageType = get(obj, 'type');\n  if (messageType) {\n    if (messageType === 'SystemMessage') {\n      return isString(get(obj, 'content'));\n    }\n    if (messageType === 'UserMessage') {\n      return has(obj, 'content') && has(obj, 'source');\n    }\n    if (messageType === 'AssistantMessage') {\n      return has(obj, 'content') && has(obj, 'source');\n    }\n    if (messageType === 'FunctionMessage') {\n      return has(obj, 'content') && has(obj, 'source');\n    }\n  }\n\n  // Handle messages with 'source' field (old format)\n  if (has(obj, 'source') && ['system', 'user', 'assistant', 'function'].includes(get(obj, 'source'))) {\n    return has(obj, 'content');\n  }\n\n  return false;\n};\n\nconst convertAssistantMessageToChatMessage = (\n  content: string | AutogenFunctionCall[],\n): ModelTraceChatMessage | null => {\n  if (isString(content)) {\n    return prettyPrintChatMessage({ type: 'message', content, role: 'assistant' });\n  }\n\n  if (isArray(content) && content.every(isAutogenFunctionCall)) {\n    return {\n      role: 'assistant',\n      tool_calls: content.map((f) =>\n        prettyPrintToolCall({\n          id: f.id,\n          function: {\n            name: f.name,\n            arguments: f.arguments,\n          },\n        }),\n      ),\n    };\n  }\n\n  return null;\n};\n\nconst normalizeAutogenMessage = (message: any): ModelTraceChatMessage | null => {\n  // Handle messages with 'type' field (new format)\n  if (message.type === 'SystemMessage') {\n    return prettyPrintChatMessage({ type: 'message', content: message.content, role: 'system' });\n  }\n\n  if (message.type === 'UserMessage') {\n    if (isString(message.content)) {\n      return prettyPrintChatMessage({ type: 'message', content: message.content, role: 'user' });\n    }\n\n    if (isArray(message.content)) {\n      // Handle content that might be an array of text/image parts\n      const textParts = message.content\n        .filter((part: any) => isString(part) || (isObject(part) && (part as any).type === 'text'))\n        .map((part: any) => (isString(part) ? { type: 'text' as const, text: part } : part));\n\n      if (textParts.length > 0) {\n        return prettyPrintChatMessage({ type: 'message', content: textParts, role: 'user' });\n      }\n    }\n  }\n\n  if (message.type === 'AssistantMessage') {\n    return convertAssistantMessageToChatMessage(message.content);\n  }\n\n  if (message.type === 'FunctionMessage') {\n    // Function execution result messages are typically logged as user messages\n    return prettyPrintChatMessage({ type: 'message', content: JSON.stringify(message.content), role: 'user' });\n  }\n\n  // Handle messages with 'source' field (old format)\n  if (message.source === 'system') {\n    return prettyPrintChatMessage({ type: 'message', content: message.content, role: 'system' });\n  }\n\n  if (message.source === 'user') {\n    if (isString(message.content)) {\n      return prettyPrintChatMessage({ type: 'message', content: message.content, role: 'user' });\n    }\n\n    if (isArray(message.content)) {\n      // Handle content that might be an array of text/image parts\n      const textParts = message.content\n        .filter((part: any) => isString(part))\n        .map((part: any) => ({ type: 'text' as const, text: part }));\n\n      if (textParts.length > 0) {\n        return prettyPrintChatMessage({ type: 'message', content: textParts, role: 'user' });\n      }\n    }\n  }\n\n  if (message.source === 'assistant') {\n    return convertAssistantMessageToChatMessage(message.content);\n  }\n\n  if (message.source === 'function') {\n    // Function execution result messages are typically logged as user messages\n    return prettyPrintChatMessage({ type: 'message', content: JSON.stringify(message.content), role: 'user' });\n  }\n\n  return null;\n};\n\nexport const normalizeAutogenChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle case where input is directly an array of messages\n  if (isArray(obj) && obj.length > 0 && obj.every(isAutogenMessage)) {\n    return compact(obj.map(normalizeAutogenMessage));\n  }\n\n  // Handle case where input is wrapped in an object with 'messages' key\n  if (isObject(obj) && 'messages' in obj) {\n    const messages = (obj as any).messages;\n    if (isArray(messages) && messages.length > 0 && messages.every(isAutogenMessage)) {\n      return compact(messages.map(normalizeAutogenMessage));\n    }\n  }\n\n  return null;\n};\n\nexport const normalizeAutogenChatOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle case where output is directly an array of messages\n  if (isArray(obj) && obj.length > 0 && obj.every(isAutogenMessage)) {\n    return compact(obj.map(normalizeAutogenMessage));\n  }\n\n  // Handle case where output is wrapped in an object with 'messages' key\n  if (isObject(obj) && 'content' in obj) {\n    const message = prettyPrintChatMessage({ role: 'assistant', content: obj.content as string, type: 'message' });\n    return message ? [message] : null;\n  }\n\n  return null;\n};\n","import { compact, has, isArray, isNil, isObject, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage, ModelTraceContentParts } from '../ModelTrace.types';\nimport { prettyPrintToolCall } from '../ModelTraceExplorer.utils';\n\ninterface BedrockToolUse {\n  toolUseId: string;\n  name: string;\n  input: string | Record<string, any>;\n}\n\ninterface BedrockToolResult {\n  toolUseId: string;\n  content: BedrockContentBlock[];\n}\n\ninterface BedrockContentBlock {\n  text?: string;\n  json?: any;\n  image?: {\n    source: {\n      bytes: string | Uint8Array;\n    };\n    format: string;\n  };\n  toolUse?: BedrockToolUse;\n  toolResult?: BedrockToolResult;\n}\n\ninterface BedrockMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: BedrockContentBlock[];\n}\n\nconst parseBedrockContent = (content: BedrockContentBlock): ModelTraceContentParts | null => {\n  if (content.text) {\n    return { type: 'text', text: content.text };\n  }\n\n  if (content.json) {\n    return { type: 'text', text: JSON.stringify(content.json) };\n  }\n\n  if (content.image) {\n    const bytes = content.image.source.bytes;\n    const format = content.image.format;\n    let data: string;\n\n    if (typeof bytes === 'string') {\n      data = bytes;\n    } else {\n      // Convert Uint8Array to base64 string\n      const buffer = Buffer.from(bytes);\n      data = buffer.toString('base64');\n    }\n\n    const imageFormat = `image/${format}`;\n    return {\n      type: 'image_url',\n      image_url: { url: `data:${imageFormat};base64,${data}` },\n    };\n  }\n\n  // Unsupported content types (video, document) are ignored\n  return null;\n};\n\nconst convertBedrockMessageToChatMessage = (message: BedrockMessage): ModelTraceChatMessage => {\n  let role: 'user' | 'assistant' | 'system' | 'tool' = message.role;\n  const contents: ModelTraceContentParts[] = [];\n  const toolCalls: any[] = [];\n  let toolCallId: string | undefined;\n\n  for (const content of message.content) {\n    if (content.toolUse) {\n      const toolCall = content.toolUse;\n      const input = typeof toolCall.input === 'string' ? toolCall.input : JSON.stringify(toolCall.input);\n\n      toolCalls.push(\n        prettyPrintToolCall({\n          id: toolCall.toolUseId,\n          function: {\n            name: toolCall.name,\n            arguments: input,\n          },\n        }),\n      );\n    } else if (content.toolResult) {\n      toolCallId = content.toolResult.toolUseId;\n      role = 'tool';\n\n      for (const resultContent of content.toolResult.content) {\n        const parsedContent = parseBedrockContent(resultContent);\n        if (parsedContent) {\n          contents.push(parsedContent);\n        }\n      }\n    } else {\n      const parsedContent = parseBedrockContent(content);\n      if (parsedContent) {\n        contents.push(parsedContent);\n      }\n    }\n  }\n\n  // Convert content parts to string\n  let contentString = '';\n  if (contents.length > 0) {\n    contentString = contents\n      .map((part) => {\n        if (part.type === 'text') {\n          return part.text;\n        } else if (part.type === 'image_url') {\n          return `[Image: ${part.image_url.url}]`;\n        }\n        return '';\n      })\n      .filter((text) => text.length > 0)\n      .join(' ');\n  }\n\n  const chatMessage: ModelTraceChatMessage = {\n    role: role,\n    content: contentString,\n  };\n\n  if (toolCalls.length > 0) {\n    chatMessage.tool_calls = toolCalls;\n  }\n\n  if (toolCallId) {\n    chatMessage.tool_call_id = toolCallId;\n  }\n\n  return chatMessage;\n};\n\nconst isBedrockMessage = (obj: unknown): obj is BedrockMessage => {\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  const hasRole = has(obj, 'role') && isString(obj.role) && ['user', 'assistant', 'system'].includes(obj.role);\n  const hasContent = has(obj, 'content') && isArray(obj.content);\n\n  return hasRole && hasContent;\n};\n\nexport const normalizeBedrockChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle case where input has 'messages' key\n  if (isObject(obj) && 'messages' in obj) {\n    const messages = (obj as any).messages;\n    if (isArray(messages) && messages.length > 0 && messages.every(isBedrockMessage)) {\n      return compact(messages.map(convertBedrockMessageToChatMessage));\n    }\n  }\n\n  return null;\n};\n\nexport const normalizeBedrockChatOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle case where output has 'output' -> 'message' structure\n  if (isObject(obj) && 'output' in obj) {\n    const output = (obj as any).output;\n    if (isObject(output) && 'message' in output) {\n      const message = output.message;\n      if (isBedrockMessage(message)) {\n        return [convertBedrockMessageToChatMessage(message)];\n      }\n    }\n  }\n\n  return null;\n};\n","import { compact, has, isArray, isObject, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\nimport { prettyPrintChatMessage } from '../ModelTraceExplorer.utils';\n\nexport type GeminiChatInput = {\n  contents: string | GeminiContent[];\n};\n\nexport type GeminiChatOutput = {\n  candidates: GeminiCandidate[];\n  // propmtFeedback: GeminiPropmptFeedback;\n  // usageMetadata: GeminiUsageMetadata;\n  modelVersion: string;\n  responseId: string;\n};\n\ntype GeminiCandidate = {\n  content: GeminiContent;\n  finishReason:\n    | 'FINISH_REASON_UNSPECIFIED'\n    | 'STOP'\n    | 'MAX_TOKENS'\n    | 'SAFETY'\n    | 'RECITATION'\n    | 'LANGUAGE'\n    | 'OTHER'\n    | 'BLOCKLIST'\n    | 'PROHIBITED_CONTENT'\n    | 'SPII'\n    | 'MALFORMED_FUNCTION_CAL'\n    | 'IMAGE_SAFETY'\n    | 'UNEXPECTED_TOOL_CAL';\n  // safetyRatings: GeminiSafetyRating[]\n  // citationMetadata: GeminiCitationMetadata\n  // tokenCount: number\n  // groundingAttributions: GeminiGroundingAttribution[]\n  // groundingMetadata: GeminiGroundingMetadata\n  // avgLogprobs: number\n  // logprobsResult: GeminiLogprobsResult\n  // urlContextMetadata: GeminiUrlContextMetadata\n  // index: number\n};\n\ntype GeminiContent = {\n  role: 'user' | 'model';\n  parts: GeminiContentPart[];\n};\n\ntype GeminiContentPart = { text: string };\n// | { inlineData: GeminiBlob }\n// | { functionCall: GeminiFunctionCall }\n// | { functionResponse: GeminiFunctionResponse }\n// | { fileData: GeminiFileData }\n// | { executableCode: GeminiExecutableCode }\n// | { codeExecutionResult: GeminiCodeExecutionResult };\n\n// type GeminiBlob = {\n//   mimeType: string;\n//   data: string;\n// };\n\n// type GeminiFunctionCall = {\n//   id: string;\n//   name: string;\n//   args: Record<string, string>;\n// };\n\n// type GeminiFunctionResponse = {\n//   id: string;\n//   name: string;\n//   response: Record<string, string>;\n//   willContinue: boolean;\n//   scheduling: 'SCHEDULING_UNSPECIFIED' | 'SILENT' | 'WHEN_IDLE' | 'INTERRUPT';\n// };\n\n// type GeminiFileData = {\n//   mimeType: string;\n//   fileUri: string;\n// };\n\n// type GeminiExecutableCode = {\n//   language: 'LANGUAGE_UNSPECIFIED' | 'PYTHON';\n//   code: string;\n// };\n\n// type GeminiCodeExecutionResult = {\n//   outcome: 'OUTCOME_UNSPECIFIED' | 'OUTCOME_OK' | 'OUTCOME_FAILED' | 'OUTCOME_DEADLINE_EXCEEDED';\n//   output: string;\n// };\n\nconst isGeminiContentPart = (obj: unknown): obj is GeminiContentPart => {\n  return isObject(obj) && 'text' in obj && isString(obj.text);\n};\n\nconst isGeminiContent = (obj: unknown): obj is GeminiContent => {\n  return (\n    isObject(obj) &&\n    'role' in obj &&\n    isString(obj.role) &&\n    ['user', 'model'].includes(obj.role) &&\n    has(obj, 'parts') &&\n    Array.isArray(obj.parts) &&\n    obj.parts.every(isGeminiContentPart)\n  );\n};\n\nconst isGeminiCandidate = (obj: unknown): obj is GeminiCandidate => {\n  return isObject(obj) && 'content' in obj && isGeminiContent(obj.content);\n};\n\nexport const normalizeGeminiChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isObject(obj)) {\n    return null;\n  }\n\n  if ('contents' in obj) {\n    if (isString(obj.contents)) {\n      const message = prettyPrintChatMessage({ type: 'message', content: obj.contents, role: 'user' });\n      return message && [message];\n    }\n\n    if (isArray(obj.contents) && obj.contents.every(isGeminiContent)) {\n      return compact(\n        obj.contents.map((item) => {\n          const role = item.role === 'model' ? 'assistant' : item.role;\n          return prettyPrintChatMessage({\n            type: 'message',\n            content: item.parts.map((part) => ({ type: 'text', text: part.text })),\n            role,\n          });\n        }),\n      );\n    }\n  }\n\n  return null;\n};\n\nexport const normalizeGeminiChatOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isObject(obj)) {\n    return null;\n  }\n\n  if ('candidates' in obj && isArray(obj.candidates) && obj.candidates.every(isGeminiCandidate)) {\n    return compact(\n      obj.candidates\n        .flatMap((item) => item.content)\n        .map((item) => {\n          const role = item.role === 'model' ? 'assistant' : item.role;\n          return prettyPrintChatMessage({\n            type: 'message',\n            content: item.parts.map((part) => ({ type: 'text', text: part.text })),\n            role,\n          });\n        }),\n    );\n  }\n\n  return null;\n};\n","import { compact, get, has, isArray, isNil, isObject, isString } from 'lodash';\n\nimport type {\n  OpenAIResponsesInput,\n  OpenAIResponsesInputFile,\n  OpenAIResponsesInputImage,\n  OpenAIResponsesInputMessage,\n  OpenAIResponsesInputMessageRole,\n  OpenAIResponsesInputText,\n  OpenAIResponsesOutputItem,\n} from './openai.types';\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\nimport {\n  isModelTraceChatResponse,\n  isModelTraceChoices,\n  isRawModelTraceChatMessage,\n  prettyPrintChatMessage,\n  prettyPrintToolCall,\n} from '../ModelTraceExplorer.utils';\n\n// normalize the OpenAI chat input format (object with 'messages' or 'input' key)\nexport const normalizeOpenAIChatInput = (obj: any): ModelTraceChatMessage[] | null => {\n  if (!obj) {\n    return null;\n  }\n\n  const messages = obj.messages ?? obj.input;\n  if (!Array.isArray(messages) || messages.length === 0 || !messages.every(isRawModelTraceChatMessage)) {\n    return null;\n  }\n\n  return compact(messages.map(prettyPrintChatMessage));\n};\n\n// normalize the OpenAI chat response format (object with 'choices' key)\nexport const normalizeOpenAIChatResponse = (obj: any): ModelTraceChatMessage[] | null => {\n  if (isModelTraceChoices(obj)) {\n    return obj.map((choice) => ({\n      ...choice.message,\n      tool_calls: choice.message.tool_calls?.map(prettyPrintToolCall),\n    }));\n  }\n\n  if (!isModelTraceChatResponse(obj)) {\n    return null;\n  }\n\n  return obj.choices.map((choice) => ({\n    ...choice.message,\n    tool_calls: choice.message.tool_calls?.map(prettyPrintToolCall),\n  }));\n};\n\nconst isOpenAIResponsesInputMessage = (obj: unknown): obj is OpenAIResponsesInputMessage => {\n  if (has(obj, 'role') && has(obj, 'content') && ['user', 'assistant', 'system', 'developer'].includes(obj.role)) {\n    return (\n      isString(obj.content) ||\n      (isArray(obj.content) &&\n        obj.content.every(\n          (item: unknown) => has(item, 'type') && ['input_text', 'input_image', 'input_file'].includes(item.type),\n        ))\n    );\n  }\n\n  return false;\n};\n\nexport const isOpenAIResponsesInput = (obj: unknown): obj is OpenAIResponsesInput => {\n  return isString(obj) || isOpenAIResponsesInputMessage(obj);\n};\n\nexport const isOpenAIResponsesOutputItem = (obj: unknown): obj is OpenAIResponsesOutputItem => {\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  if (get(obj, 'type') === 'message') {\n    return isRawModelTraceChatMessage(obj);\n  }\n\n  if (get(obj, 'type') === 'function_call') {\n    return isString(get(obj, 'call_id')) && isString(get(obj, 'name')) && isString(get(obj, 'arguments'));\n  }\n\n  if (get(obj, 'type') === 'function_call_output') {\n    return isString(get(obj, 'call_id')) && isString(get(obj, 'output'));\n  }\n\n  if (get(obj, 'type') === 'image_generation_call') {\n    const outputFormat = get(obj, 'output_format');\n    return isString(get(obj, 'result')) && isString(outputFormat) && ['png', 'jpeg', 'webp'].includes(outputFormat);\n  }\n\n  if (get(obj, 'type') === 'reasoning') {\n    return has(obj, 'id') && isArray(get(obj, 'summary'));\n  }\n\n  return false;\n};\n\nconst normalizeOpenAIResponsesInputItem = (\n  obj: OpenAIResponsesInputText | OpenAIResponsesInputFile | OpenAIResponsesInputImage,\n  role: OpenAIResponsesInputMessageRole,\n): ModelTraceChatMessage | null => {\n  const text = get(obj, 'text');\n  if (get(obj, 'type') === 'input_text' && isString(text)) {\n    return prettyPrintChatMessage({\n      type: 'message',\n      content: [{ type: 'text', text }],\n      role: role,\n    });\n  }\n\n  const imageUrl = get(obj, 'image_url');\n  if (get(obj, 'type') === 'input_image' && isString(imageUrl)) {\n    return prettyPrintChatMessage({\n      type: 'message',\n      content: [{ type: 'image_url', image_url: { url: imageUrl } }],\n      role: role,\n    });\n  }\n\n  // TODO: file input not supported yet\n  // if ('type' in obj && obj.type === 'input_file') {\n  //   return prettyPrintChatMessage({ type: 'message', content: obj.file_url, role: role });\n  // }\n\n  return null;\n};\n\nconst normalizeOpenAIResponsesInputMessage = (obj: OpenAIResponsesInputMessage): ModelTraceChatMessage[] | null => {\n  if (isString(obj.content)) {\n    const message = prettyPrintChatMessage({ type: 'message', content: obj.content, role: obj.role });\n    return message && [message];\n  } else {\n    return obj.content.map((item) => normalizeOpenAIResponsesInputItem(item, obj.role)).filter((item) => item !== null);\n  }\n};\n\nexport const normalizeOpenAIResponsesInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  const input: unknown = get(obj, 'input');\n\n  if (isString(input)) {\n    const message = prettyPrintChatMessage({ type: 'message', content: input, role: 'user' });\n    return message && [message];\n  }\n\n  if (isArray(input) && input.every(isOpenAIResponsesInputMessage)) {\n    return compact(input.flatMap(normalizeOpenAIResponsesInputMessage));\n  }\n\n  return null;\n};\n\nexport const normalizeOpenAIResponsesOutputItem = (obj: OpenAIResponsesOutputItem): ModelTraceChatMessage | null => {\n  if (obj.type === 'message') {\n    return prettyPrintChatMessage(obj);\n  }\n\n  if (obj.type === 'function_call') {\n    return {\n      role: 'assistant',\n      tool_calls: [\n        prettyPrintToolCall({\n          id: obj.call_id,\n          function: {\n            arguments: obj.arguments,\n            name: obj.name,\n          },\n        }),\n      ],\n    };\n  }\n\n  if (obj.type === 'function_call_output') {\n    return {\n      role: 'tool',\n      tool_call_id: obj.call_id,\n      content: obj.output,\n    };\n  }\n\n  if (obj.type === 'image_generation_call') {\n    return prettyPrintChatMessage({\n      type: 'message',\n      content: [{ type: 'image_url', image_url: { url: `data:image/${obj.output_format};base64,${obj.result}` } }],\n      role: 'tool',\n    });\n  }\n\n  if (obj.type === 'reasoning') {\n    // Skip reasoning entries as they don't translate to chat messages\n    return null;\n  }\n\n  return null;\n};\n\nexport const normalizeOpenAIResponsesOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  const output: unknown = get(obj, 'output');\n\n  // list of output items\n  if (isArray(output) && output.length > 0 && output.every(isOpenAIResponsesOutputItem)) {\n    return compact(output.map(normalizeOpenAIResponsesOutputItem).filter(Boolean));\n  }\n\n  // list of output chunks\n  if (\n    isArray(output) &&\n    output.length > 0 &&\n    output.every((chunk) => chunk.type === 'response.output_item.done' && isOpenAIResponsesOutputItem(chunk.item))\n  ) {\n    return compact(output.map((chunk) => normalizeOpenAIResponsesOutputItem(chunk.item)));\n  }\n\n  return null;\n};\n\n// New functions for OpenAI agent chat pattern\n\nconst isOpenAIAgentMessage = (obj: unknown): boolean => {\n  if (!isObject(obj)) {\n    return false;\n  }\n\n  // Check for regular message format (with optional id, status, type fields)\n  if (has(obj, 'role') && has(obj, 'content') && ['user', 'assistant', 'system', 'tool'].includes(obj.role)) {\n    return true;\n  }\n\n  // Check for function call format (with optional id, status fields)\n  if (get(obj, 'type') === 'function_call') {\n    return isString(get(obj, 'call_id')) && isString(get(obj, 'name')) && isString(get(obj, 'arguments'));\n  }\n\n  // Check for function call output format\n  if (get(obj, 'type') === 'function_call_output') {\n    return isString(get(obj, 'call_id')) && isString(get(obj, 'output'));\n  }\n\n  return false;\n};\n\nconst normalizeOpenAIAgentMessage = (obj: any): ModelTraceChatMessage | null => {\n  // Handle regular message format\n  if (has(obj, 'role') && has(obj, 'content')) {\n    // Handle content that might be an array with output_text objects\n    if (isArray(obj.content)) {\n      const textContent = obj.content\n        .filter((item: any) => item.type === 'output_text' && isString(item.text))\n        .map((item: any) => item.text)\n        .join(' ');\n\n      if (textContent) {\n        return prettyPrintChatMessage({\n          ...obj,\n          content: textContent,\n        });\n      }\n    }\n\n    // Fall back to regular prettyPrintChatMessage for string content\n    return prettyPrintChatMessage(obj);\n  }\n\n  // Handle function call format\n  if (get(obj, 'type') === 'function_call') {\n    const callId = get(obj, 'call_id');\n    const arguments_ = get(obj, 'arguments');\n    const name = get(obj, 'name');\n\n    if (isString(callId) && isString(arguments_) && isString(name)) {\n      return {\n        role: 'assistant',\n        tool_calls: [\n          prettyPrintToolCall({\n            id: callId,\n            function: {\n              arguments: arguments_,\n              name: name,\n            },\n          }),\n        ],\n      };\n    }\n  }\n\n  // Handle function call output format\n  if (get(obj, 'type') === 'function_call_output') {\n    const callId = get(obj, 'call_id');\n    const output = get(obj, 'output');\n\n    if (isString(callId) && isString(output)) {\n      return {\n        role: 'tool',\n        tool_call_id: callId,\n        content: output,\n      };\n    }\n  }\n\n  return null;\n};\n\nexport const normalizeOpenAIAgentInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle array of messages directly\n  if (isArray(obj) && obj.length > 0 && obj.every(isOpenAIAgentMessage)) {\n    return compact(obj.map(normalizeOpenAIAgentMessage));\n  }\n\n  return null;\n};\n\nexport const normalizeOpenAIAgentOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (isNil(obj)) {\n    return null;\n  }\n\n  // Handle array of messages directly\n  if (isArray(obj) && obj.length > 0 && obj.every(isOpenAIAgentMessage)) {\n    return compact(obj.map(normalizeOpenAIAgentMessage));\n  }\n\n  return null;\n};\n","import { compact, has, isNil, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage, ModelTraceToolCall } from '../ModelTrace.types';\nimport { isModelTraceToolCall, prettyPrintToolCall } from '../ModelTraceExplorer.utils';\n\ntype LangchainContentPart = {\n  type: 'text' | 'image_url';\n  text?: string;\n  image_url?: {\n    url: string;\n  };\n};\n\n// it has other fields, but we only care about these for now\nexport type LangchainBaseMessage = {\n  content?: string | LangchainContentPart[];\n  type: 'human' | 'user' | 'assistant' | 'ai' | 'system' | 'tool' | 'function';\n  tool_calls?: LangchainToolCallMessage[];\n  tool_call_id?: string;\n  additional_kwargs?: {\n    // some langchain models have tool_calls specified in additional_kwargs in\n    // OpenAI format. this appears to be a bug, but we should still try to handle it\n    tool_calls?: ModelTraceToolCall[];\n  };\n};\n\nexport type LangchainToolCallMessage = {\n  name: string;\n  // an object with the arguments to the tool call.\n  // should be stringified before display.\n  args: any;\n  id: string;\n};\n\nexport type LangchainChatGeneration = {\n  message: LangchainBaseMessage;\n};\n\nexport const langchainMessageToModelTraceMessage = (message: LangchainBaseMessage): ModelTraceChatMessage | null => {\n  let role: ModelTraceChatMessage['role'];\n  switch (message.type) {\n    case 'user':\n    case 'human':\n      role = 'user';\n      break;\n    case 'assistant':\n    case 'ai':\n      role = 'assistant';\n      break;\n    case 'system':\n      role = 'system';\n      break;\n    case 'tool':\n      role = 'tool';\n      break;\n    case 'function':\n      role = 'function';\n      break;\n    default:\n      return null;\n  }\n\n  // Handle content that could be a string or an array of content parts\n  let content: string | undefined;\n  if (isString(message.content)) {\n    content = message.content;\n  } else if (Array.isArray(message.content)) {\n    // Convert array of content parts to string representation\n    const contentParts = message.content\n      .map((part: any) => {\n        if (isString(part)) {\n          return part;\n        } else if (part.type === 'text' && part.text) {\n          return part.text;\n        } else if (part.type === 'image_url' && part.image_url?.url) {\n          // Convert to markdown image format with spacing\n          return `![](${part.image_url.url})`;\n        }\n        return '';\n      })\n      .filter(Boolean);\n\n    // Join with double line breaks for better visual separation\n    content = contentParts.join('\\n\\n');\n  } else {\n    content = undefined;\n  }\n\n  const normalizedMessage: ModelTraceChatMessage = {\n    content,\n    role,\n  };\n\n  const toolCalls = message.tool_calls;\n  const toolCallsFromKwargs = message.additional_kwargs?.tool_calls;\n\n  // attempt to parse tool calls from the top-level field,\n  // otherwise fall back to the additional_kwargs field if it exists\n  if (\n    !isNil(toolCalls) &&\n    Array.isArray(toolCalls) &&\n    toolCalls.length > 0 &&\n    toolCalls.every(isLangchainToolCallMessage)\n  ) {\n    // compact for typing. the coercion should not fail since we\n    // check that the type is correct in the if condition above\n    normalizedMessage.tool_calls = compact(toolCalls.map(normalizeLangchainToolCall));\n  } else if (\n    !isNil(toolCallsFromKwargs) &&\n    Array.isArray(toolCallsFromKwargs) &&\n    toolCallsFromKwargs.length > 0 &&\n    toolCallsFromKwargs.every(isModelTraceToolCall)\n  ) {\n    normalizedMessage.tool_calls = toolCallsFromKwargs.map(prettyPrintToolCall);\n  }\n\n  if (!isNil(message.tool_call_id)) {\n    normalizedMessage.tool_call_id = message.tool_call_id;\n  }\n\n  return normalizedMessage;\n};\n\nexport const normalizeLangchainToolCall = (toolCall: LangchainToolCallMessage): ModelTraceToolCall | null => {\n  return {\n    id: toolCall.id,\n    function: {\n      arguments: JSON.stringify(toolCall.args, null, 2),\n      name: toolCall.name,\n    },\n  };\n};\n\nexport const isLangchainBaseMessage = (obj: any): obj is LangchainBaseMessage => {\n  if (!obj) {\n    return false;\n  }\n\n  // content can be undefined/null, string, or array of content parts\n  if (!isNil(obj.content) && !isString(obj.content) && !Array.isArray(obj.content)) {\n    return false;\n  }\n\n  // tool call validation is handled by the normalization function\n  return ['human', 'user', 'assistant', 'ai', 'system', 'tool', 'function'].includes(obj.type);\n};\n\nexport const isLangchainToolCallMessage = (obj: any): obj is LangchainToolCallMessage => {\n  return obj && isString(obj.name) && has(obj, 'args') && isString(obj.id);\n};\n\nexport const isLangchainChatGeneration = (obj: any): obj is LangchainChatGeneration => {\n  return obj && isLangchainBaseMessage(obj.message);\n};\n\n// normalize langchain chat input format\nexport const normalizeLangchainChatInput = (obj: any): ModelTraceChatMessage[] | null => {\n  // it could be a list of list of messages\n  if (\n    Array.isArray(obj) &&\n    obj.length === 1 &&\n    Array.isArray(obj[0]) &&\n    obj[0].length > 0 &&\n    obj[0].every(isLangchainBaseMessage)\n  ) {\n    const messages = obj[0].map(langchainMessageToModelTraceMessage);\n    // if we couldn't convert all the messages, then consider the input invalid\n    if (messages.some((message) => message === null)) {\n      return null;\n    }\n\n    return messages as ModelTraceChatMessage[];\n  }\n\n  // it could also be an object with the `messages` key\n  if (Array.isArray(obj?.messages) && obj.messages.length > 0 && obj.messages.every(isLangchainBaseMessage)) {\n    const messages = obj.messages.map(langchainMessageToModelTraceMessage);\n\n    if (messages.some((message: ModelTraceChatMessage[] | null) => message === null)) {\n      return null;\n    }\n\n    return messages as ModelTraceChatMessage[];\n  }\n\n  // it could also just be a plain array that is in the correct format\n  if (Array.isArray(obj) && obj.length > 0 && obj.every(isLangchainBaseMessage)) {\n    const messages = obj.map(langchainMessageToModelTraceMessage);\n\n    if (messages.some((message) => message === null)) {\n      return null;\n    }\n\n    return messages as ModelTraceChatMessage[];\n  }\n\n  return null;\n};\n\nconst isLangchainChatGenerations = (obj: any): obj is LangchainChatGeneration[][] => {\n  if (!Array.isArray(obj) || obj.length < 1) {\n    return false;\n  }\n\n  if (!Array.isArray(obj[0]) || obj[0].length < 1) {\n    return false;\n  }\n\n  // langchain chat generations are a list of lists of messages\n  return obj[0].every(isLangchainChatGeneration);\n};\n\nconst getMessagesFromLangchainChatGenerations = (\n  generations: LangchainChatGeneration[],\n): ModelTraceChatMessage[] | null => {\n  const messages = generations.map((generation: LangchainChatGeneration) =>\n    langchainMessageToModelTraceMessage(generation.message),\n  );\n\n  if (messages.some((message) => message === null)) {\n    return null;\n  }\n\n  return messages as ModelTraceChatMessage[];\n};\n\n// detect if an object is a langchain ChatResult, and normalize it to a list of messages\nexport const normalizeLangchainChatResult = (obj: any): ModelTraceChatMessage[] | null => {\n  if (isLangchainChatGenerations(obj)) {\n    return getMessagesFromLangchainChatGenerations(obj[0]);\n  }\n\n  if (\n    !Array.isArray(obj?.generations) ||\n    !(obj.generations.length > 0) ||\n    !obj.generations[0].every(isLangchainChatGeneration)\n  ) {\n    return null;\n  }\n\n  return getMessagesFromLangchainChatGenerations(obj.generations[0]);\n};\n","import { compact, get, isArray, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\nimport { prettyPrintChatMessage } from '../ModelTraceExplorer.utils';\n\nexport type LlamaIndexChatResponse = {\n  message: LlamaIndexChatMessage;\n};\n\ntype LlamaIndexChatMessage = {\n  role: 'assistant' | 'system' | 'user';\n  blocks: LlamaIndexChatMessageBlock[];\n};\n\ntype LlamaIndexChatMessageBlock = {\n  block_type: 'text';\n  text: 'string';\n};\n\nexport type LlamaIndexChatInput = {\n  messages: LlamaIndexChatMessage[];\n};\n\nconst isLlamaIndexChatMessageBlock = (obj: unknown): obj is LlamaIndexChatMessageBlock => {\n  const text = get(obj, 'text');\n  return get(obj, 'block_type') === 'text' && isString(text);\n};\n\nconst isLlamaIndexChatMessage = (message: unknown): message is LlamaIndexChatMessage => {\n  const blocks: unknown = get(message, 'blocks');\n  const role: unknown = get(message, 'role');\n  return (\n    isString(role) &&\n    ['assistant', 'system', 'user'].includes(role) &&\n    isArray(blocks) &&\n    blocks.every(isLlamaIndexChatMessageBlock)\n  );\n};\n\nconst isLlamaIndexChatResponse = (obj: unknown): obj is LlamaIndexChatResponse => {\n  return isLlamaIndexChatMessage(get(obj, 'message'));\n};\n\nconst isLlamaIndexChatInput = (obj: unknown): obj is LlamaIndexChatInput => {\n  const messages: unknown = get(obj, 'messages');\n  return isArray(messages) && messages.every(isLlamaIndexChatMessage);\n};\n\nconst prettyPrintMessage = (message: LlamaIndexChatMessage) => {\n  return prettyPrintChatMessage({\n    role: message.role,\n    content: message.blocks.map((block) => ({ type: 'text', text: block.text })),\n  });\n};\n\nexport const normalizeLlamaIndexChatResponse = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isLlamaIndexChatResponse(obj)) {\n    return null;\n  }\n\n  const message = prettyPrintMessage(obj.message);\n  return message && [message];\n};\n\nexport const normalizeLlamaIndexChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  if (!isLlamaIndexChatInput(obj)) {\n    return null;\n  }\n\n  return compact(obj.messages.map(prettyPrintMessage));\n};\n","import { has, isArray, isString } from 'lodash';\n\nimport type { ModelTraceChatMessage } from '../ModelTrace.types';\nimport { prettyPrintChatMessage } from '../ModelTraceExplorer.utils';\n\nexport const normalizeDspyChatInput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  // Handle DSPy format with messages array\n  if (has(obj, 'messages') && isArray((obj as any).messages)) {\n    const messages = (obj as any).messages;\n    return messages\n      .map((msg: any) => prettyPrintChatMessage({ type: 'message', content: msg.content, role: msg.role }))\n      .filter(Boolean);\n  }\n\n  return null;\n};\n\nexport const normalizeDspyChatOutput = (obj: unknown): ModelTraceChatMessage[] | null => {\n  // Handle DSPy format with array output\n  if (isArray(obj) && obj.length > 0 && obj.every(isString)) {\n    // Join all output strings into one assistant message\n    const content = obj.join('\\n');\n    const message = prettyPrintChatMessage({ type: 'message', content, role: 'assistant' });\n    return message && [message];\n  }\n\n  return null;\n};\n"],"names":["getAssessmentValue","assessment","feedback","value","expectation","serialized_value","fontFamily","fontSize","lineHeight","direction","textAlign","whiteSpace","wordSpacing","wordBreak","MozTabSize","OTabSize","tabSize","WebkitHyphens","MozHyphens","msHyphens","hyphens","background","color","padding","margin","overflow","textShadow","borderRadius","comment","prolog","doctype","cdata","punctuation","namespace","Opacity","tag","operator","number","property","function","selector","boolean","string","entity","cursor","url","keyword","control","directive","unit","statement","regex","atrule","placeholder","variable","deleted","textDecoration","inserted","borderBottom","italic","fontStyle","important","fontWeight","bold","Outline","OutlineOffset","borderRightColor","_ref","name","styles","_ref2","SingleExpectationValuePreview","objectKey","theme","useDesignSystemTheme","displayValue","isString","JSON","stringify","_jsx","Tooltip","content","componentId","children","Tag","css","_jsxs","Typography","Text","_css","marginRight","spacing","xs","ExpectationValuePreview","parsedValue","singleLine","isNil","Array","isArray","display","flexDirection","gap","sm","map","item","index","isObject","Object","entries","key","ModelTraceExplorerSkeleton","label","colors","border","TitleSkeleton","legacyBorders","borderRadiusMd","flex","borderRight","TableSkeleton","lines","md","overflowY","getUser","_ref3","forwardRef","initialRatio","paneWidth","setPaneWidth","leftChild","leftMinWidth","rightChild","rightMinWidth","ref","_useResizeObserver","isResizing","setIsResizing","useState","containerRef","useRef","containerWidth","useResizeObserver","width","maxWidth","Infinity","ratio","updateRatio","useCallback","newPaneWidth","current","useImperativeHandle","useLayoutEffect","clamp","Global","ResizableBox","axis","handle","position","marginLeft","minHeight","backgroundColor","zIndex","onResize","e","size","clampedSize","onResizeStart","onResizeStop","minConstraints","maxConstraints","ModelTraceExplorerSearchBox","searchFilter","setSearchFilter","matchData","handleNextSearchMatch","handlePreviousSearchMatch","searchValue","setSearchValue","debouncedSetSearchFilter","useDebouncedCallback","justifyContent","Input","allowClear","onClear","onChange","target","toLowerCase","prefix","SearchIcon","match","alignItems","currentMatchIndex","totalMatches","Button","icon","ChevronUpIcon","onClick","ChevronDownIcon","DEFAULT_EXPAND_DEPTH","TimelineTreeZIndex","getTimelineTreeNodesList","nodes","expandedNodesFlat","traverseExpanded","traversedNode","_traversedNode$childr2","push","forEach","getTimelineTreeNodesMap","expandDepth","nodesMap","traverse","depth","_traversedNode$childr3","child","spanTimeFormatter","executionTimeUs","toFixed","getActiveChildIndex","node","activeNodeId","_node$children","findIndex","getModelTraceSpanNodeDepth","_node$children2","length","childDepths","Math","max","ModelTraceExplorerViewStateContext","createContext","rootNode","nodeMap","activeView","setActiveView","selectedNode","undefined","setSelectedNode","activeTab","setActiveTab","showTimelineTreeGantt","setShowTimelineTreeGantt","assessmentsPaneExpanded","setAssessmentsPaneExpanded","assessmentsPaneEnabled","useModelTraceExplorerViewState","useContext","ModelTraceExplorerViewStateProvider","modelTrace","initialActiveView","selectedSpanIdOnRender","_defaultSelectedNode$","_defaultSelectedNode$2","useMemo","parseModelTraceToTree","selectedSpanOnRender","searchTreeBySpanId","defaultSelectedNode","hasAssessments","assessments","chatMessages","Provider","getTabForMatch","section","useModelTraceSearch","treeNode","setExpandedKeys","modelTraceInfo","_matches$activeMatchI","spanFilterState","setSpanFilterState","spanTypeDisplayState","compact","type","spanType","showParents","showExceptions","getDefaultSpanFilterState","activeMatchIndex","setActiveMatchIndex","filteredTreeNodes","matches","searchTree","selectMatch","newMatchIndex","span","parents","getSpanNodeParentIds","Set","currentNode","parentId","add","expandedKeys","_selectedNode$key","selectedNodeKey","newSpan","trim","ACTIVE_HIGHLIGHT_COLOR","INACTIVE_HIGHLIGHT_COLOR","ModelTraceExplorerHighlightedCodeSnippet","data","activeMatch","containsActiveMatch","scrollToActiveMatch","scrollIntoView","block","inline","spans","getHighlightedSpanComponents","activeMatchBackgroundColor","inactiveMatchBackgroundColor","backgroundSecondary","typography","fontSizeSm","BasicTable","Table","scrollable","TableRenderer","header","rows","isValid","_childArray$","childArray","React","toArray","slice","flatMap","props","filter","c","useParsedTableComponents","VirtualizedTable","parentRef","rowVirtualizer","useVirtual","overscan","virtualItems","totalSize","maxHeight","borderColor","borders","marginBottom","height","virtualRow","rowIndex","rowElement","measureRef","top","start","VirtualizedTableRow","isHeader","some","tagName","TableRow","style","backgroundPrimary","VirtualizedTableCell","TableHeader","paddingLeft","textPrimary","TableCell","urlTransform","startsWith","defaultUrlTransform","GenAIMarkdownRenderer","components","getMarkdownComponents","extensions","ReactMarkdown","remarkPlugins","RemarkPlugins","CodeMarkdownComponent","codeBlock","codeInline","codeProps","_node$position","_node$position2","language","_codeProps$className","exec","className","line","end","InlineCode","code","CodeBlock","String","replace","CodeSnippet","actions","SnippetCopyAction","copyText","isDarkMode","isCodeSnippetLanguage","boxSizing","showLineNumbers","remarkGfm","a","href","Link","id","disabled","_Fragment","openInNewTab","_props$extensions$cod","_props$extensions","_props$extensions$cod2","_props$extensions2","p","Paragraph","h1","Title","level","h2","h3","h4","h5","table","tr","th","td","multiline","thead","tbody","img","src","alt","languageString","ModelTraceExplorerCodeSnippetBody","renderMode","CodeSnippetRenderMode","initialExpanded","containsMatches","Boolean","includes","isContentLong","setIsContentLong","expanded","setExpanded","snippetRef","dataToTruncate","parsedData","parse","expandable","split","displayedData","join","useEffect","scrollWidth","clientWidth","PreWithRef","preProps","isKeyMatch","right","PreTag","lineProps","wrapLines","paddingBottom","paddingRight","textOverflow","lineHeightBase","FormattedMessage","defaultMessage","ModelTraceExplorerHighlightedSnippetTitle","title","isActiveMatch","titleLower","startIdx","indexOf","endIdx","scrollMarginTop","getInitialRenderMode","dataIsString","initialRenderMode","MARKDOWN","getRenderModeDisplayText","TEXT","PYTHON","_ref4","ModelTraceExplorerCodeSnippet","tokens","_activeMatch$isKeyMat","setRenderMode","isTitleMatch","shouldShowRenderModeDropdown","borderRadiusSm","withoutMargins","DropdownMenu","Root","Trigger","asChild","Content","RadioGroup","onValueChange","values","mode","RadioItem","ItemIndicator","Arrow","ModelTraceExplorerAttributesTab","activeSpan","attributes","containsAttributes","keys","isActiveMatchSpan","marginTop","Empty","description","ModelTraceExplorerChatToolParam","paramName","paramProperties","isRequired","enum","enumValues","hasAdditionalInfo","borderStyles","borderTopLeftRadius","borderTopRightRadius","gridTemplateColumns","gridTemplateRows","flexWrap","ModelTraceExplorerChatTool","tool","_tool$function$parame","_tool$function$parame2","_tool$function$parame3","parameters","properties","requiredParams","required","isExpandable","hoverStyles","actionIconBackgroundHover","role","ChevronRightIcon","getRoleIcon","ModelTraceExplorerIcon","ModelIconType","SYSTEM","USER","WRENCH","MODELS","getRoleDisplayText","message","ModelTraceExplorerChatMessageHeader","tool_call_id","toolName","toolCallId","flexShrink","ModelTraceExplorerToolCallMessage","toolCall","functionName","FunctionIcon","arguments","ModelTraceExplorerChatMessageContent","shouldDisplayCodeSnippet","paddingTop","fontSizeBase","ModelTraceExplorerChatMessage","_message$content","isJson","error","tryGetJsonContent","displayedContent","tool_calls","ModelTraceExplorerConversation","messages","ModelTraceExplorerCollapsibleSection","sectionKey","withBorder","borderBottomLeftRadius","borderBottomRightRadius","borderTop","ModelTraceExplorerChatTab","chatTools","ModelTraceExplorerDefaultSpanView","inputList","createListFromObject","inputs","outputList","outputs","containsInputs","containsOutputs","getTruncatedStyles","shouldTruncate","KeyValueTag","itemKey","itemValue","charLimit","shouldTruncateKey","shouldTruncateValue","fullLength","isKeyLonger","shorterLength","getKeyAndValueComplexTruncation","ModelTraceExplorerRetrieverDocumentFull","text","metadataTags","logDocumentClick","FileDocumentIcon","ModelTraceExplorerRetrieverDocumentPreview","minWidth","ellipsis","ModelTraceExplorerRetrieverDocument","metadata","ModelTraceExplorerRenderModeToggle","shouldRenderMarkdown","setShouldRenderMarkdown","SegmentedControlGroup","event","SegmentedControlButton","TextBoxIcon","fontSizeLg","MIcon","ModelTraceExplorerRetrieverSpanView","outputsContainsActiveMatch","document","idx","page_content","ModelTraceExplorerContentTab","isRenderableRetrieverSpan","ModelTraceExplorerEventsTab","events","XCircleIcon","attribute","getEventAttributeKey","ModelTraceExplorerBadge","count","actionDangerPrimaryBackgroundDefault","actionPrimaryTextDefault","AssessmentPaneToggle","GavelIcon","AssessmentCreateNameTypeahead","setName","nameError","setNameError","handleChangeSchema","schemas","useAssessmentSchemas","intl","useIntl","schemaNames","schema","_schema$name","selectedItem","setSelectedItem","itemsTest","setItemsTest","items","filteredItems","newSchema","assessmentType","dataType","getDefaultSchema","unshift","formOnChange","newSelectedItem","comboboxState","useComboboxState","allItems","setItems","multiSelect","setInputValue","itemToString","_item$name","matcher","query","_item$name$toLowerCas","_item$name2","formValue","preventUnsetOnBlur","TypeaheadComboboxRoot","onKeyDown","stopPropagation","TypeaheadComboboxInput","formatMessage","validationState","onPressEnter","showComboboxToggleButton","FormUI","Message","TypeaheadComboboxMenu","_item$name3","_item$name4","_item$name5","TypeaheadComboboxMenuItem","ASSESSMENT_PANE_MIN_WIDTH","timeSinceStr","date","referenceDate","Date","seconds","floor","getTime","interval","timeSince","getCreateAssessmentPayloadValue","isFeedback","serialization_format","fetchFn","fetch","serializeRequestBody","payload","FormData","Blob","fetchAPI","async","method","body","response","headers","ok","predefinedError","matchPredefinedError","json","createAssessment","trace_id","ComponentMap","JsonInput","valueError","setValue","setValueError","isSubmitting","TextArea","autoSize","minRows","maxRows","TextInput","BooleanInput","NumericInput","Number","AssessmentCreateForm","assessmentName","spanId","traceId","_ComponentMap$dataTyp","setAssessmentType","setDataType","rationale","setRationale","isNamePrefilled","InputComponent","createAssessmentMutation","isLoading","useCreateAssessment","onSuccess","onError","onSettled","queryClient","useQueryClient","mutate","useMutation","mutationFn","invalidateQueries","queryKey","FETCH_TRACE_INFO_QUERY_KEY","displayErrorNotification","Error","handleCreate","_getUser","valueObj","assessment_name","source","source_type","source_id","span_id","SimpleSelect","SimpleSelectOption","loading","AssessmentCreateButton","behavior","PlusIcon","AssessmentActionsOverflowMenu","setIsEditing","setShowDeleteModal","showEditButton","OverflowIcon","Item","IconWrapper","PencilIcon","TrashIcon","AssessmentDeleteModal","isModalVisible","setIsModalVisible","deleteAssessmentMutation","deleteAssessment","assessmentId","assessment_id","handleDelete","Modal","visible","onOk","okButtonProps","danger","okText","onCancel","cancelText","confirmLoading","useUpdateAssessment","updateAssessmentMutation","updateAssessment","AssessmentEditForm","initialValue","defaultType","getDefaultType","defaultValue","getDefaultValue","user","isUpdating","overrideAssessmentMutation","isOverwriting","useOverrideAssessment","oldAssessment","newAssessment","overrides","omit","handleUpdate","update_mask","SpanNameDetailViewLink","_node$type","hasException","getSpanExceptionCount","textDecorationColor","actionDangerDefaultTextDefault","actionDefaultTextDefault","getIconTypeForSpan","ModelSpanType","UNKNOWN","ExpectationItem","isEditing","showDeleteModal","associatedSpan","showAssociatedSpan","getParsedExpectationValue","AssessmentDisplayValue","jsonValue","CheckCircleIcon","DangerIcon","AssessmentSourceName","textWrap","blue500","AssessmentItemHeader","renderConnector","SourceIcon","UserIcon","SparkleIcon","CodeIcon","getSourceIcon","left","borderLeft","borderRadiusFull","last_update_time","FeedbackErrorItem","Alert","closable","error_code","error_message","stack_trace","footer","FeedbackHistoryItem","lg","FeedbackHistoryModal","assessmentHistory","seen","flattened","currentAssessment","has","overriddenAssessment","flattenOverrides","FeedbackItemContent","isHistoryModalVisible","setIsHistoryModalVisible","FeedbackItem","getSourceTypeIcon","sourceType","smallIconStyles","FeedbackValueGroupSourceCounts","feedbacks","sourceCounts","countBy","FeedbackValueGroup","valid","FeedbackGroup","valuesMap","activeSpanId","displayName","getAssessmentDisplayName","showCreateForm","setShowCreateForm","hasError","flat","AssessmentsPane","expectations","partition","groupedFeedbacks","aggregated","group","toSorted","leftName","rightName","localeCompare","groupFeedbacks","sortedExpectations","CloseIcon","ModelTraceExplorerRightPaneTabsImpl","contentStyle","exceptionCount","tabContent","Tabs","tab","List","ModelTraceExplorerResizablePane","ModelTraceExplorerRightPaneTabs","TimelineTreeFilterButton","Popover","FilterIcon","align","shouldDisplay","Checkbox","isChecked","getDisplayNameForSpanType","InfoTooltip","TimelineTreeHeader","showTimelineInfo","setShowTimelineInfo","ListBorderIcon","BarsAscendingVerticalIcon","IconBottomConnector","active","bottom","SPAN_INDENT_WIDTH","IconLeftConnector","VerticalConnector","TimelineTreeHierarchyBars","isActiveSpan","isInActiveChain","linesToRender","hasChildren","isExpanded","shouldRender","isActive","TimelineTreeSpanTooltip","_span$type","iconType","primaryTextColor","grey800","grey100","secondaryTextColor","grey500","grey350","hideWhenDetached","isInTooltip","side","TimelineTreeNode","selectedKey","traceStartTime","traceEndTime","onSelect","activeChildIndex","actionDefaultBackgroundHover","actionDefaultBackgroundPress","newExpandedKeys","delete","_node$children$length","_node$children3","concat","TimelineTreeGanttNode","leftOffset","titleInBarRef","titleBesideBarRef","offsetWidth","blue600","white","TimelineTreeGanttBars","_useResizeObserver$wi","treeContainerRef","treeElementWidth","initialXTicks","graphWidth","minPixelsBetweenTicks","range","maxTickCount","rawInterval","magnitude","pow","log10","residual","niceFraction","niceInterval","extendedRight","ticks","tick","ceil","getNiceXTicks","min","xTicks","scaleDurationToTreeWidth","scaleX","n","transform","pointerEvents","TimelineTree","rootNodes","onSpanClick","expandedNodesList","getTimelineTreeExpandedNodesList","_traversedNode$childr","treeElement","_selectedNode$key2","ModelTraceExplorerDetailView","selectedSpanId","onSelectSpan","_treeNode$start","_treeNode$end","window","innerWidth","paneRef","useTimelineTreeExpandedNodes","params","list","initialExpandDepth","info","leftPaneMinWidth","minWidthForSpans","CONTENT_PANE_MIN_WIDTH","ModelTraceExplorerErrorState","image","useGetModelTraceInfoV3","setModelTrace","setAssessmentsPaneEnabled","enabled","useQuery","queryFn","fetchTraceInfoV3","prevModelTrace","_response$trace$trace","_response$trace","trace","trace_info","ModelTraceExplorerChatToolsRenderer","tools","ModelTraceExplorerRetrieverFieldRenderer","documents","ModelTraceExplorerTextFieldRenderer","ModelTraceExplorerFieldRenderer","normalizeConversation","isChatTools","every","isModelTraceChatTool","isRetrieverDocuments","isRetrieverDocument","ModelTraceExplorerSummaryViewExceptionsSection","_firstException$attri","exceptionEvents","getSpanExceptionEvents","isRoot","firstException","ModelTraceExplorerSummaryIntermediateNode","spanName","ModelTraceExplorerSummarySpans","intermediateNodes","rootInputs","rootOutputs","exceptions","hasIntermediateNodes","hasExceptions","isNodeImportant","AGENT","RETRIEVER","CHAT_MODEL","TOOL","LLM","ModelTraceExplorerSummaryView","allAssessments","ModelTraceHeaderMetricSection","tagKey","getTruncatedLabel","getComponentId","onCopy","handleClick","navigator","clipboard","writeText","ModelTraceHeaderDetails","_modelTrace$info$tags","showNotification","setShowNotification","tags","isUserFacingTag","modelTraceId","getModelTraceId","tokenUsage","_trace_metadata$mlflo","_modelTrace$info","_modelTrace$info$trac","parseJSONSafe","trace_metadata","totalTokens","total_tokens","latency","truncateToFirstLineWithMaxLength","str","maxLength","truncated","_","char","handleCopy","setTimeout","toString","ClockIcon","Overflow","noMargin","fullText","Notification","severity","Viewport","ModelTraceExplorerContent","ContextProviders","ErrorBoundary","fallbackRender","ModelTraceExplorer","ModelTraceExplorerImpl","initialModelTrace","_getModelTraceSize","forceDisplay","setForceDisplay","getModelTraceSize","useCopyController","copyTooltip","copyMessage","copiedMessage","useClipboard","copiedTimerIdRef","copied","setCopied","open","setOpen","clearTimeout","actionIcon","CheckIcon","CopyIcon","tooltipMessage","copy","ariaLabel","tooltipOpen","handleTooltipOpenChange","wordWrap","builtin","class","constant","hexcode","symbol","AssessmentSchemaContext","AssessmentSchemaContextProvider","schemaMap","nullsSchemaMap","isSerializedExpectation","parseAssessmentSchemas","CONNECT","isRootSpan","iconColor","iconMap","ModelsIcon","DOCUMENT","ConnectIcon","CODE","FUNCTION","NUMBERS","NumbersIcon","SEARCH","SORT","SortUnsortedIcon","QuestionMarkIcon","WrenchIcon","UserSparkleIcon","CHAIN","ChainIcon","GearIcon","SAVE","SaveIcon","actionDefaultIconDefault","tooltipColor","actionPrimaryIcon","textValidationSuccess","green500","green800","green100","turquoise","blue800","blue100","red500","red700","red800","red100","general","iconSize","tooltipBackgroundTooltip","svg","iconFontSize","isAnthropicContentBlockParam","obj","media_type","input","tool_use_id","isAnthropicMessageParam","hasRole","hasContent","normalizeAnthropicContentBlockParam","image_url","processAnthropicMessage","chatMessage","prettyPrintChatMessage","toolMessages","textParts","toolCalls","processAnthropicMessageContent","normalizeAnthropicChatInput","normalizeAnthropicChatOutput","isAutogenFunctionCall","get","isAutogenMessage","messageType","convertAssistantMessageToChatMessage","f","prettyPrintToolCall","normalizeAutogenMessage","part","normalizeAutogenChatInput","normalizeAutogenChatOutput","parseBedrockContent","bytes","format","Buffer","from","convertBedrockMessageToChatMessage","contents","toolUse","toolUseId","toolResult","resultContent","parsedContent","contentString","isBedrockMessage","normalizeBedrockChatInput","normalizeBedrockChatOutput","output","isGeminiContentPart","isGeminiContent","parts","isGeminiCandidate","normalizeGeminiChatInput","normalizeGeminiChatOutput","candidates","normalizeOpenAIChatInput","_obj$messages","isRawModelTraceChatMessage","normalizeOpenAIChatResponse","isModelTraceChoices","choice","_choice$message$tool_","isModelTraceChatResponse","choices","_choice$message$tool_2","isOpenAIResponsesInputMessage","isOpenAIResponsesOutputItem","outputFormat","normalizeOpenAIResponsesInputMessage","normalizeOpenAIResponsesInputItem","imageUrl","normalizeOpenAIResponsesInput","normalizeOpenAIResponsesOutputItem","call_id","output_format","result","normalizeOpenAIResponsesOutput","chunk","isOpenAIAgentMessage","normalizeOpenAIAgentMessage","textContent","callId","arguments_","normalizeOpenAIAgentInput","normalizeOpenAIAgentOutput","langchainMessageToModelTraceMessage","_message$additional_k","_part$image_url","normalizedMessage","toolCallsFromKwargs","additional_kwargs","isLangchainToolCallMessage","normalizeLangchainToolCall","isModelTraceToolCall","args","isLangchainBaseMessage","isLangchainChatGeneration","normalizeLangchainChatInput","getMessagesFromLangchainChatGenerations","generations","generation","normalizeLangchainChatResult","isLangchainChatGenerations","isLlamaIndexChatMessageBlock","isLlamaIndexChatMessage","blocks","prettyPrintMessage","normalizeLlamaIndexChatResponse","isLlamaIndexChatResponse","normalizeLlamaIndexChatInput","isLlamaIndexChatInput","normalizeDspyChatInput","msg","normalizeDspyChatOutput"],"sourceRoot":""}