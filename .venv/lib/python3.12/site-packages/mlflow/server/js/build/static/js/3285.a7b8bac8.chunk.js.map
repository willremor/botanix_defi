{"version":3,"file":"static/js/3285.a7b8bac8.chunk.js","mappings":"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","sources":["experiment-tracking/components/traces/TracesView.utils.ts","experiment-tracking/components/traces/hooks/useExperimentTraces.tsx","experiment-tracking/components/traces/TracesViewTableTagCell.tsx","experiment-tracking/components/traces/TracesViewTableStatusCell.tsx","experiment-tracking/components/traces/TracesViewTablePreviewCell.tsx","experiment-tracking/components/traces/TracesViewTableSourceCell.tsx","experiment-tracking/components/traces/TracesViewTable.utils.ts","experiment-tracking/components/traces/TracesViewTableRow.tsx","experiment-tracking/components/traces/TracesViewTableTimestampCell.tsx","experiment-tracking/components/traces/TracesViewTableHeaderCheckbox.tsx","experiment-tracking/components/traces/TracesViewTableCellCheckbox.tsx","experiment-tracking/components/traces/TracesViewTable.tsx","experiment-tracking/components/traces/hooks/useExperimentTraceInfo.tsx","experiment-tracking/components/traces/TraceDataDrawer.tsx","experiment-tracking/components/traces/hooks/useExperimentTraceData.tsx","experiment-tracking/components/traces/TracesViewDeleteTraceModal.tsx","experiment-tracking/components/traces/TracesViewControlsActions.tsx","experiment-tracking/components/traces/TracesViewControls.tsx","experiment-tracking/components/traces/hooks/useExperimentViewTracesUIState.tsx","experiment-tracking/components/traces/hooks/useActiveExperimentTrace.tsx","experiment-tracking/components/traces/hooks/useActiveExperimentSpan.tsx","experiment-tracking/components/traces/TracesView.tsx","experiment-tracking/components/experiment-page/components/traces-v3/TracesV3DateSelector.tsx","experiment-tracking/components/experiment-page/components/traces-v3/TracesV3GenericErrorState.tsx","experiment-tracking/components/experiment-page/components/traces-v3/TracesV3PageWrapper.tsx","experiment-tracking/hooks/useMonitoringViewState.tsx","experiment-tracking/components/experiment-page/components/traces-v3/TracesV3View.tsx","experiment-tracking/components/experiment-page/components/ExperimentViewTraces.tsx"],"sourcesContent":["import { type ModelTraceInfo } from '@databricks/web-shared/model-trace-explorer';\nimport { type MessageDescriptor, defineMessage } from 'react-intl';\nimport { isNil } from 'lodash';\n\nconst TRACE_METADATA_FIELD_RUN_ID = 'mlflow.sourceRun';\nconst TRACE_METADATA_FIELD_TOTAL_TOKENS = 'total_tokens';\nconst TRACE_METADATA_FIELD_INPUTS = 'mlflow.traceInputs';\nconst TRACE_METADATA_FIELD_OUTPUTS = 'mlflow.traceOutputs';\nexport const TRACE_TAG_NAME_TRACE_NAME = 'mlflow.traceName';\n\n// Truncation limit for tracing metadata, taken from:\n// https://github.com/mlflow/mlflow/blob/2b457f2b46fc135a3fba77aefafe2319a899fc08/mlflow/tracing/constant.py#L23\nconst MAX_CHARS_IN_TRACE_INFO_METADATA_AND_TAGS = 250;\n\nconst getTraceMetadataField = (traceInfo: ModelTraceInfo, field: string) => {\n  return traceInfo.request_metadata?.find(({ key }) => key === field)?.value;\n};\n\nexport const isTraceMetadataPossiblyTruncated = (traceMetadata: string) => {\n  return traceMetadata.length >= MAX_CHARS_IN_TRACE_INFO_METADATA_AND_TAGS;\n};\n\nexport const getTraceInfoRunId = (traceInfo: ModelTraceInfo) =>\n  getTraceMetadataField(traceInfo, TRACE_METADATA_FIELD_RUN_ID);\n\nexport const getTraceInfoTotalTokens = (traceInfo: ModelTraceInfo) =>\n  getTraceMetadataField(traceInfo, TRACE_METADATA_FIELD_TOTAL_TOKENS);\n\nexport const getTraceInfoInputs = (traceInfo: ModelTraceInfo) => {\n  const inputs = getTraceMetadataField(traceInfo, TRACE_METADATA_FIELD_INPUTS);\n  if (isNil(inputs)) {\n    return undefined;\n  }\n  try {\n    return JSON.stringify(JSON.parse(inputs)); // unescape non-ascii characters\n  } catch (e) {\n    return inputs;\n  }\n};\n\nexport const getTraceInfoOutputs = (traceInfo: ModelTraceInfo) => {\n  const outputs = getTraceMetadataField(traceInfo, TRACE_METADATA_FIELD_OUTPUTS);\n  if (isNil(outputs)) {\n    return undefined;\n  }\n  try {\n    return JSON.stringify(JSON.parse(outputs)); // unescape non-ascii characters\n  } catch (e) {\n    return outputs;\n  }\n};\n\nexport const getTraceTagValue = (traceInfo: ModelTraceInfo, tagName: string) => {\n  if (Array.isArray(traceInfo.tags)) {\n    return traceInfo.tags?.find(({ key }) => key === tagName)?.value;\n  }\n\n  return traceInfo.tags?.[tagName];\n};\n\nexport const getTraceDisplayName = (traceInfo: ModelTraceInfo) => {\n  return getTraceTagValue(traceInfo, TRACE_TAG_NAME_TRACE_NAME) || traceInfo.request_id;\n};\n\nexport const EXPERIMENT_TRACES_SORTABLE_COLUMNS = ['timestamp_ms'];\n\n// defining a separate const for this column as\n// we don't users to be able to control its visibility\nexport const TRACE_TABLE_CHECKBOX_COLUMN_ID = 'select';\n\nexport enum ExperimentViewTracesTableColumns {\n  requestId = 'request_id',\n  traceName = 'traceName',\n  timestampMs = 'timestamp_ms',\n  inputs = 'inputs',\n  outputs = 'outputs',\n  runName = 'runName',\n  totalTokens = 'total_tokens',\n  source = 'source',\n  latency = 'latency',\n  tags = 'tags',\n  status = 'status',\n}\n\nexport const ExperimentViewTracesTableColumnLabels: Record<ExperimentViewTracesTableColumns, MessageDescriptor> = {\n  [ExperimentViewTracesTableColumns.requestId]: defineMessage({\n    defaultMessage: 'Request ID',\n    description: 'Experiment page > traces table > request id column header',\n  }),\n  [ExperimentViewTracesTableColumns.traceName]: defineMessage({\n    defaultMessage: 'Trace name',\n    description: 'Experiment page > traces table > trace name column header',\n  }),\n  [ExperimentViewTracesTableColumns.timestampMs]: defineMessage({\n    defaultMessage: 'Time created',\n    description: 'Experiment page > traces table > time created column header',\n  }),\n  [ExperimentViewTracesTableColumns.status]: defineMessage({\n    defaultMessage: 'Status',\n    description: 'Experiment page > traces table > status column header',\n  }),\n  [ExperimentViewTracesTableColumns.inputs]: defineMessage({\n    defaultMessage: 'Request',\n    description: 'Experiment page > traces table > input column header',\n  }),\n  [ExperimentViewTracesTableColumns.outputs]: defineMessage({\n    defaultMessage: 'Response',\n    description: 'Experiment page > traces table > output column header',\n  }),\n  [ExperimentViewTracesTableColumns.runName]: defineMessage({\n    defaultMessage: 'Run name',\n    description: 'Experiment page > traces table > run name column header',\n  }),\n  [ExperimentViewTracesTableColumns.totalTokens]: defineMessage({\n    defaultMessage: 'Tokens',\n    description: 'Experiment page > traces table > tokens column header',\n  }),\n  [ExperimentViewTracesTableColumns.source]: defineMessage({\n    defaultMessage: 'Source',\n    description: 'Experiment page > traces table > source column header',\n  }),\n  [ExperimentViewTracesTableColumns.latency]: defineMessage({\n    defaultMessage: 'Execution time',\n    description: 'Experiment page > traces table > latency column header',\n  }),\n  [ExperimentViewTracesTableColumns.tags]: defineMessage({\n    defaultMessage: 'Tags',\n    description: 'Experiment page > traces table > tags column header',\n  }),\n};\n\nexport const ExperimentViewTracesStatusLabels = {\n  UNSET: null,\n  IN_PROGRESS: defineMessage({\n    defaultMessage: 'In progress',\n    description: 'Experiment page > traces table > status label > in progress',\n  }),\n  OK: defineMessage({\n    defaultMessage: 'OK',\n    description: 'Experiment page > traces table > status label > ok',\n  }),\n  ERROR: defineMessage({\n    defaultMessage: 'Error',\n    description: 'Experiment page > traces table > status label > error',\n  }),\n};\n","import { type ModelTraceInfo } from '@databricks/web-shared/model-trace-explorer';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { MlflowService } from '../../../sdk/MlflowService';\nimport { EXPERIMENT_TRACES_SORTABLE_COLUMNS, getTraceInfoRunId } from '../TracesView.utils';\nimport { ViewType } from '../../../sdk/MlflowEnums';\nimport { first, uniq, values } from 'lodash';\nimport type { RunEntity } from '../../../types';\n\n// A filter expression used to filter traces by run ID\nconst RUN_ID_FILTER_EXPRESSION = 'request_metadata.`mlflow.sourceRun`';\nconst LOGGED_MODEL_ID_FILTER_EXPRESSION = 'request_metadata.`mlflow.modelId`';\n\nconst createRunIdsFilterExpression = (runUuids: string[]) => {\n  const runIdsInQuotes = runUuids.map((runId: any) => `'${runId}'`);\n  return `run_id IN (${runIdsInQuotes.join(',')})`;\n};\n\n/**\n * Utility function that fetches run names for traces.\n */\nconst fetchRunNamesForTraces = async (experimentIds: string[], traces: ModelTraceInfo[]) => {\n  const traceIdToRunIdMap = traces.reduce<Record<string, string>>((acc, trace) => {\n    const traceId = trace.request_id;\n    const runId = getTraceInfoRunId(trace);\n    if (!traceId || !runId) {\n      return acc;\n    }\n    return { ...acc, [traceId]: runId };\n  }, {});\n\n  const runUuids = uniq(values(traceIdToRunIdMap));\n  if (runUuids.length < 1) {\n    return {};\n  }\n  const runResponse = (await MlflowService.searchRuns({\n    experiment_ids: experimentIds,\n    filter: createRunIdsFilterExpression(runUuids),\n    run_view_type: ViewType.ALL,\n  })) as { runs?: RunEntity[] };\n\n  const runs = runResponse.runs;\n\n  const runIdsToRunNames = (runs || []).reduce<Record<string, string>>((acc, run) => {\n    return { ...acc, [run.info.runUuid]: run.info.runName };\n  }, {});\n\n  const traceIdsToRunNames = traces.reduce<Record<string, string>>((acc, trace) => {\n    const traceId = trace.request_id;\n    if (!traceId) {\n      return acc;\n    }\n    const runId = traceIdToRunIdMap[traceId];\n\n    return { ...acc, [traceId]: runIdsToRunNames[runId] || runId };\n  }, {});\n\n  return traceIdsToRunNames;\n};\n\nexport interface ModelTraceInfoWithRunName extends ModelTraceInfo {\n  runName?: string;\n}\n\nexport const useExperimentTraces = ({\n  experimentIds,\n  sorting,\n  filter = '',\n  runUuid,\n  loggedModelId,\n}: {\n  experimentIds: string[];\n  sorting: {\n    id: string;\n    desc: boolean;\n  }[];\n  filter?: string;\n  runUuid?: string;\n  loggedModelId?: string;\n}) => {\n  const [traces, setTraces] = useState<ModelTraceInfoWithRunName[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | undefined>(undefined);\n\n  // Backend currently only supports ordering by timestamp\n  const orderByString = useMemo(() => {\n    const firstOrderByColumn = first(sorting);\n    if (firstOrderByColumn && EXPERIMENT_TRACES_SORTABLE_COLUMNS.includes(firstOrderByColumn.id)) {\n      return `${firstOrderByColumn.id} ${firstOrderByColumn.desc ? 'DESC' : 'ASC'}`;\n    }\n    return 'timestamp_ms DESC';\n  }, [sorting]);\n\n  const filterString = useMemo(() => {\n    if (!runUuid && !loggedModelId) {\n      return filter;\n    }\n\n    if (loggedModelId) {\n      if (filter) {\n        return `${filter} AND ${LOGGED_MODEL_ID_FILTER_EXPRESSION}='${loggedModelId}'`;\n      }\n      return `${LOGGED_MODEL_ID_FILTER_EXPRESSION}='${loggedModelId}'`;\n    }\n\n    if (filter) {\n      return `${filter} AND ${RUN_ID_FILTER_EXPRESSION}='${runUuid}'`;\n    }\n\n    return `${RUN_ID_FILTER_EXPRESSION}='${runUuid}'`;\n  }, [filter, runUuid, loggedModelId]);\n\n  const [pageTokens, setPageTokens] = useState<Record<string, string | undefined>>({ 0: undefined });\n  const [currentPage, setCurrentPage] = useState(0);\n  const currentPageToken = pageTokens[currentPage];\n\n  const fetchTraces = useCallback(\n    async ({\n      experimentIds,\n      currentPage = 0,\n      pageToken,\n      silent,\n      orderByString = '',\n      filterString = '',\n    }: {\n      experimentIds: string[];\n      currentPage?: number;\n      pageToken?: string;\n      filterString?: string;\n      orderByString?: string;\n      silent?: boolean;\n    }) => {\n      if (!silent) {\n        setLoading(true);\n      }\n      setError(undefined);\n\n      try {\n        const response = await MlflowService.getExperimentTraces(experimentIds, orderByString, pageToken, filterString);\n\n        if (!response.traces) {\n          setTraces([]);\n          return;\n        }\n\n        const runNamesForTraces = await fetchRunNamesForTraces(experimentIds, response.traces);\n        const tracesWithRunNames = response.traces.map((trace) => {\n          const traceId = trace.request_id;\n          if (!traceId) {\n            return { ...trace };\n          }\n          const runName = runNamesForTraces[traceId];\n          return { ...trace, runName };\n        });\n\n        setTraces(tracesWithRunNames);\n        setPageTokens((prevPages) => {\n          return { ...prevPages, [currentPage + 1]: response.next_page_token };\n        });\n      } catch (e: any) {\n        setError(e);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [],\n  );\n\n  const hasNextPage = !loading && pageTokens[currentPage + 1] !== undefined;\n  const hasPreviousPage = !loading && (currentPage === 1 || pageTokens[currentPage - 1] !== undefined);\n\n  useEffect(() => {\n    fetchTraces({ experimentIds, filterString, orderByString });\n  }, [fetchTraces, filterString, experimentIds, orderByString]);\n\n  const reset = useCallback(() => {\n    setTraces([]);\n    setPageTokens({ 0: undefined });\n    setCurrentPage(0);\n    fetchTraces({ experimentIds });\n  }, [fetchTraces, experimentIds]);\n\n  const fetchNextPage = useCallback(() => {\n    setCurrentPage((prevPage) => prevPage + 1);\n    fetchTraces({\n      experimentIds,\n      currentPage: currentPage + 1,\n      pageToken: pageTokens[currentPage + 1],\n      filterString,\n      orderByString,\n    });\n  }, [experimentIds, currentPage, fetchTraces, pageTokens, filterString, orderByString]);\n\n  const fetchPrevPage = useCallback(() => {\n    setCurrentPage((prevPage) => prevPage - 1);\n    fetchTraces({\n      experimentIds,\n      currentPage: currentPage - 1,\n      pageToken: pageTokens[currentPage - 1],\n      filterString,\n      orderByString,\n    });\n  }, [experimentIds, currentPage, fetchTraces, pageTokens, filterString, orderByString]);\n\n  const refreshCurrentPage = useCallback(\n    (silent = false) => {\n      return fetchTraces({\n        experimentIds,\n        currentPage,\n        pageToken: currentPageToken,\n        silent,\n        filterString,\n        orderByString,\n      });\n    },\n    [experimentIds, currentPage, fetchTraces, currentPageToken, filterString, orderByString],\n  );\n\n  return {\n    traces,\n    loading,\n    error,\n    hasNextPage,\n    hasPreviousPage,\n    fetchNextPage,\n    fetchPrevPage,\n    refreshCurrentPage,\n    reset,\n  };\n};\n","import { Button, PencilIcon, SpeechBubblePlusIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { MLFLOW_INTERNAL_PREFIX } from '../../../common/utils/TagUtils';\nimport { KeyValueTag } from '../../../common/components/KeyValueTag';\nimport { FormattedMessage } from 'react-intl';\n\nexport const TracesViewTableTagCell = ({\n  onAddEditTags,\n  tags,\n  baseComponentId,\n}: {\n  tags: { key: string; value: string }[];\n  onAddEditTags: () => void;\n  baseComponentId: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const visibleTagList = tags?.filter(({ key }) => key && !key.startsWith(MLFLOW_INTERNAL_PREFIX)) || [];\n  const containsTags = visibleTagList.length > 0;\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        flexWrap: 'wrap',\n        columnGap: theme.spacing.xs,\n        rowGap: theme.spacing.xs,\n      }}\n    >\n      {visibleTagList.map((tag) => (\n        <KeyValueTag\n          key={tag.key}\n          tag={tag}\n          css={{ marginRight: 0 }}\n          charLimit={20}\n          maxWidth={150}\n          enableFullViewModal\n        />\n      ))}{' '}\n      <Button\n        componentId={`${baseComponentId}.traces_table.edit_tag`}\n        size=\"small\"\n        icon={!containsTags ? undefined : <PencilIcon />}\n        onClick={onAddEditTags}\n        children={\n          !containsTags ? (\n            <FormattedMessage\n              defaultMessage=\"Add tags\"\n              description=\"Button text to add tags to a trace in the experiment traces table\"\n            />\n          ) : undefined\n        }\n        css={{\n          flexShrink: 0,\n          opacity: 0,\n          '[role=row]:hover &': {\n            opacity: 1,\n          },\n          '[role=row]:focus-within &': {\n            opacity: 1,\n          },\n        }}\n        type=\"tertiary\"\n      />\n    </div>\n  );\n};\n","import type { CellContext, ColumnDefTemplate } from '@tanstack/react-table';\nimport type { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport { CheckCircleIcon, ClockIcon, XCircleIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentViewTracesStatusLabels } from './TracesView.utils';\nimport { useIntl } from 'react-intl';\nimport type { Theme } from '@emotion/react';\n\nconst getIcon = (status: ModelTraceInfoWithRunName['status'], theme: Theme) => {\n  if (status === 'IN_PROGRESS') {\n    return <ClockIcon css={{ color: theme.colors.textValidationWarning }} />;\n  }\n\n  if (status === 'OK') {\n    return <CheckCircleIcon css={{ color: theme.colors.textValidationSuccess }} />;\n  }\n\n  if (status === 'ERROR') {\n    return <XCircleIcon css={{ color: theme.colors.textValidationDanger }} />;\n  }\n\n  return null;\n};\n\nexport const TracesViewTableStatusCell: ColumnDefTemplate<CellContext<ModelTraceInfoWithRunName, unknown>> = ({\n  row: { original },\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const labelDescriptor = ExperimentViewTracesStatusLabels[original.status || 'UNSET'];\n\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n      {getIcon(original.status, theme)}\n      {labelDescriptor ? intl.formatMessage(labelDescriptor) : ''}\n    </div>\n  );\n};\n","import { Button, ChevronDownIcon, ChevronRightIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { isString } from 'lodash';\nimport { useCallback, useMemo, useState } from 'react';\nimport { MlflowService } from '../../sdk/MlflowService';\nimport Utils from '../../../common/utils/Utils';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\nimport type { CellContext, ColumnDefTemplate } from '@tanstack/react-table';\nimport type { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport { getTraceInfoInputs, getTraceInfoOutputs, isTraceMetadataPossiblyTruncated } from './TracesView.utils';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { css } from '@emotion/react';\n\nconst clampedLinesCss = css`\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n`;\n\nconst TracesViewTablePreviewCell = ({\n  value,\n  traceId,\n  previewFieldName,\n}: {\n  value: string;\n  traceId: string;\n  previewFieldName: 'request' | 'response';\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [fullData, setFullData] = useState<string | null>(null);\n\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const fetchFullData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const response = await MlflowService.getExperimentTraceData<{\n        request?: any;\n        response?: any;\n      }>(traceId);\n\n      if (previewFieldName in response) {\n        const previewValue = response[previewFieldName];\n        const requestData = isString(previewValue) ? previewValue : JSON.stringify(previewValue);\n        setFullData(requestData);\n      }\n    } catch (e: any) {\n      const errorMessage = e instanceof ErrorWrapper ? e.getUserVisibleError() : e.message;\n      Utils.logErrorAndNotifyUser(`Error fetching response: ${errorMessage}`);\n    }\n    setLoading(false);\n  }, [previewFieldName, traceId]);\n\n  const valuePossiblyTruncated = isTraceMetadataPossiblyTruncated(value);\n\n  const expand = useCallback(async () => {\n    if (!fullData && valuePossiblyTruncated) {\n      await fetchFullData();\n    }\n    setIsExpanded(true);\n  }, [fullData, fetchFullData, valuePossiblyTruncated]);\n\n  const collapse = useCallback(() => {\n    setIsExpanded(false);\n  }, []);\n\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.xs }}>\n      <Button\n        // it's difficult to distinguish between run and experiment page\n        // in this component due to how the data is passed to the table,\n        // so the base component ID here is simply `mlflow.traces`\n        componentId=\"mlflow.traces.traces_table.expand_cell_preview\"\n        size=\"small\"\n        icon={isExpanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n        onClick={isExpanded ? collapse : expand}\n        css={{ flexShrink: 0 }}\n        loading={loading}\n        type=\"primary\"\n      />\n      <div\n        title={value}\n        css={[\n          {\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n          },\n          !isExpanded && clampedLinesCss,\n        ]}\n      >\n        {isExpanded ? <ExpandedParamCell value={fullData ?? value} /> : value}\n      </div>\n    </div>\n  );\n};\n\nconst ExpandedParamCell = ({ value }: { value: string }) => {\n  const { theme } = useDesignSystemTheme();\n\n  const structuredJSONValue = useMemo(() => {\n    // Attempts to parse the value as JSON and returns a pretty printed version if successful.\n    // If JSON structure is not found, returns null.\n    try {\n      const objectData = JSON.parse(value);\n      return JSON.stringify(objectData, null, 2);\n    } catch (e) {\n      return null;\n    }\n  }, [value]);\n  return (\n    <div\n      css={{\n        whiteSpace: 'pre-wrap',\n        wordBreak: 'break-word',\n        fontFamily: structuredJSONValue ? 'monospace' : undefined,\n      }}\n    >\n      <CodeSnippet\n        language=\"json\"\n        wrapLongLines\n        style={{\n          padding: theme.spacing.sm,\n        }}\n        theme={theme.isDarkMode ? 'duotoneDark' : 'light'}\n      >\n        {structuredJSONValue || value}\n      </CodeSnippet>\n    </div>\n  );\n};\n\nexport const TracesViewTableRequestPreviewCell: ColumnDefTemplate<CellContext<ModelTraceInfoWithRunName, unknown>> = ({\n  row: { original },\n}) => (\n  <TracesViewTablePreviewCell\n    previewFieldName=\"request\"\n    traceId={original.request_id || ''}\n    value={getTraceInfoInputs(original) || ''}\n  />\n);\n\nexport const TracesViewTableResponsePreviewCell: ColumnDefTemplate<CellContext<ModelTraceInfoWithRunName, unknown>> = ({\n  row: { original },\n}) => (\n  <TracesViewTablePreviewCell\n    previewFieldName=\"response\"\n    traceId={original.request_id || ''}\n    value={getTraceInfoOutputs(original) || ''}\n  />\n);\n","import type { CellContext, ColumnDefTemplate } from '@tanstack/react-table';\nimport type { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport { keyBy } from 'lodash';\nimport { SourceCellRenderer } from '../experiment-page/components/runs/cells/SourceCellRenderer';\n\nexport const TracesViewTableSourceCell: ColumnDefTemplate<CellContext<ModelTraceInfoWithRunName, unknown>> = ({\n  row: { original },\n}) => <SourceCellRenderer value={keyBy(original.tags, 'key')} />;\n","import type { ColumnDef } from '@tanstack/react-table';\nimport type { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport type { Interpolation, Theme } from '@emotion/react';\n\nexport type TracesColumnDef = ColumnDef<ModelTraceInfoWithRunName> & {\n  meta?: {\n    styles?: Interpolation<Theme>;\n    multiline?: boolean;\n  };\n};\n\nexport const getHeaderSizeClassName = (id: string) => `--header-${id}-size`;\nexport const getColumnSizeClassName = (id: string) => `--col-${id}-size`;\n","import React from 'react';\nimport type { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport type { Row } from '@tanstack/react-table';\nimport { flexRender } from '@tanstack/react-table';\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport type { TracesColumnDef } from './TracesViewTable.utils';\nimport { getColumnSizeClassName } from './TracesViewTable.utils';\nimport { TRACE_TABLE_CHECKBOX_COLUMN_ID } from './TracesView.utils';\nimport { isEqual } from 'lodash';\n\ntype TracesViewTableRowProps = {\n  row: Row<ModelTraceInfoWithRunName>;\n  // used only for memoization updates\n  selected: boolean;\n  columns: TracesColumnDef[];\n};\n\nexport const TracesViewTableRow = React.memo(\n  ({ row }: TracesViewTableRowProps) => {\n    const { theme } = useDesignSystemTheme();\n\n    return (\n      <div\n        role=\"row\"\n        key={row.id}\n        data-testid=\"endpoints-list-table-rows\"\n        css={{\n          minHeight: theme.general.buttonHeight,\n          display: 'flex',\n          flexDirection: 'row',\n          ':hover': {\n            backgroundColor: 'var(--table-row-hover)',\n          },\n          paddingRight: '32px', // width of the column selector defined in TableRowActionStyles\n          borderBottom: `1px solid var(--table-separator-color)`,\n        }}\n      >\n        {row.getAllCells().map((cell) => {\n          const multiline = (cell.column.columnDef as TracesColumnDef).meta?.multiline;\n          const isSelect = cell.column.id === TRACE_TABLE_CHECKBOX_COLUMN_ID;\n          const padding = isSelect ? theme.spacing.sm : `${theme.spacing.sm}px ${theme.spacing.xs}px`;\n\n          return (\n            <div\n              role=\"cell\"\n              css={[\n                {\n                  '--table-row-vertical-padding': `${theme.spacing.sm}px`,\n                  flex: `calc(var(${getColumnSizeClassName(cell.column.id)}) / 100)`,\n                  overflow: 'hidden',\n                  whiteSpace: multiline ? 'pre-wrap' : 'nowrap',\n                  textOverflow: multiline ? 'ellipsis' : undefined,\n                  padding,\n                },\n                (cell.column.columnDef as TracesColumnDef).meta?.styles,\n              ]}\n              key={cell.id}\n            >\n              {flexRender(cell.column.columnDef.cell, cell.getContext())}\n            </div>\n          );\n        })}\n      </div>\n    );\n  },\n  (prev, next) => {\n    return (\n      prev.columns === next.columns &&\n      prev.selected === next.selected &&\n      isEqual(prev.row.original.tags, next.row.original.tags)\n    );\n  },\n);\n","import type { CellContext, ColumnDefTemplate } from '@tanstack/react-table';\nimport React from 'react';\nimport type { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport { LegacyTooltip } from '@databricks/design-system';\nimport Utils from '@mlflow/mlflow/src/common/utils/Utils';\n\nexport const TracesViewTableTimestampCell: ColumnDefTemplate<CellContext<ModelTraceInfoWithRunName, unknown>> =\n  React.memo(\n    ({ row: { original } }) => {\n      if (!original.timestamp_ms) {\n        return null;\n      }\n      return (\n        <LegacyTooltip\n          title={new Date(original.timestamp_ms).toLocaleString(navigator.language, {\n            timeZoneName: 'short',\n          })}\n          placement=\"right\"\n        >\n          <span>{Utils.timeSinceStr(original.timestamp_ms)}</span>\n        </LegacyTooltip>\n      );\n    },\n    () => true,\n  );\n","import React from 'react';\nimport type { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport type { Table } from '@tanstack/react-table';\nimport { Checkbox } from '@databricks/design-system';\n\ntype TracesViewTableCheckboxProps = {\n  table: Table<ModelTraceInfoWithRunName>;\n};\n\nexport const TracesViewTableHeaderCheckbox = ({ table }: TracesViewTableCheckboxProps) => {\n  const isChecked = table.getIsAllRowsSelected() || (table.getIsSomeRowsSelected() ? null : false);\n\n  return (\n    <Checkbox\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_traces_tracesviewtableheadercheckbox.tsx_14\"\n      data-testid=\"trace-table-header-checkbox\"\n      isChecked={isChecked}\n      wrapperStyle={{ padding: 0, margin: 0 }}\n      onChange={table.toggleAllRowsSelected}\n    />\n  );\n};\n","import React from 'react';\nimport type { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport type { Row } from '@tanstack/react-table';\nimport { Checkbox } from '@databricks/design-system';\n\ntype TracesViewCellCheckboxProps = {\n  row: Row<ModelTraceInfoWithRunName>;\n};\n\nexport const TracesViewTableCellCheckbox = ({ row }: TracesViewCellCheckboxProps) => {\n  return (\n    <Checkbox\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_traces_tracesviewtablecellcheckbox.tsx_12\"\n      data-testid={`trace-table-cell-checkbox-${row.id}`}\n      disabled={!row.getCanSelect()}\n      isChecked={row.getIsSelected()}\n      wrapperStyle={{ padding: 0, margin: 0 }}\n      onChange={() => row.toggleSelected()}\n    />\n  );\n};\n","import {\n  CursorPagination,\n  DangerIcon,\n  Empty,\n  Table,\n  TableHeader,\n  TableRow,\n  TableSkeletonRows,\n  Typography,\n  useDesignSystemTheme,\n  Button,\n  DropdownMenu,\n  TableRowAction,\n  ColumnsIcon,\n} from '@databricks/design-system';\nimport type { SortingState } from '@tanstack/react-table';\nimport { flexRender, getCoreRowModel, getSortedRowModel, useReactTable } from '@tanstack/react-table';\nimport React, { useMemo } from 'react';\nimport { isNil, entries } from 'lodash';\nimport Utils from '../../../common/utils/Utils';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\nimport Routes from '../../routes';\nimport {\n  ExperimentViewTracesTableColumnLabels,\n  ExperimentViewTracesTableColumns,\n  TRACE_TABLE_CHECKBOX_COLUMN_ID,\n  TRACE_TAG_NAME_TRACE_NAME,\n  getTraceInfoRunId,\n  getTraceInfoTotalTokens,\n  getTraceTagValue,\n} from './TracesView.utils';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { type ModelTraceInfo } from '@databricks/web-shared/model-trace-explorer';\nimport { TracesViewTableTagCell } from './TracesViewTableTagCell';\nimport type { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\nimport { TracesViewTableStatusCell } from './TracesViewTableStatusCell';\nimport { TracesViewTableRequestPreviewCell, TracesViewTableResponsePreviewCell } from './TracesViewTablePreviewCell';\nimport { TracesViewTableSourceCell } from './TracesViewTableSourceCell';\nimport type { TracesColumnDef } from './TracesViewTable.utils';\nimport { getColumnSizeClassName, getHeaderSizeClassName } from './TracesViewTable.utils';\nimport { TracesViewTableRow } from './TracesViewTableRow';\nimport { TracesViewTableTimestampCell } from './TracesViewTableTimestampCell';\nimport { TracesViewTableHeaderCheckbox } from './TracesViewTableHeaderCheckbox';\nimport { TracesViewTableCellCheckbox } from './TracesViewTableCellCheckbox';\nimport { TracesViewTableNoTracesQuickstart } from './quickstart/TracesViewTableNoTracesQuickstart';\nimport { isUnstableNestedComponentsMigrated } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\n\nexport interface TracesViewTableProps {\n  experimentIds: string[];\n  runUuid?: string;\n  traces: ModelTraceInfoWithRunName[];\n  onTraceClicked?: (trace: ModelTraceInfo) => void;\n  onTraceTagsEdit?: (trace: ModelTraceInfo) => void;\n  onTagsUpdated?: () => void;\n  loading: boolean;\n  error?: Error;\n  usingFilters?: boolean;\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n  onNextPage: () => void;\n  onPreviousPage: () => void;\n  onResetFilters: () => void;\n  sorting: SortingState;\n  setSorting: React.Dispatch<React.SetStateAction<SortingState>>;\n  rowSelection: { [id: string]: boolean };\n  setRowSelection: React.Dispatch<React.SetStateAction<{ [id: string]: boolean }>>;\n  hiddenColumns?: string[];\n  disableTokenColumn?: boolean;\n  baseComponentId: string;\n  toggleHiddenColumn: (columnId: string) => void;\n  disabledColumns?: string[];\n}\n\ntype TracesViewTableMeta = {\n  baseComponentId: string;\n  onTraceClicked?: TracesViewTableProps['onTraceClicked'];\n  onTraceTagsEdit?: TracesViewTableProps['onTraceTagsEdit'];\n};\n\nconst RequestIdCell: TracesColumnDef['cell'] = ({\n  row: { original },\n  table: {\n    options: { meta },\n  },\n}) => {\n  const { baseComponentId, onTraceClicked } = meta as TracesViewTableMeta;\n  return (\n    <Typography.Link\n      componentId={`${baseComponentId}.traces_table.request_id_link`}\n      ellipsis\n      css={{ maxWidth: '100%', textOverflow: 'ellipsis' }}\n      onClick={() => {\n        onTraceClicked?.(original);\n      }}\n    >\n      {original.request_id}\n    </Typography.Link>\n  );\n};\n\nconst TraceNameCell: TracesColumnDef['cell'] = ({\n  row: { original },\n  table: {\n    options: { meta },\n  },\n}) => {\n  const { baseComponentId, onTraceClicked } = meta as TracesViewTableMeta;\n  return (\n    <Typography.Link\n      componentId={`${baseComponentId}.traces_table.trace_name_link`}\n      ellipsis\n      css={{ maxWidth: '100%', textOverflow: 'ellipsis' }}\n      onClick={() => {\n        onTraceClicked?.(original);\n      }}\n    >\n      {getTraceTagValue(original, TRACE_TAG_NAME_TRACE_NAME)}\n    </Typography.Link>\n  );\n};\n\nconst RunNameCell: TracesColumnDef['cell'] = ({ row: { original } }) => {\n  const runId = getTraceInfoRunId(original);\n  if (!runId || !original.experiment_id) {\n    return null;\n  }\n  const label = original.runName || runId;\n  return (\n    <Link\n      css={{\n        maxWidth: '100%',\n        textOverflow: 'ellipsis',\n        display: 'inline-block',\n        overflow: 'hidden',\n      }}\n      to={Routes.getRunPageRoute(original.experiment_id, runId)}\n    >\n      {label}\n    </Link>\n  );\n};\n\nconst TraceTagsCell: TracesColumnDef['cell'] = ({\n  row: { original },\n  table: {\n    options: { meta },\n  },\n}) => {\n  const { onTraceTagsEdit, baseComponentId } = meta as TracesViewTableMeta;\n  return (\n    <TracesViewTableTagCell\n      tags={original.tags || []}\n      onAddEditTags={() => onTraceTagsEdit?.(original)}\n      baseComponentId={baseComponentId}\n    />\n  );\n};\n\ntype ColumnListItem = {\n  key: string;\n  label: string;\n};\n\nexport const TracesViewTable = React.memo(\n  ({\n    experimentIds,\n    runUuid,\n    traces,\n    loading,\n    error,\n    onTraceClicked,\n    onTraceTagsEdit,\n    hasNextPage,\n    hasPreviousPage,\n    onNextPage,\n    onPreviousPage,\n    usingFilters,\n    onResetFilters,\n    sorting,\n    setSorting,\n    rowSelection,\n    setRowSelection,\n    hiddenColumns = [],\n    disableTokenColumn,\n    baseComponentId,\n    toggleHiddenColumn,\n    disabledColumns = [],\n  }: TracesViewTableProps) => {\n    const intl = useIntl();\n    const { theme } = useDesignSystemTheme();\n\n    const showQuickStart = !loading && traces.length === 0 && !usingFilters && !error;\n\n    const useStaticColumnsCells = isUnstableNestedComponentsMigrated();\n\n    const allColumnsList = useMemo<ColumnListItem[]>(() => {\n      return entries(ExperimentViewTracesTableColumnLabels)\n        .map(([key, label]) => ({\n          key,\n          label: intl.formatMessage(label),\n        }))\n        .filter(({ key }) => !disabledColumns.includes(key));\n    }, [intl, disabledColumns]);\n\n    const columns = useMemo<TracesColumnDef[]>(() => {\n      if (showQuickStart) {\n        return [];\n      }\n\n      const columns: TracesColumnDef[] = [\n        {\n          id: TRACE_TABLE_CHECKBOX_COLUMN_ID,\n          header: TracesViewTableHeaderCheckbox,\n          enableResizing: false,\n          enableSorting: false,\n          cell: TracesViewTableCellCheckbox,\n          meta: { styles: { minWidth: 32, maxWidth: 32 } },\n        },\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.requestId]),\n          enableSorting: false,\n          enableResizing: true,\n          id: ExperimentViewTracesTableColumns.requestId,\n          cell: useStaticColumnsCells\n            ? RequestIdCell\n            : ({ row: { original } }) => {\n                return (\n                  <Typography.Link\n                    componentId={`${baseComponentId}.traces_table.request_id_link`}\n                    ellipsis\n                    css={{ maxWidth: '100%', textOverflow: 'ellipsis' }}\n                    onClick={() => {\n                      onTraceClicked?.(original);\n                    }}\n                  >\n                    {original.request_id}\n                  </Typography.Link>\n                );\n              },\n          meta: { styles: { minWidth: 200 } },\n        },\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.traceName]),\n          enableSorting: false,\n          enableResizing: true,\n          id: ExperimentViewTracesTableColumns.traceName,\n          cell: useStaticColumnsCells\n            ? TraceNameCell\n            : ({ row: { original } }) => {\n                return (\n                  <Typography.Link\n                    componentId={`${baseComponentId}.traces_table.trace_name_link`}\n                    ellipsis\n                    css={{ maxWidth: '100%', textOverflow: 'ellipsis' }}\n                    onClick={() => {\n                      onTraceClicked?.(original);\n                    }}\n                  >\n                    {getTraceTagValue(original, TRACE_TAG_NAME_TRACE_NAME)}\n                  </Typography.Link>\n                );\n              },\n          meta: { styles: { minWidth: 150 } },\n        },\n        {\n          header: intl.formatMessage(\n            ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.timestampMs],\n          ),\n          id: ExperimentViewTracesTableColumns.timestampMs,\n          accessorFn: (data) => data.timestamp_ms,\n          enableSorting: true,\n          enableResizing: true,\n          cell: TracesViewTableTimestampCell,\n          meta: { styles: { minWidth: 100 } },\n        },\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.status]),\n          id: ExperimentViewTracesTableColumns.status,\n          enableSorting: false,\n          enableResizing: true,\n          cell: TracesViewTableStatusCell,\n          meta: { styles: { minWidth: 100 } },\n        },\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.inputs]),\n          id: ExperimentViewTracesTableColumns.inputs,\n          enableSorting: false,\n          enableResizing: true,\n          cell: TracesViewTableRequestPreviewCell,\n          meta: { multiline: true },\n        },\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.outputs]),\n          enableSorting: false,\n          enableResizing: true,\n          id: ExperimentViewTracesTableColumns.outputs,\n          cell: TracesViewTableResponsePreviewCell,\n          meta: { multiline: true },\n        },\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.runName]),\n          enableSorting: false,\n          enableResizing: true,\n          id: ExperimentViewTracesTableColumns.runName,\n          cell: useStaticColumnsCells\n            ? RunNameCell\n            : ({ row: { original } }) => {\n                const runId = getTraceInfoRunId(original);\n                if (!runId || !original.experiment_id) {\n                  return null;\n                }\n                const label = original.runName || runId;\n                return (\n                  <Link\n                    css={{\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                      display: 'inline-block',\n                      overflow: 'hidden',\n                    }}\n                    to={Routes.getRunPageRoute(original.experiment_id, runId)}\n                  >\n                    {label}\n                  </Link>\n                );\n              },\n        },\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.source]),\n          enableSorting: true,\n          enableResizing: true,\n          id: ExperimentViewTracesTableColumns.source,\n          cell: TracesViewTableSourceCell,\n          meta: { styles: { minWidth: 100 } },\n        },\n      ];\n\n      if (!disableTokenColumn) {\n        columns.push({\n          header: intl.formatMessage(\n            ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.totalTokens],\n          ),\n          enableSorting: false,\n          enableResizing: true,\n          id: ExperimentViewTracesTableColumns.totalTokens,\n          accessorFn: (data) => getTraceInfoTotalTokens(data),\n          meta: { styles: { minWidth: 80, maxWidth: 80 } },\n        });\n      }\n      columns.push(\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.latency]),\n          enableSorting: false,\n          enableResizing: true,\n          id: ExperimentViewTracesTableColumns.latency,\n          accessorFn: (data) => {\n            if (isNil(data.execution_time_ms) || !isFinite(data.execution_time_ms)) {\n              return null;\n            }\n            return Utils.formatDuration(data.execution_time_ms);\n          },\n          meta: { styles: { minWidth: 100 } },\n        },\n        {\n          header: intl.formatMessage(ExperimentViewTracesTableColumnLabels[ExperimentViewTracesTableColumns.tags]),\n          enableSorting: false,\n          enableResizing: true,\n          id: ExperimentViewTracesTableColumns.tags,\n          cell: useStaticColumnsCells\n            ? TraceTagsCell\n            : ({ row: { original } }) => {\n                return (\n                  <TracesViewTableTagCell\n                    tags={original.tags || []}\n                    onAddEditTags={() => onTraceTagsEdit?.(original)}\n                    baseComponentId={baseComponentId}\n                  />\n                );\n              },\n        },\n      );\n\n      return columns.filter((column) => column.id && !hiddenColumns.includes(column.id));\n    }, [\n      intl,\n      onTraceClicked,\n      onTraceTagsEdit,\n      disableTokenColumn,\n      hiddenColumns,\n      baseComponentId,\n      useStaticColumnsCells,\n      showQuickStart,\n    ]);\n\n    const table = useReactTable<ModelTraceInfoWithRunName>({\n      columns,\n      data: showQuickStart ? [] : traces,\n      state: { sorting, rowSelection },\n      getCoreRowModel: getCoreRowModel(),\n      getRowId: (row, index) => row.request_id || index.toString(),\n      getSortedRowModel: getSortedRowModel(),\n      onSortingChange: setSorting,\n      onRowSelectionChange: setRowSelection,\n      enableColumnResizing: true,\n      enableRowSelection: true,\n      columnResizeMode: 'onChange',\n      meta: { baseComponentId, onTraceClicked, onTraceTagsEdit } satisfies TracesViewTableMeta,\n    });\n\n    const getEmptyState = () => {\n      if (error) {\n        const errorMessage = error instanceof ErrorWrapper ? error.getMessageField() : error.message;\n        return (\n          <Empty\n            image={<DangerIcon />}\n            description={errorMessage}\n            title={\n              <FormattedMessage\n                defaultMessage=\"Error\"\n                description=\"Experiment page > traces table > error state title\"\n              />\n            }\n          />\n        );\n      }\n      if (!loading && traces.length === 0 && usingFilters) {\n        return (\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No traces found with the current filter query. <button>Reset filters</button> to see all traces.\"\n                description=\"Experiment page > traces table > no traces recorded\"\n                values={{\n                  button: (chunks: any) => (\n                    <Typography.Link\n                      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_traces_tracesviewtable.tsx_289\"\n                      onClick={onResetFilters}\n                    >\n                      {chunks}\n                    </Typography.Link>\n                  ),\n                }}\n              />\n            }\n            title={\n              <FormattedMessage\n                defaultMessage=\"No traces found\"\n                description=\"Experiment page > traces table > no traces recorded\"\n              />\n            }\n          />\n        );\n      }\n      return null;\n    };\n\n    // to improve performance, we pass the column sizes as inline styles to the table\n    const columnSizeInfo = table.getState().columnSizingInfo;\n    const columnSizeVars = React.useMemo(() => {\n      if (showQuickStart) {\n        return {};\n      }\n      const headers = table.getFlatHeaders();\n      const colSizes: { [key: string]: number } = {};\n      headers.forEach((header) => {\n        colSizes[getHeaderSizeClassName(header.id)] = header.getSize();\n        colSizes[getColumnSizeClassName(header.column.id)] = header.column.getSize();\n      });\n      return colSizes;\n      // we need to recompute this whenever columns get resized or changed\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [columnSizeInfo, columns, table, showQuickStart]);\n\n    if (showQuickStart) {\n      return <TracesViewTableNoTracesQuickstart baseComponentId={baseComponentId} runUuid={runUuid} />;\n    }\n\n    return (\n      <Table\n        scrollable\n        empty={getEmptyState()}\n        style={columnSizeVars}\n        pagination={\n          <CursorPagination\n            componentId={`${baseComponentId}.traces_table.pagination`}\n            hasNextPage={hasNextPage}\n            hasPreviousPage={hasPreviousPage}\n            onNextPage={onNextPage}\n            onPreviousPage={onPreviousPage}\n          />\n        }\n      >\n        <TableRow isHeader>\n          {table.getLeafHeaders().map((header) => {\n            return (\n              <TableHeader\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_traces_tracesviewtable.tsx_365\"\n                key={header.id}\n                css={(header.column.columnDef as TracesColumnDef).meta?.styles}\n                sortable={header.column.getCanSort()}\n                sortDirection={header.column.getIsSorted() || 'none'}\n                onToggleSort={header.column.getToggleSortingHandler()}\n                header={header}\n                column={header.column}\n                setColumnSizing={table.setColumnSizing}\n                isResizing={header.column.getIsResizing()}\n                style={{\n                  flex: `calc(var(${getHeaderSizeClassName(header.id)}) / 100)`,\n                }}\n              >\n                {flexRender(header.column.columnDef.header, header.getContext())}\n              </TableHeader>\n            );\n          })}\n          <TableRowAction>\n            <DropdownMenu.Root>\n              <DropdownMenu.Trigger asChild>\n                <Button\n                  componentId={`${baseComponentId}.traces_table.column_selector_dropdown`}\n                  icon={<ColumnsIcon />}\n                  size=\"small\"\n                  aria-label={intl.formatMessage({\n                    defaultMessage: 'Select columns',\n                    description: 'Experiment page > traces table > column selector dropdown aria label',\n                  })}\n                />\n              </DropdownMenu.Trigger>\n              <DropdownMenu.Content align=\"end\">\n                {allColumnsList.map(({ key, label }) => (\n                  <DropdownMenu.CheckboxItem\n                    key={key}\n                    componentId={`${baseComponentId}.traces_table.column_toggle_button`}\n                    checked={!hiddenColumns.includes(key)}\n                    onClick={() => toggleHiddenColumn(key)}\n                  >\n                    <DropdownMenu.ItemIndicator />\n                    {label}\n                  </DropdownMenu.CheckboxItem>\n                ))}\n              </DropdownMenu.Content>\n            </DropdownMenu.Root>\n          </TableRowAction>\n        </TableRow>\n        {loading && <TableSkeletonRows table={table} />}\n        {!loading &&\n          !error &&\n          table\n            .getRowModel()\n            .rows.map((row) => (\n              <TracesViewTableRow key={row.id} row={row} columns={columns} selected={rowSelection[row.id]} />\n            ))}\n      </Table>\n    );\n  },\n);\n","import { type ModelTraceInfo } from '@databricks/web-shared/model-trace-explorer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { MlflowService } from '../../../sdk/MlflowService';\n\n/**\n * Fetches single trace info object for a given trace request ID.\n */\nexport const useExperimentTraceInfo = (requestId: string, enabled = true) => {\n  const [traceInfo, setTraceInfoData] = useState<ModelTraceInfo | undefined>(undefined);\n  const [loading, setLoading] = useState<boolean>(enabled);\n  const [error, setError] = useState<Error | undefined>(undefined);\n\n  const fetchTraceInfo = useCallback(async () => {\n    if (!enabled) {\n      return;\n    }\n    setError(undefined);\n\n    try {\n      const response = await MlflowService.getExperimentTraceInfo(requestId);\n\n      if (!response.trace_info) {\n        setTraceInfoData(undefined);\n        return;\n      }\n\n      setTraceInfoData(response.trace_info);\n    } catch (e: any) {\n      setError(e);\n    } finally {\n      setLoading(false);\n    }\n  }, [enabled, requestId]);\n\n  useEffect(() => {\n    fetchTraceInfo();\n  }, [fetchTraceInfo]);\n\n  return {\n    traceInfo,\n    loading,\n    error,\n  };\n};\n","import {\n  DangerIcon,\n  Drawer,\n  Empty,\n  Spacer,\n  TableSkeleton,\n  TitleSkeleton,\n  Typography,\n  WarningIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { getTraceDisplayName } from './TracesView.utils';\nimport { useExperimentTraceData } from './hooks/useExperimentTraceData';\nimport {\n  type ModelTraceInfo,\n  ModelTraceExplorer,\n  ModelTraceExplorerSkeleton,\n} from '@databricks/web-shared/model-trace-explorer';\nimport { useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useExperimentTraceInfo } from './hooks/useExperimentTraceInfo';\n\nexport const TraceDataDrawer = ({\n  requestId,\n  traceInfo,\n  loadingTraceInfo,\n  onClose,\n  selectedSpanId,\n  onSelectSpan,\n}: {\n  requestId: string;\n  traceInfo?: ModelTraceInfo;\n  loadingTraceInfo?: boolean;\n  onClose: () => void;\n  selectedSpanId?: string;\n  onSelectSpan?: (selectedSpanId?: string) => void;\n}) => {\n  const {\n    traceData,\n    loading: loadingTraceData,\n    error,\n  } = useExperimentTraceData(\n    requestId,\n    // skip fetching trace data if trace is in progress\n    traceInfo?.status === 'IN_PROGRESS',\n  );\n  const { theme } = useDesignSystemTheme();\n\n  // Usually, we rely on the parent component to provide trace info object (when clicked in a table row).\n  // But in some cases it's not available (e.g. when deep linking to a trace when the entity is not on the same page)\n  // and then we fetch it independently here.\n  const shouldFetchTraceInfo = !loadingTraceInfo && !traceInfo;\n\n  const { traceInfo: internalTraceInfo, loading: loadingInternalTracingInfo } = useExperimentTraceInfo(\n    requestId,\n    shouldFetchTraceInfo,\n  );\n\n  const traceInfoToUse = traceInfo || internalTraceInfo;\n\n  const title = useMemo(() => {\n    if (loadingTraceInfo || loadingInternalTracingInfo) {\n      return <TitleSkeleton />;\n    }\n    if (traceInfoToUse) {\n      return (\n        <Typography.Title level={2} withoutMargins>\n          {getTraceDisplayName(traceInfoToUse as ModelTraceInfo)}\n        </Typography.Title>\n      );\n    }\n    return requestId;\n  }, [\n    // Memo dependency list\n    loadingTraceInfo,\n    loadingInternalTracingInfo,\n    traceInfoToUse,\n    requestId,\n  ]);\n\n  // Construct the model trace object with the trace info and trace data\n  const combinedModelTrace = useMemo(\n    () =>\n      traceData\n        ? {\n            info: traceInfoToUse || {},\n            data: traceData,\n          }\n        : undefined,\n    [traceData, traceInfoToUse],\n  );\n\n  const containsSpans = (traceData?.spans || []).length > 0;\n\n  const renderContent = () => {\n    if (loadingTraceData || loadingTraceInfo || loadingInternalTracingInfo) {\n      return <ModelTraceExplorerSkeleton />;\n    }\n    if (traceInfo?.status === 'IN_PROGRESS') {\n      return (\n        <>\n          <Spacer size=\"lg\" />\n          <Empty\n            image={<WarningIcon />}\n            description={\n              <FormattedMessage\n                defaultMessage=\"Trace data is not available for in-progress traces. Please wait for the trace to complete.\"\n                description=\"Experiment page > traces data drawer > in-progress description\"\n              />\n            }\n            title={\n              <FormattedMessage\n                defaultMessage=\"Trace data not available\"\n                description=\"Experiment page > traces data drawer > in-progress title\"\n              />\n            }\n          />\n        </>\n      );\n    }\n    if (error) {\n      return (\n        <>\n          <Spacer size=\"lg\" />\n          <Empty\n            image={<DangerIcon />}\n            description={\n              <FormattedMessage\n                defaultMessage=\"An error occurred while attempting to fetch the trace data. Please wait a moment and try again.\"\n                description=\"Experiment page > traces data drawer > error state description\"\n              />\n            }\n            title={\n              <FormattedMessage\n                defaultMessage=\"Error\"\n                description=\"Experiment page > traces data drawer > error state title\"\n              />\n            }\n          />\n        </>\n      );\n    }\n    if (!containsSpans) {\n      return (\n        <>\n          <Spacer size=\"lg\" />\n          <Empty\n            description={null}\n            title={\n              <FormattedMessage\n                defaultMessage=\"No trace data recorded\"\n                description=\"Experiment page > traces data drawer > no trace data recorded empty state\"\n              />\n            }\n          />\n        </>\n      );\n    }\n    if (combinedModelTrace) {\n      return (\n        <div\n          css={{\n            height: '100%',\n            marginLeft: -theme.spacing.lg,\n            marginRight: -theme.spacing.lg,\n            marginBottom: -theme.spacing.lg,\n          }}\n          // This is required for mousewheel scrolling within `Drawer`\n          onWheel={(e) => e.stopPropagation()}\n        >\n          <ModelTraceExplorer\n            modelTrace={combinedModelTrace}\n            selectedSpanId={selectedSpanId}\n            onSelectSpan={onSelectSpan}\n          />\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Drawer.Root\n      modal\n      open\n      onOpenChange={(open) => {\n        if (!open) {\n          onClose();\n        }\n      }}\n    >\n      <Drawer.Content\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_traces_tracedatadrawer.tsx_222\"\n        width=\"90vw\"\n        title={title}\n        expandContentToFullHeight\n      >\n        {renderContent()}\n      </Drawer.Content>\n    </Drawer.Root>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { MlflowService } from '../../../sdk/MlflowService';\nimport { ModelTraceStatus, type ModelTraceData } from '@databricks/web-shared/model-trace-explorer';\nimport Utils from '../../../../common/utils/Utils';\n\nexport const useExperimentTraceData = (traceId?: string, skip = false) => {\n  const [traceData, setTraceData] = useState<ModelTraceData | undefined>(undefined);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>(undefined);\n\n  const fetchTraceData = useCallback(async (traceId: string) => {\n    setLoading(true);\n    try {\n      const response = await MlflowService.getExperimentTraceData(traceId);\n\n      if (Array.isArray(response.spans)) {\n        setTraceData(response);\n      } else {\n        // Not a showstopper, but we should log this error and notify the user.\n        Utils.logErrorAndNotifyUser('Invalid trace data response: ' + JSON.stringify(response?.toString()));\n      }\n    } catch (e: any) {\n      setError(e);\n    }\n    setLoading(false);\n  }, []);\n\n  useEffect(() => {\n    if (traceId && !skip) {\n      fetchTraceData(traceId);\n    }\n  }, [fetchTraceData, traceId, skip]);\n\n  return { traceData, loading, error };\n};\n","import Utils from '@mlflow/mlflow/src/common/utils/Utils';\nimport { keys, pickBy } from 'lodash';\nimport React, { useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { MlflowService } from '../../sdk/MlflowService';\nimport { Modal, Typography } from '@databricks/design-system';\n\nexport const TracesViewDeleteTraceModal = ({\n  experimentIds,\n  visible,\n  rowSelection,\n  setRowSelection,\n  handleClose,\n  refreshTraces,\n}: {\n  experimentIds: string[];\n  visible: boolean;\n  rowSelection: { [id: string]: boolean };\n  setRowSelection: (rowSelection: { [id: string]: boolean }) => void;\n  handleClose: () => void;\n  refreshTraces: () => void;\n}) => {\n  const intl = useIntl();\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n  const tracesToDelete = keys(pickBy(rowSelection, (value) => value));\n\n  const submitDeleteTraces = async () => {\n    try {\n      // TODO: Add support for deleting traces from multiple experiments\n      // The trace data contains the experiment ID, so we simply need to\n      // pass the trace data instead of just the trace IDs.\n      await MlflowService.deleteTraces(experimentIds[0] ?? '', tracesToDelete);\n\n      // reset row selection and refresh traces\n      setRowSelection({});\n      refreshTraces();\n      handleClose();\n    } catch (e: any) {\n      setErrorMessage(\n        intl.formatMessage({\n          defaultMessage: 'An error occured while attempting to delete traces. Please refresh the page and try again.',\n          description: 'Experiment page > traces view controls > Delete traces modal > Error message',\n        }),\n      );\n    }\n    setIsLoading(false);\n  };\n\n  const handleOk = () => {\n    submitDeleteTraces();\n    setIsLoading(true);\n  };\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_traces_tracesviewdeletetracemodal.tsx_62\"\n      title={\n        <FormattedMessage\n          defaultMessage=\"{count, plural, one {Delete Trace} other {Delete Traces}}\"\n          description=\"Experiment page > traces view controls > Delete traces modal > Title\"\n          values={{ count: tracesToDelete.length }}\n        />\n      }\n      visible={visible}\n      onCancel={handleClose}\n      okText={\n        <FormattedMessage\n          defaultMessage=\"Delete {count, plural, one { # trace } other { # traces }}\"\n          description=\"Experiment page > traces view controls > Delete traces modal > Delete button\"\n          values={{ count: tracesToDelete.length }}\n        />\n      }\n      onOk={handleOk}\n      okButtonProps={{ loading: isLoading, danger: true }}\n    >\n      {errorMessage && <Typography.Paragraph color=\"error\">{errorMessage}</Typography.Paragraph>}\n      <Typography.Paragraph>\n        <Typography.Text bold>\n          <FormattedMessage\n            defaultMessage=\"{count, plural, one { # trace } other { # traces }} will be deleted.\"\n            description=\"Experiment page > traces view controls > Delete traces modal > Confirmation message title\"\n            values={{\n              count: tracesToDelete.length,\n            }}\n          />\n        </Typography.Text>\n      </Typography.Paragraph>\n      <Typography.Paragraph>\n        <FormattedMessage\n          defaultMessage=\"Deleted traces cannot be restored. Are you sure you want to proceed?\"\n          description=\"Experiment page > traces view controls > Delete traces modal > Confirmation message\"\n        />\n      </Typography.Paragraph>\n    </Modal>\n  );\n};\n","import { Button, useDesignSystemTheme } from '@databricks/design-system';\nimport React, { useCallback, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { TracesViewDeleteTraceModal } from './TracesViewDeleteTraceModal';\n\nexport const TracesViewControlsActions = ({\n  experimentIds,\n  rowSelection,\n  setRowSelection,\n  refreshTraces,\n  baseComponentId,\n}: {\n  experimentIds: string[];\n  rowSelection: { [id: string]: boolean };\n  setRowSelection: (rowSelection: { [id: string]: boolean }) => void;\n  refreshTraces: () => void;\n  baseComponentId: string;\n}) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  const openModal = useCallback(() => {\n    setIsModalOpen(true);\n  }, [setIsModalOpen]);\n\n  const closeModal = useCallback(() => {\n    setIsModalOpen(false);\n  }, [setIsModalOpen]);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        gap: theme.spacing.sm,\n      }}\n    >\n      <Button componentId={`${baseComponentId}.traces_table.delete_traces`} onClick={openModal} danger>\n        <FormattedMessage\n          defaultMessage=\"Delete\"\n          description=\"Experiment page > traces view controls > Delete button\"\n        />\n      </Button>\n      <TracesViewDeleteTraceModal\n        experimentIds={experimentIds}\n        visible={isModalOpen}\n        rowSelection={rowSelection}\n        handleClose={closeModal}\n        refreshTraces={refreshTraces}\n        setRowSelection={setRowSelection}\n      />\n    </div>\n  );\n};\n","import {\n  Button,\n  InfoSmallIcon,\n  Input,\n  Popover,\n  SearchIcon,\n  TableFilterLayout,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { TracesViewControlsActions } from './TracesViewControlsActions';\nimport type { ModelTraceInfoWithRunName } from './hooks/useExperimentTraces';\n\nconst InputTooltip = ({ baseComponentId }: { baseComponentId: string }) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Popover.Root\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_traces_tracesviewcontrols.tsx_28\"\n      modal={false}\n    >\n      <Popover.Trigger asChild>\n        <Button\n          size=\"small\"\n          type=\"link\"\n          icon={\n            <InfoSmallIcon\n              css={{\n                svg: { width: 16, height: 16, color: theme.colors.textSecondary },\n              }}\n            />\n          }\n          componentId={`${baseComponentId}.traces_table.filter_tooltip`}\n        />\n      </Popover.Trigger>\n      <Popover.Content>\n        <Popover.Arrow />\n        <Typography.Paragraph>\n          <FormattedMessage\n            defaultMessage=\"Search traces using a simplified version of the SQL {whereBold} clause.\"\n            description=\"Tooltip string to explain how to search runs from the experiments table\"\n            values={{ whereBold: <b>WHERE</b> }}\n          />\n        </Typography.Paragraph>\n        <FormattedMessage defaultMessage=\"Examples:\" description=\"Text header for examples of mlflow search syntax\" />\n        <ul>\n          <li>\n            <code>tags.some_tag = \"abc\"</code>\n          </li>\n        </ul>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n\nexport const TracesViewControls = ({\n  experimentIds,\n  filter,\n  onChangeFilter,\n  rowSelection,\n  setRowSelection,\n  refreshTraces,\n  baseComponentId,\n  runUuid,\n  traces,\n}: {\n  experimentIds: string[];\n  filter: string;\n  onChangeFilter: (newFilter: string) => void;\n  rowSelection: { [id: string]: boolean };\n  setRowSelection: (newSelection: { [id: string]: boolean }) => void;\n  refreshTraces: () => void;\n  baseComponentId: string;\n  runUuid?: string;\n  traces: ModelTraceInfoWithRunName[];\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  // Internal filter value state, used to control the input value\n  const [filterValue, setFilterValue] = useState<string | undefined>(filter || undefined);\n  const [isEvaluateTracesModalOpen, setEvaluateTracesModalOpen] = useState(false);\n\n  const displayedFilterValue = filterValue ?? filter;\n\n  const selectedRequestIds = Object.entries(rowSelection)\n    .filter(([, isSelected]) => isSelected)\n    .map(([id]) => id);\n  const showActionButtons = selectedRequestIds.length > 0;\n\n  const searchOrDeleteControls = showActionButtons ? (\n    <TracesViewControlsActions\n      experimentIds={experimentIds}\n      rowSelection={rowSelection}\n      setRowSelection={setRowSelection}\n      refreshTraces={refreshTraces}\n      baseComponentId={baseComponentId}\n    />\n  ) : (\n    <TableFilterLayout css={{ marginBottom: 0 }}>\n      <Input\n        componentId={`${baseComponentId}.traces_table.search_filter`}\n        placeholder={intl.formatMessage({\n          defaultMessage: 'Search traces',\n          description: 'Experiment page > traces view filters > filter string input placeholder',\n        })}\n        value={displayedFilterValue}\n        // Matches runs filter input width\n        css={{ width: 430 }}\n        onChange={(e) => setFilterValue(e.target.value)}\n        prefix={<SearchIcon />}\n        suffix={<InputTooltip baseComponentId={baseComponentId} />}\n        allowClear\n        onClear={() => {\n          onChangeFilter('');\n          setFilterValue(undefined);\n        }}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter') {\n            onChangeFilter(displayedFilterValue);\n            setFilterValue(undefined);\n          }\n        }}\n      />\n    </TableFilterLayout>\n  );\n\n  return (\n    <div css={{ display: 'flex', gap: theme.spacing.xs }}>\n      {/* Search and delete controls */}\n      {searchOrDeleteControls}\n    </div>\n  );\n};\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport LocalStorageUtils from '../../../../common/utils/LocalStorageUtils';\nimport { isObject, sortBy } from 'lodash';\nimport { ExperimentViewTracesTableColumns } from '../TracesView.utils';\n\ntype LocalStorageStore = ReturnType<typeof LocalStorageUtils.getStoreForComponent>;\n\nexport interface ExperimentViewTracesUIState {\n  hiddenColumns?: string[];\n}\n\nconst defaultExperimentViewTracesUIState: ExperimentViewTracesUIState = {\n  hiddenColumns: [ExperimentViewTracesTableColumns.traceName, ExperimentViewTracesTableColumns.source],\n};\n\nconst loadExperimentViewTracesUIState = (localStore: LocalStorageStore): ExperimentViewTracesUIState => {\n  try {\n    const uiStateRaw = localStore.getItem('uiState');\n    const uiState = JSON.parse(uiStateRaw);\n    if (!isObject(uiState)) {\n      return defaultExperimentViewTracesUIState;\n    }\n    return uiState;\n  } catch (e) {\n    return defaultExperimentViewTracesUIState;\n  }\n};\n\nexport const useExperimentViewTracesUIState = (experimentIds: string[]) => {\n  const localStore = useMemo(() => {\n    const persistenceIdentifier = JSON.stringify(experimentIds.slice().sort());\n    return LocalStorageUtils.getStoreForComponent('ExperimentViewTraces', persistenceIdentifier);\n  }, [experimentIds]);\n\n  const [uiState, setUIState] = useState<ExperimentViewTracesUIState>(() =>\n    loadExperimentViewTracesUIState(localStore),\n  );\n\n  const toggleHiddenColumn = useCallback((columnId: string) => {\n    setUIState((prevUIState) => {\n      const hiddenColumns = prevUIState.hiddenColumns || [];\n      return {\n        hiddenColumns: hiddenColumns.includes(columnId)\n          ? hiddenColumns.filter((id) => id !== columnId)\n          : [...hiddenColumns, columnId],\n      };\n    });\n  }, []);\n\n  useEffect(() => {\n    localStore.setItem('uiState', JSON.stringify(uiState));\n  }, [localStore, uiState]);\n\n  return { uiState, toggleHiddenColumn };\n};\n","import { useCallback } from 'react';\nimport { useSearchParams } from '../../../../common/utils/RoutingUtils';\n\nconst QUERY_PARAM_KEY = 'selectedTraceId';\n\n/**\n * Query param-powered hook that returns the currently selected trace ID and a function to set the selected trace ID.\n * To be used in traces page components.\n */\nexport const useActiveExperimentTrace = () => {\n  // TODO(ML-40722): Create separate UI route for traces page and use route params instead of search params\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const selectedTraceId = searchParams.get(QUERY_PARAM_KEY) ?? undefined;\n\n  const setSelectedTraceId = useCallback(\n    (selectedTraceId: string | undefined) => {\n      setSearchParams((params) => {\n        if (selectedTraceId === undefined) {\n          params.delete(QUERY_PARAM_KEY);\n          return params;\n        }\n        params.set(QUERY_PARAM_KEY, selectedTraceId);\n        return params;\n      });\n    },\n    [setSearchParams],\n  );\n\n  return [selectedTraceId, setSelectedTraceId] as const;\n};\n","import { useCallback } from 'react';\nimport { useSearchParams } from '../../../../common/utils/RoutingUtils';\n\nconst QUERY_PARAM_KEY = 'selectedSpanId';\n\n/**\n * Query param-powered hook that returns the currently selected span ID and a function to set the selected span ID.\n * To be used in traces page components.\n */\nexport const useActiveExperimentSpan = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const selectedSpanId = searchParams.get(QUERY_PARAM_KEY) ?? undefined;\n\n  const setSelectedSpanId = useCallback(\n    (selectedSpanId: string | undefined) => {\n      setSearchParams(\n        (params) => {\n          if (selectedSpanId === undefined) {\n            params.delete(QUERY_PARAM_KEY);\n            return params;\n          }\n          params.set(QUERY_PARAM_KEY, selectedSpanId);\n          return params;\n        },\n        { replace: true },\n      );\n    },\n    [setSearchParams],\n  );\n\n  return [selectedSpanId, setSelectedSpanId] as const;\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\nimport { useExperimentTraces } from './hooks/useExperimentTraces';\nimport { TracesViewTable } from './TracesViewTable';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { TraceDataDrawer } from './TraceDataDrawer';\nimport { useEditExperimentTraceTags } from './hooks/useEditExperimentTraceTags';\nimport { TracesViewControls } from './TracesViewControls';\nimport type { SortingState } from '@tanstack/react-table';\nimport { compact, isFunction, isNil, uniq } from 'lodash';\nimport { useExperimentViewTracesUIState } from './hooks/useExperimentViewTracesUIState';\nimport { ExperimentViewTracesTableColumns, getTraceInfoTotalTokens } from './TracesView.utils';\nimport { useActiveExperimentTrace } from './hooks/useActiveExperimentTrace';\nimport { useActiveExperimentSpan } from './hooks/useActiveExperimentSpan';\nimport type { ModelTraceInfo } from '@databricks/web-shared/model-trace-explorer';\n\nexport const TRACE_AUTO_REFRESH_INTERVAL = 30000;\n\nconst defaultSorting: SortingState = [{ id: ExperimentViewTracesTableColumns.timestampMs, desc: true }];\n\nexport const TracesView = ({\n  experimentIds,\n  runUuid,\n  loggedModelId,\n  disabledColumns,\n  baseComponentId = runUuid ? 'mlflow.run.traces' : 'mlflow.experiment_page.traces',\n}: {\n  experimentIds: string[];\n  /**\n   * If `runUuid` is provided, the traces will be filtered to only show traces from that run.\n   */\n  runUuid?: string;\n  /**\n   * If `loggedModelId` is provided, the traces will be filtered to only show traces from that logged model.\n   */\n  loggedModelId?: string;\n  /**\n   * Columns that should be disabled in the table.\n   * Disabled columns are hidden and are not available to be toggled at all.\n   */\n  disabledColumns?: ExperimentViewTracesTableColumns[];\n  /**\n   * The base component ID for the traces view. If not provided, will be inferred from the other props.\n   */\n  baseComponentId?: string;\n}) => {\n  const timeoutRef = useRef<number | undefined>(undefined);\n  const [filter, setFilter] = useState<string>('');\n  const [sorting, setSorting] = useState<SortingState>(defaultSorting);\n  const [rowSelection, setRowSelection] = useState<{ [id: string]: boolean }>({});\n\n  const [selectedTraceId, setSelectedTraceId] = useActiveExperimentTrace();\n  const [selectedSpanId, setSelectedSpanId] = useActiveExperimentSpan();\n\n  const { traces, loading, error, hasNextPage, hasPreviousPage, fetchNextPage, fetchPrevPage, refreshCurrentPage } =\n    useExperimentTraces({\n      experimentIds,\n      sorting,\n      filter,\n      runUuid,\n      loggedModelId,\n    });\n\n  const onTraceClicked = useCallback(\n    ({ request_id }: ModelTraceInfo) => setSelectedTraceId(request_id),\n    [setSelectedTraceId],\n  );\n\n  // clear row selections when the page changes.\n  // the backend specifies a max of 100 deletions,\n  // plus it's confusing to have selections on a\n  // page that the user can't see\n  const onNextPage = useCallback(() => {\n    fetchNextPage();\n    setRowSelection({});\n  }, [fetchNextPage]);\n\n  const onPreviousPage = useCallback(() => {\n    fetchPrevPage();\n    setRowSelection({});\n  }, [fetchPrevPage]);\n\n  // auto-refresh traces\n  useEffect(() => {\n    // if the hook reruns, clear the current timeout, since we'll be scheduling another\n    window.clearTimeout(timeoutRef.current);\n\n    const scheduleRefresh = async () => {\n      // only refresh if the user is on the first page\n      // otherwise it might mess with browsing old traces\n      if (loading || hasPreviousPage) return;\n\n      await refreshCurrentPage(true);\n\n      window.clearTimeout(timeoutRef.current);\n      timeoutRef.current = window.setTimeout(scheduleRefresh, TRACE_AUTO_REFRESH_INTERVAL);\n    };\n\n    timeoutRef.current = window.setTimeout(scheduleRefresh, TRACE_AUTO_REFRESH_INTERVAL);\n    return () => window.clearTimeout(timeoutRef.current);\n  }, [refreshCurrentPage, loading, hasPreviousPage]);\n\n  const { theme } = useDesignSystemTheme();\n\n  // Try to find the trace info for the currently selected trace id\n  const selectedTraceInfo = useMemo(() => {\n    if (!selectedTraceId) return undefined;\n    return traces.find((trace) => trace.request_id === selectedTraceId);\n  }, [selectedTraceId, traces]);\n\n  const {\n    // hiddenColumns is a list of columns that are hidden by the user.\n    uiState,\n    toggleHiddenColumn,\n  } = useExperimentViewTracesUIState(experimentIds);\n\n  const existingTagKeys = useMemo(\n    () => uniq(compact(traces.flatMap((trace) => trace.tags?.map((tag) => tag.key)))),\n    [traces],\n  );\n\n  const { showEditTagsModalForTrace, EditTagsModal } = useEditExperimentTraceTags({\n    onSuccess: () => refreshCurrentPage(true),\n    existingTagKeys,\n  });\n\n  const usingFilters = filter !== '';\n\n  const anyTraceContainsTokenCount = traces.some((trace) => !isNil(getTraceInfoTotalTokens(trace)));\n\n  // Automatically disabled columns: hide the token count column if there's no trace that contains token count information.\n  const autoDisabledColumns = useMemo(\n    () => (!anyTraceContainsTokenCount ? [ExperimentViewTracesTableColumns.totalTokens] : []),\n    [anyTraceContainsTokenCount],\n  );\n\n  // Combine columns that are disabled by parent component and columns that are disabled automatically.\n  const allDisabledColumns = useMemo(\n    () => [...(disabledColumns ?? []), ...autoDisabledColumns],\n    [disabledColumns, autoDisabledColumns],\n  );\n\n  const allHiddenColumns = useMemo(\n    () => [...(uiState.hiddenColumns ?? []), ...allDisabledColumns],\n    [uiState, allDisabledColumns],\n  );\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        height: '100%',\n        overflow: 'hidden',\n      }}\n    >\n      <TracesViewControls\n        experimentIds={experimentIds}\n        filter={filter}\n        onChangeFilter={setFilter}\n        rowSelection={rowSelection}\n        setRowSelection={setRowSelection}\n        refreshTraces={refreshCurrentPage}\n        baseComponentId={baseComponentId}\n        runUuid={runUuid}\n        traces={traces}\n      />\n      <TracesViewTable\n        experimentIds={experimentIds}\n        runUuid={runUuid}\n        traces={traces}\n        loading={loading}\n        error={error}\n        onTraceClicked={onTraceClicked}\n        onTraceTagsEdit={showEditTagsModalForTrace}\n        hasNextPage={hasNextPage}\n        hasPreviousPage={hasPreviousPage}\n        onPreviousPage={onPreviousPage}\n        onNextPage={onNextPage}\n        onTagsUpdated={refreshCurrentPage}\n        usingFilters={usingFilters}\n        onResetFilters={() => setFilter('')}\n        hiddenColumns={allHiddenColumns}\n        disableTokenColumn={!anyTraceContainsTokenCount}\n        disabledColumns={allDisabledColumns}\n        setSorting={(sortingSetter) => {\n          // If header is clicked enough times, tanstack table switches to \"no sort\" mode.\n          // In that case, we should just reverse the direction of the current sort instead.\n          if (isFunction(sortingSetter)) {\n            return setSorting((currentState) => {\n              const newState = sortingSetter(currentState);\n              const currentSortBy = currentState[0];\n              if ((!newState || newState.length === 0) && currentSortBy) {\n                return [{ id: currentSortBy.id, desc: !currentSortBy.desc }];\n              }\n              return newState;\n            });\n          }\n        }}\n        sorting={sorting}\n        rowSelection={rowSelection}\n        setRowSelection={setRowSelection}\n        baseComponentId={baseComponentId}\n        toggleHiddenColumn={toggleHiddenColumn}\n      />\n      {selectedTraceId && (\n        <TraceDataDrawer\n          traceInfo={selectedTraceInfo}\n          loadingTraceInfo={loading}\n          requestId={selectedTraceId}\n          onClose={() => setSelectedTraceId(undefined)}\n          selectedSpanId={selectedSpanId}\n          onSelectSpan={setSelectedSpanId}\n        />\n      )}\n      {EditTagsModal}\n    </div>\n  );\n};\n","import React, { useMemo } from 'react';\nimport {\n  Button,\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListSelectItem,\n  DialogComboboxTrigger,\n  FormUI,\n  RefreshIcon,\n  Tooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport {\n  invalidateMlflowSearchTracesCache,\n  SEARCH_MLFLOW_TRACES_QUERY_KEY,\n} from '@databricks/web-shared/genai-traces-table';\nimport { useIntl } from '@databricks/i18n';\nimport { getNamedDateFilters } from './utils/dateUtils';\nimport {\n  DEFAULT_START_TIME_LABEL,\n  useMonitoringFilters,\n} from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringFilters';\nimport { isNil } from 'lodash';\nimport { RangePicker } from '@databricks/design-system/development';\nimport { useMonitoringConfig } from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringConfig';\nimport { useQueryClient, useIsFetching } from '@databricks/web-shared/query-client';\n\nexport interface DateRange {\n  startDate: string;\n  endDate: string;\n}\n\nexport const TracesV3DateSelector = React.memo(() => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const queryClient = useQueryClient();\n  const isFetching = useIsFetching({ queryKey: [SEARCH_MLFLOW_TRACES_QUERY_KEY] });\n\n  const [monitoringFilters, setMonitoringFilters] = useMonitoringFilters();\n\n  const namedDateFilters = useMemo(() => getNamedDateFilters(intl), [intl]);\n\n  // List of labels for \"start time\" filter\n  const currentStartTimeFilterLabel = intl.formatMessage({\n    defaultMessage: 'Time Range',\n    description: 'Label for the start range select dropdown for experiment runs view',\n  });\n\n  const monitoringConfig = useMonitoringConfig();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        gap: theme.spacing.sm,\n        alignItems: 'center',\n      }}\n    >\n      <DialogCombobox\n        componentId=\"mlflow.experiment-evaluation-monitoring.date-selector\"\n        label={currentStartTimeFilterLabel}\n        value={monitoringFilters.startTimeLabel ? [monitoringFilters.startTimeLabel] : [DEFAULT_START_TIME_LABEL]}\n      >\n        <DialogComboboxTrigger\n          renderDisplayedValue={(value) => {\n            return namedDateFilters.find((namedDateFilter) => namedDateFilter.key === value)?.label;\n          }}\n          allowClear={\n            !isNil(monitoringFilters.startTimeLabel) && monitoringFilters.startTimeLabel !== DEFAULT_START_TIME_LABEL\n          }\n          onClear={() => {\n            setMonitoringFilters({ startTimeLabel: DEFAULT_START_TIME_LABEL });\n          }}\n          data-testid=\"time-range-select-dropdown\"\n        />\n        <DialogComboboxContent>\n          <DialogComboboxOptionList>\n            {namedDateFilters.map((namedDateFilter) => (\n              <DialogComboboxOptionListSelectItem\n                key={namedDateFilter.key}\n                checked={\n                  monitoringFilters.startTimeLabel === namedDateFilter.key ||\n                  (namedDateFilter.key === DEFAULT_START_TIME_LABEL && isNil(monitoringFilters.startTimeLabel))\n                }\n                title={namedDateFilter.label}\n                data-testid={`time-range-select-${namedDateFilter}`}\n                value={namedDateFilter.key}\n                onChange={() => {\n                  setMonitoringFilters({\n                    ...monitoringFilters,\n                    startTimeLabel: namedDateFilter.key,\n                  });\n                }}\n              >\n                {namedDateFilter.label}\n              </DialogComboboxOptionListSelectItem>\n            ))}\n          </DialogComboboxOptionList>\n        </DialogComboboxContent>\n      </DialogCombobox>\n      {monitoringFilters.startTimeLabel === 'CUSTOM' && (\n        <>\n          <RangePicker\n            id=\"date-picker-range\"\n            includeTime\n            selected={{\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- TODO(FEINF-3982)\n              from: new Date(monitoringFilters.startTime!),\n              to: monitoringFilters.endTime ? new Date(monitoringFilters.endTime) : monitoringConfig.dateNow,\n            }}\n            onChange={(e) => {\n              const date = e.target.value;\n              setMonitoringFilters({\n                ...monitoringFilters,\n                startTime: date?.from ? date.from.toISOString() : undefined,\n                endTime: date?.to ? date.to.toISOString() : undefined,\n              });\n            }}\n            startDatePickerProps={{\n              componentId: 'experiment-evaluation-monitoring-start-date-picker',\n              datePickerProps: {\n                disabled: {\n                  after: monitoringConfig.dateNow,\n                },\n              },\n              value: monitoringFilters.startTime ? new Date(monitoringFilters.startTime) : undefined,\n            }}\n            endDatePickerProps={{\n              componentId: 'experiment-evaluation-monitoring-end-date-picker',\n              datePickerProps: {\n                disabled: {\n                  after: monitoringConfig.dateNow,\n                },\n              },\n              value: monitoringFilters.endTime ? new Date(monitoringFilters.endTime) : undefined,\n            }}\n          />\n        </>\n      )}\n      <Tooltip\n        componentId=\"mlflow.experiment-evaluation-monitoring.trace-info-hover-request-time\"\n        content={intl.formatMessage(\n          {\n            defaultMessage: 'Showing data up to {date}.',\n            description: 'Tooltip for the refresh button showing the current date and time',\n          },\n          {\n            date: monitoringConfig.dateNow.toLocaleString(navigator.language, {\n              timeZoneName: 'short',\n            }),\n          },\n        )}\n      >\n        <Button\n          type=\"link\"\n          componentId=\"mlflow.experiment-evaluation-monitoring.refresh-date-button\"\n          disabled={Boolean(isFetching)}\n          onClick={() => {\n            monitoringConfig.refresh();\n            invalidateMlflowSearchTracesCache({ queryClient });\n          }}\n        >\n          <RefreshIcon />\n        </Button>\n      </Tooltip>\n    </div>\n  );\n});\n","import { DangerIcon, Empty, PageWrapper } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\n\nexport const TracesV3GenericErrorState = ({ error }: { error?: Error }) => {\n  return (\n    <PageWrapper css={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Empty\n        data-testid=\"fallback\"\n        title={\n          <FormattedMessage defaultMessage=\"Error\" description=\"Title for error fallback component in Trace V3 page\" />\n        }\n        description={\n          error?.message ?? (\n            <FormattedMessage\n              defaultMessage=\"An error occurred while rendering this component.\"\n              description=\"Description for default error message in Trace V3 page\"\n            />\n          )\n        }\n        image={<DangerIcon />}\n      />\n    </PageWrapper>\n  );\n};\n","import { ErrorBoundary } from 'react-error-boundary';\nimport { TracesV3GenericErrorState } from './TracesV3GenericErrorState';\n\nexport const TracesV3PageWrapper = ({ children }: { children: React.ReactNode }) => {\n  return <ErrorBoundary fallback={<TracesV3GenericErrorState />}>{children}</ErrorBoundary>;\n};\n","import { useCallback } from 'react';\nimport { useSearchParams } from '../../common/utils/RoutingUtils';\n\nconst QUERY_PARAM_KEY = 'viewState';\n\nexport type MonitoringViewState = 'charts' | 'logs' | 'insights';\n\n/**\n * Query param-powered hook that returns the view state from the URL.\n */\nexport const useMonitoringViewState = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const viewState = (searchParams.get(QUERY_PARAM_KEY) ?? 'logs') as MonitoringViewState;\n\n  const setViewState = useCallback(\n    (viewState: MonitoringViewState | undefined, replace = false) => {\n      setSearchParams(\n        (params) => {\n          if (viewState === undefined) {\n            params.delete(QUERY_PARAM_KEY);\n            return params;\n          }\n          params.set(QUERY_PARAM_KEY, viewState);\n          return params;\n        },\n        { replace },\n      );\n    },\n    [setSearchParams],\n  );\n\n  return [viewState, setViewState] as const;\n};\n","import { useMemo, useState } from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\nimport { TracesV3DateSelector } from './TracesV3DateSelector';\nimport { TracesV3Logs } from './TracesV3Logs';\nimport {\n  MonitoringConfigProvider,\n  useMonitoringConfig,\n} from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringConfig';\nimport { TracesV3PageWrapper } from './TracesV3PageWrapper';\nimport { useMonitoringViewState } from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringViewState';\nimport {\n  getAbsoluteStartEndTime,\n  useMonitoringFilters,\n} from '@mlflow/mlflow/src/experiment-tracking/hooks/useMonitoringFilters';\nimport {\n  isExperimentEvalResultsMonitoringUIEnabled,\n  shouldEnableTracesSyncUI,\n} from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { useExperiments } from '../../hooks/useExperiments';\n\nconst TracesV3Toolbar = () => {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        width: '100%',\n        borderBottom: `1px solid ${theme.colors.grey100}`,\n        paddingBottom: `${theme.spacing.sm}px`,\n      }}\n    >\n      <TracesV3DateSelector />\n    </div>\n  );\n};\n\ninterface TracesV3ContentProps {\n  viewState: string;\n  experimentId: string;\n  endpointName?: string;\n  timeRange: { startTime: string | undefined; endTime: string | undefined };\n}\n\nconst TracesV3Content = ({\n  // comment for copybara formatting\n  viewState,\n  experimentId,\n  endpointName,\n  timeRange,\n}: TracesV3ContentProps) => {\n  if (viewState === 'logs') {\n    return (\n      <TracesV3Logs\n        experimentId={experimentId || ''}\n        // TODO: Remove this once the endpointName is not needed\n        endpointName={endpointName || ''}\n        timeRange={timeRange}\n      />\n    );\n  }\n  return null;\n};\n\nconst TracesV3ViewImpl = ({ experimentIds }: { experimentIds: string[] }) => {\n  const { theme } = useDesignSystemTheme();\n  const [monitoringFilters, _setMonitoringFilters] = useMonitoringFilters();\n  const monitoringConfig = useMonitoringConfig();\n\n  // Traces view only works with one experiment\n  const experimentId = experimentIds[0];\n  const [viewState] = useMonitoringViewState();\n\n  const timeRange = useMemo(() => {\n    const { startTime, endTime } = getAbsoluteStartEndTime(monitoringConfig.dateNow, monitoringFilters);\n    return {\n      startTime: startTime ? new Date(startTime).getTime().toString() : undefined,\n      endTime: endTime ? new Date(endTime).getTime().toString() : undefined,\n    };\n  }, [monitoringConfig.dateNow, monitoringFilters]);\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        height: '100%',\n        overflowY: 'hidden',\n      }}\n    >\n      {isExperimentEvalResultsMonitoringUIEnabled() && (\n        // comment for copybara formatting\n        <TracesV3Toolbar />\n      )}\n      <TracesV3Content\n        // comment for copybara formatting\n        viewState={viewState}\n        experimentId={experimentId}\n        timeRange={timeRange}\n      />\n    </div>\n  );\n};\n\nexport const TracesV3View = ({ experimentIds }: { experimentIds: string[] }) => (\n  <TracesV3PageWrapper>\n    <MonitoringConfigProvider>\n      <TracesV3ViewImpl experimentIds={experimentIds} />\n    </MonitoringConfigProvider>\n  </TracesV3PageWrapper>\n);\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport { TracesView } from '../../traces/TracesView';\nimport {\n  shouldEnableTracesV3View,\n  isExperimentEvalResultsMonitoringUIEnabled,\n} from '../../../../common/utils/FeatureUtils';\nimport { TracesV3View } from './traces-v3/TracesV3View';\n\nexport const ExperimentViewTraces = ({ experimentIds }: { experimentIds: string[] }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        minHeight: 225, // This is the exact height for displaying a minimum five rows and table header\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing.sm,\n        flex: 1,\n        overflow: 'hidden',\n      }}\n    >\n      <TracesComponent experimentIds={experimentIds} />\n    </div>\n  );\n};\n\nconst TracesComponent = ({ experimentIds }: { experimentIds: string[] }) => {\n  if (shouldEnableTracesV3View() || isExperimentEvalResultsMonitoringUIEnabled()) {\n    return <TracesV3View experimentIds={experimentIds} />;\n  }\n  return <TracesView experimentIds={experimentIds} />;\n};\n"],"names":["TRACE_TAG_NAME_TRACE_NAME","getTraceMetadataField","traceInfo","field","_traceInfo$request_me","_traceInfo$request_me2","request_metadata","find","key","value","getTraceInfoRunId","getTraceInfoTotalTokens","getTraceInfoInputs","inputs","isNil","JSON","stringify","parse","e","getTraceInfoOutputs","outputs","getTraceTagValue","tagName","_traceInfo$tags2","_traceInfo$tags","_traceInfo$tags$find","Array","isArray","tags","getTraceDisplayName","request_id","EXPERIMENT_TRACES_SORTABLE_COLUMNS","TRACE_TABLE_CHECKBOX_COLUMN_ID","ExperimentViewTracesTableColumns","ExperimentViewTracesTableColumnLabels","requestId","defineMessage","id","defaultMessage","traceName","timestampMs","status","runName","totalTokens","source","latency","ExperimentViewTracesStatusLabels","UNSET","IN_PROGRESS","OK","ERROR","RUN_ID_FILTER_EXPRESSION","LOGGED_MODEL_ID_FILTER_EXPRESSION","createRunIdsFilterExpression","runUuids","map","runId","join","useExperimentTraces","experimentIds","sorting","filter","runUuid","loggedModelId","traces","setTraces","useState","loading","setLoading","error","setError","undefined","orderByString","useMemo","firstOrderByColumn","first","includes","desc","filterString","pageTokens","setPageTokens","currentPage","setCurrentPage","currentPageToken","fetchTraces","useCallback","async","pageToken","silent","response","MlflowService","getExperimentTraces","runNamesForTraces","traceIdToRunIdMap","reduce","acc","trace","traceId","uniq","values","length","runIdsToRunNames","searchRuns","experiment_ids","run_view_type","ViewType","ALL","runs","run","info","fetchRunNamesForTraces","tracesWithRunNames","prevPages","next_page_token","hasNextPage","hasPreviousPage","useEffect","reset","fetchNextPage","prevPage","fetchPrevPage","refreshCurrentPage","_ref","name","styles","_ref2","TracesViewTableTagCell","onAddEditTags","baseComponentId","theme","useDesignSystemTheme","visibleTagList","startsWith","MLFLOW_INTERNAL_PREFIX","containsTags","_jsxs","css","_css","display","alignItems","flexWrap","columnGap","spacing","xs","rowGap","children","tag","_jsx","KeyValueTag","charLimit","maxWidth","enableFullViewModal","Button","componentId","size","icon","PencilIcon","onClick","FormattedMessage","type","getIcon","ClockIcon","color","colors","textValidationWarning","CheckCircleIcon","textValidationSuccess","XCircleIcon","textValidationDanger","TracesViewTableStatusCell","row","original","intl","useIntl","labelDescriptor","gap","formatMessage","clampedLinesCss","TracesViewTablePreviewCell","previewFieldName","isExpanded","setIsExpanded","fullData","setFullData","fetchFullData","getExperimentTraceData","previewValue","requestData","isString","errorMessage","ErrorWrapper","getUserVisibleError","message","Utils","logErrorAndNotifyUser","valuePossiblyTruncated","expand","collapse","ChevronDownIcon","ChevronRightIcon","title","ExpandedParamCell","structuredJSONValue","objectData","whiteSpace","wordBreak","fontFamily","CodeSnippet","language","wrapLongLines","style","padding","sm","isDarkMode","TracesViewTableRequestPreviewCell","TracesViewTableResponsePreviewCell","TracesViewTableSourceCell","SourceCellRenderer","keyBy","getHeaderSizeClassName","getColumnSizeClassName","TracesViewTableRow","React","role","minHeight","general","buttonHeight","flexDirection","backgroundColor","paddingRight","borderBottom","getAllCells","cell","_meta","_meta2","multiline","column","columnDef","meta","flex","overflow","textOverflow","flexRender","getContext","prev","next","columns","selected","isEqual","TracesViewTableTimestampCell","timestamp_ms","LegacyTooltip","Date","toLocaleString","navigator","timeZoneName","placement","timeSinceStr","TracesViewTableHeaderCheckbox","table","isChecked","getIsAllRowsSelected","getIsSomeRowsSelected","Checkbox","wrapperStyle","margin","onChange","toggleAllRowsSelected","TracesViewTableCellCheckbox","disabled","getCanSelect","getIsSelected","toggleSelected","RequestIdCell","options","onTraceClicked","Typography","Link","ellipsis","TraceNameCell","_ref3","RunNameCell","experiment_id","label","to","Routes","getRunPageRoute","TraceTagsCell","onTraceTagsEdit","_ref4","_ref5","_ref6","TracesViewTable","onNextPage","onPreviousPage","usingFilters","onResetFilters","setSorting","rowSelection","setRowSelection","hiddenColumns","disableTokenColumn","toggleHiddenColumn","disabledColumns","showQuickStart","useStaticColumnsCells","isUnstableNestedComponentsMigrated","allColumnsList","entries","header","enableResizing","enableSorting","minWidth","accessorFn","data","push","execution_time_ms","isFinite","formatDuration","useReactTable","state","getCoreRowModel","getRowId","index","toString","getSortedRowModel","onSortingChange","onRowSelectionChange","enableColumnResizing","enableRowSelection","columnResizeMode","columnSizeInfo","getState","columnSizingInfo","columnSizeVars","headers","getFlatHeaders","colSizes","forEach","getSize","TracesViewTableNoTracesQuickstart","Table","scrollable","empty","getEmptyState","getMessageField","Empty","image","DangerIcon","description","button","chunks","pagination","CursorPagination","TableRow","isHeader","getLeafHeaders","TableHeader","sortable","getCanSort","sortDirection","getIsSorted","onToggleSort","getToggleSortingHandler","setColumnSizing","isResizing","getIsResizing","TableRowAction","DropdownMenu","Root","Trigger","asChild","ColumnsIcon","Content","align","CheckboxItem","checked","ItemIndicator","TableSkeletonRows","getRowModel","rows","TraceDataDrawer","loadingTraceInfo","onClose","selectedSpanId","onSelectSpan","traceData","loadingTraceData","useExperimentTraceData","skip","setTraceData","fetchTraceData","spans","shouldFetchTraceInfo","internalTraceInfo","loadingInternalTracingInfo","useExperimentTraceInfo","enabled","setTraceInfoData","fetchTraceInfo","getExperimentTraceInfo","trace_info","traceInfoToUse","TitleSkeleton","Title","level","withoutMargins","combinedModelTrace","containsSpans","Drawer","modal","open","onOpenChange","width","expandContentToFullHeight","ModelTraceExplorerSkeleton","_Fragment","Spacer","WarningIcon","height","marginLeft","lg","marginRight","marginBottom","onWheel","stopPropagation","ModelTraceExplorer","modelTrace","TracesViewDeleteTraceModal","visible","handleClose","refreshTraces","setErrorMessage","isLoading","setIsLoading","tracesToDelete","keys","pickBy","Modal","count","onCancel","okText","onOk","handleOk","_experimentIds$","deleteTraces","submitDeleteTraces","okButtonProps","danger","Paragraph","Text","bold","TracesViewControlsActions","isModalOpen","setIsModalOpen","openModal","closeModal","InputTooltip","Popover","InfoSmallIcon","svg","textSecondary","Arrow","whereBold","TracesViewControls","onChangeFilter","filterValue","setFilterValue","isEvaluateTracesModalOpen","setEvaluateTracesModalOpen","displayedFilterValue","searchOrDeleteControls","Object","isSelected","TableFilterLayout","Input","placeholder","target","prefix","SearchIcon","suffix","allowClear","onClear","onKeyDown","defaultExperimentViewTracesUIState","useExperimentViewTracesUIState","localStore","persistenceIdentifier","slice","sort","LocalStorageUtils","getStoreForComponent","uiState","setUIState","uiStateRaw","getItem","isObject","loadExperimentViewTracesUIState","columnId","prevUIState","setItem","QUERY_PARAM_KEY","defaultSorting","TracesView","timeoutRef","useRef","setFilter","selectedTraceId","setSelectedTraceId","useActiveExperimentTrace","_searchParams$get","searchParams","setSearchParams","useSearchParams","get","params","delete","set","setSelectedSpanId","useActiveExperimentSpan","replace","window","clearTimeout","current","scheduleRefresh","setTimeout","selectedTraceInfo","existingTagKeys","compact","flatMap","_trace$tags","showEditTagsModalForTrace","EditTagsModal","useEditExperimentTraceTags","onSuccess","anyTraceContainsTokenCount","some","autoDisabledColumns","allDisabledColumns","allHiddenColumns","_uiState$hiddenColumn","onTagsUpdated","sortingSetter","isFunction","currentState","newState","currentSortBy","TracesV3DateSelector","queryClient","useQueryClient","isFetching","useIsFetching","queryKey","SEARCH_MLFLOW_TRACES_QUERY_KEY","monitoringFilters","setMonitoringFilters","useMonitoringFilters","namedDateFilters","getNamedDateFilters","currentStartTimeFilterLabel","monitoringConfig","useMonitoringConfig","DialogCombobox","startTimeLabel","DEFAULT_START_TIME_LABEL","DialogComboboxTrigger","renderDisplayedValue","_namedDateFilters$fin","namedDateFilter","DialogComboboxContent","DialogComboboxOptionList","DialogComboboxOptionListSelectItem","RangePicker","includeTime","from","startTime","endTime","dateNow","date","toISOString","startDatePickerProps","datePickerProps","after","endDatePickerProps","Tooltip","content","Boolean","refresh","invalidateMlflowSearchTracesCache","RefreshIcon","TracesV3GenericErrorState","_error$message","PageWrapper","TracesV3PageWrapper","ErrorBoundary","fallback","TracesV3Toolbar","grey100","paddingBottom","TracesV3Content","viewState","experimentId","endpointName","timeRange","TracesV3Logs","TracesV3ViewImpl","_setMonitoringFilters","useMonitoringViewState","setViewState","getAbsoluteStartEndTime","getTime","overflowY","isExperimentEvalResultsMonitoringUIEnabled","TracesV3View","MonitoringConfigProvider","ExperimentViewTraces","TracesComponent","shouldEnableTracesV3View"],"sourceRoot":""}