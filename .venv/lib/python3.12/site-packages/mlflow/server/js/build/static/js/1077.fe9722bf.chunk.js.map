{"version":3,"file":"static/js/1077.fe9722bf.chunk.js","mappings":"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","sources":["common/hooks/useMemoDeep.ts","shared/web-shared/browse/TimeAgo.tsx","experiment-tracking/pages/experiment-evaluation-runs/ExperimentEvaluationRunsPageWrapper.tsx","experiment-tracking/pages/experiment-evaluation-runs/ExperimentEvaluationRunsTable.utils.tsx","experiment-tracking/pages/experiment-evaluation-runs/hooks/useExperimentEvaluationRunsRowVisibility.tsx","experiment-tracking/pages/experiment-evaluation-runs/ExperimentEvaluationRunsTableCellRenderers.tsx","experiment-tracking/pages/experiment-evaluation-runs/hooks/useExperimentEvaluationRunsPageMode.tsx","experiment-tracking/pages/experiment-evaluation-runs/ExperimentEvaluationRunsTable.constants.tsx","experiment-tracking/pages/experiment-evaluation-runs/ExperimentEvaluationRunsTableRow.tsx","experiment-tracking/pages/experiment-evaluation-runs/ExperimentEvaluationRunsTable.tsx","experiment-tracking/pages/experiment-evaluation-runs/ExperimentEvaluationRunsTableGroupBySelector.tsx","experiment-tracking/pages/experiment-evaluation-runs/ExperimentEvaluationRunsTableControls.tsx","experiment-tracking/components/experiment-page/hooks/useDeleteRuns.tsx","common/static/eval-runs-empty.svg","experiment-tracking/components/evaluations/hooks/useSelectedRunUuid.tsx","experiment-tracking/pages/experiment-evaluation-runs/RunEvaluationButton.tsx","experiment-tracking/pages/experiment-evaluation-runs/ExperimentEvaluationRunsPage.utils.ts","experiment-tracking/pages/experiment-evaluation-runs/hooks/useExperimentEvaluationRunsChartsUIState.tsx","experiment-tracking/pages/experiment-evaluation-runs/charts/ExperimentEvaluationRunsPageCharts.tsx","experiment-tracking/pages/experiment-evaluation-runs/ExperimentEvaluationRunsPage.tsx","shared/web-shared/metrics/UserActionErrorHandler.tsx","experiment-tracking/hooks/logged-models/useGetLoggedModelQuery.tsx"],"sourcesContent":["import { isEqual } from 'lodash';\nimport { useRef } from 'react';\n\n/**\n * Utility hook that memoizes value based on deep comparison.\n * Dedicated to a few limited use cases where deep comparison is still cheaper than resulting re-renders.\n */\nexport const useMemoDeep = <T>(factory: () => T, deps: unknown[]): T => {\n  const ref = useRef<{ deps: unknown[]; value: T }>();\n\n  if (!ref.current || !isEqual(deps, ref.current.deps)) {\n    ref.current = { deps, value: factory() };\n  }\n\n  return ref.current.value;\n};\n","import React from 'react';\n\nimport { Tooltip } from '@databricks/design-system';\nimport type { IntlShape } from 'react-intl';\nimport { useIntl } from 'react-intl';\n\n// Time intervals in seconds\nconst SECOND = 1;\nconst MINUTE = 60 * SECOND;\nconst HOUR = 60 * MINUTE;\nconst DAY = 24 * HOUR;\nconst MONTH = 30 * DAY;\nconst YEAR = 365 * DAY;\n\ntype Interval = {\n  seconds: number;\n  timeAgoMessage: (count: number) => string;\n};\n\nconst getIntervals = (intl: IntlShape): Interval[] => [\n  {\n    seconds: YEAR,\n    timeAgoMessage: (count: number) =>\n      intl.formatMessage(\n        {\n          defaultMessage: '{count, plural, =1 {1 year} other {# years}} ago',\n          description: 'Time duration in years',\n        },\n        { count },\n      ),\n  },\n  {\n    seconds: MONTH,\n    timeAgoMessage: (count: number) =>\n      intl.formatMessage(\n        {\n          defaultMessage: '{count, plural, =1 {1 month} other {# months}} ago',\n          description: 'Time duration in months',\n        },\n        { count },\n      ),\n  },\n  {\n    seconds: DAY,\n    timeAgoMessage: (count: number) =>\n      intl.formatMessage(\n        {\n          defaultMessage: '{count, plural, =1 {1 day} other {# days}} ago',\n          description: 'Time duration in days',\n        },\n        { count },\n      ),\n  },\n  {\n    seconds: HOUR,\n    timeAgoMessage: (count: number) =>\n      intl.formatMessage(\n        {\n          defaultMessage: '{count, plural, =1 {1 hour} other {# hours}} ago',\n          description: 'Time duration in hours',\n        },\n        { count },\n      ),\n  },\n  {\n    seconds: MINUTE,\n    timeAgoMessage: (count: number) =>\n      intl.formatMessage(\n        {\n          defaultMessage: '{count, plural, =1 {1 minute} other {# minutes}} ago',\n          description: 'Time duration in minutes',\n        },\n        { count },\n      ),\n  },\n  {\n    seconds: SECOND,\n    timeAgoMessage: (count: number) =>\n      intl.formatMessage(\n        {\n          defaultMessage: '{count, plural, =1 {1 second} other {# seconds}} ago',\n          description: 'Time duration in seconds',\n        },\n        { count },\n      ),\n  },\n];\n\nexport interface TimeAgoProps {\n  date: Date;\n  tooltipFormatOptions?: DateTooltipOptionsType;\n}\n\ntype DateTooltipOptionsType = Intl.DateTimeFormatOptions;\n\nconst DateTooltipOptions: DateTooltipOptionsType = {\n  timeZoneName: 'short',\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n  hour: '2-digit',\n  minute: '2-digit',\n};\n\nexport const getTimeAgoStrings = ({\n  date,\n  intl,\n  tooltipFormatOptions = DateTooltipOptions,\n}: TimeAgoProps & { intl: IntlShape }): { displayText: string; tooltipTitle: string } => {\n  const now = new Date();\n  const seconds = Math.round((now.getTime() - date.getTime()) / 1000);\n\n  const locale = navigator.language || 'en-US';\n  let tooltipTitle = '';\n  try {\n    tooltipTitle = Intl.DateTimeFormat(locale, tooltipFormatOptions).format(date);\n  } catch (e) {\n    // ES-1357574 Do nothing; this is not a critical path, let's just not throw an error\n  }\n\n  for (const interval of getIntervals(intl)) {\n    const count = Math.floor(seconds / interval.seconds);\n    if (count >= 1) {\n      return { displayText: interval.timeAgoMessage(count), tooltipTitle };\n    }\n  }\n\n  return {\n    displayText: intl.formatMessage({\n      defaultMessage: 'just now',\n      description: 'Indicates a time duration that just passed',\n    }),\n    tooltipTitle,\n  };\n};\n\nexport const TimeAgo: React.FC<React.PropsWithChildren<TimeAgoProps>> = ({\n  date,\n  tooltipFormatOptions = DateTooltipOptions,\n}) => {\n  const intl = useIntl();\n  const { displayText, tooltipTitle } = getTimeAgoStrings({ date, intl, tooltipFormatOptions });\n  return (\n    <Tooltip componentId=\"web-shared.time-ago\" content={tooltipTitle}>\n      <span>{displayText}</span>\n    </Tooltip>\n  );\n};\n","import { UserActionErrorHandler } from '@databricks/web-shared/metrics';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { DangerIcon, Empty, PageWrapper } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { QueryClientProvider, useQueryClient } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\n\nconst PageFallback = ({ error }: { error?: Error }) => {\n  return (\n    <PageWrapper css={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Empty\n        data-testid=\"fallback\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Error\"\n            description=\"Title for error fallback component in experiment evaluation runs UI\"\n          />\n        }\n        description={\n          error?.message ?? (\n            <FormattedMessage\n              defaultMessage=\"An error occurred while rendering this component.\"\n              description=\"Description for default error message in experiment evaluation runs UI\"\n            />\n          )\n        }\n        image={<DangerIcon />}\n      />\n    </PageWrapper>\n  );\n};\n\n/**\n * Wrapper for all experiment evaluation runs pages.\n * Provides error boundaries and user action error handling.\n */\nexport const ExperimentEvaluationRunsPageWrapper = ({\n  children,\n  resetKey,\n}: {\n  children: React.ReactNode;\n  resetKey?: unknown;\n}) => {\n  return (\n    <ErrorBoundary FallbackComponent={PageFallback} resetKeys={[resetKey]}>\n      <UserActionErrorHandler>{children}</UserActionErrorHandler>\n    </ErrorBoundary>\n  );\n};\n","import type { RunEntity } from '../../types';\nimport { EvalRunsTableKeyedColumnPrefix } from './ExperimentEvaluationRunsTable.constants';\n\nexport const createEvalRunsTableKeyedColumnKey = (columnType: EvalRunsTableKeyedColumnPrefix, key: string): string =>\n  [columnType, key].join('.');\nexport const parseEvalRunsTableKeyedColumnKey = (\n  key: string,\n): undefined | { columnType: EvalRunsTableKeyedColumnPrefix; key: string } => {\n  const [columnType, ...rest] = key.split('.');\n  if (\n    !rest.length ||\n    !Object.values(EvalRunsTableKeyedColumnPrefix).includes(columnType as EvalRunsTableKeyedColumnPrefix)\n  ) {\n    return undefined;\n  }\n  return {\n    columnType: columnType as EvalRunsTableKeyedColumnPrefix,\n    key: rest.join('.'),\n  };\n};\n\nexport const getEvalRunCellValueBasedOnColumn = (columnId: string, rowData: RunEntity): string | number | undefined => {\n  const { columnType, key: rowDataKey } = parseEvalRunsTableKeyedColumnKey(columnId) ?? {};\n  if (!rowDataKey) {\n    return undefined;\n  }\n  switch (columnType) {\n    case EvalRunsTableKeyedColumnPrefix.METRIC:\n      return rowData.data?.metrics?.find((metric) => metric.key === rowDataKey)?.value ?? undefined;\n    case EvalRunsTableKeyedColumnPrefix.PARAM:\n      return rowData.data?.params?.find((param) => param.key === rowDataKey)?.value ?? undefined;\n    case EvalRunsTableKeyedColumnPrefix.TAG:\n      return rowData.data?.tags?.find((tag) => tag.key === rowDataKey)?.value ?? undefined;\n    default:\n      return undefined;\n  }\n};\n","import { createContext, useCallback, useContext, useMemo, useState } from 'react';\n\nconst ExperimentEvaluationRunsRowVisibilityContext = createContext<{\n  isRowHidden: (rowUuid: string) => boolean;\n  toggleRowVisibility: (rowUuid: string) => void;\n}>({\n  isRowHidden: () => false,\n  toggleRowVisibility: () => {},\n});\n\nexport const ExperimentEvaluationRunsRowVisibilityProvider = ({ children }: { children: React.ReactNode }) => {\n  const [hiddenRuns, setHiddenRuns] = useState<Set<string>>(new Set());\n\n  const isRowHidden = useCallback(\n    (rowUuid: string) => {\n      return hiddenRuns.has(rowUuid);\n    },\n    [hiddenRuns],\n  );\n\n  const toggleRowVisibility = useCallback(\n    (rowUuid: string) => {\n      setHiddenRuns((prevHiddenRuns) => {\n        const newHiddenRuns = new Set(prevHiddenRuns);\n        if (newHiddenRuns.has(rowUuid)) {\n          newHiddenRuns.delete(rowUuid);\n        } else {\n          newHiddenRuns.add(rowUuid);\n        }\n        return newHiddenRuns;\n      });\n    },\n    [setHiddenRuns],\n  );\n\n  const value = useMemo(() => ({ isRowHidden, toggleRowVisibility }), [isRowHidden, toggleRowVisibility]);\n\n  return (\n    <ExperimentEvaluationRunsRowVisibilityContext.Provider value={value}>\n      {children}\n    </ExperimentEvaluationRunsRowVisibilityContext.Provider>\n  );\n};\n\nexport const useExperimentEvaluationRunsRowVisibility = () => {\n  return useContext(ExperimentEvaluationRunsRowVisibilityContext);\n};\n","import {\n  ModelsIcon,\n  TableIcon,\n  Tag,\n  Tooltip,\n  Typography,\n  useDesignSystemTheme,\n  Checkbox,\n  ParagraphSkeleton,\n  Button,\n  NewWindowIcon,\n  SortUnsortedIcon,\n  VisibleIcon,\n  VisibleOffIcon,\n} from '@databricks/design-system';\nimport type { ColumnDef, HeaderContext } from '@tanstack/react-table';\nimport { DatasetSourceTypes, RunEntity } from '../../types';\nimport { Link } from '@mlflow/mlflow/src/common/utils/RoutingUtils';\nimport { useGetLoggedModelQuery } from '../../hooks/logged-models/useGetLoggedModelQuery';\nimport Routes from '../../routes';\nimport { FormattedMessage } from 'react-intl';\nimport { useSaveExperimentRunColor } from '../../components/experiment-page/hooks/useExperimentRunColor';\nimport { useGetExperimentRunColor } from '../../components/experiment-page/hooks/useExperimentRunColor';\nimport { RunColorPill } from '../../components/experiment-page/components/RunColorPill';\nimport { TimeAgo } from '@databricks/web-shared/browse';\nimport { parseEvalRunsTableKeyedColumnKey } from './ExperimentEvaluationRunsTable.utils';\nimport { useMemo } from 'react';\nimport type { RunEntityOrGroupData } from './ExperimentEvaluationRunsPage.utils';\nimport { useExperimentEvaluationRunsRowVisibility } from './hooks/useExperimentEvaluationRunsRowVisibility';\n\nexport const CheckboxCell: ColumnDef<RunEntityOrGroupData>['cell'] = ({\n  row,\n  table: {\n    options: { meta },\n  },\n}) => {\n  if ('subRuns' in row.original) {\n    return <div>-</div>;\n  }\n\n  return (\n    <Checkbox\n      componentId=\"mlflow.eval-runs.checkbox-cell\"\n      data-testid={`eval-runs-table-cell-checkbox-${row.id}`}\n      disabled={!row.getCanSelect()}\n      isChecked={row.getIsSelected()}\n      wrapperStyle={{ padding: 0, margin: 0 }}\n      onChange={() => row.toggleSelected()}\n    />\n  );\n};\n\nexport const RunNameCell: ColumnDef<RunEntityOrGroupData>['cell'] = ({\n  row,\n  table: {\n    options: { meta },\n  },\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const saveRunColor = useSaveExperimentRunColor();\n  const getRunColor = useGetExperimentRunColor();\n\n  if ('subRuns' in row.original) {\n    return <div>-</div>;\n  }\n\n  const runUuid = row.original.info.runUuid;\n\n  return (\n    <div\n      css={{ overflow: 'hidden', display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}\n      onClick={() => {\n        (meta as any).setSelectedRunUuid?.(runUuid);\n      }}\n    >\n      <RunColorPill\n        color={getRunColor(runUuid)}\n        onChangeColor={(colorValue) => saveRunColor({ runUuid, colorValue })}\n      />\n      <Typography.Link\n        css={{ textOverflow: 'ellipsis', whiteSpace: 'nowrap', overflow: 'hidden', flexShrink: 1 }}\n        componentId=\"mlflow.eval-runs.run-name-cell\"\n        id=\"run-name-cell\"\n      >\n        {row.original.info.runName}\n      </Typography.Link>\n      <div\n        css={{\n          display: 'none',\n          flexShrink: 0,\n          '.eval-runs-table-row:hover &': { display: 'inline' },\n          svg: {\n            width: theme.typography.fontSizeMd,\n            height: theme.typography.fontSizeMd,\n          },\n        }}\n      >\n        <Link target=\"_blank\" rel=\"noreferrer\" to={Routes.getRunPageRoute(row.original.info.experimentId, runUuid)}>\n          <Tooltip\n            content={\n              <FormattedMessage\n                defaultMessage=\"Go to the run\"\n                description=\"Tooltip for the run name cell in the evaluation runs table, opening the run page in a new tab\"\n              />\n            }\n            componentId=\"mlflow.eval-runs.run-name-cell.tooltip\"\n          >\n            <Button\n              type=\"link\"\n              target=\"_blank\"\n              icon={<NewWindowIcon />}\n              size=\"small\"\n              componentId=\"mlflow.eval-runs.run-name-cell.open-run-page\"\n            />\n          </Tooltip>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport const DatasetCell: ColumnDef<RunEntityOrGroupData>['cell'] = ({\n  row,\n  table: {\n    options: { meta },\n  },\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  if ('subRuns' in row.original) {\n    return <div>-</div>;\n  }\n\n  const run = row.original;\n  const datasets = run.inputs?.datasetInputs ?? [];\n  const displayedDataset = datasets[0]?.dataset ?? null;\n\n  if (!displayedDataset) {\n    return <div>-</div>;\n  }\n\n  const openDatasetDrawer = () => {\n    (meta as any).setSelectedDatasetWithRun({\n      datasetWithTags: { dataset: displayedDataset },\n      runData: {\n        experimentId: run.info?.experimentId,\n        runUuid: run.info?.runUuid ?? '',\n        runName: run.info?.runName,\n        datasets: datasets,\n      },\n    });\n    (meta as any).setIsDrawerOpen(true);\n  };\n\n  const baseTagContent = (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: theme.spacing.xs,\n        maxWidth: '100%',\n        color: theme.colors.textPrimary,\n      }}\n    >\n      <TableIcon css={{ '& > svg': { width: 12, height: 12 } }} />\n      <Typography.Text css={{ overflow: 'hidden', textOverflow: 'ellipsis', textWrap: 'nowrap' }}>\n        {displayedDataset.name}\n      </Typography.Text>\n    </div>\n  );\n  const tagContent = baseTagContent;\n\n  return (\n    <div>\n      <Tooltip componentId=\"mlflow.eval-runs.dataset-cell-tooltip\" content={displayedDataset.name}>\n        <Tag\n          componentId=\"mlflow.eval-runs.dataset-cell\"\n          onClick={openDatasetDrawer}\n          id=\"dataset-cell\"\n          css={{ maxWidth: '100%', marginRight: 0 }}\n        >\n          {tagContent}\n        </Tag>\n      </Tooltip>\n    </div>\n  );\n};\n\nexport const ModelVersionCell: ColumnDef<RunEntityOrGroupData>['cell'] = ({ row }) => {\n  const modelId = 'inputs' in row.original ? row.original.inputs?.modelInputs?.[0]?.modelId : undefined;\n  const { theme } = useDesignSystemTheme();\n  const { data, isLoading } = useGetLoggedModelQuery({ loggedModelId: modelId, enabled: Boolean(modelId) });\n\n  if (!modelId || 'subRuns' in row.original) {\n    return <div>-</div>;\n  }\n\n  const displayValue = data?.info?.name ?? modelId;\n\n  return isLoading ? (\n    <ParagraphSkeleton />\n  ) : (\n    <Tooltip componentId=\"mlflow.eval-runs.model-version-cell-tooltip\" content={displayValue}>\n      <Tag\n        componentId=\"mlflow.eval-runs.model-version-cell\"\n        id=\"model-version-cell\"\n        css={{ maxWidth: '100%', marginRight: 0, cursor: 'pointer' }}\n      >\n        <Link\n          to={Routes.getExperimentLoggedModelDetailsPageRoute(row.original.info.experimentId, modelId)}\n          target=\"_blank\"\n          css={{ maxWidth: '100%' }}\n        >\n          <div\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: theme.spacing.xs,\n              maxWidth: '100%',\n            }}\n          >\n            <ModelsIcon css={{ '& > svg': { width: 12, height: 12, color: theme.colors.textPrimary } }} />\n            <Typography.Text css={{ overflow: 'hidden', textOverflow: 'ellipsis', textWrap: 'nowrap' }}>\n              {displayValue}\n            </Typography.Text>\n          </div>\n        </Link>\n      </Tag>\n    </Tooltip>\n  );\n};\n\nexport const KeyedValueCell: ColumnDef<RunEntityOrGroupData>['cell'] = ({ getValue }) => {\n  const value = getValue<string>();\n  return <span title={value}>{value ?? '-'}</span>;\n};\n\nexport const SortableHeaderCell = ({\n  column,\n  title,\n}: HeaderContext<RunEntityOrGroupData, unknown> & { title?: React.ReactElement }) => {\n  const { theme } = useDesignSystemTheme();\n\n  const displayedKey = useMemo(() => parseEvalRunsTableKeyedColumnKey(column.id)?.key ?? column.id, [column.id]);\n\n  return (\n    <div\n      css={{\n        overflow: 'hidden',\n        display: 'flex',\n        alignItems: 'center',\n        gap: theme.spacing.xs,\n        ':hover': { cursor: 'pointer', '& > div': { display: 'inline' } },\n      }}\n    >\n      <Tooltip componentId={`mlflow.eval-runs.sortable-header-cell.tooltip-${column.id}`} content={displayedKey}>\n        <span css={{ overflow: 'hidden', textOverflow: 'ellipsis', textWrap: 'nowrap' }}>\n          <Typography.Text bold>{title ?? displayedKey}</Typography.Text>\n        </span>\n      </Tooltip>\n      {!column.getIsSorted() && (\n        <div\n          css={{\n            display: 'none',\n            flexShrink: 0,\n          }}\n        >\n          <SortUnsortedIcon />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const CreatedAtCell: ColumnDef<RunEntityOrGroupData>['cell'] = ({ row }) => {\n  if ('subRuns' in row.original) {\n    return <div>-</div>;\n  }\n\n  const createdAt = row.original.info.startTime;\n  if (!createdAt) {\n    return <div>-</div>;\n  }\n  return <TimeAgo date={new Date(Number(createdAt))} />;\n};\n\nexport const VisiblityCell: ColumnDef<RunEntityOrGroupData>['cell'] = ({ row, table }) => {\n  const { isRowHidden, toggleRowVisibility } = useExperimentEvaluationRunsRowVisibility();\n  // TODO: allow toggling visibility for a whole run group\n  if ('subRuns' in row.original) {\n    return <div>-</div>;\n  }\n  const runUuid = row.original.info.runUuid;\n  const Icon = isRowHidden(runUuid) ? VisibleOffIcon : VisibleIcon;\n\n  return <Icon onClick={() => toggleRowVisibility(runUuid)} />;\n};\n","import { coerceToEnum } from '@databricks/web-shared/utils';\nimport { useSearchParams } from '../../../../common/utils/RoutingUtils';\n\nexport enum ExperimentEvaluationRunsPageMode {\n  TRACES = 'traces',\n  CHARTS = 'charts',\n}\n\nconst MODE_SEARCH_KEY = 'viewMode';\n\nexport const useExperimentEvaluationRunsPageMode = () => {\n  const [params, setParams] = useSearchParams();\n  const viewMode = coerceToEnum(\n    ExperimentEvaluationRunsPageMode,\n    params.get(MODE_SEARCH_KEY),\n    ExperimentEvaluationRunsPageMode.TRACES,\n  );\n\n  const setViewMode = (newMode: ExperimentEvaluationRunsPageMode) => {\n    setParams((prevParams) => {\n      const newParams = new URLSearchParams(prevParams);\n      newParams.set(MODE_SEARCH_KEY, newMode);\n      return newParams;\n    });\n  };\n\n  return {\n    viewMode,\n    setViewMode,\n  };\n};\n","import type { MessageDescriptor } from 'react-intl';\nimport { defineMessage, FormattedMessage } from 'react-intl';\nimport {\n  CheckboxCell,\n  CreatedAtCell,\n  DatasetCell,\n  ModelVersionCell,\n  RunNameCell,\n  SortableHeaderCell,\n  VisiblityCell,\n} from './ExperimentEvaluationRunsTableCellRenderers';\nimport type { ColumnDef } from '@tanstack/react-table';\nimport type { Theme, Interpolation } from '@emotion/react';\nimport type { RunEntityOrGroupData } from './ExperimentEvaluationRunsPage.utils';\nimport { ExperimentEvaluationRunsPageMode } from './hooks/useExperimentEvaluationRunsPageMode';\n\nexport interface ExperimentEvaluationRunsTableMeta {\n  setSelectedRunUuid: (runUuid: string) => void;\n}\n\nexport enum ExperimentEvaluationRunsTableColumns {\n  runName = 'run_name',\n  dataset = 'dataset',\n  modelVersion = 'model_version',\n}\n\nexport type EvalRunsTableColumnDef = ColumnDef<RunEntityOrGroupData> & {\n  meta?: {\n    styles?: Interpolation<Theme>;\n  };\n};\n\nexport enum EvalRunsTableColumnId {\n  checkbox = 'checkbox',\n  visibility = 'visibility',\n  runName = 'run_name',\n  dataset = 'dataset',\n  modelVersion = 'model_version',\n  createdAt = 'created_at',\n}\n\nexport enum EvalRunsTableKeyedColumnPrefix {\n  ATTRIBUTE = 'attribute',\n  METRIC = 'metric',\n  PARAM = 'param',\n  TAG = 'tag',\n}\n\nexport const EVAL_RUNS_UNSELECTABLE_COLUMNS: Set<string> = new Set([\n  EvalRunsTableColumnId.checkbox,\n  EvalRunsTableColumnId.visibility,\n  EvalRunsTableColumnId.runName,\n]);\n\nexport const EVAL_RUNS_TABLE_BASE_SELECTION_STATE: { [key: string]: boolean } = {\n  [EvalRunsTableColumnId.checkbox]: true,\n  [EvalRunsTableColumnId.visibility]: true,\n  [EvalRunsTableColumnId.runName]: true,\n  [EvalRunsTableColumnId.createdAt]: true,\n  [EvalRunsTableColumnId.dataset]: true,\n  [EvalRunsTableColumnId.modelVersion]: true,\n};\n\nexport const EVAL_RUNS_COLUMN_LABELS: Record<EvalRunsTableColumnId, MessageDescriptor> = {\n  [EvalRunsTableColumnId.checkbox]: defineMessage({\n    defaultMessage: 'Select',\n    description: 'Label for the checkbox column in the evaluation runs table',\n  }),\n  [EvalRunsTableColumnId.visibility]: defineMessage({\n    defaultMessage: 'Visibility',\n    description: 'Label for the visibility icon column in the evaluation runs table',\n  }),\n  [EvalRunsTableColumnId.runName]: defineMessage({\n    defaultMessage: 'Run Name',\n    description: 'Column header for run name in the evaluation runs table',\n  }),\n  [EvalRunsTableColumnId.createdAt]: defineMessage({\n    defaultMessage: 'Created at',\n    description: 'Column header for created timestamp in the evaluation runs table',\n  }),\n  [EvalRunsTableColumnId.dataset]: defineMessage({\n    defaultMessage: 'Dataset',\n    description: 'Label for the dataset column in the evaluation runs table',\n  }),\n  [EvalRunsTableColumnId.modelVersion]: defineMessage({\n    defaultMessage: 'Version',\n    description: 'Column header for model versions in the evaluation runs table',\n  }),\n};\n\nexport const EVAL_RUNS_COLUMN_TYPE_LABELS: Record<EvalRunsTableKeyedColumnPrefix, MessageDescriptor> = {\n  [EvalRunsTableKeyedColumnPrefix.ATTRIBUTE]: defineMessage({\n    defaultMessage: 'Attributes',\n    description: 'Header for attribute columns in the evaluation runs table column configuration',\n  }),\n  [EvalRunsTableKeyedColumnPrefix.METRIC]: defineMessage({\n    defaultMessage: 'Metrics',\n    description: 'Header for metric columns in the evaluation runs table column configuration',\n  }),\n  [EvalRunsTableKeyedColumnPrefix.PARAM]: defineMessage({\n    defaultMessage: 'Params',\n    description: 'Header for parameter columns in the evaluation runs table column configuration',\n  }),\n  [EvalRunsTableKeyedColumnPrefix.TAG]: defineMessage({\n    defaultMessage: 'Tags',\n    description: 'Header for tag columns in the evaluation runs table column configuration',\n  }),\n};\n\nexport const getExperimentEvalRunsDefaultColumns = (\n  viewMode: ExperimentEvaluationRunsPageMode,\n): EvalRunsTableColumnDef[] => {\n  const unselectableColumns: EvalRunsTableColumnDef[] = [\n    {\n      id: EvalRunsTableColumnId.checkbox,\n      cell: CheckboxCell,\n      enableResizing: false,\n      enableSorting: false,\n      size: 32,\n      meta: { styles: { minWidth: 32, maxWidth: 32 } },\n    },\n  ];\n\n  if (viewMode === ExperimentEvaluationRunsPageMode.CHARTS) {\n    unselectableColumns.push({\n      id: EvalRunsTableColumnId.visibility,\n      cell: VisiblityCell,\n      enableResizing: true,\n      size: 32,\n      meta: { styles: { minWidth: 32, maxWidth: 32 } },\n    });\n  }\n\n  const restColumns: EvalRunsTableColumnDef[] = [\n    {\n      id: EvalRunsTableColumnId.runName,\n      header: () => <FormattedMessage {...EVAL_RUNS_COLUMN_LABELS[EvalRunsTableColumnId.runName]} />,\n      cell: RunNameCell,\n      enableResizing: true,\n      meta: {\n        styles: {\n          minWidth: 100,\n        },\n      },\n    },\n    {\n      id: EvalRunsTableColumnId.createdAt,\n      header: (context) => (\n        <SortableHeaderCell\n          {...context}\n          title={<FormattedMessage {...EVAL_RUNS_COLUMN_LABELS[EvalRunsTableColumnId.createdAt]} />}\n        />\n      ),\n      accessorFn: (row) => {\n        if ('subRuns' in row) {\n          return undefined;\n        }\n        return row.info.startTime;\n      },\n      cell: CreatedAtCell,\n      enableSorting: true,\n      sortingFn: 'alphanumeric',\n      enableResizing: true,\n      meta: {\n        styles: {\n          minWidth: 100,\n        },\n      },\n    },\n    {\n      id: EvalRunsTableColumnId.dataset,\n      header: () => <FormattedMessage {...EVAL_RUNS_COLUMN_LABELS[EvalRunsTableColumnId.dataset]} />,\n      cell: DatasetCell,\n      enableResizing: true,\n      meta: {\n        styles: {\n          minWidth: 100,\n        },\n      },\n    },\n    {\n      id: EvalRunsTableColumnId.modelVersion,\n      header: () => <FormattedMessage {...EVAL_RUNS_COLUMN_LABELS[EvalRunsTableColumnId.modelVersion]} />,\n      cell: ModelVersionCell,\n      enableResizing: true,\n      meta: {\n        styles: {\n          minWidth: 100,\n        },\n      },\n    },\n  ];\n\n  return [...unselectableColumns, ...restColumns];\n};\n","import React from 'react';\nimport {\n  TableRow,\n  TableCell,\n  useDesignSystemTheme,\n  Typography,\n  Button,\n  ChevronRightIcon,\n  ChevronDownIcon,\n  Tooltip,\n  Tag,\n} from '@databricks/design-system';\nimport type { EvalRunsTableColumnDef } from './ExperimentEvaluationRunsTable.constants';\nimport type { Row } from '@tanstack/react-table';\nimport { flexRender } from '@tanstack/react-table';\nimport type { RunEntityOrGroupData } from './ExperimentEvaluationRunsPage.utils';\nimport type { RunGroupByGroupingValue } from '../../components/experiment-page/utils/experimentPage.row-types';\nimport { RunGroupingMode } from '../../components/experiment-page/utils/experimentPage.row-types';\nimport { FormattedMessage } from 'react-intl';\n\ntype TracesViewTableRowProps = {\n  row: Row<RunEntityOrGroupData>;\n  isActive: boolean;\n  // use for memoization updates to the checkbox\n  isSelected: boolean;\n  isExpanded: boolean;\n  columns: EvalRunsTableColumnDef[];\n  isHidden: boolean;\n};\n\nconst GroupTag = ({ groupKey, groupValue }: { groupKey: string; groupValue: string }): React.ReactElement => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Tooltip content={groupKey + ': ' + groupValue} componentId={`mlflow.eval-runs.${groupKey}-group-tag`}>\n      <Tag css={{ margin: 0 }} componentId={`mlflow.eval-runs.${groupKey}-group-tag`}>\n        <Typography.Text\n          bold\n          css={{\n            maxWidth: 100,\n            marginRight: theme.spacing.xs,\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n          }}\n        >\n          {groupKey}:\n        </Typography.Text>\n        <Typography.Text css={{ maxWidth: 100, whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>\n          {groupValue}\n        </Typography.Text>\n      </Tag>\n    </Tooltip>\n  );\n};\n\nconst GroupLabel = ({ groupValues }: { groupValues: RunGroupByGroupingValue }): React.ReactElement => {\n  const key = groupValues.groupByData;\n  if (groupValues.mode === RunGroupingMode.Dataset) {\n    return <GroupTag key={key} groupKey=\"Dataset\" groupValue={String(groupValues.value)} />;\n  }\n\n  return <GroupTag key={key} groupKey={key} groupValue={String(groupValues.value)} />;\n};\n\nexport const ExperimentEvaluationRunsTableRow = React.memo(\n  ({ row, isActive }: TracesViewTableRowProps) => {\n    const { theme } = useDesignSystemTheme();\n\n    if ('groupValues' in row.original) {\n      return (\n        <TableRow key={row.id} className=\"eval-runs-table-row\">\n          <TableCell>\n            <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}>\n              <Button\n                componentId={`mlflow.eval-runs.${row.id}-group-expand-button`}\n                size=\"small\"\n                css={{ flexShrink: 0 }}\n                icon={row.getIsExpanded() ? <ChevronDownIcon /> : <ChevronRightIcon />}\n                onClick={row.getToggleExpandedHandler()}\n              />\n              <Typography.Text bold>\n                <FormattedMessage\n                  defaultMessage=\"Group:\"\n                  description=\"Label for a group of runs in the evaluation runs table\"\n                />\n              </Typography.Text>\n              {row.original.groupValues.map((groupValue) => (\n                <GroupLabel key={groupValue.groupByData} groupValues={groupValue} />\n              ))}\n            </div>\n          </TableCell>\n        </TableRow>\n      );\n    }\n\n    return (\n      <TableRow key={row.id} className=\"eval-runs-table-row\">\n        {row.getVisibleCells().map((cell) => (\n          <TableCell\n            key={cell.id}\n            css={[\n              (cell.column.columnDef as EvalRunsTableColumnDef).meta?.styles,\n              {\n                backgroundColor: isActive ? theme.colors.actionDefaultBackgroundHover : 'transparent',\n              },\n            ]}\n          >\n            {flexRender(cell.column.columnDef.cell, cell.getContext())}\n          </TableCell>\n        ))}\n      </TableRow>\n    );\n  },\n  (prev, next) => {\n    return (\n      prev.isActive === next.isActive &&\n      prev.isSelected === next.isSelected &&\n      prev.columns === next.columns &&\n      prev.isExpanded === next.isExpanded &&\n      prev.isHidden === next.isHidden\n    );\n  },\n);\n","import { Empty, Table, TableHeader, TableRow, TableSkeletonRows, Typography } from '@databricks/design-system';\nimport type { EvalRunsTableColumnDef } from './ExperimentEvaluationRunsTable.constants';\nimport { getExperimentEvalRunsDefaultColumns } from './ExperimentEvaluationRunsTable.constants';\nimport type { OnChangeFn, SortDirection, SortingState } from '@tanstack/react-table';\nimport {\n  flexRender,\n  getCoreRowModel,\n  getExpandedRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport type { ExpandedState, RowSelectionState } from '@tanstack/react-table';\nimport { ExperimentEvaluationRunsTableRow } from './ExperimentEvaluationRunsTableRow';\nimport type { DatasetWithRunType } from '../../components/experiment-page/components/runs/ExperimentViewDatasetDrawer';\nimport { useCallback, useMemo, useState } from 'react';\nimport { KeyedValueCell, SortableHeaderCell } from './ExperimentEvaluationRunsTableCellRenderers';\nimport { getEvalRunCellValueBasedOnColumn } from './ExperimentEvaluationRunsTable.utils';\nimport type { RunEntityOrGroupData } from './ExperimentEvaluationRunsPage.utils';\nimport type { ExperimentEvaluationRunsPageMode } from './hooks/useExperimentEvaluationRunsPageMode';\nimport { useExperimentEvaluationRunsRowVisibility } from './hooks/useExperimentEvaluationRunsRowVisibility';\n\nexport const ExperimentEvaluationRunsTable = ({\n  data,\n  uniqueColumns,\n  selectedColumns,\n  selectedRunUuid,\n  setSelectedRunUuid,\n  isLoading,\n  rowSelection,\n  setRowSelection,\n  setSelectedDatasetWithRun,\n  setIsDrawerOpen,\n  viewMode,\n}: {\n  data: RunEntityOrGroupData[];\n  uniqueColumns: string[];\n  selectedColumns: { [key: string]: boolean };\n  selectedRunUuid?: string;\n  setSelectedRunUuid: (runUuid: string) => void;\n  isLoading: boolean;\n  rowSelection: RowSelectionState;\n  setRowSelection: OnChangeFn<RowSelectionState>;\n  setSelectedDatasetWithRun: (datasetWithRun: DatasetWithRunType) => void;\n  setIsDrawerOpen: (isOpen: boolean) => void;\n  viewMode: ExperimentEvaluationRunsPageMode;\n}) => {\n  const [sorting, setSorting] = useState<SortingState>([]);\n  const [expandedRows, setExpandedRows] = useState<ExpandedState>(true);\n  const { isRowHidden } = useExperimentEvaluationRunsRowVisibility();\n\n  const columns = useMemo(() => {\n    const allColumns = getExperimentEvalRunsDefaultColumns(viewMode);\n\n    // add a column for each available metric\n    uniqueColumns.forEach((column) => {\n      allColumns.push({\n        id: column,\n        accessorFn: (row) => {\n          if ('subRuns' in row) {\n            return undefined;\n          }\n          return getEvalRunCellValueBasedOnColumn(column, row);\n        },\n        cell: KeyedValueCell,\n        header: SortableHeaderCell,\n        enableSorting: true,\n        sortingFn: 'alphanumeric',\n        meta: {\n          styles: {\n            minWidth: 100,\n            maxWidth: 200,\n          },\n        },\n      });\n    });\n    return allColumns.filter((column) => selectedColumns[column.id ?? '']);\n  }, [selectedColumns, uniqueColumns, viewMode]);\n\n  const table = useReactTable<RunEntityOrGroupData>({\n    columns,\n    data: data,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (row, index) => {\n      if ('info' in row) {\n        return row.info.runUuid;\n      }\n      return row.groupKey;\n    },\n    enableSorting: true,\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    enableColumnResizing: false,\n    enableExpanding: true,\n    getExpandedRowModel: getExpandedRowModel(),\n    getSubRows: (row) => {\n      if ('subRuns' in row) {\n        return row.subRuns;\n      }\n      return undefined;\n    },\n    getRowCanExpand: (row) => Boolean(row.subRows?.length),\n    onExpandedChange: setExpandedRows,\n    meta: {\n      setSelectedRunUuid,\n      setSelectedDatasetWithRun,\n      setIsDrawerOpen,\n    },\n    onRowSelectionChange: setRowSelection,\n    state: {\n      rowSelection,\n      sorting,\n      expanded: expandedRows,\n    },\n  });\n\n  return (\n    <Table css={{ flex: 1 }} scrollable>\n      <TableRow isHeader>\n        {table.getLeafHeaders().map((header) => {\n          return (\n            <TableHeader\n              key={header.id}\n              css={(header.column.columnDef as EvalRunsTableColumnDef).meta?.styles}\n              sortable={header.column.getCanSort()}\n              sortDirection={header.column.getIsSorted() as SortDirection}\n              onToggleSort={header.column.getToggleSortingHandler()}\n              componentId={`mlflow.eval-runs.${header.column.id}-header`}\n              header={header}\n              column={header.column}\n            >\n              {flexRender(header.column.columnDef.header, header.getContext())}\n            </TableHeader>\n          );\n        })}\n      </TableRow>\n\n      {!isLoading &&\n        table.getRowModel().rows.map((row) => {\n          const isActive = 'info' in row.original ? row.original.info.runUuid === selectedRunUuid : false;\n          return (\n            <ExperimentEvaluationRunsTableRow\n              key={row.id}\n              row={row}\n              isActive={isActive}\n              isSelected={rowSelection[row.id]}\n              isExpanded={row.getIsExpanded()}\n              isHidden={isRowHidden(row.id)}\n              columns={columns}\n            />\n          );\n        })}\n\n      {isLoading && <TableSkeletonRows table={table} />}\n    </Table>\n  );\n};\n","import {\n  DialogCombobox,\n  DialogComboboxContent,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListCheckboxItem,\n  DialogComboboxSectionHeader,\n  DialogComboboxTrigger,\n} from '@databricks/design-system';\nimport { EVAL_RUNS_UNSELECTABLE_COLUMNS } from './ExperimentEvaluationRunsTable.constants';\nimport {\n  RunGroupingAggregateFunction,\n  RunGroupingMode,\n} from '../../components/experiment-page/utils/experimentPage.row-types';\nimport type { RunEntity } from '../../types';\nimport { FormattedMessage } from 'react-intl';\nimport type { RunsGroupByConfig } from '../../components/experiment-page/utils/experimentPage.group-row-utils';\nimport { isGroupedBy } from '../../components/experiment-page/utils/experimentPage.group-row-utils';\nimport { isUserFacingTag } from '@mlflow/mlflow/src/common/utils/TagUtils';\nimport { useMemo } from 'react';\n\nexport const ExperimentEvaluationRunsTableGroupBySelector = ({\n  groupByConfig,\n  setGroupByConfig,\n  runs,\n}: {\n  groupByConfig: RunsGroupByConfig | null;\n  setGroupByConfig: (groupBy: RunsGroupByConfig | null) => void;\n  runs: RunEntity[];\n}) => {\n  const hasDatasets = runs.some((run) => (run.inputs?.datasetInputs?.length ?? 0) > 0);\n  const { uniqueParams, uniqueTags } = useMemo(() => {\n    const uniqueParams = new Set<string>();\n    const uniqueTags = new Set<string>();\n\n    for (const run of runs) {\n      for (const param of run.data?.params ?? []) {\n        uniqueParams.add(param.key);\n      }\n      for (const tag of run.data?.tags ?? []) {\n        if (isUserFacingTag(tag.key)) {\n          uniqueTags.add(tag.key);\n        }\n      }\n    }\n\n    return { uniqueParams, uniqueTags };\n  }, [runs]);\n\n  const toggleGroupBy = (mode: RunGroupingMode, columnName: string) => {\n    const groupByKeys = groupByConfig?.groupByKeys ?? [];\n    const newGroupByKeys = new Set(groupByKeys);\n    if (isGroupedBy(groupByConfig, mode, columnName)) {\n      // we can't delete objects directly from a set\n      // without the reference to the original object\n      for (const key of newGroupByKeys) {\n        if (key.mode === mode && key.groupByData === columnName) {\n          newGroupByKeys.delete(key);\n        }\n      }\n    } else {\n      newGroupByKeys.add({ mode, groupByData: columnName });\n    }\n\n    if (newGroupByKeys.size === 0) {\n      setGroupByConfig(null);\n    } else {\n      setGroupByConfig({\n        aggregateFunction: groupByConfig?.aggregateFunction ?? RunGroupingAggregateFunction.Average,\n        groupByKeys: Array.from(newGroupByKeys),\n      });\n    }\n  };\n\n  return (\n    <DialogCombobox componentId=\"mlflow.eval-runs.table-column-selector\" label=\"Group by\" multiSelect>\n      <DialogComboboxTrigger />\n      <DialogComboboxContent>\n        <DialogComboboxOptionList>\n          {hasDatasets && (\n            <>\n              <DialogComboboxSectionHeader>\n                <FormattedMessage\n                  defaultMessage=\"Attributes\"\n                  description=\"Section header for the attributes in a 'group by' selector\"\n                />\n              </DialogComboboxSectionHeader>\n              <DialogComboboxOptionListCheckboxItem\n                key=\"dataset\"\n                value=\"dataset\"\n                checked={isGroupedBy(groupByConfig, RunGroupingMode.Dataset, 'dataset')}\n                onChange={() => {\n                  toggleGroupBy(RunGroupingMode.Dataset, 'dataset');\n                }}\n              />\n            </>\n          )}\n          {uniqueParams.size > 0 && (\n            <>\n              <DialogComboboxSectionHeader>\n                <FormattedMessage\n                  defaultMessage=\"Parameters\"\n                  description=\"Section header for the parameters in a 'group by' selector\"\n                />\n              </DialogComboboxSectionHeader>\n              {Array.from(uniqueParams).map((param) => (\n                <DialogComboboxOptionListCheckboxItem\n                  key={param}\n                  value={param}\n                  checked={isGroupedBy(groupByConfig, RunGroupingMode.Param, param)}\n                  onChange={() => {\n                    toggleGroupBy(RunGroupingMode.Param, param);\n                  }}\n                />\n              ))}\n            </>\n          )}\n          {uniqueTags.size > 0 && (\n            <>\n              <DialogComboboxSectionHeader>\n                <FormattedMessage\n                  defaultMessage=\"Tags\"\n                  description=\"Section header for the tags in a 'group by' selector\"\n                />\n              </DialogComboboxSectionHeader>\n              {Array.from(uniqueTags).map((tag) => (\n                <DialogComboboxOptionListCheckboxItem\n                  key={tag}\n                  value={tag}\n                  checked={isGroupedBy(groupByConfig, RunGroupingMode.Tag, tag)}\n                  onChange={() => {\n                    toggleGroupBy(RunGroupingMode.Tag, tag);\n                  }}\n                />\n              ))}\n            </>\n          )}\n        </DialogComboboxOptionList>\n      </DialogComboboxContent>\n    </DialogCombobox>\n  );\n};\n","import {\n  useDesignSystemTheme,\n  Button,\n  Modal,\n  DialogCombobox,\n  DialogComboboxTrigger,\n  DialogComboboxContent,\n  DialogComboboxOptionList,\n  DialogComboboxOptionListCheckboxItem,\n  RefreshIcon,\n  DialogComboboxSectionHeader,\n  Spacer,\n  SegmentedControlGroup,\n  SegmentedControlButton,\n  TableIcon,\n  ChartLineIcon,\n  ListBorderIcon,\n  Tooltip,\n} from '@databricks/design-system';\nimport type { RowSelectionState } from '@tanstack/react-table';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RunsSearchAutoComplete } from '../../components/experiment-page/components/runs/RunsSearchAutoComplete';\nimport type { RunEntity } from '../../types';\nimport type { ExperimentRunsSelectorResult } from '../../components/experiment-page/utils/experimentRuns.selector';\nimport type { KeyValueEntity } from '../../../common/types';\nimport { ErrorWrapper } from '@mlflow/mlflow/src/common/utils/ErrorWrapper';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useDeleteRuns } from '../../components/experiment-page/hooks/useDeleteRuns';\nimport type { EvalRunsTableColumnId } from './ExperimentEvaluationRunsTable.constants';\nimport {\n  EVAL_RUNS_COLUMN_LABELS,\n  EVAL_RUNS_COLUMN_TYPE_LABELS,\n  EVAL_RUNS_UNSELECTABLE_COLUMNS,\n  EvalRunsTableKeyedColumnPrefix,\n} from './ExperimentEvaluationRunsTable.constants';\nimport { parseEvalRunsTableKeyedColumnKey } from './ExperimentEvaluationRunsTable.utils';\nimport { groupBy } from 'lodash';\nimport { ExperimentEvaluationRunsTableGroupBySelector } from './ExperimentEvaluationRunsTableGroupBySelector';\nimport type { RunsGroupByConfig } from '../../components/experiment-page/utils/experimentPage.group-row-utils';\nimport { ExperimentEvaluationRunsPageMode } from './hooks/useExperimentEvaluationRunsPageMode';\n\n// function to mimic the data structure of the legacy runs response\n// so we can reuse the RunsSearchAutoComplete component\nconst getRunTableMetadata = (runsData: RunEntity[]): ExperimentRunsSelectorResult => {\n  const metricKeys = new Set<string>();\n  const paramKeys = new Set<string>();\n  const tags: Record<string, KeyValueEntity>[] = [];\n\n  runsData.forEach((run) => {\n    run.data.metrics?.forEach((metric) => {\n      metricKeys.add(metric.key);\n    });\n    run.data.params?.forEach((param) => {\n      paramKeys.add(param.key);\n    });\n\n    const runTags: Record<string, KeyValueEntity> = {};\n    run.data.tags?.forEach((tag) => {\n      runTags[tag.key] = { key: tag.key, value: tag.value };\n    });\n\n    tags.push(runTags);\n  });\n\n  return {\n    metricKeyList: Array.from(metricKeys),\n    paramKeyList: Array.from(paramKeys),\n    tagsList: tags,\n  } as ExperimentRunsSelectorResult;\n};\n\nexport const ExperimentEvaluationRunsTableControls = ({\n  rowSelection,\n  setRowSelection,\n  refetchRuns,\n  isFetching,\n  runs,\n  searchRunsError,\n  searchFilter,\n  setSearchFilter,\n  selectedColumns,\n  setSelectedColumns,\n  groupByConfig,\n  setGroupByConfig,\n  viewMode,\n  setViewMode,\n}: {\n  rowSelection: RowSelectionState;\n  setRowSelection: (selection: RowSelectionState) => void;\n  runs: RunEntity[];\n  refetchRuns: () => void;\n  isFetching: boolean;\n  searchRunsError: ErrorWrapper | Error | null;\n  searchFilter: string;\n  setSearchFilter: (filter: string) => void;\n  selectedColumns: { [key: string]: boolean };\n  setSelectedColumns: (columns: { [key: string]: boolean }) => void;\n  groupByConfig: RunsGroupByConfig | null;\n  setGroupByConfig: (groupBy: RunsGroupByConfig | null) => void;\n  viewMode?: ExperimentEvaluationRunsPageMode;\n  setViewMode?: (mode: ExperimentEvaluationRunsPageMode) => void;\n}) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\n\n  const selectedRunUuids = Object.entries(rowSelection)\n    .filter(([_, value]) => value)\n    .map(([key]) => key);\n\n  const { mutate, isLoading } = useDeleteRuns({\n    onSuccess: () => {\n      refetchRuns();\n      setRowSelection({});\n      setDeleteModalVisible(false);\n    },\n  });\n\n  const handleDelete = useCallback(() => {\n    mutate({ runUuids: selectedRunUuids });\n  }, [mutate, selectedRunUuids]);\n\n  const columnPartitions = useMemo(\n    () =>\n      groupBy(\n        Object.entries(selectedColumns),\n        ([columnId]) =>\n          parseEvalRunsTableKeyedColumnKey(columnId)?.columnType ?? EvalRunsTableKeyedColumnPrefix.ATTRIBUTE,\n      ),\n    [selectedColumns],\n  );\n\n  return (\n    <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n      <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n        <SegmentedControlGroup\n          name=\"mlflow.eval-runs.page-mode-selector\"\n          componentId=\"mlflow.eval-runs.page-mode-selector\"\n          value={viewMode}\n          css={{ flexShrink: 0 }}\n        >\n          <SegmentedControlButton\n            value={ExperimentEvaluationRunsPageMode.TRACES}\n            icon={\n              <Tooltip\n                componentId=\"mlflow.eval-runs.traces-mode-toggle-tooltip\"\n                content={\n                  <FormattedMessage\n                    defaultMessage=\"Trace view\"\n                    description=\"Tooltip for traces preview mode toggle in evaluation runs table controls\"\n                  />\n                }\n                delayDuration={0}\n              >\n                <ListBorderIcon />\n              </Tooltip>\n            }\n            onClick={() => setViewMode?.(ExperimentEvaluationRunsPageMode.TRACES)}\n          />\n          <SegmentedControlButton\n            value={ExperimentEvaluationRunsPageMode.CHARTS}\n            icon={\n              <Tooltip\n                componentId=\"mlflow.eval-runs.charts-mode-toggle-tooltip\"\n                content={\n                  <FormattedMessage\n                    defaultMessage=\"Charts\"\n                    description=\"Tooltip for charts page mode toggle in evaluation runs table controls\"\n                  />\n                }\n                delayDuration={0}\n              >\n                <ChartLineIcon />\n              </Tooltip>\n            }\n            onClick={() => setViewMode?.(ExperimentEvaluationRunsPageMode.CHARTS)}\n          />\n        </SegmentedControlGroup>\n        <RunsSearchAutoComplete\n          css={{ minWidth: 0 }}\n          runsData={getRunTableMetadata(runs)}\n          searchFilter={searchFilter}\n          onSearchFilterChange={setSearchFilter}\n          onClear={() => setSearchFilter('')}\n          requestError={searchRunsError}\n        />\n        <Button\n          css={{ flexShrink: 0 }}\n          icon={<RefreshIcon />}\n          disabled={isFetching}\n          onClick={refetchRuns}\n          componentId=\"mlflow.eval-runs.table-refresh-button\"\n        />\n      </div>\n      <div css={{ display: 'flex', gap: theme.spacing.sm }}>\n        <DialogCombobox componentId=\"mlflow.eval-runs.table-column-selector\" label=\"Columns\" multiSelect>\n          <DialogComboboxTrigger />\n          <DialogComboboxContent>\n            <DialogComboboxOptionList>\n              {Object.entries(columnPartitions).map(([columnType, columns]) => {\n                if (!columns.length) {\n                  return null;\n                }\n                const headerLabelDescriptor =\n                  EVAL_RUNS_COLUMN_TYPE_LABELS[columnType as EvalRunsTableKeyedColumnPrefix];\n                return (\n                  // eslint-disable-next-line react/jsx-key\n                  <>\n                    <Spacer size=\"xs\" />\n                    <DialogComboboxSectionHeader>\n                      {headerLabelDescriptor ? intl.formatMessage(headerLabelDescriptor) : columnType}\n                    </DialogComboboxSectionHeader>\n                    {columns.map(([column, selected]) => {\n                      const labelDescriptorForKnownColumn = EVAL_RUNS_COLUMN_LABELS[column as EvalRunsTableColumnId];\n                      const label = labelDescriptorForKnownColumn\n                        ? intl.formatMessage(labelDescriptorForKnownColumn)\n                        : parseEvalRunsTableKeyedColumnKey(column)?.key ?? column;\n\n                      if (EVAL_RUNS_UNSELECTABLE_COLUMNS.has(column)) {\n                        return null;\n                      }\n\n                      return (\n                        <DialogComboboxOptionListCheckboxItem\n                          key={column}\n                          value={column}\n                          onChange={() => {\n                            const newSelectedColumns = { ...selectedColumns };\n                            newSelectedColumns[column] = !selected;\n                            setSelectedColumns(newSelectedColumns);\n                          }}\n                          checked={selected}\n                        >\n                          {label}\n                        </DialogComboboxOptionListCheckboxItem>\n                      );\n                    })}\n                  </>\n                );\n              })}\n            </DialogComboboxOptionList>\n          </DialogComboboxContent>\n        </DialogCombobox>\n        <ExperimentEvaluationRunsTableGroupBySelector\n          groupByConfig={groupByConfig}\n          setGroupByConfig={setGroupByConfig}\n          runs={runs}\n        />\n        {selectedRunUuids.length > 0 && (\n          <div css={{ display: 'flex', flexDirection: 'row', gap: theme.spacing.sm }}>\n            <Button danger componentId=\"select-all-runs-button\" onClick={() => setDeleteModalVisible(true)}>\n              <FormattedMessage defaultMessage=\"Delete\" description=\"Delete runs\" />\n            </Button>\n            <Modal\n              componentId=\"mlflow.eval-runs.runs-delete-modal\"\n              visible={deleteModalVisible}\n              onOk={handleDelete}\n              okButtonProps={{ danger: true, loading: isLoading }}\n              okText={\n                <FormattedMessage defaultMessage=\"Delete\" description=\"Delete evaluation runs modal button text\" />\n              }\n              onCancel={() => {\n                setDeleteModalVisible(false);\n              }}\n              cancelText={\n                <FormattedMessage defaultMessage=\"Cancel\" description=\"Delete evaluation runs cancel button text\" />\n              }\n              confirmLoading={isLoading}\n              title={\n                <FormattedMessage\n                  defaultMessage=\"Delete {numRuns, plural, =1 {1 run} other {# runs}}\"\n                  description=\"Delete evaluation runs modal title\"\n                  values={{ numRuns: selectedRunUuids.length }}\n                />\n              }\n            >\n              <FormattedMessage\n                defaultMessage=\"Are you sure you want to delete these runs?\"\n                description=\"Delete evaluation runs modal confirmation text\"\n              />\n            </Modal>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { MlflowService } from '../../../sdk/MlflowService';\n\nexport const useDeleteRuns = ({ onSuccess, onError }: { onSuccess: () => void; onError?: (error: Error) => void }) => {\n  const { mutate, isLoading } = useMutation({\n    mutationFn: ({ runUuids }: { runUuids: string[] }) =>\n      Promise.all(runUuids.map((runUuid) => MlflowService.deleteRun({ run_id: runUuid }))),\n    onSuccess,\n    onError,\n  });\n\n  return { mutate, isLoading };\n};\n","var _path, _path2, _path3, _g, _path4, _path5, _path6, _g2, _g3, _g4, _g5, _g6, _g7, _g8, _path7, _path8, _path9, _path0, _defs;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgEvalRunsEmpty({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 669,\n    height: 265,\n    viewBox: \"0 0 669 265\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 8C0 3.58172 3.58172 0 8 0H661C665.418 0 669 3.58172 669 8V257C669 261.418 665.418 265 661 265H7.99998C3.58171 265 0 261.418 0 257V8Z\",\n    fill: \"#F6F7F9\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31 19.5H342C346.142 19.5 349.5 22.8579 349.5 27V54C349.5 58.1421 346.142 61.5 342 61.5H31C26.8579 61.5 23.5 58.1421 23.5 54V27L23.5098 26.6143C23.7105 22.6514 26.9872 19.5 31 19.5Z\",\n    fill: \"white\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31 19.5H342C346.142 19.5 349.5 22.8579 349.5 27V54C349.5 58.1421 346.142 61.5 342 61.5H31C26.8579 61.5 23.5 58.1421 23.5 54V27L23.5098 26.6143C23.7105 22.6514 26.9872 19.5 31 19.5Z\",\n    stroke: \"#D1D9E1\"\n  })), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip0_7077_90351)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M43.375 38.75C43.0298 38.75 42.75 39.0298 42.75 39.375C42.75 39.7202 43.0298 40 43.375 40C43.7202 40 44 39.7202 44 39.375C44 39.0298 43.7202 38.75 43.375 38.75ZM42 39.375C42 38.6156 42.6156 38 43.375 38C43.8884 38 44.3361 38.2814 44.5723 38.6983L46.7583 38.2231C46.8339 37.5352 47.4169 37 48.125 37C48.8844 37 49.5 37.6156 49.5 38.375C49.5 38.9384 49.1611 39.4227 48.676 39.6351L48.8171 40.7633C49.4855 40.8567 50 41.4308 50 42.125C50 42.8844 49.3844 43.5 48.625 43.5C48.1948 43.5 47.8107 43.3024 47.5586 42.9931L46.2487 43.5661C46.2496 43.5856 46.25 43.6053 46.25 43.625C46.25 44.3844 45.6344 45 44.875 45C44.1156 45 43.5 44.3844 43.5 43.625C43.5 43.1785 43.7128 42.7816 44.0426 42.5305L43.5066 40.7438C43.4633 40.7479 43.4194 40.75 43.375 40.75C42.6156 40.75 42 40.1344 42 39.375ZM44.7327 39.5939C44.7414 39.5394 44.7469 39.4839 44.749 39.4274L46.882 38.9637C47.0764 39.3734 47.4673 39.6716 47.9329 39.7367L48.0739 40.8649C47.8854 40.9474 47.719 41.071 47.586 41.2244L44.7327 39.5939ZM44.414 40.2756C44.352 40.3471 44.2827 40.4121 44.2074 40.4695L44.7434 42.2562C44.7867 42.2521 44.8306 42.25 44.875 42.25C45.3474 42.25 45.7642 42.4883 46.0117 42.8512L47.2616 42.3044C47.2539 42.2457 47.25 42.1858 47.25 42.125C47.25 42.0505 47.2559 41.9774 47.2673 41.9061L44.414 40.2756ZM48 42.125C48 41.7798 48.2798 41.5 48.625 41.5C48.9702 41.5 49.25 41.7798 49.25 42.125C49.25 42.4702 48.9702 42.75 48.625 42.75C48.2798 42.75 48 42.4702 48 42.125ZM44.875 43C44.5298 43 44.25 43.2798 44.25 43.625C44.25 43.9702 44.5298 44.25 44.875 44.25C45.2202 44.25 45.5 43.9702 45.5 43.625C45.5 43.2798 45.2202 43 44.875 43ZM47.5 38.375C47.5 38.0298 47.7798 37.75 48.125 37.75C48.4702 37.75 48.75 38.0298 48.75 38.375C48.75 38.7202 48.4702 39 48.125 39C47.7798 39 47.5 38.7202 47.5 38.375Z\",\n    fill: \"white\"\n  }))), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M32 41C32 37.6863 34.6863 35 38 35H335C338.314 35 341 37.6863 341 41C341 44.3137 338.314 47 335 47H38C34.6863 47 32 44.3137 32 41Z\",\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31 69.5H342C346.142 69.5 349.5 72.8579 349.5 77V208C349.5 212.142 346.142 215.5 342 215.5H31C26.8579 215.5 23.5 212.142 23.5 208V77C23.5 72.8579 26.8579 69.5 31 69.5Z\",\n    fill: \"white\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31 69.5H342C346.142 69.5 349.5 72.8579 349.5 77V208C349.5 212.142 346.142 215.5 342 215.5H31C26.8579 215.5 23.5 212.142 23.5 208V77C23.5 72.8579 26.8579 69.5 31 69.5Z\",\n    stroke: \"#0E538B\"\n  })), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip1_7077_90351)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36 97C36 94.7909 37.7909 93 40 93H311C313.209 93 315 94.7909 315 97C315 99.2091 313.209 101 311 101H40C37.7909 101 36 99.2091 36 97Z\",\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36 117C36 114.791 37.7909 113 40 113H335C337.209 113 339 114.791 339 117C339 119.209 337.209 121 335 121H40C37.7909 121 36 119.209 36 117Z\",\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36 137C36 134.791 37.7909 133 40 133H287C289.209 133 291 134.791 291 137C291 139.209 289.209 141 287 141H40C37.7909 141 36 139.209 36 137Z\",\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  }))), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip2_7077_90351)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M384 46.3333C384 43.3878 386.388 41 389.333 41H482.699C485.644 41 488.032 43.3878 488.032 46.3333V64.0538C488.032 66.9993 485.644 69.3871 482.699 69.3871H389.333C386.388 69.3871 384 66.9993 384 64.0538V46.3333Z\",\n    fill: \"#00003B\",\n    fillOpacity: 0.05\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip3_7077_90351)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M400.386 56.3468L403.896 55.1925L400.386 54.0381C399.102 53.6157 398.094 52.6081 397.672 51.3235L396.517 47.8136L395.363 51.3235C394.941 52.6081 393.933 53.6157 392.649 54.0381L389.139 55.1925L392.649 56.3468C393.933 56.7693 394.941 57.7769 395.363 59.0614L396.517 62.5714L397.672 59.0614C398.094 57.7768 399.102 56.7693 400.386 56.3468ZM404.562 57.2149C406.513 56.573 406.513 53.8119 404.562 53.17L401.052 52.0157C400.409 51.8044 399.906 51.3007 399.694 50.6584L398.54 47.1485C397.898 45.1966 395.137 45.1966 394.495 47.1485L393.341 50.6584C393.129 51.3007 392.626 51.8044 391.983 52.0157L388.473 53.17C386.522 53.8119 386.522 56.573 388.473 57.2149L391.983 58.3693C392.626 58.5805 393.129 59.0843 393.341 59.7266L394.495 63.2365C395.137 65.1884 397.898 65.1883 398.54 63.2365L399.694 59.7266C399.906 59.0843 400.409 58.5805 401.052 58.3693L404.562 57.2149Z\",\n    fill: \"url(#paint0_linear_7077_90351)\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M413.951 60.4092C411.462 60.4092 409.907 58.5684 409.907 55.623V55.6104C409.907 52.6587 411.456 50.8179 413.944 50.8179C415.874 50.8179 417.378 52.0303 417.651 53.7886L417.645 53.8013H416.496L416.49 53.7886C416.185 52.6143 415.208 51.8716 413.944 51.8716C412.186 51.8716 411.082 53.3188 411.082 55.6104V55.623C411.082 57.9146 412.186 59.3555 413.951 59.3555C415.227 59.3555 416.198 58.7017 416.483 57.6479L416.496 57.6353H417.651V57.6479C417.347 59.3237 415.899 60.4092 413.951 60.4092ZM422.241 60.314C420.292 60.314 419.086 58.9683 419.086 56.7783V56.7656C419.086 54.5693 420.292 53.23 422.241 53.23C424.189 53.23 425.396 54.5693 425.396 56.7656V56.7783C425.396 58.9683 424.189 60.314 422.241 60.314ZM422.241 59.3364C423.536 59.3364 424.266 58.3906 424.266 56.7783V56.7656C424.266 55.147 423.536 54.2075 422.241 54.2075C420.946 54.2075 420.216 55.147 420.216 56.7656V56.7783C420.216 58.3906 420.946 59.3364 422.241 59.3364ZM427.109 60.1934V53.3506H428.214V54.3662H428.315C428.576 53.6489 429.217 53.23 430.144 53.23C430.353 53.23 430.588 53.2554 430.696 53.2744V54.3472C430.467 54.3091 430.258 54.2837 430.017 54.2837C428.963 54.2837 428.214 54.9502 428.214 55.9531V60.1934H427.109ZM432.188 60.1934V53.3506H433.292V54.3662H433.394C433.654 53.6489 434.295 53.23 435.222 53.23C435.431 53.23 435.666 53.2554 435.774 53.2744V54.3472C435.545 54.3091 435.336 54.2837 435.095 54.2837C434.041 54.2837 433.292 54.9502 433.292 55.9531V60.1934H432.188ZM439.741 60.314C437.786 60.314 436.605 58.9429 436.605 56.7974V56.791C436.605 54.6772 437.812 53.23 439.671 53.23C441.531 53.23 442.661 54.6138 442.661 56.6577V57.0894H437.735C437.767 58.5049 438.548 59.3301 439.767 59.3301C440.693 59.3301 441.265 58.8921 441.449 58.4795L441.474 58.4224H442.579L442.566 58.4731C442.331 59.3999 441.354 60.314 439.741 60.314ZM439.665 54.2139C438.649 54.2139 437.875 54.9058 437.754 56.207H441.538C441.423 54.855 440.674 54.2139 439.665 54.2139ZM447.174 60.314C445.257 60.314 444.032 58.9238 444.032 56.7529V56.7402C444.032 54.6138 445.251 53.23 447.168 53.23C448.831 53.23 449.828 54.1885 450.031 55.4072L450.037 55.4453H448.939L448.933 55.4263C448.761 54.7534 448.152 54.2075 447.168 54.2075C445.937 54.2075 445.162 55.1978 445.162 56.7402V56.7529C445.162 58.3271 445.949 59.3364 447.168 59.3364C448.088 59.3364 448.672 58.9302 448.926 58.1685L448.939 58.1304L450.031 58.124L450.018 58.1938C449.739 59.4316 448.818 60.314 447.174 60.314ZM454.208 60.2441C452.798 60.2441 452.208 59.7236 452.208 58.416V54.2646H451.129V53.3506H452.208V51.5796H453.351V53.3506H454.849V54.2646H453.351V58.1367C453.351 58.9429 453.63 59.2666 454.341 59.2666C454.538 59.2666 454.646 59.2603 454.849 59.2412V60.1807C454.633 60.2188 454.423 60.2441 454.208 60.2441ZM456.499 60.1934V53.3506H457.604V54.3789H457.705C458.048 53.6553 458.689 53.23 459.698 53.23C461.234 53.23 462.091 54.1377 462.091 55.7627V60.1934H460.987V56.0293C460.987 54.7979 460.479 54.2075 459.387 54.2075C458.295 54.2075 457.604 54.9438 457.604 56.1436V60.1934H456.499ZM466.884 60.314C464.929 60.314 463.748 58.9429 463.748 56.7974V56.791C463.748 54.6772 464.954 53.23 466.814 53.23C468.674 53.23 469.804 54.6138 469.804 56.6577V57.0894H464.878C464.91 58.5049 465.69 59.3301 466.909 59.3301C467.836 59.3301 468.407 58.8921 468.591 58.4795L468.617 58.4224H469.721L469.708 58.4731C469.474 59.3999 468.496 60.314 466.884 60.314ZM466.808 54.2139C465.792 54.2139 465.018 54.9058 464.897 56.207H468.68C468.566 54.855 467.817 54.2139 466.808 54.2139ZM473.866 60.314C472.343 60.314 471.295 59.5776 471.168 58.4478H472.298C472.482 59.019 473.028 59.3936 473.904 59.3936C474.825 59.3936 475.479 58.9556 475.479 58.3335V58.3208C475.479 57.8574 475.129 57.5337 474.285 57.3306L473.225 57.0767C471.943 56.772 471.365 56.2134 471.365 55.2295V55.2231C471.365 54.0869 472.457 53.23 473.911 53.23C475.345 53.23 476.342 53.9473 476.494 55.0645H475.409C475.263 54.5249 474.729 54.1504 473.904 54.1504C473.092 54.1504 472.495 54.5693 472.495 55.1724V55.1851C472.495 55.6484 472.838 55.9404 473.644 56.1372L474.698 56.3911C475.986 56.7021 476.608 57.2607 476.608 58.2383V58.251C476.608 59.4697 475.421 60.314 473.866 60.314ZM480.544 60.314C479.021 60.314 477.973 59.5776 477.846 58.4478H478.976C479.16 59.019 479.706 59.3936 480.582 59.3936C481.502 59.3936 482.156 58.9556 482.156 58.3335V58.3208C482.156 57.8574 481.807 57.5337 480.963 57.3306L479.903 57.0767C478.621 56.772 478.043 56.2134 478.043 55.2295V55.2231C478.043 54.0869 479.135 53.23 480.588 53.23C482.023 53.23 483.02 53.9473 483.172 55.0645H482.086C481.94 54.5249 481.407 54.1504 480.582 54.1504C479.77 54.1504 479.173 54.5693 479.173 55.1724V55.1851C479.173 55.6484 479.516 55.9404 480.322 56.1372L481.375 56.3911C482.664 56.7021 483.286 57.2607 483.286 58.2383V58.251C483.286 59.4697 482.099 60.314 480.544 60.314Z\",\n    fill: \"#11171C\"\n  }))), _g4 || (_g4 = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip4_7077_90351)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M496.033 46.3333C496.033 43.3878 498.421 41 501.367 41H519.7C522.645 41 525.033 43.3878 525.033 46.3333V64.0538C525.033 66.9993 522.645 69.3871 519.7 69.3871H501.367C498.421 69.3871 496.033 66.9993 496.033 64.0538V46.3333Z\",\n    fill: \"#FDE2E8\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M501.367 60.1934V51.0337H506.928V52.062H502.51V55.2104H506.566V56.2261H502.51V60.1934H501.367ZM510.102 60.314C508.8 60.314 507.816 59.5269 507.816 58.2827V58.27C507.816 57.0513 508.718 56.3467 510.311 56.2515L512.272 56.1309V55.5088C512.272 54.6646 511.758 54.2075 510.736 54.2075C509.917 54.2075 509.378 54.5122 509.2 55.0454L509.194 55.0645H508.089L508.096 55.0264C508.273 53.9536 509.314 53.23 510.774 53.23C512.444 53.23 513.377 54.0869 513.377 55.5088V60.1934H512.272V59.1841H512.171C511.739 59.9141 511.022 60.314 510.102 60.314ZM508.946 58.2573C508.946 58.9492 509.537 59.3555 510.33 59.3555C511.454 59.3555 512.272 58.6191 512.272 57.6416V57.0195L510.444 57.1338C509.403 57.1973 508.946 57.5654 508.946 58.2446V58.2573ZM515.979 52.0303C515.561 52.0303 515.218 51.6875 515.218 51.2686C515.218 50.8496 515.561 50.5068 515.979 50.5068C516.398 50.5068 516.741 50.8496 516.741 51.2686C516.741 51.6875 516.398 52.0303 515.979 52.0303ZM515.421 60.1934V53.3506H516.525V60.1934H515.421ZM518.671 60.1934V50.6338H519.775V60.1934H518.671Z\",\n    fill: \"#11171C\"\n  }))), _g5 || (_g5 = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip5_7077_90351)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M384 86.7201C384 83.7745 386.388 81.3867 389.333 81.3867H487.699C490.644 81.3867 493.032 83.7745 493.032 86.7201V104.44C493.032 107.386 490.644 109.774 487.699 109.774H389.333C386.388 109.774 384 107.386 384 104.44V86.7201Z\",\n    fill: \"#00003B\",\n    fillOpacity: 0.05\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip6_7077_90351)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M400.386 96.7335L403.896 95.5792L400.386 94.4249C399.102 94.0024 398.094 92.9948 397.672 91.7102L396.517 88.2003L395.363 91.7102C394.941 92.9948 393.933 94.0024 392.649 94.4249L389.139 95.5792L392.649 96.7335C393.933 97.156 394.941 98.1636 395.363 99.4482L396.517 102.958L397.672 99.4482C398.094 98.1636 399.102 97.156 400.386 96.7335ZM404.562 97.6017C406.513 96.9597 406.513 94.1987 404.562 93.5567L401.052 92.4024C400.409 92.1912 399.906 91.6874 399.694 91.0451L398.54 87.5352C397.898 85.5833 395.137 85.5833 394.495 87.5352L393.341 91.0451C393.129 91.6874 392.626 92.1912 391.983 92.4024L388.473 93.5567C386.522 94.1987 386.522 96.9597 388.473 97.6017L391.983 98.756C392.626 98.9672 393.129 99.471 393.341 100.113L394.495 103.623C395.137 105.575 397.898 105.575 398.54 103.623L399.694 100.113C399.906 99.471 400.409 98.9672 401.052 98.756L404.562 97.6017Z\",\n    fill: \"url(#paint1_linear_7077_90351)\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M410.478 100.58V91.4204H411.62V95.3813H416.647V91.4204H417.79V100.58H416.647V96.4097H411.62V100.58H410.478ZM421.865 100.701C420.564 100.701 419.58 99.9136 419.58 98.6694V98.6567C419.58 97.438 420.481 96.7334 422.075 96.6382L424.036 96.5176V95.8955C424.036 95.0513 423.522 94.5942 422.5 94.5942C421.681 94.5942 421.142 94.8989 420.964 95.4321L420.958 95.4512H419.853L419.859 95.4131C420.037 94.3403 421.078 93.6167 422.538 93.6167C424.208 93.6167 425.141 94.4736 425.141 95.8955V100.58H424.036V99.5708H423.935C423.503 100.301 422.786 100.701 421.865 100.701ZM420.71 98.644C420.71 99.3359 421.3 99.7422 422.094 99.7422C423.217 99.7422 424.036 99.0059 424.036 98.0283V97.4062L422.208 97.5205C421.167 97.584 420.71 97.9521 420.71 98.6313V98.644ZM427.223 100.58V91.0205H428.327V100.58H427.223ZM430.511 100.58V91.0205H431.615V100.58H430.511ZM436.027 100.701C434.472 100.701 433.672 99.7866 433.672 98.168V93.7373H434.776V97.9014C434.776 99.1328 435.221 99.7231 436.312 99.7231C437.519 99.7231 438.16 98.9868 438.16 97.7871V93.7373H439.264V100.58H438.16V99.5581H438.058C437.722 100.288 437.03 100.701 436.027 100.701ZM444.126 100.701C442.209 100.701 440.984 99.3105 440.984 97.1396V97.127C440.984 95.0005 442.203 93.6167 444.12 93.6167C445.783 93.6167 446.78 94.5752 446.983 95.7939L446.989 95.832H445.891L445.885 95.813C445.713 95.1401 445.104 94.5942 444.12 94.5942C442.889 94.5942 442.114 95.5845 442.114 97.127V97.1396C442.114 98.7139 442.901 99.7231 444.12 99.7231C445.041 99.7231 445.625 99.3169 445.878 98.5552L445.891 98.5171L446.983 98.5107L446.97 98.5806C446.691 99.8184 445.771 100.701 444.126 100.701ZM449.186 92.417C448.767 92.417 448.424 92.0742 448.424 91.6553C448.424 91.2363 448.767 90.8936 449.186 90.8936C449.604 90.8936 449.947 91.2363 449.947 91.6553C449.947 92.0742 449.604 92.417 449.186 92.417ZM448.627 100.58V93.7373H449.731V100.58H448.627ZM451.813 100.58V93.7373H452.918V94.7656H453.02C453.362 94.042 454.003 93.6167 455.013 93.6167C456.549 93.6167 457.406 94.5244 457.406 96.1494V100.58H456.301V96.416C456.301 95.1846 455.793 94.5942 454.702 94.5942C453.61 94.5942 452.918 95.3306 452.918 96.5303V100.58H451.813ZM461.284 100.701C459.983 100.701 458.999 99.9136 458.999 98.6694V98.6567C458.999 97.438 459.9 96.7334 461.494 96.6382L463.455 96.5176V95.8955C463.455 95.0513 462.941 94.5942 461.919 94.5942C461.1 94.5942 460.561 94.8989 460.383 95.4321L460.376 95.4512H459.272L459.278 95.4131C459.456 94.3403 460.497 93.6167 461.957 93.6167C463.626 93.6167 464.56 94.4736 464.56 95.8955V100.58H463.455V99.5708H463.354C462.922 100.301 462.205 100.701 461.284 100.701ZM460.129 98.644C460.129 99.3359 460.719 99.7422 461.513 99.7422C462.636 99.7422 463.455 99.0059 463.455 98.0283V97.4062L461.627 97.5205C460.586 97.584 460.129 97.9521 460.129 98.6313V98.644ZM469.009 100.631C467.6 100.631 467.01 100.11 467.01 98.8027V94.6514H465.931V93.7373H467.01V91.9663H468.152V93.7373H469.65V94.6514H468.152V98.5234C468.152 99.3296 468.432 99.6533 469.143 99.6533C469.339 99.6533 469.447 99.647 469.65 99.6279V100.567C469.435 100.605 469.225 100.631 469.009 100.631ZM471.885 92.417C471.466 92.417 471.123 92.0742 471.123 91.6553C471.123 91.2363 471.466 90.8936 471.885 90.8936C472.304 90.8936 472.646 91.2363 472.646 91.6553C472.646 92.0742 472.304 92.417 471.885 92.417ZM471.326 100.58V93.7373H472.431V100.58H471.326ZM477.325 100.701C475.376 100.701 474.17 99.355 474.17 97.165V97.1523C474.17 94.9561 475.376 93.6167 477.325 93.6167C479.273 93.6167 480.479 94.9561 480.479 97.1523V97.165C480.479 99.355 479.273 100.701 477.325 100.701ZM477.325 99.7231C478.62 99.7231 479.35 98.7773 479.35 97.165V97.1523C479.35 95.5337 478.62 94.5942 477.325 94.5942C476.03 94.5942 475.3 95.5337 475.3 97.1523V97.165C475.3 98.7773 476.03 99.7231 477.325 99.7231ZM482.193 100.58V93.7373H483.298V94.7656H483.399C483.742 94.042 484.383 93.6167 485.393 93.6167C486.929 93.6167 487.786 94.5244 487.786 96.1494V100.58H486.681V96.416C486.681 95.1846 486.173 94.5942 485.082 94.5942C483.99 94.5942 483.298 95.3306 483.298 96.5303V100.58H482.193Z\",\n    fill: \"#11171C\"\n  }))), _g6 || (_g6 = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip7_7077_90351)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M501.033 86.7201C501.033 83.7745 503.421 81.3867 506.367 81.3867H521.7C524.645 81.3867 527.033 83.7745 527.033 86.7201V104.44C527.033 107.386 524.645 109.774 521.7 109.774H506.367C503.421 109.774 501.033 107.386 501.033 104.44V86.7201Z\",\n    fill: \"#D4F7DF\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M506.537 100.58V91.4204H507.647L512.618 98.5488H512.719V91.4204H513.849V100.58H512.738L507.768 93.4771H507.667V100.58H506.537ZM518.857 100.701C516.909 100.701 515.703 99.355 515.703 97.165V97.1523C515.703 94.9561 516.909 93.6167 518.857 93.6167C520.806 93.6167 522.012 94.9561 522.012 97.1523V97.165C522.012 99.355 520.806 100.701 518.857 100.701ZM518.857 99.7231C520.152 99.7231 520.882 98.7773 520.882 97.165V97.1523C520.882 95.5337 520.152 94.5942 518.857 94.5942C517.562 94.5942 516.833 95.5337 516.833 97.1523V97.165C516.833 98.7773 517.562 99.7231 518.857 99.7231Z\",\n    fill: \"#11171C\"\n  }))), _g7 || (_g7 = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip8_7077_90351)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M384 127.108C384 124.162 386.388 121.774 389.333 121.774H456.699C459.644 121.774 462.032 124.162 462.032 127.108V144.828C462.032 147.774 459.644 150.162 456.699 150.162H389.333C386.388 150.162 384 147.774 384 144.828V127.108Z\",\n    fill: \"#00003B\",\n    fillOpacity: 0.05\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M389.597 135.967C389.597 132.146 392.695 129.048 396.516 129.048C400.338 129.048 403.435 132.146 403.435 135.967C403.435 139.789 400.338 142.887 396.516 142.887C392.695 142.887 389.597 139.789 389.597 135.967ZM396.516 127.451C391.813 127.451 388 131.264 388 135.967C388 140.671 391.813 144.483 396.516 144.483C401.219 144.483 405.032 140.671 405.032 135.967C405.032 131.264 401.219 127.451 396.516 127.451ZM395.718 131.709V135.967C395.718 136.179 395.802 136.382 395.952 136.532L398.081 138.661L399.21 137.532L397.315 135.637V131.709H395.718Z\",\n    fill: \"#5F7281\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M410.434 140.968V131.808H411.577V139.939H415.995V140.968H410.434ZM419.562 141.088C418.261 141.088 417.277 140.301 417.277 139.057V139.044C417.277 137.826 418.178 137.121 419.771 137.026L421.733 136.905V136.283C421.733 135.439 421.219 134.982 420.197 134.982C419.378 134.982 418.838 135.287 418.661 135.82L418.654 135.839H417.55L417.556 135.801C417.734 134.728 418.775 134.004 420.235 134.004C421.904 134.004 422.837 134.861 422.837 136.283V140.968H421.733V139.958H421.631C421.2 140.688 420.482 141.088 419.562 141.088ZM418.407 139.032C418.407 139.724 418.997 140.13 419.791 140.13C420.914 140.13 421.733 139.394 421.733 138.416V137.794L419.905 137.908C418.864 137.972 418.407 138.34 418.407 139.019V139.032ZM427.287 141.019C425.878 141.019 425.288 140.498 425.288 139.19V135.039H424.208V134.125H425.288V132.354H426.43V134.125H427.928V135.039H426.43V138.911C426.43 139.717 426.709 140.041 427.42 140.041C427.617 140.041 427.725 140.035 427.928 140.016V140.955C427.712 140.993 427.503 141.019 427.287 141.019ZM432.27 141.088C430.315 141.088 429.134 139.717 429.134 137.572V137.565C429.134 135.452 430.34 134.004 432.2 134.004C434.06 134.004 435.19 135.388 435.19 137.432V137.864H430.264C430.296 139.279 431.077 140.104 432.295 140.104C433.222 140.104 433.793 139.667 433.978 139.254L434.003 139.197H435.107L435.095 139.248C434.86 140.174 433.882 141.088 432.27 141.088ZM432.194 134.988C431.178 134.988 430.404 135.68 430.283 136.981H434.066C433.952 135.629 433.203 134.988 432.194 134.988ZM436.904 140.968V134.125H438.008V135.153H438.11C438.453 134.43 439.094 134.004 440.103 134.004C441.639 134.004 442.496 134.912 442.496 136.537V140.968H441.392V136.804C441.392 135.572 440.884 134.982 439.792 134.982C438.7 134.982 438.008 135.718 438.008 136.918V140.968H436.904ZM447.295 141.088C445.378 141.088 444.153 139.698 444.153 137.527V137.515C444.153 135.388 445.372 134.004 447.289 134.004C448.952 134.004 449.948 134.963 450.151 136.182L450.158 136.22H449.06L449.053 136.201C448.882 135.528 448.272 134.982 447.289 134.982C446.057 134.982 445.283 135.972 445.283 137.515V137.527C445.283 139.102 446.07 140.111 447.289 140.111C448.209 140.111 448.793 139.705 449.047 138.943L449.06 138.905L450.151 138.898L450.139 138.968C449.859 140.206 448.939 141.088 447.295 141.088ZM452.354 143.367C452.208 143.367 452.018 143.354 451.865 143.329V142.421C451.999 142.447 452.17 142.453 452.322 142.453C452.951 142.453 453.332 142.167 453.579 141.38L453.706 140.974L451.173 134.125H452.354L454.233 139.755H454.334L456.207 134.125H457.369L454.696 141.387C454.131 142.923 453.566 143.367 452.354 143.367Z\",\n    fill: \"#11171C\"\n  }))), _g8 || (_g8 = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip9_7077_90351)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M470.033 127.108C470.033 124.162 472.421 121.774 475.367 121.774H498.7C501.645 121.774 504.033 124.162 504.033 127.108V144.828C504.033 147.774 501.645 150.162 498.7 150.162H475.367C472.421 150.162 470.033 147.774 470.033 144.828V127.108Z\",\n    fill: \"#00003B\",\n    fillOpacity: 0.05\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M475.087 140.968V140.181L478.185 136.829C479.353 135.566 479.695 135.09 479.695 134.29V134.277C479.695 133.312 479.042 132.589 477.962 132.589C476.864 132.589 476.134 133.306 476.134 134.385L476.128 134.398L475.036 134.392L475.023 134.385C475.03 132.76 476.287 131.592 478.039 131.592C479.638 131.592 480.863 132.678 480.863 134.157V134.169C480.863 135.217 480.413 135.979 478.756 137.686L476.674 139.838V139.939H481.016V140.968H475.087ZM483.65 141.031C483.199 141.031 482.825 140.657 482.825 140.206C482.825 139.749 483.199 139.381 483.65 139.381C484.107 139.381 484.475 139.749 484.475 140.206C484.475 140.657 484.107 141.031 483.65 141.031ZM489.191 141.184C487.484 141.184 486.265 140.085 486.132 138.619L486.125 138.549H487.224L487.23 138.6C487.338 139.476 488.131 140.174 489.204 140.174C490.423 140.174 491.261 139.305 491.261 138.067V138.054C491.261 136.835 490.41 135.966 489.223 135.966C488.614 135.966 488.093 136.15 487.7 136.524C487.541 136.677 487.395 136.854 487.281 137.07H486.291L486.773 131.808H491.87V132.83H487.674L487.363 135.928H487.465C487.871 135.312 488.588 134.976 489.42 134.976C491.14 134.976 492.378 136.264 492.378 138.035V138.048C492.378 139.895 491.051 141.184 489.191 141.184ZM496.574 141.088C495.05 141.088 494.003 140.352 493.876 139.222H495.006C495.19 139.793 495.736 140.168 496.612 140.168C497.532 140.168 498.186 139.73 498.186 139.108V139.095C498.186 138.632 497.837 138.308 496.993 138.105L495.933 137.851C494.65 137.546 494.073 136.988 494.073 136.004V135.998C494.073 134.861 495.165 134.004 496.618 134.004C498.053 134.004 499.049 134.722 499.202 135.839H498.116C497.97 135.299 497.437 134.925 496.612 134.925C495.799 134.925 495.203 135.344 495.203 135.947V135.959C495.203 136.423 495.545 136.715 496.352 136.912L497.405 137.166C498.694 137.477 499.316 138.035 499.316 139.013V139.025C499.316 140.244 498.129 141.088 496.574 141.088Z\",\n    fill: \"#11171C\"\n  }))), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M384 167.494C384 164.549 386.388 162.161 389.333 162.161H415.667C418.612 162.161 421 164.549 421 167.494V185.215C421 188.16 418.612 190.548 415.667 190.548H389.333C386.388 190.548 384 188.16 384 185.215V167.494Z\",\n    fill: \"#00003B\",\n    fillOpacity: 0.05\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M393.131 181.57C390.643 181.57 389.087 179.729 389.087 176.784V176.771C389.087 173.82 390.636 171.979 393.125 171.979C395.054 171.979 396.559 173.191 396.832 174.95L396.825 174.962H395.676L395.67 174.95C395.365 173.775 394.388 173.033 393.125 173.033C391.366 173.033 390.262 174.48 390.262 176.771V176.784C390.262 179.076 391.366 180.517 393.131 180.517C394.407 180.517 395.378 179.863 395.664 178.809L395.676 178.796H396.832V178.809C396.527 180.485 395.08 181.57 393.131 181.57ZM401.421 181.475C399.472 181.475 398.266 180.129 398.266 177.939V177.927C398.266 175.73 399.472 174.391 401.421 174.391C403.37 174.391 404.576 175.73 404.576 177.927V177.939C404.576 180.129 403.37 181.475 401.421 181.475ZM401.421 180.498C402.716 180.498 403.446 179.552 403.446 177.939V177.927C403.446 176.308 402.716 175.369 401.421 175.369C400.126 175.369 399.396 176.308 399.396 177.927V177.939C399.396 179.552 400.126 180.498 401.421 180.498ZM408.638 181.475C407.115 181.475 406.067 180.739 405.94 179.609H407.07C407.254 180.18 407.8 180.555 408.676 180.555C409.597 180.555 410.25 180.117 410.25 179.495V179.482C410.25 179.019 409.901 178.695 409.057 178.492L407.997 178.238C406.715 177.933 406.137 177.375 406.137 176.391V176.384C406.137 175.248 407.229 174.391 408.683 174.391C410.117 174.391 411.114 175.108 411.266 176.226H410.181C410.035 175.686 409.501 175.312 408.676 175.312C407.864 175.312 407.267 175.73 407.267 176.333V176.346C407.267 176.81 407.61 177.102 408.416 177.298L409.47 177.552C410.758 177.863 411.38 178.422 411.38 179.399V179.412C411.38 180.631 410.193 181.475 408.638 181.475ZM415.462 181.405C414.053 181.405 413.462 180.885 413.462 179.577V175.426H412.383V174.512H413.462V172.741H414.605V174.512H416.103V175.426H414.605V179.298C414.605 180.104 414.884 180.428 415.595 180.428C415.792 180.428 415.9 180.421 416.103 180.402V181.342C415.887 181.38 415.678 181.405 415.462 181.405Z\",\n    fill: \"#11171C\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M429 167.494C429 164.549 431.388 162.161 434.333 162.161H467.667C470.612 162.161 473 164.549 473 167.494V185.215C473 188.16 470.612 190.548 467.667 190.548H434.333C431.388 190.548 429 188.16 429 185.215V167.494Z\",\n    fill: \"#00003B\",\n    fillOpacity: 0.05\n  })), _path0 || (_path0 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M436.838 182.275V181.202C435.328 181.062 434.077 180.142 434.026 178.669V178.663L435.131 178.657V178.669C435.245 179.457 435.734 180.085 436.838 180.206V177.152L436.692 177.114C435.112 176.733 434.261 176.029 434.261 174.785V174.772C434.261 173.414 435.334 172.487 436.838 172.347V171.274H437.6V172.347C439.066 172.48 440.203 173.433 440.253 174.829V174.835L439.149 174.842V174.829C439.066 173.979 438.457 173.452 437.6 173.344V176.257L437.797 176.302C439.428 176.695 440.342 177.368 440.342 178.695V178.708C440.342 180.231 439.098 181.088 437.6 181.208V182.275H436.838ZM435.366 174.708C435.366 175.324 435.747 175.807 436.838 176.073V173.344C435.874 173.477 435.366 174.086 435.366 174.696V174.708ZM437.638 177.343L437.6 177.336V180.218C438.781 180.123 439.238 179.526 439.238 178.796V178.784C439.238 178.092 438.895 177.647 437.638 177.343ZM445.389 181.57C443.364 181.57 442.158 179.723 442.158 176.778V176.765C442.158 173.82 443.364 171.979 445.389 171.979C447.414 171.979 448.632 173.82 448.632 176.765V176.778C448.632 179.723 447.414 181.57 445.389 181.57ZM445.389 180.574C446.703 180.574 447.483 179.114 447.483 176.778V176.765C447.483 174.429 446.703 172.982 445.389 172.982C444.075 172.982 443.307 174.429 443.307 176.765V176.778C443.307 179.114 444.075 180.574 445.389 180.574ZM450.911 181.418C450.46 181.418 450.086 181.043 450.086 180.593C450.086 180.136 450.46 179.768 450.911 179.768C451.368 179.768 451.736 180.136 451.736 180.593C451.736 181.043 451.368 181.418 450.911 181.418ZM456.421 181.57C454.396 181.57 453.19 179.723 453.19 176.778V176.765C453.19 173.82 454.396 171.979 456.421 171.979C458.446 171.979 459.665 173.82 459.665 176.765V176.778C459.665 179.723 458.446 181.57 456.421 181.57ZM456.421 180.574C457.735 180.574 458.516 179.114 458.516 176.778V176.765C458.516 174.429 457.735 172.982 456.421 172.982C455.107 172.982 454.339 174.429 454.339 176.765V176.778C454.339 179.114 455.107 180.574 456.421 180.574ZM465.727 181.354V179.457H461.264V178.416C462.502 176.34 463.905 174.105 465.187 172.195H466.844V178.435H468.145V179.457H466.844V181.354H465.727ZM462.432 178.441H465.733V173.255H465.657C464.628 174.791 463.429 176.683 462.432 178.365V178.441Z\",\n    fill: \"#11171C\"\n  })), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint0_linear_7077_90351\",\n    x1: 406.886,\n    y1: 44.296,\n    x2: 385.515,\n    y2: 65.6662,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.235,\n    stopColor: \"#4299E0\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.47,\n    stopColor: \"#CA42E0\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.76,\n    stopColor: \"#FF5F46\"\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"paint1_linear_7077_90351\",\n    x1: 406.886,\n    y1: 84.6828,\n    x2: 385.515,\n    y2: 106.053,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.235,\n    stopColor: \"#4299E0\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.47,\n    stopColor: \"#CA42E0\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.76,\n    stopColor: \"#FF5F46\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip0_7077_90351\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 8,\n    height: 8,\n    fill: \"white\",\n    transform: \"translate(42 37)\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip1_7077_90351\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    x: 36,\n    y: 87,\n    width: 303,\n    height: 60,\n    rx: 4,\n    fill: \"white\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip2_7077_90351\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M384 46.3333C384 43.3878 386.388 41 389.333 41H482.699C485.644 41 488.032 43.3878 488.032 46.3333V64.0538C488.032 66.9993 485.644 69.3871 482.699 69.3871H389.333C386.388 69.3871 384 66.9993 384 64.0538V46.3333Z\",\n    fill: \"white\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip3_7077_90351\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M388 50.6768C388 48.4676 389.791 46.6768 392 46.6768H401.032C403.241 46.6768 405.032 48.4676 405.032 50.6768V59.709C405.032 61.9182 403.241 63.709 401.032 63.709H392C389.791 63.709 388 61.9182 388 59.709V50.6768Z\",\n    fill: \"white\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip4_7077_90351\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M496.033 46.3333C496.033 43.3878 498.421 41 501.367 41H519.7C522.645 41 525.033 43.3878 525.033 46.3333V64.0538C525.033 66.9993 522.645 69.3871 519.7 69.3871H501.367C498.421 69.3871 496.033 66.9993 496.033 64.0538V46.3333Z\",\n    fill: \"white\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip5_7077_90351\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M384 86.7201C384 83.7745 386.388 81.3867 389.333 81.3867H487.699C490.644 81.3867 493.032 83.7745 493.032 86.7201V104.44C493.032 107.386 490.644 109.774 487.699 109.774H389.333C386.388 109.774 384 107.386 384 104.44V86.7201Z\",\n    fill: \"white\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip6_7077_90351\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M388 91.0635C388 88.8543 389.791 87.0635 392 87.0635H401.032C403.241 87.0635 405.032 88.8543 405.032 91.0635V100.096C405.032 102.305 403.241 104.096 401.032 104.096H392C389.791 104.096 388 102.305 388 100.096V91.0635Z\",\n    fill: \"white\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip7_7077_90351\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M501.033 86.7201C501.033 83.7745 503.421 81.3867 506.367 81.3867H521.7C524.645 81.3867 527.033 83.7745 527.033 86.7201V104.44C527.033 107.386 524.645 109.774 521.7 109.774H506.367C503.421 109.774 501.033 107.386 501.033 104.44V86.7201Z\",\n    fill: \"white\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip8_7077_90351\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M384 127.108C384 124.162 386.388 121.774 389.333 121.774H456.699C459.644 121.774 462.032 124.162 462.032 127.108V144.828C462.032 147.774 459.644 150.162 456.699 150.162H389.333C386.388 150.162 384 147.774 384 144.828V127.108Z\",\n    fill: \"white\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip9_7077_90351\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M470.033 127.108C470.033 124.162 472.421 121.774 475.367 121.774H498.7C501.645 121.774 504.033 124.162 504.033 127.108V144.828C504.033 147.774 501.645 150.162 498.7 150.162H475.367C472.421 150.162 470.033 147.774 470.033 144.828V127.108Z\",\n    fill: \"white\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgEvalRunsEmpty);\nexport default __webpack_public_path__ + \"static/media/eval-runs-empty.5b96bbb9a4c5dc6b413000491892bb6f.svg\";\nexport { ForwardRef as ReactComponent };","import { useCallback } from 'react';\nimport { useSearchParams } from '@mlflow/mlflow/src/common/utils/RoutingUtils';\n\nconst QUERY_PARAM_KEY = 'selectedRunUuid';\n\n/**\n * Query param-powered hook that returns the selected run uuid.\n */\nexport const useSelectedRunUuid = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const selectedRunUuid = searchParams.get(QUERY_PARAM_KEY) ?? undefined;\n\n  const setSelectedRunUuid = useCallback(\n    (selectedRunUuid: string | undefined) => {\n      setSearchParams(\n        (params) => {\n          if (selectedRunUuid === undefined) {\n            params.delete(QUERY_PARAM_KEY);\n            return params;\n          }\n          params.set(QUERY_PARAM_KEY, selectedRunUuid);\n          return params;\n        },\n        { replace: true },\n      );\n    },\n    [setSearchParams],\n  );\n\n  return [selectedRunUuid, setSelectedRunUuid] as const;\n};\n","import { Button, ChartLineIcon, Modal, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { CodeSnippet } from '@mlflow/mlflow/src/shared/web-shared/snippet';\nimport { useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nconst getCodeSnippet = (experimentId: string) => `import mlflow\nfrom mlflow.genai import datasets, evaluate, scorers\n\nmlflow.set_experiment(experiment_id=\"${experimentId}\")\n\n# Step 1: Define evaluation dataset\neval_dataset = [{\n  \"inputs\": {\n    \"query\": \"What is MLflow?\",\n  }\n}]\n\n# Step 2: Define predict_fn\n# predict_fn will be called for every row in your evaluation\n# dataset. Replace with your app's prediction function.\n# NOTE: The **kwargs to predict_fn are the same as the keys of\n# the \\`inputs\\` in your dataset.\ndef predict(query):\n  return query + \" an answer\"\n\n# Step 3: Run evaluation\nevaluate(\n  data=eval_dataset,\n  predict_fn=predict,\n  scorers=scorers.get_all_scorers()\n)\n\n# Results will appear back in this UI`;\n\nexport const RunEvaluationButton = ({ experimentId }: { experimentId: string }) => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const [isOpen, setIsOpen] = useState(false);\n  const evalInstructions = (\n    <FormattedMessage\n      defaultMessage=\"Run the following code to start an evaluation.\"\n      description=\"Instructions for running the evaluation code in OSS\"\n    />\n  );\n  const evalCodeSnippet = (\n    <CodeSnippet theme={theme.isDarkMode ? 'duotoneDark' : 'light'} language=\"python\">\n      {getCodeSnippet(experimentId)}\n    </CodeSnippet>\n  );\n\n  return (\n    <>\n      <Button componentId=\"mlflow.eval-runs.start-run-button\" icon={<ChartLineIcon />} onClick={() => setIsOpen(true)}>\n        <FormattedMessage\n          defaultMessage=\"Run evaluation\"\n          description=\"Label for a button that displays instructions for starting a new evaluation run\"\n        />\n      </Button>\n      <Modal\n        componentId=\"mlflow.eval-runs.start-run-modal\"\n        // eslint-disable-next-line formatjs/enforce-description\n        title={<FormattedMessage defaultMessage=\"Run evaluation\" />}\n        visible={isOpen}\n        okText=\"Discard\"\n        footer={null}\n        onCancel={() => setIsOpen(false)}\n      >\n        <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>\n          <Typography.Text>{evalInstructions}</Typography.Text>\n          {evalCodeSnippet}\n        </div>\n      </Modal>\n    </>\n  );\n};\n","import type { RunEntity } from '../../types';\nimport type { RunsGroupByConfig } from '../../components/experiment-page/utils/experimentPage.group-row-utils';\nimport type { RunGroupByGroupingValue } from '../../components/experiment-page/utils/experimentPage.row-types';\nimport { RunGroupingMode } from '../../components/experiment-page/utils/experimentPage.row-types';\n\nexport type ExperimentEvaluationRunsGroupData = {\n  groupKey: string;\n  groupValues: RunGroupByGroupingValue[];\n  subRuns: RunEntity[];\n};\n\nexport type RunEntityOrGroupData = RunEntity | ExperimentEvaluationRunsGroupData;\n\n// string key for easy access in the map object\nconst createGroupKey = (groupData: RunGroupByGroupingValue) => {\n  if (groupData.mode === RunGroupingMode.Dataset) {\n    return `Dataset: ${groupData.value}`;\n  } else {\n    return `${groupData.groupByData} (${groupData.mode}): ${groupData.value}`;\n  }\n};\n\nconst getGroupValues = (run: RunEntity, groupBy: RunsGroupByConfig): RunGroupByGroupingValue[] => {\n  const groupByKeys = groupBy.groupByKeys;\n\n  const values: RunGroupByGroupingValue[] = [];\n\n  for (const groupByKey of groupByKeys) {\n    switch (groupByKey.mode) {\n      case RunGroupingMode.Dataset:\n        values.push({\n          mode: RunGroupingMode.Dataset,\n          groupByData: 'dataset',\n          // in genai evaluate, it's not possible to have multiple dataset inputs,\n          // so we can just use the first one. however, this logic will need\n          // to be updated if we support multiple dataset inputs in the future\n          value: run.inputs?.datasetInputs?.[0]?.dataset?.digest ?? null,\n        });\n        break;\n      case RunGroupingMode.Param:\n        const param = run.data?.params?.find((p) => p.key === groupByKey.groupByData);\n        values.push({\n          mode: RunGroupingMode.Param,\n          groupByData: groupByKey.groupByData,\n          value: param?.value ?? null,\n        });\n        break;\n      case RunGroupingMode.Tag:\n        const tag = run.data?.tags?.find((t) => t.key === groupByKey.groupByData);\n        values.push({\n          mode: RunGroupingMode.Tag,\n          groupByData: groupByKey.groupByData,\n          value: tag?.value ?? null,\n        });\n        break;\n      default:\n        break;\n    }\n  }\n\n  return values;\n};\n\nexport const getGroupByRunsData = (runs: RunEntity[], groupBy: RunsGroupByConfig | null): RunEntityOrGroupData[] => {\n  if (!groupBy) {\n    return runs;\n  }\n\n  const runGroupsMap: Record<\n    string,\n    {\n      groupValues: RunGroupByGroupingValue[];\n      subRuns: RunEntity[];\n    }\n  > = {};\n\n  for (const run of runs) {\n    const groupValues = getGroupValues(run, groupBy);\n    const groupKey = groupValues.map(createGroupKey).join(', ');\n    if (!runGroupsMap[groupKey]) {\n      runGroupsMap[groupKey] = {\n        groupValues,\n        subRuns: [],\n      };\n    }\n    runGroupsMap[groupKey].subRuns.push(run);\n  }\n\n  const runsWithGroupValues: RunEntityOrGroupData[] = [];\n  Object.entries(runGroupsMap).forEach(([groupKey, { groupValues, subRuns }]) => {\n    const groupHeadingRow: RunEntityOrGroupData = {\n      groupKey,\n      groupValues,\n      subRuns,\n    };\n    runsWithGroupValues.push(groupHeadingRow);\n  });\n\n  return runsWithGroupValues;\n};\n","import { useCallback, useEffect, useReducer, useState } from 'react';\nimport type { ChartSectionConfig } from '../../../types';\nimport { MetricEntitiesByName } from '../../../types';\n\nimport { compact, first, isEmpty, uniq } from 'lodash';\nimport type { RunsChartsUIConfigurationSetter } from '../../../components/runs-charts/hooks/useRunsChartsUIConfiguration';\nimport type { RunsChartsBarCardConfig, RunsChartsCardConfig } from '../../../components/runs-charts/runs-charts.types';\nimport { RunsChartType } from '../../../components/runs-charts/runs-charts.types';\nimport type { ExperimentRunsChartsUIConfiguration } from '../../../components/experiment-page/models/ExperimentPageUIState';\n\ntype UpdateChartStateAction = { type: 'UPDATE'; stateSetter: RunsChartsUIConfigurationSetter };\ntype InitializeChartStateAction = { type: 'INITIALIZE'; initialConfig?: ExperimentEvaluationRunsChartsUIConfiguration };\ntype NewDataStateAction = { type: 'METRICS_UPDATED'; allMetricKeys: string[] };\n\ntype ChartsReducerAction = UpdateChartStateAction | NewDataStateAction | InitializeChartStateAction;\n\nexport interface ExperimentEvaluationRunsChartsUIConfiguration extends ExperimentRunsChartsUIConfiguration {\n  isDirty: boolean;\n}\n\nconst createLocalStorageKey = (storeIdentifier: string, version = 1) =>\n  `experiment-evaluation-runs-charts-ui-state-v${version}-${storeIdentifier}`;\n\n/**\n * Generates a list of chart tiles based on logged models metrics and datasets.\n */\nconst getExperimentEvalRunsPageChartSetup = (allMetricKeys: string[]) => {\n  const firstNameSegments = compact(\n    uniq(allMetricKeys.map((key) => (key.includes('/') ? first(key.split('/')) : null))),\n  );\n  const compareRunCharts: RunsChartsBarCardConfig[] = allMetricKeys.map((key) => {\n    const sectionKey = key.includes('/') ? first(key.split('/')) : null;\n    return {\n      deleted: false,\n      type: RunsChartType.BAR,\n      uuid: `autogen-${key}`,\n      metricSectionId: sectionKey ? `autogen-${sectionKey}` : 'default',\n      isGenerated: true,\n      metricKey: key,\n      displayName: key,\n    };\n  });\n\n  const compareRunSections: ChartSectionConfig[] = firstNameSegments.map((segmentName) => ({\n    display: true,\n    name: segmentName,\n    uuid: `autogen-${segmentName}`,\n    isReordered: false,\n  }));\n\n  if (isEmpty(compareRunSections)) {\n    compareRunSections.push({\n      display: true,\n      name: 'Metrics',\n      uuid: 'default',\n      isReordered: false,\n    });\n  }\n\n  return {\n    compareRunCharts,\n    compareRunSections,\n  };\n};\n\n// Internal utility function  used to merge the current charts state with potentially incoming new charts and sections\nconst reconcileChartsAndSections = (\n  currentState: ExperimentEvaluationRunsChartsUIConfiguration,\n  newCharts: { compareRunCharts: RunsChartsCardConfig[]; compareRunSections: ChartSectionConfig[] },\n) => {\n  // If there are no charts / sections, or if the state is in pristine state, just set the new charts if they're not empty\n  if (!currentState.compareRunCharts || !currentState.compareRunSections || !currentState.isDirty) {\n    if (newCharts.compareRunCharts.length > 0 || newCharts.compareRunSections.length > 0) {\n      return {\n        ...currentState,\n        compareRunCharts: newCharts.compareRunCharts ?? [],\n        compareRunSections: newCharts.compareRunSections ?? [],\n      };\n    }\n  }\n\n  // Otherwise, detect new sections and charts and add them to the list\n  const newChartsToAdd = newCharts.compareRunCharts.filter(\n    (newChart) => !currentState.compareRunCharts?.find((chart) => chart.uuid === newChart.uuid),\n  );\n  const newSectionsToAdd = newCharts.compareRunSections.filter(\n    (newSection) =>\n      newChartsToAdd.find((newChart) => newChart.metricSectionId === newSection.uuid) &&\n      !currentState.compareRunSections?.find((section) => section.uuid === newSection.uuid),\n  );\n\n  if (newSectionsToAdd.length > 0 || newChartsToAdd.length > 0) {\n    return {\n      ...currentState,\n      compareRunCharts: currentState.compareRunCharts\n        ? [...currentState.compareRunCharts, ...newChartsToAdd]\n        : newCharts.compareRunCharts,\n      compareRunSections: currentState.compareRunSections\n        ? [...currentState.compareRunSections, ...newSectionsToAdd]\n        : newCharts.compareRunSections,\n    };\n  }\n  return currentState;\n};\n\nconst chartsUIStateInitializer = (): ExperimentEvaluationRunsChartsUIConfiguration => ({\n  compareRunCharts: undefined,\n  compareRunSections: undefined,\n  autoRefreshEnabled: false,\n  isAccordionReordered: false,\n  chartsSearchFilter: '',\n  globalLineChartConfig: undefined,\n  isDirty: false,\n});\n\n// Reducer to manage the state of the charts UI\nconst chartsUIStateReducer = (state: ExperimentEvaluationRunsChartsUIConfiguration, action: ChartsReducerAction) => {\n  // 'UPDATE' is sent by controls that updates the UI state directly\n  if (action.type === 'UPDATE') {\n    return { ...action.stateSetter(state), isDirty: true };\n  }\n  // 'METRICS_UPDATED' is sent when new logged models data is available and potentially new charts need to be added\n  if (action.type === 'METRICS_UPDATED') {\n    const { compareRunCharts, compareRunSections } = getExperimentEvalRunsPageChartSetup(action.allMetricKeys);\n    const newState = reconcileChartsAndSections(state, { compareRunCharts, compareRunSections });\n    return newState;\n  }\n  if (action.type === 'INITIALIZE') {\n    if (action.initialConfig) {\n      return action.initialConfig;\n    }\n  }\n  return state;\n};\n\n// This function is async on purpose to accommodate potential asynchoronous storage mechanisms (e.g. IndexedDB) in the future\nconst loadPersistedDataFromStorage = async (storeIdentifier: string) => {\n  const serializedData = localStorage.getItem(createLocalStorageKey(storeIdentifier));\n  if (!serializedData) {\n    return undefined;\n  }\n  try {\n    return JSON.parse(serializedData);\n  } catch {\n    return undefined;\n  }\n};\n\n// This function is async on purpose to accommodate potential asynchoronous storage mechanisms (e.g. IndexedDB) in the future\nconst saveDataToStorage = async (\n  storeIdentifier: string,\n  dataToPersist: ExperimentEvaluationRunsChartsUIConfiguration,\n) => {\n  localStorage.setItem(createLocalStorageKey(storeIdentifier), JSON.stringify(dataToPersist));\n};\n\n/**\n * A custom hook to manage the state of the charts UI for the Experiment Evaluation Runs page.\n * TODO: unify with useExperimentLoggedModelsChartsUIState\n * TODO: possibly refactor useEffects into useQuery\n */\nexport const useExperimentEvaluationRunsChartsUIState = (allMetricKeys: string[], storeIdentifier: string) => {\n  const [chartUIState, dispatchChartUIState] = useReducer(chartsUIStateReducer, undefined, chartsUIStateInitializer);\n  const [loading, setLoading] = useState(true);\n\n  // Attempt to load the persisted data when the component mounts\n  useEffect(() => {\n    setLoading(true);\n    loadPersistedDataFromStorage(storeIdentifier).then((data) => {\n      dispatchChartUIState({ type: 'INITIALIZE', initialConfig: data });\n      setLoading(false);\n    });\n  }, [storeIdentifier]);\n\n  // Attempt to update the charts state when the logged models change\n  useEffect(() => {\n    if (loading) {\n      return;\n    }\n    dispatchChartUIState({ type: 'METRICS_UPDATED', allMetricKeys });\n  }, [allMetricKeys, loading]);\n\n  // Attempt persist the data when the state changes\n  useEffect(() => {\n    if (chartUIState.isDirty) {\n      saveDataToStorage(storeIdentifier, chartUIState);\n    }\n  }, [storeIdentifier, chartUIState]);\n\n  // Create an updater function to pass it to chart controls\n  const updateUIState = useCallback(\n    (stateSetter: RunsChartsUIConfigurationSetter) =>\n      dispatchChartUIState({\n        type: 'UPDATE',\n        stateSetter,\n      }),\n    [],\n  );\n\n  return { chartUIState, updateUIState, loading };\n};\n","import { useCallback, useMemo, useState } from 'react';\nimport type { RunEntity } from '../../../types';\nimport { ChartSectionConfig } from '../../../types';\nimport type { RunsChartsRunData } from '../../../components/runs-charts/components/RunsCharts.common';\nimport { RunsChartsTooltipWrapper } from '../../../components/runs-charts/hooks/useRunsChartsTooltip';\nimport { RunsChartsDraggableCardsGridContextProvider } from '../../../components/runs-charts/components/RunsChartsDraggableCardsGridContext';\nimport { RunsChartsSectionAccordion } from '../../../components/runs-charts/components/sections/RunsChartsSectionAccordion';\nimport {\n  RunsChartsUIConfigurationContextProvider,\n  useConfirmChartCardConfigurationFn,\n  useInsertRunsChartsFn,\n  useRemoveRunsChartFn,\n  useReorderRunsChartsFn,\n} from '../../../components/runs-charts/hooks/useRunsChartsUIConfiguration';\nimport {\n  RunsChartsBarCardConfig,\n  RunsChartsCardConfig,\n  RunsChartType,\n} from '../../../components/runs-charts/runs-charts.types';\nimport { keyBy, uniq } from 'lodash';\nimport { MLFLOW_RUN_COLOR_TAG } from '../../../constants';\nimport { getStableColorForRun } from '../../../utils/RunNameUtils';\nimport type { ExperimentEvaluationRunsChartsUIConfiguration } from '../hooks/useExperimentEvaluationRunsChartsUIState';\nimport { useExperimentEvaluationRunsChartsUIState } from '../hooks/useExperimentEvaluationRunsChartsUIState';\nimport { useMemoDeep } from '../../../../common/hooks/useMemoDeep';\nimport { RunsChartsConfigureModal } from '../../../components/runs-charts/components/RunsChartsConfigureModal';\nimport { RunsChartsTooltipBody } from '../../../components/runs-charts/components/RunsChartsTooltipBody';\nimport { TableSkeleton } from '@databricks/design-system';\nimport { useGetExperimentRunColor } from '../../../components/experiment-page/hooks/useExperimentRunColor';\nimport { useExperimentEvaluationRunsRowVisibility } from '../hooks/useExperimentEvaluationRunsRowVisibility';\n\nconst SUPPORTED_CHART_TYPES = [\n  RunsChartType.LINE,\n  RunsChartType.BAR,\n  RunsChartType.CONTOUR,\n  RunsChartType.DIFFERENCE,\n  RunsChartType.PARALLEL,\n  RunsChartType.SCATTER,\n];\n\nconst ExperimentEvaluationRunsPageChartsImpl = ({\n  runs = [],\n  chartUIState,\n}: {\n  runs?: RunEntity[];\n  chartUIState: ExperimentEvaluationRunsChartsUIConfiguration;\n}) => {\n  const getRunColor = useGetExperimentRunColor();\n  const { isRowHidden } = useExperimentEvaluationRunsRowVisibility();\n\n  const chartData: RunsChartsRunData[] = useMemo(() => {\n    return runs\n      .filter((run) => run.info)\n      .map<RunsChartsRunData>((run) => {\n        const metricsByKey = keyBy(run.data?.metrics, 'key');\n        const paramsByKey = keyBy(run.data?.params, 'key');\n        const tagsByKey = keyBy(run.data?.tags, 'key');\n\n        return {\n          displayName: run.info.runName,\n          images: {},\n          metrics: metricsByKey,\n          params: paramsByKey,\n          tags: tagsByKey,\n          uuid: run.info.runUuid,\n          color: getRunColor(run.info.runUuid),\n          runInfo: run.info,\n          hidden: isRowHidden(run.info.runUuid),\n        };\n      });\n  }, [runs, isRowHidden, getRunColor]);\n\n  const availableMetricKeys = useMemo(() => uniq(chartData.flatMap((run) => Object.keys(run.metrics))), [chartData]);\n  const availableParamKeys = useMemo(() => uniq(chartData.flatMap((run) => Object.keys(run.params))), [chartData]);\n\n  const removeChart = useRemoveRunsChartFn();\n  const reorderCharts = useReorderRunsChartsFn();\n  const insertCharts = useInsertRunsChartsFn();\n  const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n\n  const [configuredCardConfig, setConfiguredCardConfig] = useState<RunsChartsCardConfig | null>(null);\n\n  const addNewChartCard = useCallback(\n    (metricSectionId: string) => (type: RunsChartType) =>\n      setConfiguredCardConfig(RunsChartsCardConfig.getEmptyChartCardByType(type, false, undefined, metricSectionId)),\n    [],\n  );\n\n  const contextValue = useMemo(() => ({ runs: chartData }), [chartData]);\n\n  return (\n    <div>\n      <RunsChartsTooltipWrapper contextData={contextValue} component={RunsChartsTooltipBody}>\n        <RunsChartsDraggableCardsGridContextProvider visibleChartCards={chartUIState.compareRunCharts}>\n          <RunsChartsSectionAccordion\n            supportedChartTypes={SUPPORTED_CHART_TYPES}\n            compareRunSections={chartUIState.compareRunSections}\n            compareRunCharts={chartUIState.compareRunCharts}\n            reorderCharts={reorderCharts}\n            insertCharts={insertCharts}\n            chartData={chartData}\n            startEditChart={setConfiguredCardConfig}\n            removeChart={removeChart}\n            addNewChartCard={addNewChartCard}\n            search={chartUIState.chartsSearchFilter ?? ''}\n            // TODO: get group by to work for line charts. simply passing\n            // groupBy from the parent component does not work, as the line\n            // chart requires the chart data to contain the\n            // groupParentInfo key.\n            groupBy={null}\n            setFullScreenChart={() => {}}\n            autoRefreshEnabled={chartUIState.autoRefreshEnabled}\n            hideEmptyCharts={false}\n            globalLineChartConfig={chartUIState.globalLineChartConfig}\n          />\n          {configuredCardConfig && (\n            <RunsChartsConfigureModal\n              chartRunData={chartData}\n              metricKeyList={availableMetricKeys}\n              paramKeyList={availableParamKeys}\n              config={configuredCardConfig}\n              onSubmit={(configuredCardConfig) => {\n                confirmChartCardConfiguration({ ...configuredCardConfig, displayName: undefined });\n                setConfiguredCardConfig(null);\n              }}\n              onCancel={() => setConfiguredCardConfig(null)}\n              groupBy={null}\n              supportedChartTypes={SUPPORTED_CHART_TYPES}\n            />\n          )}\n        </RunsChartsDraggableCardsGridContextProvider>\n      </RunsChartsTooltipWrapper>\n    </div>\n  );\n};\n\nexport const ExperimentEvaluationRunsPageCharts = ({\n  runs = [],\n  experimentId,\n}: {\n  runs?: RunEntity[];\n  experimentId: string;\n}) => {\n  // Get all unique metric keys from the runs\n  const uniqueMetricKeys = useMemo(() => {\n    const metricKeys = runs.flatMap((run) => run.data?.metrics?.map((metric) => metric.key) || []);\n    return Array.from(new Set(metricKeys));\n  }, [runs]);\n\n  // The list of updated metrics is used to regenerate list of charts,\n  // so it's memoized deeply (using deep equality) to avoid unnecessary re-calculation.\n  const memoizedMetricKeys = useMemoDeep(() => uniqueMetricKeys, [uniqueMetricKeys]);\n\n  const { chartUIState, loading, updateUIState } = useExperimentEvaluationRunsChartsUIState(\n    memoizedMetricKeys,\n    experimentId,\n  );\n\n  if (loading) {\n    return <TableSkeleton lines={5} />;\n  }\n\n  return (\n    <RunsChartsUIConfigurationContextProvider updateChartsUIState={updateUIState}>\n      <ExperimentEvaluationRunsPageChartsImpl runs={runs} chartUIState={chartUIState} />\n    </RunsChartsUIConfigurationContextProvider>\n  );\n};\n","import invariant from 'invariant';\nimport { useEffect, useMemo, useState } from 'react';\nimport { Global } from '@emotion/react';\nimport { useExperimentEvaluationRunsData } from '../../components/experiment-page/hooks/useExperimentEvaluationRunsData';\nimport { ExperimentEvaluationRunsPageWrapper } from './ExperimentEvaluationRunsPageWrapper';\nimport { ExperimentEvaluationRunsTable } from './ExperimentEvaluationRunsTable';\nimport type { RowSelectionState } from '@tanstack/react-table';\nimport { useParams } from '../../../common/utils/RoutingUtils';\nimport { Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { ResizableBox } from 'react-resizable';\nimport { ExperimentViewRunsTableResizerHandle } from '../../components/experiment-page/components/runs/ExperimentViewRunsTableResizer';\nimport { RunViewEvaluationsTab } from '../../components/evaluations/RunViewEvaluationsTab';\nimport { ExperimentEvaluationRunsTableControls } from './ExperimentEvaluationRunsTableControls';\nimport evalRunsEmptyImg from '@mlflow/mlflow/src/common/static/eval-runs-empty.svg';\nimport Utils from '@mlflow/mlflow/src/common/utils/Utils';\nimport type { DatasetWithRunType } from '../../components/experiment-page/components/runs/ExperimentViewDatasetDrawer';\nimport { ExperimentViewDatasetDrawer } from '../../components/experiment-page/components/runs/ExperimentViewDatasetDrawer';\nimport { compact, keyBy, mapValues, uniq, xor, xorBy } from 'lodash';\nimport {\n  EVAL_RUNS_TABLE_BASE_SELECTION_STATE,\n  EvalRunsTableKeyedColumnPrefix,\n} from './ExperimentEvaluationRunsTable.constants';\nimport { FormattedMessage } from 'react-intl';\nimport { useSelectedRunUuid } from '../../components/evaluations/hooks/useSelectedRunUuid';\nimport { RunEvaluationButton } from './RunEvaluationButton';\nimport { isUserFacingTag } from '../../../common/utils/TagUtils';\nimport { createEvalRunsTableKeyedColumnKey } from './ExperimentEvaluationRunsTable.utils';\nimport type { RunsGroupByConfig } from '../../components/experiment-page/utils/experimentPage.group-row-utils';\nimport { getGroupByRunsData } from './ExperimentEvaluationRunsPage.utils';\nimport {\n  ExperimentEvaluationRunsPageMode,\n  useExperimentEvaluationRunsPageMode,\n} from './hooks/useExperimentEvaluationRunsPageMode';\nimport { ExperimentEvaluationRunsPageCharts } from './charts/ExperimentEvaluationRunsPageCharts';\nimport { ExperimentEvaluationRunsRowVisibilityProvider } from './hooks/useExperimentEvaluationRunsRowVisibility';\n\nconst getLearnMoreLink = () => {\n  return 'https://mlflow.org/docs/latest/genai/eval-monitor/quickstart/';\n};\n\nconst ExperimentEvaluationRunsPageImpl = () => {\n  const { experimentId } = useParams();\n  const { theme } = useDesignSystemTheme();\n  const [tableWidth, setTableWidth] = useState(432);\n  const [dragging, setDragging] = useState(false);\n  const [runListHidden, setRunListHidden] = useState(false);\n  const [searchFilter, setSearchFilter] = useState('');\n  const [selectedDatasetWithRun, setSelectedDatasetWithRun] = useState<DatasetWithRunType>();\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const [selectedColumns, setSelectedColumns] = useState<{ [key: string]: boolean }>(\n    EVAL_RUNS_TABLE_BASE_SELECTION_STATE,\n  );\n  const [groupBy, setGroupBy] = useState<RunsGroupByConfig | null>(null);\n  const { viewMode, setViewMode } = useExperimentEvaluationRunsPageMode();\n\n  const [selectedRunUuid, setSelectedRunUuid] = useSelectedRunUuid();\n\n  invariant(experimentId, 'Experiment ID must be defined');\n\n  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});\n\n  const {\n    data: runs,\n    isLoading,\n    isFetching,\n    error,\n    refetch,\n  } = useExperimentEvaluationRunsData({\n    experimentId,\n    enabled: true,\n    filter: searchFilter,\n  });\n\n  const runUuids = runs?.map((run) => run.info.runUuid) ?? [];\n  // set the selected run to the first run if we don't already have one\n  // or if the selected run went out of scope (e.g. was deleted)\n  if (runs?.length && (!selectedRunUuid || !runUuids.includes(selectedRunUuid))) {\n    setSelectedRunUuid(runs[0].info.runUuid);\n  }\n\n  /**\n   * Generate a list of unique data columns based on runs' metrics, params, and tags.\n   */\n  const uniqueColumns = useMemo(() => {\n    const metricKeys: Set<string> = new Set();\n    const paramKeys: Set<string> = new Set();\n    const tagKeys: Set<string> = new Set();\n    // Using for-of to avoid costlier functions and iterators\n    for (const run of runs ?? []) {\n      for (const metric of run.data.metrics ?? []) {\n        metricKeys.add(metric.key);\n      }\n      for (const param of run.data.params ?? []) {\n        paramKeys.add(param.key);\n      }\n      for (const tag of run.data.tags ?? []) {\n        if (isUserFacingTag(tag.key)) {\n          tagKeys.add(tag.key);\n        }\n      }\n    }\n    return [\n      ...Array.from(metricKeys).map((key) =>\n        createEvalRunsTableKeyedColumnKey(EvalRunsTableKeyedColumnPrefix.METRIC, key),\n      ),\n      ...Array.from(paramKeys).map((key) =>\n        createEvalRunsTableKeyedColumnKey(EvalRunsTableKeyedColumnPrefix.PARAM, key),\n      ),\n      ...Array.from(tagKeys).map((key) => createEvalRunsTableKeyedColumnKey(EvalRunsTableKeyedColumnPrefix.TAG, key)),\n    ];\n  }, [runs]);\n\n  const baseColumns = useMemo(() => Object.keys(EVAL_RUNS_TABLE_BASE_SELECTION_STATE), []);\n  const existingColumns = useMemo(\n    () => Object.keys(selectedColumns).filter((column) => !baseColumns.includes(column)),\n    [baseColumns, selectedColumns],\n  );\n  const columnDifference = useMemo(() => xor(existingColumns, uniqueColumns), [existingColumns, uniqueColumns]);\n  // if there is a difference between the existing column state and\n  // the unique metrics (e.g. the user performed a search and the\n  // list of available metrics changed), reset the selected columns\n  // to the default state to avoid displaying columns that don't exist\n  if (columnDifference.length > 0) {\n    setSelectedColumns({\n      ...EVAL_RUNS_TABLE_BASE_SELECTION_STATE,\n      ...mapValues(keyBy(uniqueColumns), () => false),\n    });\n  }\n\n  const isEmpty = runUuids.length === 0 && !searchFilter && !isLoading;\n\n  const runsAndGroupValues = getGroupByRunsData(runs ?? [], groupBy);\n\n  const renderActiveTab = (selectedRunUuid: string) => {\n    if (viewMode === ExperimentEvaluationRunsPageMode.CHARTS) {\n      return <ExperimentEvaluationRunsPageCharts runs={runs} experimentId={experimentId} />;\n    }\n\n    return (\n      <RunViewEvaluationsTab\n        experimentId={experimentId}\n        runUuid={selectedRunUuid}\n        runDisplayName={Utils.getRunDisplayName(\n          runs?.find((run) => run.info.runUuid === selectedRunUuid)?.info,\n          selectedRunUuid,\n        )}\n        setCurrentRunUuid={setSelectedRunUuid}\n      />\n    );\n  };\n\n  return (\n    <ExperimentEvaluationRunsRowVisibilityProvider>\n      <div css={{ display: 'flex', flexDirection: 'row', flex: 1, minHeight: '0px' }}>\n        <ResizableBox\n          css={{ display: 'flex', position: 'relative' }}\n          style={{ flex: `0 0 ${runListHidden ? 0 : tableWidth}px` }}\n          width={tableWidth}\n          axis=\"x\"\n          resizeHandles={['e']}\n          minConstraints={[250, 0]}\n          handle={\n            <ExperimentViewRunsTableResizerHandle\n              runListHidden={runListHidden}\n              updateRunListHidden={(value) => {\n                setRunListHidden(!runListHidden);\n              }}\n            />\n          }\n          onResize={(event, { size }) => {\n            if (runListHidden) {\n              return;\n            }\n            setTableWidth(size.width);\n          }}\n          onResizeStart={() => !runListHidden && setDragging(true)}\n          onResizeStop={() => setDragging(false)}\n        >\n          <div\n            css={{\n              display: runListHidden ? 'none' : 'flex',\n              flexDirection: 'column',\n              gap: theme.spacing.sm,\n              maxWidth: '100%',\n              flex: 1,\n              zIndex: 0,\n              minHeight: '0px',\n              overflow: 'hidden',\n              paddingRight: theme.spacing.sm,\n            }}\n          >\n            <ExperimentEvaluationRunsTableControls\n              runs={runs ?? []}\n              refetchRuns={refetch}\n              isFetching={isFetching || isLoading}\n              searchRunsError={error}\n              searchFilter={searchFilter}\n              setSearchFilter={setSearchFilter}\n              rowSelection={rowSelection}\n              setRowSelection={setRowSelection}\n              selectedColumns={selectedColumns}\n              setSelectedColumns={setSelectedColumns}\n              groupByConfig={groupBy}\n              setGroupByConfig={setGroupBy}\n              viewMode={viewMode}\n              setViewMode={setViewMode}\n            />\n            <ExperimentEvaluationRunsTable\n              data={runsAndGroupValues}\n              uniqueColumns={uniqueColumns}\n              selectedColumns={selectedColumns}\n              selectedRunUuid={viewMode === ExperimentEvaluationRunsPageMode.TRACES ? selectedRunUuid : undefined}\n              setSelectedRunUuid={(runUuid: string) => {\n                setSelectedRunUuid(runUuid);\n              }}\n              isLoading={isLoading}\n              rowSelection={rowSelection}\n              setRowSelection={setRowSelection}\n              setSelectedDatasetWithRun={setSelectedDatasetWithRun}\n              setIsDrawerOpen={setIsDrawerOpen}\n              viewMode={viewMode}\n            />\n          </div>\n        </ResizableBox>\n        <div\n          css={{\n            flex: 1,\n            display: 'flex',\n            borderLeft: `1px solid ${theme.colors.border}`,\n            minHeight: '0px',\n            overflowY: 'scroll',\n          }}\n        >\n          {selectedRunUuid ? (\n            <div\n              css={{\n                display: 'flex',\n                flexDirection: 'column',\n                flex: 1,\n                minHeight: '0px',\n                paddingLeft: theme.spacing.sm,\n              }}\n            >\n              {renderActiveTab(selectedRunUuid)}\n            </div>\n          ) : isEmpty ? (\n            <div\n              css={{\n                display: 'flex',\n                flex: 1,\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'center',\n                marginTop: theme.spacing.lg,\n                paddingLeft: theme.spacing.md,\n                maxWidth: '100%',\n              }}\n            >\n              <Typography.Title level={3} color=\"secondary\">\n                <FormattedMessage\n                  defaultMessage=\"Evaluate and improve the quality, cost, latency of your GenAI app\"\n                  description=\"Title of the empty state for the evaluation runs page\"\n                />\n              </Typography.Title>\n              <Typography.Paragraph color=\"secondary\" css={{ maxWidth: 'min(100%, 600px)', textAlign: 'center' }}>\n                <FormattedMessage\n                  defaultMessage=\"Create evaluation datasets in order to iteratively evaluate and improve your app. Run evaluations to check that your fixes are working, and compare quality between app / prompt versions. {learnMoreLink}\"\n                  description=\"Description of the empty state for the evaluation runs page\"\n                  values={{\n                    learnMoreLink: (\n                      <Typography.Link\n                        componentId=\"mlflow.eval-runs.empty-state.learn-more-link\"\n                        href={getLearnMoreLink()}\n                        css={{ whiteSpace: 'nowrap' }}\n                        openInNewTab\n                      >\n                        {/* eslint-disable-next-line formatjs/enforce-description */}\n                        <FormattedMessage defaultMessage=\"Learn more\" />\n                      </Typography.Link>\n                    ),\n                  }}\n                />\n              </Typography.Paragraph>\n              <img css={{ maxWidth: '100%', maxHeight: 200 }} src={evalRunsEmptyImg} alt=\"No runs found\" />\n              <div css={{ display: 'flex', gap: theme.spacing.sm, marginTop: theme.spacing.md }}>\n                <RunEvaluationButton experimentId={experimentId} />\n              </div>\n            </div>\n          ) : null}\n        </div>\n        {dragging && (\n          <Global\n            styles={{\n              'body, :host': {\n                userSelect: 'none',\n              },\n            }}\n          />\n        )}\n        {selectedDatasetWithRun && (\n          <ExperimentViewDatasetDrawer\n            isOpen={isDrawerOpen}\n            setIsOpen={setIsDrawerOpen}\n            selectedDatasetWithRun={selectedDatasetWithRun}\n            setSelectedDatasetWithRun={setSelectedDatasetWithRun}\n          />\n        )}\n      </div>\n    </ExperimentEvaluationRunsRowVisibilityProvider>\n  );\n};\n\nconst ExperimentEvaluationRunsPage = () => (\n  <ExperimentEvaluationRunsPageWrapper>\n    <ExperimentEvaluationRunsPageImpl />\n  </ExperimentEvaluationRunsPageWrapper>\n);\n\nexport default ExperimentEvaluationRunsPage;\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n  type PropsWithChildren,\n  type SyntheticEvent,\n} from 'react';\n\nimport { matchPredefinedError } from '../errors';\nimport type { HandleableError, PredefinedError } from '../errors';\n\nexport type UserActionError = PredefinedError | null;\n\ntype UserActionErrorHandlerContextProps = {\n  currentUserActionError: UserActionError;\n  handleError: (error: HandleableError, onErrorCallback?: (err: UserActionError) => void) => void;\n  handlePromise: (promise: Promise<any>) => void;\n  clearUserActionError: () => void;\n};\n\nconst UserActionErrorHandlerContext = createContext<UserActionErrorHandlerContextProps>({\n  currentUserActionError: null,\n  handleError: () => {},\n  handlePromise: () => {},\n  clearUserActionError: () => {},\n});\n\ntype UserActionErrorHandlerProps = {\n  errorFilter?: (error: any) => boolean;\n};\n\nexport const UserActionErrorHandler = ({ children, errorFilter }: PropsWithChildren<UserActionErrorHandlerProps>) => {\n  const [currentUserActionError, setCurrentUserActionError] = useState<UserActionError>(null);\n\n  const handleError = useCallback(\n    (error: HandleableError, onErrorCallback?: (err: UserActionError) => void) => {\n      if (!errorFilter?.(error)) {\n        const predefinedError = matchPredefinedError(error);\n\n        setCurrentUserActionError(predefinedError);\n\n        if (onErrorCallback) {\n          onErrorCallback(predefinedError);\n        }\n      }\n    },\n    [setCurrentUserActionError, errorFilter],\n  );\n\n  const handlePromise = useCallback(\n    (promise: Promise<any>) => {\n      promise.catch((error: HandleableError) => {\n        handleError(error);\n      });\n    },\n    [handleError],\n  );\n\n  const clearUserActionError = useCallback(() => {\n    setCurrentUserActionError(null);\n  }, [setCurrentUserActionError]);\n\n  return (\n    <UserActionErrorHandlerContext.Provider\n      value={useMemo(\n        () => ({\n          currentUserActionError,\n          handleError,\n          handlePromise,\n          clearUserActionError,\n        }),\n        [clearUserActionError, currentUserActionError, handleError, handlePromise],\n      )}\n    >\n      {children}\n    </UserActionErrorHandlerContext.Provider>\n  );\n};\n\nexport type UserErrorActionHandlerHook = {\n  currentUserActionError: UserActionError;\n  handleError: (error: HandleableError, onErrorCallback?: (err: UserActionError) => void) => void;\n  /** @deprecated Use handleError instead, or get permission from #product-analytics to use */\n  handleErrorWithEvent: (\n    event: SyntheticEvent | Event,\n    error: HandleableError,\n    onErrorCallback?: (err: UserActionError) => void,\n  ) => void;\n  handlePromise: (promise: Promise<any>) => void;\n  clearUserActionError: () => void;\n};\n\nexport const useUserActionErrorHandler = (): UserErrorActionHandlerHook => {\n  const { currentUserActionError, handleError, handlePromise, clearUserActionError } =\n    useContext(UserActionErrorHandlerContext);\n\n  const handleErrorWithEventImpl = useCallback(\n    (event: SyntheticEvent | Event, error: HandleableError, onErrorCallback?: (err: UserActionError) => void) => {\n      handleError(error, onErrorCallback);\n    },\n    [handleError],\n  );\n\n  return useMemo(\n    () => ({\n      currentUserActionError,\n      handleError,\n      handleErrorWithEvent: handleErrorWithEventImpl,\n      handlePromise,\n      clearUserActionError,\n    }),\n    [clearUserActionError, handleError, handlePromise, currentUserActionError, handleErrorWithEventImpl],\n  );\n};\n\nexport function withUserActionErrorHandler<P>(\n  Component: React.ComponentType<React.PropsWithChildren<P>>,\n  errorFilter?: (error: any) => boolean,\n): React.ComponentType<React.PropsWithChildren<P>> {\n  return function UserActionErrorHandlerWrapper(props: P) {\n    return (\n      <UserActionErrorHandler errorFilter={errorFilter}>\n        {/* @ts-expect-error Generics don't play well with WithConditionalCSSProp type coming @emotion/react jsx typing to validate css= prop values typing. More details here: emotion-js/emotion#2169 */}\n        <Component {...props} />\n      </UserActionErrorHandler>\n    );\n  };\n}\n","import { type QueryFunctionContext, useQuery } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport type { LoggedModelProto } from '../../types';\nimport { loggedModelsDataRequest } from './request.utils';\nimport { getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\n\ntype UseGetLoggedModelQueryResponseType = {\n  model: LoggedModelProto;\n};\n\ntype UseGetLoggedModelQueryKey = ['GET_LOGGED_MODEL', string];\n\nconst getQueryKey = (loggedModelId: string): UseGetLoggedModelQueryKey => ['GET_LOGGED_MODEL', loggedModelId] as const;\n\nconst queryFn = async ({\n  queryKey: [, loggedModelId],\n}: QueryFunctionContext<UseGetLoggedModelQueryKey>): Promise<UseGetLoggedModelQueryResponseType> =>\n  loggedModelsDataRequest(getAjaxUrl(`ajax-api/2.0/mlflow/logged-models/${loggedModelId}`), 'GET');\n\n/**\n * Retrieve logged model from API based on its ID\n */\nexport const useGetLoggedModelQuery = ({\n  loggedModelId,\n  enabled = true,\n}: {\n  loggedModelId?: string;\n  enabled?: boolean;\n}) => {\n  const { data, isLoading, isFetching, refetch, error } = useQuery<\n    UseGetLoggedModelQueryResponseType,\n    Error,\n    UseGetLoggedModelQueryResponseType,\n    UseGetLoggedModelQueryKey\n  >({\n    queryKey: getQueryKey(loggedModelId ?? ''),\n    queryFn,\n    cacheTime: 0,\n    refetchOnWindowFocus: false,\n    retry: false,\n    enabled,\n  });\n\n  return {\n    isLoading,\n    isFetching,\n    data: data?.model,\n    refetch,\n    error,\n  } as const;\n};\n\n/**\n * A non-hook version of useGetLoggedModelQuery that can be used in async functions.\n * @deprecated Use useGetLoggedModelQuery instead. This function is provided for backward compatibility for legacy class-based components.\n */\nexport const asyncGetLoggedModel = async (\n  loggedModelId: string,\n  failSilently = false,\n): Promise<UseGetLoggedModelQueryResponseType | undefined> => {\n  try {\n    const data = await loggedModelsDataRequest(getAjaxUrl(`ajax-api/2.0/mlflow/logged-models/${loggedModelId}`), 'GET');\n    return data;\n  } catch (error) {\n    if (failSilently) {\n      return undefined;\n    }\n    throw error;\n  }\n};\n"],"names":["useMemoDeep","factory","deps","ref","useRef","current","isEqual","value","DAY","DateTooltipOptions","timeZoneName","year","month","day","hour","minute","getTimeAgoStrings","date","intl","tooltipFormatOptions","now","Date","seconds","Math","round","getTime","locale","navigator","language","tooltipTitle","Intl","DateTimeFormat","format","e","interval","timeAgoMessage","count","formatMessage","id","defaultMessage","getIntervals","floor","displayText","TimeAgo","useIntl","_jsx","Tooltip","componentId","content","children","_ref","name","styles","PageFallback","error","_error$message","PageWrapper","css","Empty","title","FormattedMessage","description","message","image","DangerIcon","ExperimentEvaluationRunsPageWrapper","resetKey","ErrorBoundary","FallbackComponent","resetKeys","UserActionErrorHandler","createEvalRunsTableKeyedColumnKey","columnType","key","join","parseEvalRunsTableKeyedColumnKey","rest","split","length","Object","values","EvalRunsTableKeyedColumnPrefix","includes","ExperimentEvaluationRunsRowVisibilityContext","createContext","isRowHidden","toggleRowVisibility","ExperimentEvaluationRunsRowVisibilityProvider","hiddenRuns","setHiddenRuns","useState","Set","useCallback","rowUuid","has","prevHiddenRuns","newHiddenRuns","delete","add","useMemo","Provider","useExperimentEvaluationRunsRowVisibility","useContext","CheckboxCell","row","table","options","meta","original","Checkbox","disabled","getCanSelect","isChecked","getIsSelected","wrapperStyle","padding","margin","onChange","toggleSelected","_ref2","RunNameCell","theme","useDesignSystemTheme","saveRunColor","useSaveExperimentRunColor","getRunColor","useGetExperimentRunColor","runUuid","info","_jsxs","_css","overflow","display","alignItems","gap","spacing","xs","onClick","_setSelectedRunUuid","setSelectedRunUuid","call","RunColorPill","color","onChangeColor","colorValue","Typography","Link","runName","flexShrink","svg","width","typography","fontSizeMd","height","target","rel","to","Routes","getRunPageRoute","experimentId","Button","type","icon","NewWindowIcon","size","_ref3","_ref4","_ref5","DatasetCell","_run$inputs$datasetIn","_run$inputs","_datasets$0$dataset","_datasets$","run","datasets","inputs","datasetInputs","displayedDataset","dataset","tagContent","maxWidth","colors","textPrimary","TableIcon","Text","Tag","openDatasetDrawer","_run$info","_run$info$runUuid","_run$info2","_run$info3","setSelectedDatasetWithRun","datasetWithTags","runData","setIsDrawerOpen","_ref6","_ref7","_ref8","ModelVersionCell","_row$original$inputs","_row$original$inputs$","_row$original$inputs$2","_data$info$name","_data$info","modelId","modelInputs","undefined","data","isLoading","useGetLoggedModelQuery","loggedModelId","enabled","Boolean","displayValue","ParagraphSkeleton","getExperimentLoggedModelDetailsPageRoute","ModelsIcon","KeyedValueCell","getValue","_ref9","_ref0","SortableHeaderCell","column","displayedKey","_parseEvalRunsTableKe","_parseEvalRunsTableKe2","cursor","bold","getIsSorted","SortUnsortedIcon","CreatedAtCell","createdAt","startTime","Number","VisiblityCell","Icon","VisibleOffIcon","VisibleIcon","ExperimentEvaluationRunsPageMode","MODE_SEARCH_KEY","EvalRunsTableColumnId","EVAL_RUNS_UNSELECTABLE_COLUMNS","checkbox","visibility","EVAL_RUNS_TABLE_BASE_SELECTION_STATE","modelVersion","EVAL_RUNS_COLUMN_LABELS","defineMessage","EVAL_RUNS_COLUMN_TYPE_LABELS","ATTRIBUTE","METRIC","PARAM","TAG","GroupTag","groupKey","groupValue","marginRight","whiteSpace","textOverflow","GroupLabel","groupValues","groupByData","mode","RunGroupingMode","Dataset","String","ExperimentEvaluationRunsTableRow","React","isActive","TableRow","className","TableCell","sm","getIsExpanded","ChevronDownIcon","ChevronRightIcon","getToggleExpandedHandler","map","getVisibleCells","cell","_meta","columnDef","backgroundColor","actionDefaultBackgroundHover","flexRender","getContext","prev","next","isSelected","columns","isExpanded","isHidden","ExperimentEvaluationRunsTable","uniqueColumns","selectedColumns","selectedRunUuid","rowSelection","setRowSelection","viewMode","sorting","setSorting","expandedRows","setExpandedRows","allColumns","unselectableColumns","enableResizing","enableSorting","minWidth","CHARTS","push","restColumns","header","context","accessorFn","sortingFn","getExperimentEvalRunsDefaultColumns","forEach","getEvalRunCellValueBasedOnColumn","columnId","rowData","_rowData$data$metrics","_rowData$data","_rowData$data$metrics2","_rowData$data$metrics3","_rowData$data$params$","_rowData$data2","_rowData$data2$params","_rowData$data2$params2","_rowData$data$tags$fi","_rowData$data3","_rowData$data3$tags","_rowData$data3$tags$f","rowDataKey","metrics","find","metric","params","param","tags","tag","filter","_column$id","useReactTable","getCoreRowModel","getRowId","index","onSortingChange","getSortedRowModel","enableColumnResizing","enableExpanding","getExpandedRowModel","getSubRows","subRuns","getRowCanExpand","_row$subRows","subRows","onExpandedChange","onRowSelectionChange","state","expanded","Table","scrollable","isHeader","getLeafHeaders","TableHeader","sortable","getCanSort","sortDirection","onToggleSort","getToggleSortingHandler","getRowModel","rows","TableSkeletonRows","ExperimentEvaluationRunsTableGroupBySelector","groupByConfig","setGroupByConfig","runs","hasDatasets","some","_run$inputs$datasetIn2","uniqueParams","uniqueTags","_run$data$params","_run$data","_run$data$tags","_run$data2","isUserFacingTag","toggleGroupBy","columnName","_groupByConfig$groupB","groupByKeys","newGroupByKeys","isGroupedBy","_groupByConfig$aggreg","aggregateFunction","RunGroupingAggregateFunction","Average","Array","from","DialogCombobox","label","multiSelect","DialogComboboxTrigger","DialogComboboxContent","DialogComboboxOptionList","_Fragment","DialogComboboxSectionHeader","DialogComboboxOptionListCheckboxItem","checked","Param","getRunTableMetadata","runsData","metricKeys","paramKeys","_run$data$metrics","runTags","metricKeyList","paramKeyList","tagsList","ExperimentEvaluationRunsTableControls","refetchRuns","isFetching","searchRunsError","searchFilter","setSearchFilter","setSelectedColumns","setViewMode","deleteModalVisible","setDeleteModalVisible","selectedRunUuids","entries","_","mutate","useDeleteRuns","onSuccess","onError","useMutation","mutationFn","runUuids","Promise","all","MlflowService","deleteRun","run_id","handleDelete","columnPartitions","groupBy","flexDirection","SegmentedControlGroup","SegmentedControlButton","TRACES","delayDuration","ListBorderIcon","ChartLineIcon","RunsSearchAutoComplete","onSearchFilterChange","onClear","requestError","RefreshIcon","headerLabelDescriptor","Spacer","selected","_parseEvalRunsTableKe3","_parseEvalRunsTableKe4","labelDescriptorForKnownColumn","newSelectedColumns","danger","Modal","visible","onOk","okButtonProps","loading","okText","onCancel","cancelText","confirmLoading","numRuns","QUERY_PARAM_KEY","getCodeSnippet","RunEvaluationButton","isOpen","setIsOpen","evalInstructions","evalCodeSnippet","CodeSnippet","isDarkMode","footer","createGroupKey","groupData","getGroupValues","_run$inputs$datasetIn3","_run$inputs$datasetIn4","_param$value","_run$data2$tags","_tag$value","groupByKey","digest","p","t","createLocalStorageKey","storeIdentifier","version","chartsUIStateInitializer","compareRunCharts","compareRunSections","autoRefreshEnabled","isAccordionReordered","chartsSearchFilter","globalLineChartConfig","isDirty","chartsUIStateReducer","action","stateSetter","allMetricKeys","firstNameSegments","compact","uniq","first","sectionKey","deleted","RunsChartType","BAR","uuid","metricSectionId","isGenerated","metricKey","displayName","segmentName","isReordered","isEmpty","getExperimentEvalRunsPageChartSetup","reconcileChartsAndSections","currentState","newCharts","_newCharts$compareRun","_newCharts$compareRun2","newChartsToAdd","newChart","_currentState$compare","chart","newSectionsToAdd","newSection","_currentState$compare2","section","initialConfig","useExperimentEvaluationRunsChartsUIState","chartUIState","dispatchChartUIState","useReducer","setLoading","useEffect","async","serializedData","localStorage","getItem","JSON","parse","loadPersistedDataFromStorage","then","dataToPersist","setItem","stringify","saveDataToStorage","updateUIState","SUPPORTED_CHART_TYPES","LINE","CONTOUR","DIFFERENCE","PARALLEL","SCATTER","ExperimentEvaluationRunsPageChartsImpl","_chartUIState$chartsS","chartData","_run$data3","metricsByKey","keyBy","paramsByKey","tagsByKey","images","runInfo","hidden","availableMetricKeys","flatMap","keys","availableParamKeys","removeChart","useRemoveRunsChartFn","reorderCharts","useReorderRunsChartsFn","insertCharts","useInsertRunsChartsFn","confirmChartCardConfiguration","useConfirmChartCardConfigurationFn","configuredCardConfig","setConfiguredCardConfig","addNewChartCard","RunsChartsCardConfig","getEmptyChartCardByType","contextValue","RunsChartsTooltipWrapper","contextData","component","RunsChartsTooltipBody","RunsChartsDraggableCardsGridContextProvider","visibleChartCards","RunsChartsSectionAccordion","supportedChartTypes","startEditChart","search","setFullScreenChart","hideEmptyCharts","RunsChartsConfigureModal","chartRunData","config","onSubmit","ExperimentEvaluationRunsPageCharts","uniqueMetricKeys","_run$data4","_run$data4$metrics","memoizedMetricKeys","TableSkeleton","lines","RunsChartsUIConfigurationContextProvider","updateChartsUIState","ExperimentEvaluationRunsPageImpl","_runs$map","useParams","tableWidth","setTableWidth","dragging","setDragging","runListHidden","setRunListHidden","selectedDatasetWithRun","isDrawerOpen","setGroupBy","useExperimentEvaluationRunsPageMode","setParams","useSearchParams","coerceToEnum","get","newMode","prevParams","newParams","URLSearchParams","set","useSelectedRunUuid","_searchParams$get","searchParams","setSearchParams","replace","invariant","refetch","useExperimentEvaluationRunsData","tagKeys","baseColumns","existingColumns","xor","mapValues","runsAndGroupValues","getGroupByRunsData","runGroupsMap","runsWithGroupValues","groupHeadingRow","ResizableBox","style","flex","axis","resizeHandles","minConstraints","handle","ExperimentViewRunsTableResizerHandle","updateRunListHidden","onResize","event","onResizeStart","onResizeStop","zIndex","minHeight","paddingRight","borderLeft","border","overflowY","paddingLeft","_runs$find","RunViewEvaluationsTab","runDisplayName","Utils","getRunDisplayName","setCurrentRunUuid","renderActiveTab","justifyContent","marginTop","lg","md","Title","level","Paragraph","learnMoreLink","href","openInNewTab","src","evalRunsEmptyImg","alt","Global","ExperimentViewDatasetDrawer","ExperimentEvaluationRunsPage","UserActionErrorHandlerContext","currentUserActionError","handleError","handlePromise","clearUserActionError","errorFilter","setCurrentUserActionError","onErrorCallback","predefinedError","matchPredefinedError","promise","catch","useUserActionErrorHandler","handleErrorWithEventImpl","handleErrorWithEvent","getQueryKey","queryFn","queryKey","loggedModelsDataRequest","getAjaxUrl","useQuery","cacheTime","refetchOnWindowFocus","retry","model","asyncGetLoggedModel","failSilently"],"sourceRoot":""}