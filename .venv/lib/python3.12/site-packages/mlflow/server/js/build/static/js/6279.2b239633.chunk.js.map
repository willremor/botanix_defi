{"version":3,"file":"static/js/6279.2b239633.chunk.js","mappings":"wTAwBoBA,ECpBJC,oBAAoBC,UAAY,IAAIC,IAChD,aAEAC,WD2BJ,MAAMC,UAA4BC,EAAAA,UAAwBC,WAAAA,IAAAC,GAAA,SAAAA,GAAA,KACxDC,MAAQ,CACNC,SAAS,EACTC,WAAOC,EACPC,aAASD,EACTE,YAAa,EACbC,SAAU,GACV,KA2CFC,sBAAwB,EAAGD,eACzBE,KAAKC,SAAS,CAAEH,YAAW,EAC3B,KAEFI,oBAAuBR,IACrBS,EAAAA,EAAMC,sBAAsB,IAAIC,EAAAA,EAAaX,GAAO,EACpD,KAEFY,aAAe,CAACC,EAAoBC,KAClCR,KAAKC,SAAS,CAAEJ,YAAaU,GAAgB,EAC7C,KAEFE,UAAY,KAERC,EAAAA,EAAAA,GAACC,EAAAA,SAAc,CAAAC,UACbC,EAAAA,EAAAA,IAAA,OAAKC,UAAU,oBAAmBF,SAAA,EAChCF,EAAAA,EAAAA,GAAA,OAAKI,UAAU,mBAAkBF,UAC/BF,EAAAA,EAAAA,GAACK,EAAAA,WACC,CACAC,QAAM,EACNC,iBAAkBjB,KAAKR,MAAMK,YAC7BqB,SAAUlB,KAAKR,MAAMM,SACrBqB,SAAU,EACVC,SAAUpB,KAAKM,aAKfe,wBAAyB,CAAEL,QAAQ,QAGvCN,EAAAA,EAAAA,GAAA,OAAKI,UAAU,kBAAiBF,UAC9BF,EAAAA,EAAAA,GAACY,EAAAA,EAAQ,CACPC,KAAMvB,KAAKR,MAAMI,QACjB4B,cAAexB,KAAKD,sBACpB0B,YAAazB,KAAKE,oBAClBT,SAASiB,EAAAA,EAAAA,GAACgB,EAAAA,EAAO,IAAId,UAErBF,EAAAA,EAAAA,GAACiB,EAAAA,EAAI,CACHC,WAAY5B,KAAKR,MAAMK,YACvBJ,SAASiB,EAAAA,EAAAA,GAACgB,EAAAA,EAAO,IACjBG,iBAAiB,EACjBC,uBAAuB,YAOnC,CArFFC,QAAAA,GAAY,IAADC,EAAAC,EACT,MAAM,KAAEC,EAAI,QAAEC,EAAO,mBAAEC,EAAkB,cAAEC,EAAa,aAAEC,EAAY,WAAEC,GAAevC,KAAKwC,MAG9E,QADdR,GAAAC,EAAAjC,KAAKwC,OACFC,mBAAW,IAAAT,GADdA,EAAAU,KAAAT,EAEI,CAAEC,OAAMC,UAASC,qBAAoBC,gBAAeC,eAAcC,cAClEI,EAAAA,IAEDC,MAAMC,IACL7C,KAAKC,SAAS,CAAEL,QAAS,CAAEkD,KAAMD,GAAmBpD,SAAS,GAAQ,IAEtEsD,OAAOrD,IACNM,KAAKC,SAAS,CAAEP,MAAOA,EAAOD,SAAS,GAAQ,GAErD,CAEAuD,iBAAAA,GACEhD,KAAK+B,UACP,CAEAkB,aAAAA,GACEjD,KAAKC,SAAS,CACZL,aAASD,EACTF,SAAS,EACTI,YAAa,EACbC,SAAU,GAEd,CAEAoD,kBAAAA,CAAmBC,GACbnD,KAAKwC,MAAMN,OAASiB,EAAUjB,MAAQlC,KAAKwC,MAAML,UAAYgB,EAAUhB,UACzEnC,KAAKiD,gBACLjD,KAAK+B,WAET,CAqDAqB,MAAAA,GACE,OAAIpD,KAAKR,MAAMC,SACNiB,EAAAA,EAAAA,GAAC2C,EAAAA,EAAoB,CAACvC,UAAU,8BAErCd,KAAKR,MAAME,OACNgB,EAAAA,EAAAA,GAAC4C,EAAAA,EAAsB,CAACxC,UAAU,6BAElCJ,EAAAA,EAAAA,GAAA,OAAKI,UAAU,6BAA4BF,SAAEZ,KAAKS,aAE7D,EA9GIrB,EASGmE,aAAe,CACpBd,YAAae,EAAAA,GAuGjB,O","sources":["experiment-tracking/components/artifact-view-components/ShowArtifactPdfView.tsx","experiment-tracking/components/artifact-view-components/utils/setupReactPDFWorker.ts"],"sourcesContent":["/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport { Pagination, Spinner } from '@databricks/design-system';\nimport {\n  getArtifactBytesContent,\n  getArtifactLocationUrl,\n  getLoggedModelArtifactLocationUrl,\n} from '../../../common/utils/ArtifactUtils';\nimport './ShowArtifactPdfView.css';\nimport Utils from '../../../common/utils/Utils';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\nimport { ArtifactViewSkeleton } from './ArtifactViewSkeleton';\nimport { ArtifactViewErrorState } from './ArtifactViewErrorState';\nimport type { LoggedModelArtifactViewerProps } from './ArtifactViewComponents.types';\nimport { fetchArtifactUnified, type FetchArtifactUnifiedFn } from './utils/fetchArtifactUnified';\nimport { setupReactPDFWorker } from './utils/setupReactPDFWorker';\n\nsetupReactPDFWorker(pdfjs);\n\ntype Props = {\n  runUuid: string;\n  path: string;\n  getArtifact: FetchArtifactUnifiedFn;\n} & LoggedModelArtifactViewerProps;\n\ntype State = any;\n\nclass ShowArtifactPdfView extends Component<Props, State> {\n  state = {\n    loading: true,\n    error: undefined,\n    pdfData: undefined,\n    currentPage: 1,\n    numPages: 1,\n  };\n\n  static defaultProps = {\n    getArtifact: fetchArtifactUnified,\n  };\n\n  /** Fetches artifacts and updates component state with the result */\n  fetchPdf() {\n    const { path, runUuid, isLoggedModelsMode, loggedModelId, experimentId, entityTags } = this.props;\n\n    this.props\n      .getArtifact?.(\n        { path, runUuid, isLoggedModelsMode, loggedModelId, experimentId, entityTags },\n        getArtifactBytesContent,\n      )\n      .then((artifactPdfData: any) => {\n        this.setState({ pdfData: { data: artifactPdfData }, loading: false });\n      })\n      .catch((error: any) => {\n        this.setState({ error: error, loading: false });\n      });\n  }\n\n  componentDidMount() {\n    this.fetchPdf();\n  }\n\n  resetPDFState() {\n    this.setState({\n      pdfData: undefined,\n      loading: true,\n      currentPage: 1,\n      numPages: 1,\n    });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.path !== prevProps.path || this.props.runUuid !== prevProps.runUuid) {\n      this.resetPDFState();\n      this.fetchPdf();\n    }\n  }\n\n  onDocumentLoadSuccess = ({ numPages }: any) => {\n    this.setState({ numPages });\n  };\n\n  onDocumentLoadError = (error: any) => {\n    Utils.logErrorAndNotifyUser(new ErrorWrapper(error));\n  };\n\n  onPageChange = (newPageNumber: any, itemsPerPage: any) => {\n    this.setState({ currentPage: newPageNumber });\n  };\n\n  renderPdf = () => {\n    return (\n      <React.Fragment>\n        <div className=\"mlflow-pdf-viewer\">\n          <div className=\"mlflow-paginator\">\n            <Pagination\n              // @ts-expect-error TS(2322): Type '{ simple: true; currentPageIndex: number; nu... Remove this comment to see the full error message\n              simple\n              currentPageIndex={this.state.currentPage}\n              numTotal={this.state.numPages}\n              pageSize={1}\n              onChange={this.onPageChange}\n              /*\n               * Currently DuBois pagination does not natively support\n               * \"simple\" mode which is required here, hence `dangerouslySetAntdProps`\n               */\n              dangerouslySetAntdProps={{ simple: true }}\n            />\n          </div>\n          <div className=\"mlflow-document\">\n            <Document\n              file={this.state.pdfData}\n              onLoadSuccess={this.onDocumentLoadSuccess}\n              onLoadError={this.onDocumentLoadError}\n              loading={<Spinner />}\n            >\n              <Page\n                pageNumber={this.state.currentPage}\n                loading={<Spinner />}\n                renderTextLayer={false}\n                renderAnnotationLayer={false}\n              />\n            </Document>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  render() {\n    if (this.state.loading) {\n      return <ArtifactViewSkeleton className=\"artifact-pdf-view-loading\" />;\n    }\n    if (this.state.error) {\n      return <ArtifactViewErrorState className=\"artifact-pdf-view-error\" />;\n    } else {\n      return <div className=\"mlflow-pdf-outer-container\">{this.renderPdf()}</div>;\n    }\n  }\n}\n\nexport default ShowArtifactPdfView;\n","// eslint-disable-next-line import/no-namespace\nimport type * as pdfjs from 'pdfjs-dist';\n\nexport function setupReactPDFWorker(pdfjsInstance: typeof pdfjs) {\n  pdfjsInstance.GlobalWorkerOptions.workerSrc = new URL(\n    'pdfjs-dist/build/pdf.worker.min.mjs',\n    import.meta.url,\n  ).toString();\n}\n"],"names":["pdfjs","GlobalWorkerOptions","workerSrc","URL","toString","ShowArtifactPdfView","Component","constructor","args","state","loading","error","undefined","pdfData","currentPage","numPages","onDocumentLoadSuccess","this","setState","onDocumentLoadError","Utils","logErrorAndNotifyUser","ErrorWrapper","onPageChange","newPageNumber","itemsPerPage","renderPdf","_jsx","React","children","_jsxs","className","Pagination","simple","currentPageIndex","numTotal","pageSize","onChange","dangerouslySetAntdProps","Document","file","onLoadSuccess","onLoadError","Spinner","Page","pageNumber","renderTextLayer","renderAnnotationLayer","fetchPdf","_this$props$getArtifa","_this$props","path","runUuid","isLoggedModelsMode","loggedModelId","experimentId","entityTags","props","getArtifact","call","getArtifactBytesContent","then","artifactPdfData","data","catch","componentDidMount","resetPDFState","componentDidUpdate","prevProps","render","ArtifactViewSkeleton","ArtifactViewErrorState","defaultProps","fetchArtifactUnified"],"sourceRoot":""}