{"version":3,"file":"static/js/6462.1a6a178d.chunk.js","mappings":"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","sources":["experiment-tracking/pages/prompts/components/PromptsListTableVersionCell.tsx","common/components/TagSelectDropdown.tsx","common/hooks/useEditKeyValueTagsModal.tsx","shared/building_blocks/CopyButton.tsx","experiment-tracking/pages/prompts/hooks/useUpdateRegisteredPromptTags.tsx","experiment-tracking/pages/prompts/components/PromptPageErrorHandler.tsx","common/components/ScrollablePageWrapper.tsx","common/components/KeyValueTagFullViewModal.tsx","common/components/KeyValueTag.tsx"],"sourcesContent":["import { Typography } from '@databricks/design-system';\nimport type { ColumnDef } from '@tanstack/react-table';\nimport { FormattedMessage } from 'react-intl';\n\nexport const PromptsListTableVersionCell: ColumnDef<any>['cell'] = ({ row: { original }, getValue }) => {\n  const version = getValue<string>();\n\n  if (!version) {\n    return null;\n  }\n  return (\n    <Typography.Text>\n      <FormattedMessage\n        defaultMessage=\"Version {version}\"\n        description=\"Label for the version of a registered prompt in the registered prompts table\"\n        values={{\n          version,\n        }}\n      />\n    </Typography.Text>\n  );\n};\n","import { sortedIndexOf } from 'lodash';\nimport React, { useMemo, useRef, useState } from 'react';\nimport type { Control } from 'react-hook-form';\nimport { useController } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\n\nimport { PlusIcon, LegacySelect, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../types';\n\n/**\n * Will show an extra row at the bottom of the dropdown menu to create a new tag when\n * The user has typed something in the search input\n * and either\n * 1. The search input is not an exact match for an existing tag name\n * 2. There are no tags available based on search input\n */\n\nfunction DropdownMenu(menu: React.ReactElement, allAvailableTags: string[]) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const searchValue = menu.props.searchValue.toLowerCase();\n\n  const resolvedMenu = useMemo(() => {\n    if (!searchValue) return menu;\n\n    const doesTagExists = sortedIndexOf(allAvailableTags, searchValue) >= 0;\n    if (doesTagExists) return menu;\n\n    const isValidTagKey = /^[^,.:/=\\-\\s]+$/.test(searchValue);\n\n    // Overriding the menu to add a new option at the top\n    return React.cloneElement(menu, {\n      flattenOptions: [\n        {\n          data: {\n            value: searchValue,\n            disabled: !isValidTagKey,\n            style: {\n              color: isValidTagKey ? theme.colors.actionTertiaryTextDefault : theme.colors.actionDisabledText,\n            },\n            children: (\n              <LegacyTooltip\n                title={\n                  isValidTagKey\n                    ? undefined\n                    : intl.formatMessage({\n                        defaultMessage: ', . : / - = and blank spaces are not allowed',\n                        description:\n                          'Key-value tag editor modal > Tag dropdown Manage Modal > Invalid characters error',\n                      })\n                }\n                placement=\"right\"\n              >\n                <span css={{ display: 'block' }}>\n                  <PlusIcon css={{ marginRight: theme.spacing.sm }} />\n                  {intl.formatMessage(\n                    {\n                      defaultMessage: 'Add tag \"{tagKey}\"',\n                      description: 'Key-value tag editor modal > Tag dropdown Manage Modal > Add new tag button',\n                    },\n                    {\n                      tagKey: searchValue,\n                    },\n                  )}\n                </span>\n              </LegacyTooltip>\n            ),\n          },\n          key: searchValue,\n          groupOption: false,\n        },\n        ...menu.props.flattenOptions,\n      ],\n    });\n  }, [allAvailableTags, menu, searchValue, intl, theme]);\n\n  return resolvedMenu;\n}\n\nfunction getDropdownMenu(allAvailableTags: string[]) {\n  return (menu: React.ReactElement) => DropdownMenu(menu, allAvailableTags);\n}\n\n/**\n * Used in tag edit feature, allows selecting existing / adding new tag value\n */\nexport function TagKeySelectDropdown({\n  allAvailableTags,\n  control,\n  onKeyChangeCallback,\n}: {\n  allAvailableTags: string[];\n  control: Control<KeyValueEntity>;\n  onKeyChangeCallback?: (key?: string) => void;\n}) {\n  const intl = useIntl();\n  const [isOpen, setIsOpen] = useState(false);\n  const selectRef = useRef<{ blur: () => void; focus: () => void }>(null);\n\n  const { field, fieldState } = useController({\n    control: control,\n    name: 'key',\n    rules: {\n      required: {\n        message: intl.formatMessage({\n          defaultMessage: 'A tag key is required',\n          description: 'Key-value tag editor modal > Tag dropdown > Tag key required error message',\n        }),\n        value: true,\n      },\n    },\n  });\n\n  const handleDropdownVisibleChange = (visible: boolean) => {\n    setIsOpen(visible);\n  };\n\n  const handleClear = () => {\n    field.onChange(undefined);\n    onKeyChangeCallback?.(undefined);\n  };\n\n  const handleSelect = (key: string) => {\n    field.onChange(key);\n    onKeyChangeCallback?.(key);\n  };\n\n  return (\n    <LegacySelect\n      allowClear\n      ref={selectRef}\n      dangerouslySetAntdProps={{\n        showSearch: true,\n        dropdownRender: getDropdownMenu(allAvailableTags),\n      }}\n      css={{ width: '100%' }}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Type a key',\n        description: 'Key-value tag editor modal > Tag dropdown > Tag input placeholder',\n      })}\n      value={field.value}\n      defaultValue={field.value}\n      open={isOpen}\n      onDropdownVisibleChange={handleDropdownVisibleChange}\n      filterOption={(input, option) => option?.value.toLowerCase().includes(input.toLowerCase())}\n      onSelect={handleSelect}\n      onClear={handleClear}\n      validationState={fieldState.error ? 'error' : undefined}\n    >\n      {allAvailableTags.map((tag) => (\n        <LegacySelect.Option value={tag} key={tag}>\n          {tag}\n        </LegacySelect.Option>\n      ))}\n    </LegacySelect>\n  );\n}\n","import { isEqual, sortBy } from 'lodash';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { truncate } from 'lodash';\n\nimport {\n  Button,\n  FormUI,\n  Modal,\n  PlusIcon,\n  Popover,\n  RHFControlledComponents,\n  RestoreAntDDefaultClsPrefix,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Typography } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../types';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { TagKeySelectDropdown } from '../components/TagSelectDropdown';\nimport { KeyValueTag } from '../components/KeyValueTag';\nimport { ErrorWrapper } from '../utils/ErrorWrapper';\n\nfunction getTagsMap(tags: KeyValueEntity[]) {\n  return new Map(tags.map((tag) => [tag.key, tag]));\n}\n\n/**\n * Provides methods to initialize and display modal used to add and remove tags from any compatible entity\n */\nexport const useEditKeyValueTagsModal = <T extends { tags?: KeyValueEntity[] }>({\n  onSuccess,\n  saveTagsHandler,\n  allAvailableTags,\n  valueRequired = false,\n  title,\n}: {\n  onSuccess?: () => void;\n  saveTagsHandler: (editedEntity: T, existingTags: KeyValueEntity[], newTags: KeyValueEntity[]) => Promise<any>;\n  allAvailableTags?: string[];\n  valueRequired?: boolean;\n  title?: React.ReactNode;\n}) => {\n  const editedEntityRef = useRef<T>();\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const { theme } = useDesignSystemTheme();\n\n  const [initialTags, setInitialTags] = useState<Map<string, KeyValueEntity>>(new Map());\n  const [finalTags, setFinalTags] = useState<Map<string, KeyValueEntity>>(new Map());\n\n  const [showModal, setShowModal] = useState(false);\n\n  const form = useForm<KeyValueEntity>({\n    defaultValues: {\n      key: undefined,\n      value: '',\n    },\n  });\n\n  const hideModal = () => setShowModal(false);\n\n  /**\n   * Function used to invoke the modal and start editing tags of the particular model version\n   */\n  const showEditTagsModal = useCallback(\n    (editedEntity: T) => {\n      editedEntityRef.current = editedEntity;\n      setInitialTags(getTagsMap(editedEntity.tags || []));\n      setFinalTags(getTagsMap(editedEntity.tags || []));\n      form.reset();\n\n      setShowModal(true);\n    },\n    [form],\n  );\n\n  const saveTags = async () => {\n    if (!editedEntityRef.current) {\n      return;\n    }\n    setErrorMessage('');\n    setIsLoading(true);\n    saveTagsHandler(editedEntityRef.current, Array.from(initialTags.values()), Array.from(finalTags.values()))\n      .then(() => {\n        hideModal();\n        onSuccess?.();\n        setIsLoading(false);\n      })\n      .catch((e: ErrorWrapper | Error) => {\n        setIsLoading(false);\n        setErrorMessage(e instanceof ErrorWrapper ? e.getUserVisibleError()?.message : e.message);\n      });\n  };\n\n  const intl = useIntl();\n  const formValues = form.watch();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const hasNewValues = useMemo(\n    () => !isEqual(sortBy(Array.from(initialTags.values()), 'key'), sortBy(Array.from(finalTags.values()), 'key')),\n    [initialTags, finalTags],\n  );\n  const isDirty = formValues.key || formValues.value;\n  const showPopoverMessage = hasNewValues && isDirty;\n\n  const onKeyChangeCallback = (key: string | undefined) => {\n    const tag = key ? finalTags.get(key) : undefined;\n    /**\n     * If a tag value exists for provided key, set the value to the existing tag value\n     */\n    form.setValue('value', tag?.value ?? '');\n  };\n\n  const handleTagDelete = ({ key }: KeyValueEntity) => {\n    setFinalTags((currentFinalTags) => {\n      currentFinalTags.delete(key);\n      return new Map(currentFinalTags);\n    });\n  };\n\n  const onSubmit = () => {\n    // Do not accept form if no value provided while it's required\n    if (valueRequired && !formValues.value.trim()) {\n      return;\n    }\n\n    // Add new tag to existing tags leaving only one tag per key value\n    const newEntries = new Map(finalTags);\n    newEntries.set(formValues.key, formValues);\n\n    setFinalTags(newEntries);\n    form.reset();\n  };\n\n  const EditTagsModal = (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_135\"\n      destroyOnClose\n      visible={showModal}\n      title={\n        title ?? (\n          <FormattedMessage\n            defaultMessage=\"Add/Edit tags\"\n            description=\"Key-value tag editor modal > Title of the update tags modal\"\n          />\n        )\n      }\n      onCancel={hideModal}\n      footer={\n        <RestoreAntDDefaultClsPrefix>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_147\"\n            dangerouslyUseFocusPseudoClass\n            onClick={hideModal}\n            /**\n             * Hack: The footer will remove the margin to the save tags button\n             * if the button if wrapped on another component.\n             */\n            css={{ marginRight: !hasNewValues ? theme.spacing.sm : 0 }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Manage Tag cancel button',\n            })}\n          </Button>\n          {showPopoverMessage ? (\n            <UnsavedTagPopoverTrigger formValues={formValues} isLoading={isLoading} onSaveTask={saveTags} />\n          ) : (\n            <LegacyTooltip\n              title={\n                !hasNewValues\n                  ? intl.formatMessage({\n                      defaultMessage: 'Please add or remove one or more tags before saving',\n                      description: 'Key-value tag editor modal > Tag disabled message',\n                    })\n                  : undefined\n              }\n            >\n              <Button\n                componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_174\"\n                dangerouslyUseFocusPseudoClass\n                disabled={!hasNewValues}\n                loading={isLoading}\n                type=\"primary\"\n                onClick={saveTags}\n              >\n                {intl.formatMessage({\n                  defaultMessage: 'Save tags',\n                  description: 'Key-value tag editor modal > Manage Tag save button',\n                })}\n              </Button>\n            </LegacyTooltip>\n          )}\n        </RestoreAntDDefaultClsPrefix>\n      }\n    >\n      <form\n        onSubmit={form.handleSubmit(onSubmit)}\n        css={{ display: 'flex', alignItems: 'flex-end', gap: theme.spacing.md }}\n      >\n        <div css={{ minWidth: 0, display: 'flex', gap: theme.spacing.md, flex: 1 }}>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"key\">\n              {intl.formatMessage({\n                defaultMessage: 'Key',\n                description: 'Key-value tag editor modal > Key input label',\n              })}\n            </FormUI.Label>\n            <TagKeySelectDropdown\n              allAvailableTags={allAvailableTags || []}\n              control={form.control}\n              onKeyChangeCallback={onKeyChangeCallback}\n            />\n          </div>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"value\">\n              {valueRequired\n                ? intl.formatMessage({\n                    defaultMessage: 'Value',\n                    description: 'Key-value tag editor modal > Value input label (required)',\n                  })\n                : intl.formatMessage({\n                    defaultMessage: 'Value (optional)',\n                    description: 'Key-value tag editor modal > Value input label',\n                  })}\n            </FormUI.Label>\n            <RHFControlledComponents.Input\n              componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_223\"\n              name=\"value\"\n              control={form.control}\n              aria-label={\n                valueRequired\n                  ? intl.formatMessage({\n                      defaultMessage: 'Value',\n                      description: 'Key-value tag editor modal > Value input label (required)',\n                    })\n                  : intl.formatMessage({\n                      defaultMessage: 'Value (optional)',\n                      description: 'Key-value tag editor modal > Value input label',\n                    })\n              }\n              placeholder={intl.formatMessage({\n                defaultMessage: 'Type a value',\n                description: 'Key-value tag editor modal > Value input placeholder',\n              })}\n            />\n          </div>\n        </div>\n        <LegacyTooltip\n          title={intl.formatMessage({\n            defaultMessage: 'Add tag',\n            description: 'Key-value tag editor modal > Add tag button',\n          })}\n        >\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_248\"\n            htmlType=\"submit\"\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Add tag',\n              description: 'Key-value tag editor modal > Add tag button',\n            })}\n          >\n            <PlusIcon />\n          </Button>\n        </LegacyTooltip>\n      </form>\n      {errorMessage && <FormUI.Message type=\"error\" message={errorMessage} />}\n      <div\n        css={{\n          display: 'flex',\n          rowGap: theme.spacing.xs,\n          flexWrap: 'wrap',\n          marginTop: theme.spacing.sm,\n        }}\n      >\n        {Array.from(finalTags.values()).map((tag) => (\n          <KeyValueTag isClosable tag={tag} onClose={() => handleTagDelete(tag)} key={tag.key} />\n        ))}\n      </div>\n    </Modal>\n  );\n\n  return { EditTagsModal, showEditTagsModal, isLoading };\n};\n\nfunction UnsavedTagPopoverTrigger({\n  isLoading,\n  formValues,\n  onSaveTask,\n}: {\n  isLoading: boolean;\n  formValues: any;\n  onSaveTask: () => void;\n}) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const tagKeyDisplay = `${truncate(formValues.key, { length: 20 }) || '_'}`;\n  const tagValueDisplay = formValues.value ? `:${truncate(formValues.value, { length: 20 })}` : '';\n  const fullTagDisplay = `${tagKeyDisplay}${tagValueDisplay}`;\n\n  const shownText = intl.formatMessage(\n    {\n      defaultMessage: 'Are you sure you want to save and close without adding \"{tag}\"',\n      description: 'Key-value tag editor modal > Unsaved tag message',\n    },\n    {\n      tag: fullTagDisplay,\n    },\n  );\n  return (\n    <Popover.Root componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_309\">\n      <Popover.Trigger asChild>\n        <Button\n          componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_306\"\n          dangerouslyUseFocusPseudoClass\n          loading={isLoading}\n          type=\"primary\"\n        >\n          {intl.formatMessage({\n            defaultMessage: 'Save tags',\n            description: 'Key-value tag editor modal > Manage Tag save button',\n          })}\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content align=\"end\" aria-label={shownText}>\n        <Typography.Paragraph css={{ maxWidth: 400 }}>{shownText}</Typography.Paragraph>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_316\"\n            onClick={onSaveTask}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Yes, save and close',\n              description: 'Key-value tag editor modal > Unsaved tag message > Yes, save and close button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_324\"\n            type=\"primary\"\n            css={{ marginLeft: theme.spacing.sm }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Unsaved tag message > cancel button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Arrow />\n      </Popover.Content>\n    </Popover.Root>\n  );\n}\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, type ButtonProps, LegacyTooltip } from '@databricks/design-system';\n\ninterface CopyButtonProps extends Partial<ButtonProps> {\n  copyText: string;\n  showLabel?: React.ReactNode;\n  componentId?: string;\n}\n\nexport const CopyButton = ({ copyText, showLabel = true, componentId, ...buttonProps }: CopyButtonProps) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <LegacyTooltip\n      title={\n        <FormattedMessage defaultMessage=\"Copied\" description=\"Tooltip text shown when copy operation completes\" />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button\n        componentId={componentId ?? 'mlflow.shared.copy_button'}\n        type=\"primary\"\n        onClick={handleClick}\n        onMouseLeave={handleMouseLeave}\n        css={{ 'z-index': 1 }}\n        // Define children as a explicit prop so it can be easily overrideable\n        children={\n          showLabel ? <FormattedMessage defaultMessage=\"Copy\" description=\"Button text for copy button\" /> : undefined\n        }\n        {...buttonProps}\n      />\n    </LegacyTooltip>\n  );\n};\n","import { useMutation } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { RegisteredPromptsApi } from '../api';\nimport type { RegisteredPrompt } from '../types';\nimport { useCallback } from 'react';\nimport { diffCurrentAndNewTags, isUserFacingTag } from '../../../../common/utils/TagUtils';\n\ntype UpdateTagsPayload = {\n  promptId: string;\n  toAdd: { key: string; value: string }[];\n  toDelete: { key: string }[];\n};\n\nexport const useUpdateRegisteredPromptTags = ({ onSuccess }: { onSuccess?: () => void }) => {\n  const updateMutation = useMutation<unknown, Error, UpdateTagsPayload>({\n    mutationFn: async ({ toAdd, toDelete, promptId }) => {\n      return Promise.all([\n        ...toAdd.map(({ key, value }) => RegisteredPromptsApi.setRegisteredPromptTag(promptId, key, value)),\n        ...toDelete.map(({ key }) => RegisteredPromptsApi.deleteRegisteredPromptTag(promptId, key)),\n      ]);\n    },\n  });\n\n  const { EditTagsModal, showEditTagsModal, isLoading } = useEditKeyValueTagsModal<\n    Pick<RegisteredPrompt, 'name' | 'tags'>\n  >({\n    valueRequired: true,\n    saveTagsHandler: (prompt, currentTags, newTags) => {\n      const { addedOrModifiedTags, deletedTags } = diffCurrentAndNewTags(currentTags, newTags);\n\n      return new Promise<void>((resolve, reject) => {\n        if (!prompt.name) {\n          return reject();\n        }\n        // Send all requests to the mutation\n        updateMutation.mutate(\n          {\n            promptId: prompt.name,\n            toAdd: addedOrModifiedTags,\n            toDelete: deletedTags,\n          },\n          {\n            onSuccess: () => {\n              resolve();\n              onSuccess?.();\n            },\n            onError: reject,\n          },\n        );\n      });\n    },\n  });\n\n  const showEditPromptTagsModal = useCallback(\n    (prompt: RegisteredPrompt) =>\n      showEditTagsModal({\n        name: prompt.name,\n        tags: prompt.tags.filter((tag) => isUserFacingTag(tag.key)),\n      }),\n    [showEditTagsModal],\n  );\n\n  return { EditTagsModal, showEditPromptTagsModal, isLoading };\n};\n","import { DangerIcon, Empty } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { ScrollablePageWrapper } from '../../../../common/components/ScrollablePageWrapper';\n\nexport const PromptPageErrorHandler = ({ error }: { error?: Error }) => {\n  return (\n    <ScrollablePageWrapper css={{ flex: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n      <Empty\n        data-testid=\"fallback\"\n        title={\n          <FormattedMessage\n            defaultMessage=\"Error\"\n            description=\"Title for error fallback component in prompts management UI\"\n          />\n        }\n        description={\n          error?.message ?? (\n            <FormattedMessage\n              defaultMessage=\"An error occurred while rendering this component.\"\n              description=\"Description for default error message in prompts management UI\"\n            />\n          )\n        }\n        image={<DangerIcon />}\n      />\n    </ScrollablePageWrapper>\n  );\n};\n","import { PageWrapper } from '@databricks/design-system';\n\n/**\n * Wraps the page content in the scrollable container so e.g. constrained tables behave correctly.\n */\nexport const ScrollablePageWrapper = ({ children, className }: { children: React.ReactNode; className?: string }) => {\n  return (\n    <PageWrapper css={{ height: '100%' }} className={className}>\n      {children}\n    </PageWrapper>\n  );\n};\n","import React from 'react';\nimport { Modal, Typography, CopyIcon, useDesignSystemTheme } from '@databricks/design-system';\nconst { Paragraph } = Typography;\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\n\nexport interface KeyValueTagFullViewModalProps {\n  tagKey: string;\n  tagValue: string;\n  setIsKeyValueTagFullViewModalVisible: React.Dispatch<React.SetStateAction<boolean>>;\n  isKeyValueTagFullViewModalVisible: boolean;\n}\n\nexport const KeyValueTagFullViewModal = React.memo((props: KeyValueTagFullViewModalProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_components_keyvaluetagfullviewmodal.tsx_17\"\n      title={'Tag: ' + props.tagKey}\n      visible={props.isKeyValueTagFullViewModalVisible}\n      onCancel={() => props.setIsKeyValueTagFullViewModalVisible(false)}\n    >\n      <div css={{ display: 'flex' }}>\n        <Paragraph css={{ flexGrow: 1 }}>\n          <pre\n            css={{\n              backgroundColor: theme.colors.backgroundPrimary,\n              marginTop: theme.spacing.sm,\n              whiteSpace: 'pre-wrap',\n              wordBreak: 'break-all',\n            }}\n          >\n            {props.tagValue}\n          </pre>\n        </Paragraph>\n        <div\n          css={{\n            marginTop: theme.spacing.sm,\n          }}\n        >\n          <CopyButton copyText={props.tagValue} showLabel={false} icon={<CopyIcon />} aria-label=\"Copy\" />\n        </div>\n      </div>\n    </Modal>\n  );\n});\n","import { Tag, LegacyTooltip, Typography } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../types';\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { KeyValueTagFullViewModal } from './KeyValueTagFullViewModal';\nimport type { Interpolation, Theme } from '@emotion/react';\n\n/**\n * An arbitrary number that is used to determine if a tag is too\n * long and should be truncated. We want to avoid short keys or values\n * in a long tag to be truncated\n * */\nconst TRUNCATE_ON_CHARS_LENGTH = 30;\n\nfunction getTruncatedStyles(shouldTruncate = true): Interpolation<Theme> {\n  return shouldTruncate\n    ? {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        textWrap: 'nowrap',\n        whiteSpace: 'nowrap' as const,\n      }\n    : { whiteSpace: 'nowrap' as const };\n}\n\n/**\n * A <Tag /> wrapper used for displaying key-value entity\n */\nexport const KeyValueTag = ({\n  isClosable = false,\n  onClose,\n  tag,\n  enableFullViewModal = false,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n  maxWidth = 300,\n  className,\n}: {\n  isClosable?: boolean;\n  onClose?: () => void;\n  tag: KeyValueEntity;\n  enableFullViewModal?: boolean;\n  charLimit?: number;\n  maxWidth?: number;\n  className?: string;\n}) => {\n  const intl = useIntl();\n\n  const [isKeyValueTagFullViewModalVisible, setIsKeyValueTagFullViewModalVisible] = useState(false);\n\n  const { shouldTruncateKey, shouldTruncateValue } = getKeyAndValueComplexTruncation(tag, charLimit);\n  const allowFullViewModal = enableFullViewModal && (shouldTruncateKey || shouldTruncateValue);\n\n  const fullViewModalLabel = intl.formatMessage({\n    defaultMessage: 'Click to see more',\n    description: 'Run page > Overview > Tags cell > Tag',\n  });\n\n  return (\n    <div>\n      <Tag\n        componentId=\"codegen_mlflow_app_src_common_components_keyvaluetag.tsx_60\"\n        closable={isClosable}\n        onClose={onClose}\n        title={tag.key}\n        className={className}\n      >\n        <LegacyTooltip title={allowFullViewModal ? fullViewModalLabel : ''}>\n          <span\n            css={{ maxWidth, display: 'inline-flex' }}\n            onClick={() => (allowFullViewModal ? setIsKeyValueTagFullViewModalVisible(true) : undefined)}\n          >\n            <Typography.Text bold title={tag.key} css={getTruncatedStyles(shouldTruncateKey)}>\n              {tag.key}\n            </Typography.Text>\n            {tag.value && (\n              <Typography.Text title={tag.value} css={getTruncatedStyles(shouldTruncateValue)}>\n                : {tag.value}\n              </Typography.Text>\n            )}\n          </span>\n        </LegacyTooltip>\n      </Tag>\n      <div>\n        {isKeyValueTagFullViewModalVisible && (\n          <KeyValueTagFullViewModal\n            tagKey={tag.key}\n            tagValue={tag.value}\n            isKeyValueTagFullViewModalVisible={isKeyValueTagFullViewModalVisible}\n            setIsKeyValueTagFullViewModalVisible={setIsKeyValueTagFullViewModalVisible}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport function getKeyAndValueComplexTruncation(\n  tag: KeyValueEntity,\n  charLimit = TRUNCATE_ON_CHARS_LENGTH,\n): { shouldTruncateKey: boolean; shouldTruncateValue: boolean } {\n  const { key, value } = tag;\n  const fullLength = key.length + value.length;\n  const isKeyLonger = key.length > value.length;\n  const shorterLength = isKeyLonger ? value.length : key.length;\n\n  // No need to truncate if tag is short enough\n  if (fullLength <= charLimit) return { shouldTruncateKey: false, shouldTruncateValue: false };\n  // If the shorter string is too long, truncate both key and value.\n  if (shorterLength > charLimit / 2) return { shouldTruncateKey: true, shouldTruncateValue: true };\n\n  // Otherwise truncate the longer string\n  return {\n    shouldTruncateKey: isKeyLonger,\n    shouldTruncateValue: !isKeyLonger,\n  };\n}\n"],"names":["PromptsListTableVersionCell","row","original","getValue","version","_jsx","Typography","Text","children","FormattedMessage","id","defaultMessage","values","_ref","name","styles","getDropdownMenu","allAvailableTags","menu","intl","useIntl","theme","useDesignSystemTheme","searchValue","props","toLowerCase","useMemo","sortedIndexOf","isValidTagKey","test","React","flattenOptions","data","value","disabled","style","color","colors","actionTertiaryTextDefault","actionDisabledText","LegacyTooltip","title","undefined","formatMessage","placement","_jsxs","css","PlusIcon","_css","marginRight","spacing","sm","tagKey","key","groupOption","DropdownMenu","_ref2","TagKeySelectDropdown","control","onKeyChangeCallback","isOpen","setIsOpen","useState","selectRef","useRef","field","fieldState","useController","rules","required","message","LegacySelect","allowClear","ref","dangerouslySetAntdProps","showSearch","dropdownRender","placeholder","defaultValue","open","onDropdownVisibleChange","visible","filterOption","input","option","includes","onSelect","onChange","onClear","handleClear","validationState","error","map","tag","Option","getTagsMap","tags","Map","useEditKeyValueTagsModal","onSuccess","saveTagsHandler","valueRequired","editedEntityRef","errorMessage","setErrorMessage","initialTags","setInitialTags","finalTags","setFinalTags","showModal","setShowModal","form","useForm","defaultValues","hideModal","showEditTagsModal","useCallback","editedEntity","current","reset","saveTags","async","setIsLoading","Array","from","then","catch","e","_e$getUserVisibleErro","ErrorWrapper","getUserVisibleError","formValues","watch","isLoading","hasNewValues","isEqual","sortBy","isDirty","showPopoverMessage","EditTagsModal","Modal","componentId","destroyOnClose","onCancel","footer","RestoreAntDDefaultClsPrefix","Button","dangerouslyUseFocusPseudoClass","onClick","UnsavedTagPopoverTrigger","onSaveTask","loading","type","onSubmit","handleSubmit","trim","newEntries","set","display","alignItems","gap","md","minWidth","flex","FormUI","Label","htmlFor","_tag$value","get","setValue","RHFControlledComponents","Input","htmlType","Message","rowGap","xs","flexWrap","marginTop","KeyValueTag","isClosable","onClose","handleTagDelete","currentFinalTags","delete","_ref3","fullTagDisplay","truncate","length","shownText","Popover","Root","Trigger","asChild","Content","align","Paragraph","Close","marginLeft","Arrow","CopyButton","copyText","showLabel","buttonProps","showTooltip","setShowTooltip","handleClick","navigator","clipboard","writeText","setTimeout","onMouseLeave","handleMouseLeave","useUpdateRegisteredPromptTags","updateMutation","useMutation","mutationFn","toAdd","toDelete","promptId","Promise","all","RegisteredPromptsApi","setRegisteredPromptTag","deleteRegisteredPromptTag","prompt","currentTags","newTags","addedOrModifiedTags","deletedTags","diffCurrentAndNewTags","resolve","reject","mutate","onError","showEditPromptTagsModal","filter","isUserFacingTag","PromptPageErrorHandler","_error$message","ScrollablePageWrapper","Empty","description","image","DangerIcon","className","PageWrapper","KeyValueTagFullViewModal","isKeyValueTagFullViewModalVisible","setIsKeyValueTagFullViewModalVisible","backgroundColor","backgroundPrimary","whiteSpace","wordBreak","tagValue","icon","CopyIcon","getTruncatedStyles","shouldTruncate","overflow","textOverflow","textWrap","enableFullViewModal","charLimit","maxWidth","shouldTruncateKey","shouldTruncateValue","fullLength","isKeyLonger","shorterLength","getKeyAndValueComplexTruncation","allowFullViewModal","fullViewModalLabel","Tag","closable","bold"],"sourceRoot":""}