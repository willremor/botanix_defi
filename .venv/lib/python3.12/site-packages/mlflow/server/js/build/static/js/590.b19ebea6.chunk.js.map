{"version":3,"file":"static/js/590.b19ebea6.chunk.js","mappings":"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","sources":["experiment-tracking/components/EntitySearchAutoComplete.tsx","experiment-tracking/components/experiment-page/components/runs/RunsSearchTooltipContent.tsx","experiment-tracking/components/experiment-page/components/runs/RunsSearchAutoComplete.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentViewLocalStore.ts","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTableResizer.tsx","experiment-tracking/components/EntitySearchAutoComplete.utils.tsx"],"sourcesContent":["import {\n  AutoComplete,\n  Button,\n  CloseIcon,\n  InfoFillIcon,\n  InfoSmallIcon,\n  Input,\n  LegacyTooltip,\n  SearchIcon,\n  Tooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport type { ErrorWrapper } from '../../common/utils/ErrorWrapper';\nimport type {\n  EntitySearchAutoCompleteEntity,\n  EntitySearchAutoCompleteOptionGroup,\n} from './EntitySearchAutoComplete.utils';\nimport { getEntitySearchEntitiesAndIndices, getFilteredOptionsFromEntityName } from './EntitySearchAutoComplete.utils';\nimport { shouldEnableMinMaxMetricsOnExperimentPage } from '../../common/utils/FeatureUtils';\nimport {\n  createQuickRegexpSearchFilter,\n  detectSqlSyntaxInSearchQuery,\n} from './experiment-page/utils/experimentPage.fetch-utils';\nimport { FormattedMessage } from 'react-intl';\nimport { isEqual } from 'lodash';\nimport { useExperimentViewLocalStore } from './experiment-page/hooks/useExperimentViewLocalStore';\n\nconst TOOLTIP_COOKIE_KEY = 'tooltipLastPopup';\nconst WEEK_IN_SECONDS = 604800;\n\nexport type EntitySearchAutoCompleteCompleteProps = {\n  baseOptions: EntitySearchAutoCompleteOptionGroup[];\n  searchFilter: string;\n  onSearchFilterChange: (newValue: string) => void;\n  onClear: () => void;\n  requestError?: ErrorWrapper | Error | null;\n  tooltipContent?: React.ReactNode;\n  placeholder?: string;\n  useQuickFilter?: boolean;\n  defaultActiveFirstOption?: boolean;\n  className?: string;\n};\n\n/**\n * Autocomplete component that provides suggestions for MLflow search entity names.\n */\nexport const EntitySearchAutoComplete = ({\n  baseOptions,\n  searchFilter,\n  requestError = null,\n  onSearchFilterChange,\n  onClear,\n  tooltipContent,\n  placeholder,\n  useQuickFilter,\n  defaultActiveFirstOption = true,\n  className,\n}: EntitySearchAutoCompleteCompleteProps) => {\n  const { theme, getPrefixedClassName } = useDesignSystemTheme();\n\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const intl = useIntl();\n\n  const [text, setText] = useState<string>('');\n  const [autocompleteEnabled, setAutocompleteEnabled] = useState<boolean | undefined>(undefined);\n  const [focused, setFocused] = useState(false);\n  const onFocus = () => setFocused(true);\n  const onBlur = () => setFocused(false);\n  // Determines whether the text was changed by making a selection in the autocomplete\n  // dialog, as opposed to by typing.\n  const [lastSetBySelection, setLastSetBySelection] = useState(false);\n\n  // How many suggestions should be shown per entity group before the group is ellipsized.\n  const [suggestionLimits, setSuggestionLimits] = useState({\n    Metrics: 10,\n    Parameters: 10,\n    Tags: 10,\n  });\n  // List of entities parsed from `text`.\n  const currentEntitiesRef = useRef<EntitySearchAutoCompleteEntity[]>([]);\n  const [entityBeingEdited, setEntityBeingEdited] = useState<EntitySearchAutoCompleteEntity | undefined>(undefined);\n\n  // Each time we're setting search filter externally, update it here as well\n  useEffect(() => {\n    setText(searchFilter);\n  }, [searchFilter]);\n\n  useEffect(() => {\n    const previousEntities = currentEntitiesRef.current;\n    const newEntities = getEntitySearchEntitiesAndIndices(text);\n    currentEntitiesRef.current = newEntities;\n\n    if (lastSetBySelection) {\n      setLastSetBySelection(false);\n      return;\n    }\n    const currentEntitiesNames = newEntities.map((e) => e.name);\n    const previousEntitiesNames = previousEntities.map((e) => e.name);\n    if (!isEqual(currentEntitiesNames, previousEntitiesNames) && newEntities.length >= previousEntities.length) {\n      let i = 0;\n      while (i < newEntities.length) {\n        if (i >= previousEntities.length || newEntities[i].name.trim() !== previousEntities[i].name.trim()) {\n          setAutocompleteEnabled(true);\n          setEntityBeingEdited(newEntities[i]);\n          return;\n        }\n        i++;\n      }\n    }\n    // If here, no entity is being edited\n    setAutocompleteEnabled(false);\n    // currentEntitiesRef is not used anywhere else and state setters are safe to\n    // omit from hook dependencies as per react docs\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [text]);\n\n  const filteredOptions = useMemo(() => {\n    if (!entityBeingEdited) {\n      return [];\n    }\n    return getFilteredOptionsFromEntityName(baseOptions, entityBeingEdited, suggestionLimits);\n  }, [baseOptions, entityBeingEdited, suggestionLimits]);\n\n  /**\n   * Called when an option is picked from the autocomplete dropdown, either by hitting enter\n   * when selected, or clicking on it\n   * @param value\n   */\n  const onSelect = useCallback(\n    (value: string, option: any) => {\n      if (!entityBeingEdited) {\n        return;\n      }\n      if (value.startsWith('...')) {\n        // Keep the dialog open as this is not a real selection\n        setAutocompleteEnabled(true);\n        const groupName = option.value.split('_')[1];\n        setSuggestionLimits((prevSuggestionLimits) => ({\n          ...prevSuggestionLimits,\n          [groupName]: (prevSuggestionLimits as any)[groupName] + 10,\n        }));\n      } else {\n        const prefix = text.substring(0, entityBeingEdited.startIndex);\n        const suffix = text.substring(entityBeingEdited.endIndex);\n        setText(prefix + value + ' ' + suffix);\n        setLastSetBySelection(true);\n        setAutocompleteEnabled(false);\n      }\n    },\n    [text, setText, entityBeingEdited, setAutocompleteEnabled],\n  );\n\n  const localStorageInstance = useExperimentViewLocalStore(TOOLTIP_COOKIE_KEY);\n\n  const [showTooltipOnError, setShowTooltipOnError] = useState(() => {\n    const currentTimeSecs = Math.floor(Date.now() / 1000);\n    const storedItem = localStorageInstance.getItem(TOOLTIP_COOKIE_KEY);\n    // Show tooltip again if it was last shown 1 week ago or older\n    return !storedItem || parseInt(storedItem, 10) < currentTimeSecs - WEEK_IN_SECONDS;\n  });\n  const tooltipIcon = React.useRef<HTMLButtonElement>(null);\n\n  const quickRegexpFilter = useMemo(() => {\n    if (useQuickFilter && text.length > 0 && !detectSqlSyntaxInSearchQuery(text)) {\n      return createQuickRegexpSearchFilter(text);\n    }\n    return undefined;\n  }, [text, useQuickFilter]);\n\n  // If requestError has changed and there is an error, pop up the tooltip\n  useEffect(() => {\n    if (requestError && showTooltipOnError) {\n      const currentTimeSecs = Math.floor(Date.now() / 1000);\n      localStorageInstance.setItem(TOOLTIP_COOKIE_KEY, currentTimeSecs);\n      setShowTooltipOnError(false);\n      tooltipIcon.current?.click();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [requestError]);\n\n  const noMatches = filteredOptions.flatMap((o) => o.options).length === 0;\n  const open = autocompleteEnabled && focused && !noMatches;\n\n  // Callback fired when key is pressed on the input\n  const triggerSearch: React.KeyboardEventHandler<HTMLInputElement> = useCallback(\n    (e) => {\n      // Get the class name for the active item in the dropdown\n      const activeItemClass = getPrefixedClassName('select-item-option-active');\n      const dropdownContainsActiveItem = Boolean(dropdownRef.current?.querySelector(`.${activeItemClass}`));\n\n      if (e.key === 'Enter') {\n        // If the autocomplete dialog is open, close it\n        if (open) {\n          setAutocompleteEnabled(false);\n        }\n        // If the autocomplete dialog is closed or user didn't select any item, trigger search\n        if (!open || !dropdownContainsActiveItem) {\n          onSearchFilterChange(text);\n        }\n      }\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        if (open) {\n          setAutocompleteEnabled(false);\n        }\n      }\n    },\n    [open, text, onSearchFilterChange, getPrefixedClassName],\n  );\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        gap: theme.spacing.sm,\n        width: 430,\n        [theme.responsive.mediaQueries.xs]: {\n          width: 'auto',\n        },\n      }}\n      className={className}\n    >\n      <AutoComplete\n        dropdownMatchSelectWidth={560}\n        css={{\n          width: 560,\n          [theme.responsive.mediaQueries.xs]: {\n            width: 'auto',\n          },\n        }}\n        defaultOpen={false}\n        defaultActiveFirstOption={defaultActiveFirstOption && !useQuickFilter}\n        open={open}\n        options={filteredOptions}\n        onSelect={onSelect}\n        value={text}\n        data-testid=\"runs-search-autocomplete\"\n        dropdownRender={(menu) => (\n          <div\n            css={{\n              '.du-bois-light-select-item-option-active:not(.du-bois-light-select-item-option-disabled)': {\n                // TODO: ask the design team about the color existing in the palette\n                backgroundColor: '#e6f1f5',\n              },\n            }}\n            ref={dropdownRef}\n          >\n            {menu}\n          </div>\n        )}\n      >\n        <Input\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_runssearchautocomplete.tsx_236\"\n          value={text}\n          prefix={\n            <SearchIcon\n              css={{\n                svg: {\n                  width: theme.general.iconFontSize,\n                  height: theme.general.iconFontSize,\n                  color: theme.colors.textSecondary,\n                },\n              }}\n            />\n          }\n          onKeyDown={triggerSearch}\n          onClick={onFocus}\n          onBlur={onBlur}\n          onChange={(e) => setText(e.target.value)}\n          placeholder={placeholder}\n          data-testid=\"search-box\"\n          suffix={\n            <div css={{ display: 'flex', gap: 4, alignItems: 'center' }}>\n              {text && (\n                <Button\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_runssearchautocomplete.tsx_212\"\n                  onClick={() => {\n                    onClear();\n                    setText('');\n                  }}\n                  type=\"link\"\n                  data-testid=\"clear-button\"\n                >\n                  <CloseIcon />\n                </Button>\n              )}\n              {quickRegexpFilter ? (\n                <Tooltip\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_experiment-page_components_runs_runssearchautocomplete.tsx_310\"\n                  content={\n                    <FormattedMessage\n                      defaultMessage=\"Using regular expression quick filter. The following query will be used: {filterSample}\"\n                      description=\"Experiment page > control bar > search filter > a label displayed when user has entered a simple query that will be automatically transformed into RLIKE SQL query before being sent to the API\"\n                      values={{\n                        filterSample: (\n                          <div>\n                            <code>{quickRegexpFilter}</code>\n                          </div>\n                        ),\n                      }}\n                    />\n                  }\n                  delayDuration={0}\n                >\n                  <InfoFillIcon\n                    aria-label={intl.formatMessage(\n                      {\n                        defaultMessage:\n                          'Using regular expression quick filter. The following query will be used: {filterSample}',\n                        description:\n                          'Experiment page > control bar > search filter > a label displayed when user has entered a simple query that will be automatically transformed into RLIKE SQL query before being sent to the API',\n                      },\n                      {\n                        filterSample: quickRegexpFilter,\n                      },\n                    )}\n                    css={{\n                      svg: {\n                        width: theme.general.iconFontSize,\n                        height: theme.general.iconFontSize,\n                        color: theme.colors.actionPrimaryBackgroundDefault,\n                      },\n                    }}\n                  />\n                </Tooltip>\n              ) : (\n                <LegacyTooltip\n                  title={tooltipContent}\n                  placement=\"right\"\n                  dangerouslySetAntdProps={{\n                    overlayInnerStyle: { width: '150%' },\n                    trigger: ['focus', 'click'],\n                  }}\n                >\n                  <Button\n                    size=\"small\"\n                    ref={tooltipIcon}\n                    componentId=\"mlflow.experiment_page.search_filter.tooltip\"\n                    type=\"link\"\n                    css={{ marginLeft: -theme.spacing.xs, marginRight: -theme.spacing.xs }}\n                    icon={\n                      <InfoSmallIcon\n                        css={{\n                          svg: {\n                            width: theme.general.iconFontSize,\n                            height: theme.general.iconFontSize,\n                            color: theme.colors.textSecondary,\n                          },\n                        }}\n                      />\n                    }\n                  />\n                </LegacyTooltip>\n              )}\n            </div>\n          }\n        />\n      </AutoComplete>\n    </div>\n  );\n};\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentRunSearchSyntaxDocUrl } from '../../../../../common/constants';\n\nexport const RunsSearchTooltipContent = () => {\n  return (\n    <div className=\"search-input-tooltip-content\">\n      <FormattedMessage\n        defaultMessage=\"Search runs using a simplified version of the SQL {whereBold} clause.\"\n        description=\"Tooltip string to explain how to search runs from the experiments table\"\n        values={{ whereBold: <b>WHERE</b> }}\n      />{' '}\n      <FormattedMessage\n        defaultMessage=\"<link>Learn more</link>\"\n        description=\"Learn more tooltip link to learn more on how to search in an experiments run table\"\n        values={{\n          link: (chunks: any) => (\n            <a href={ExperimentRunSearchSyntaxDocUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n              {chunks}\n            </a>\n          ),\n        }}\n      />\n      <br />\n      <FormattedMessage defaultMessage=\"Examples:\" description=\"Text header for examples of mlflow search syntax\" />\n      <br />\n      {'• metrics.rmse >= 0.8'}\n      <br />\n      {'• metrics.`f1 score` < 1'}\n      <br />\n      • params.model = 'tree'\n      <br />\n      • attributes.run_name = 'my run'\n      <br />\n      • tags.`mlflow.user` = 'myUser'\n      <br />\n      {\"• metric.f1_score > 0.9 AND params.model = 'tree'\"}\n      <br />\n      • dataset.name IN ('dataset1', 'dataset2')\n      <br />\n      • attributes.run_id IN ('a1b2c3d4', 'e5f6g7h8')\n      <br />• tags.model_class LIKE 'sklearn.linear_model%'\n    </div>\n  );\n};\n","import { useMemo, useRef } from 'react';\nimport type { ErrorWrapper } from '../../../../../common/utils/ErrorWrapper';\nimport { EntitySearchAutoComplete } from '../../../EntitySearchAutoComplete';\nimport type { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { RunsSearchTooltipContent } from './RunsSearchTooltipContent';\nimport type {\n  EntitySearchAutoCompleteEntityNameGroup,\n  EntitySearchAutoCompleteOptionGroup,\n} from '../../../EntitySearchAutoComplete.utils';\nimport {\n  cleanEntitySearchTagNames,\n  getEntitySearchOptionsFromEntityNames,\n} from '../../../EntitySearchAutoComplete.utils';\nimport { shouldUseRegexpBasedAutoRunsSearchFilter } from '../../../../../common/utils/FeatureUtils';\n\n// A default placeholder for the search box\nconst SEARCH_BOX_PLACEHOLDER = 'metrics.rmse < 1 and params.model = \"tree\"';\n\nexport type RunsSearchAutoCompleteProps = {\n  runsData: ExperimentRunsSelectorResult;\n  searchFilter: string;\n  onSearchFilterChange: (newValue: string) => void;\n  onClear: () => void;\n  requestError: ErrorWrapper | Error | null;\n  className?: string;\n};\n\nconst ATTRIBUTE_OPTIONS = [\n  'run_id',\n  'run_name',\n  'status',\n  'artifact_uri',\n  'user_id',\n  'start_time',\n  'end_time',\n  'created',\n].map((s) => ({ value: `attributes.${s}` }));\n\nconst mergeDeduplicate = (list1: string[], list2: string[]) => [...new Set([...list1, ...list2])];\nconst getTagNames = (tagsList: any[]) => tagsList.flatMap((tagRecord) => Object.keys(tagRecord));\n\nconst getEntityNamesFromRunsData = (\n  newRunsData: ExperimentRunsSelectorResult,\n  existingNames: EntitySearchAutoCompleteEntityNameGroup,\n): EntitySearchAutoCompleteEntityNameGroup => {\n  const metricNames = mergeDeduplicate(existingNames.metricNames, newRunsData.metricKeyList);\n  const paramNames = mergeDeduplicate(existingNames.paramNames, newRunsData.paramKeyList);\n  const tagNames = cleanEntitySearchTagNames(\n    mergeDeduplicate(getTagNames(existingNames.tagNames), getTagNames(newRunsData.tagsList)),\n  );\n\n  return {\n    metricNames,\n    paramNames,\n    tagNames,\n  };\n};\n\nexport const RunsSearchAutoComplete = ({ runsData, ...restProps }: RunsSearchAutoCompleteProps) => {\n  const existingEntityNamesRef = useRef<EntitySearchAutoCompleteEntityNameGroup>({\n    metricNames: [],\n    paramNames: [],\n    tagNames: [],\n  });\n\n  const baseOptions = useMemo<EntitySearchAutoCompleteOptionGroup[]>(() => {\n    const existingEntityNames = existingEntityNamesRef.current;\n    const mergedEntityNames = getEntityNamesFromRunsData(runsData, existingEntityNames);\n    existingEntityNamesRef.current = mergedEntityNames;\n    return getEntitySearchOptionsFromEntityNames(mergedEntityNames, ATTRIBUTE_OPTIONS);\n  }, [runsData]);\n\n  return (\n    <EntitySearchAutoComplete\n      {...restProps}\n      baseOptions={baseOptions}\n      tooltipContent={<RunsSearchTooltipContent />}\n      placeholder={SEARCH_BOX_PLACEHOLDER}\n      useQuickFilter={shouldUseRegexpBasedAutoRunsSearchFilter()}\n    />\n  );\n};\n","import { useMemo } from 'react';\nimport LocalStorageUtils from '../../../../common/utils/LocalStorageUtils';\n\n/**\n * This hook returns a memoized version of persistable store namespaced for the ExperimentView.\n * It can serve as a store for persisting state for a particular experiment - in this case,\n * the experiment id should be provided as a `identifier` parameter. It can also serve as a store for some\n * general purpose - e.g. you can provide \"onboarding\" as a identifier to get a store specific\n * for the onboarding section of the experiment view.\n *\n * @param storeIdentifier a unique identifier of created store - can be an experiment id or a general purpose name\n */\nexport const useExperimentViewLocalStore = (storeIdentifier: string) =>\n  useMemo(() => LocalStorageUtils.getStoreForComponent('ExperimentView', storeIdentifier), [storeIdentifier]);\n","import { Button, ChevronLeftIcon, ChevronRightIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport React, { useState } from 'react';\nimport { ResizableBox } from 'react-resizable';\nimport { useUpdateExperimentViewUIState } from '../../contexts/ExperimentPageUIStateContext';\nimport { Global } from '@emotion/react';\n\nconst RESIZE_BAR_WIDTH = 3;\n\n/**\n * A component wrapping experiment runs table and providing a resizer\n * to adjust its width when displayed in a split view.\n */\nexport const ExperimentViewRunsTableResizer = ({\n  runListHidden,\n  width,\n  onResize,\n  children,\n  onHiddenChange,\n  maxWidth,\n}: React.PropsWithChildren<{\n  runListHidden: boolean;\n  width: number;\n  onResize: React.Dispatch<React.SetStateAction<number>>;\n  onHiddenChange?: (isHidden: boolean) => void;\n  maxWidth: number | undefined;\n}>) => {\n  const updateUIState = useUpdateExperimentViewUIState();\n  const [dragging, setDragging] = useState(false);\n\n  return (\n    <>\n      <ResizableBox\n        css={{ display: 'flex', position: 'relative' }}\n        style={{ flex: `0 0 ${runListHidden ? 0 : width}px` }}\n        width={width}\n        axis=\"x\"\n        resizeHandles={['e']}\n        minConstraints={[250, 0]}\n        maxConstraints={maxWidth === undefined ? undefined : [maxWidth, 0]}\n        handle={\n          <ExperimentViewRunsTableResizerHandle\n            runListHidden={runListHidden}\n            updateRunListHidden={(value) => {\n              if (onHiddenChange) {\n                onHiddenChange(value);\n                return;\n              }\n              updateUIState((state) => ({ ...state, runListHidden: value }));\n            }}\n          />\n        }\n        onResize={(event, { size }) => {\n          if (runListHidden) {\n            return;\n          }\n          onResize(size.width);\n        }}\n        onResizeStart={() => !runListHidden && setDragging(true)}\n        onResizeStop={() => setDragging(false)}\n      >\n        {children}\n      </ResizableBox>\n      {dragging && (\n        <Global\n          styles={{\n            'body, :host': {\n              userSelect: 'none',\n            },\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport const ExperimentViewRunsTableResizerHandle = React.forwardRef<\n  HTMLDivElement,\n  {\n    updateRunListHidden: (newValue: boolean) => void;\n    runListHidden: boolean;\n  }\n>(({ updateRunListHidden, runListHidden, ...props }, ref) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      ref={ref}\n      {...props}\n      css={{\n        transition: 'opacity 0.2s',\n        width: 0,\n        overflow: 'visible',\n        height: '100%',\n        position: 'relative',\n        zIndex: 10,\n        display: 'flex',\n        opacity: runListHidden ? 1 : 0,\n        '&:hover': {\n          opacity: 1,\n          '.bar': { opacity: 1 },\n          '.button': {\n            border: `2px solid ${theme.colors.actionDefaultBorderHover}`,\n          },\n        },\n      }}\n    >\n      <div\n        css={{\n          position: 'absolute',\n          // For the resizing area, use the icon size which is\n          // the same as \"collapse\" button\n          left: -theme.general.iconSize / 2,\n          width: theme.general.iconSize,\n          cursor: runListHidden ? undefined : 'ew-resize',\n          height: '100%',\n          top: 0,\n          bottom: 0,\n        }}\n      >\n        <div\n          className=\"button\"\n          css={{\n            top: '50%',\n            transition: 'border-color 0.2s',\n            position: 'absolute',\n            width: theme.general.iconSize,\n            height: theme.general.iconSize,\n            backgroundColor: theme.colors.backgroundPrimary,\n            borderRadius: theme.general.iconSize,\n            overflow: 'hidden',\n            border: `1px solid ${theme.colors.border}`,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            zIndex: 11,\n          }}\n        >\n          <Button\n            componentId=\"mlflow.experiment_page.table_resizer.collapse\"\n            onClick={() => updateRunListHidden(!runListHidden)}\n            icon={runListHidden ? <ChevronRightIcon /> : <ChevronLeftIcon />}\n            size=\"small\"\n          />\n        </div>\n      </div>\n      <div\n        className=\"bar\"\n        css={{\n          position: 'absolute',\n          opacity: 0,\n          left: -RESIZE_BAR_WIDTH / 2,\n          width: RESIZE_BAR_WIDTH,\n          height: '100%',\n          top: 0,\n          bottom: 0,\n          backgroundColor: theme.colors.actionPrimaryBackgroundDefault,\n        }}\n      />\n    </div>\n  );\n});\n","import React from 'react';\nimport { shouldEnableMinMaxMetricsOnExperimentPage } from '../../common/utils/FeatureUtils';\nimport { MLFLOW_INTERNAL_PREFIX } from '../../common/utils/TagUtils';\n\nexport type EntitySearchAutoCompleteOption = {\n  label?: string | React.ReactNode;\n  value: string;\n};\n\nexport type EntitySearchAutoCompleteOptionGroup = {\n  label: string;\n  options: EntitySearchAutoCompleteOption[];\n};\n\nexport type EntitySearchAutoCompleteEntity = {\n  name: string;\n  startIndex: number;\n  endIndex: number;\n};\n\ntype EntitySearchAutoCompleteClause = {\n  clause: string;\n  startIndex: number;\n};\n\nexport type EntitySearchAutoCompleteEntityNameGroup = {\n  metricNames: string[];\n  paramNames: string[];\n  tagNames: string[];\n};\n\n/**\n * Given an input string, returns a list of Clause objects\n * containing the clauses in the input and the indices of their\n * starting positions in the overall string.\n */\nconst getClausesAndStartIndex = (str: string) => {\n  const re = /and[\\s]+/gi;\n  const results: EntitySearchAutoCompleteClause[] = [];\n  let match, position;\n  while (((position = re.lastIndex), (match = re.exec(str)))) {\n    results.push({ clause: str.substring(position, match.index), startIndex: position });\n  }\n  results.push({ clause: str.substring(position), startIndex: position });\n  return results;\n};\n\n/**\n * Filters out internal tag names and wrap names that include control characters in backticks.\n */\nexport const cleanEntitySearchTagNames = (tagNames: string[]) =>\n  tagNames\n    .filter((tag: string) => !tag.startsWith(MLFLOW_INTERNAL_PREFIX))\n    .map((tag: string) => {\n      if (tag.includes('\"') || tag.includes(' ') || tag.includes('.')) {\n        return `\\`${tag}\\``;\n      } else if (tag.includes('`')) {\n        return `\"${tag}\"`;\n      } else return tag;\n    });\n\nexport const getEntitySearchOptionsFromEntityNames = (\n  entityNames: EntitySearchAutoCompleteEntityNameGroup,\n  attributeOptions: EntitySearchAutoCompleteOption[],\n): EntitySearchAutoCompleteOptionGroup[] => [\n  {\n    label: 'Metrics',\n    options: entityNames.metricNames.map((m) => ({ value: `metrics.${m}` })),\n  },\n  {\n    label: 'Parameters',\n    options: entityNames.paramNames.map((p) => ({ value: `params.${p}` })),\n  },\n  {\n    label: 'Tags',\n    options: entityNames.tagNames.map((t) => ({ value: `tags.${t}` })),\n  },\n  {\n    label: 'Attributes',\n    options: attributeOptions,\n  },\n];\n\n// Bolds a specified segment of `wholeText`.\nconst boldedText = (wholeText: string, shouldBeBold: string) => {\n  const textArray = wholeText.split(RegExp(shouldBeBold.replace('.', '\\\\.'), 'ig'));\n  const match = wholeText.match(RegExp(shouldBeBold.replace('.', '\\\\.'), 'ig'));\n\n  return (\n    // Autocomplete sets font weight to 600 on full match resulting in double bolding.\n    // Override this here\n    <span css={{ fontWeight: 'normal' }} data-testid={wholeText}>\n      {textArray.map((item, index) => (\n        <React.Fragment key={index}>\n          {item}\n          {index !== textArray.length - 1 && match && <b>{match[index]}</b>}\n        </React.Fragment>\n      ))}\n    </span>\n  );\n};\n\n/**\n * Given an input string, returns a list of Entity objects\n * containing the search entities in the input and their\n * start and end indices in the whole string.\n */\nexport const getEntitySearchEntitiesAndIndices = (str: string) => {\n  const re = />|<|>=|<=|=|!=|like|ilike/gi;\n  const clauses = getClausesAndStartIndex(str);\n  const results: EntitySearchAutoCompleteEntity[] = [];\n  clauses.forEach((clauseObj) => {\n    const clauseText = clauseObj.clause;\n    const entity = clauseText.split(re)[0];\n    const { startIndex } = clauseObj;\n    results.push({\n      name: entity,\n      startIndex: 0 + startIndex,\n      endIndex: entity.length + startIndex,\n    });\n  });\n  return results;\n};\n\nexport const getFilteredOptionsFromEntityName = (\n  baseOptions: EntitySearchAutoCompleteOptionGroup[],\n  entityBeingEdited: EntitySearchAutoCompleteEntity,\n  suggestionLimits: Record<string, number>,\n): EntitySearchAutoCompleteOptionGroup[] => {\n  return baseOptions\n    .map((group) => {\n      const newOptions = group.options\n        .filter((option) => option.value.toLowerCase().includes(entityBeingEdited.name.toLowerCase().trim()))\n        .map((match) => ({\n          value: match.value,\n          label: boldedText(match.value, entityBeingEdited.name.trim()),\n        }));\n      const limitForGroup = suggestionLimits[group.label];\n      const ellipsized = [\n        ...newOptions.slice(0, limitForGroup),\n        ...(newOptions.length > limitForGroup ? [{ label: '...', value: `..._${group.label}` }] : []),\n      ];\n      return {\n        label: group.label,\n        options: ellipsized,\n      };\n    })\n    .filter((group) => group.options.length > 0);\n};\n"],"names":["TOOLTIP_COOKIE_KEY","_ref","name","styles","_ref2","EntitySearchAutoComplete","baseOptions","searchFilter","requestError","onSearchFilterChange","onClear","tooltipContent","placeholder","useQuickFilter","defaultActiveFirstOption","className","theme","getPrefixedClassName","useDesignSystemTheme","dropdownRef","useRef","intl","useIntl","text","setText","useState","autocompleteEnabled","setAutocompleteEnabled","undefined","focused","setFocused","lastSetBySelection","setLastSetBySelection","suggestionLimits","setSuggestionLimits","Metrics","Parameters","Tags","currentEntitiesRef","entityBeingEdited","setEntityBeingEdited","useEffect","previousEntities","current","newEntities","getEntitySearchEntitiesAndIndices","currentEntitiesNames","map","e","previousEntitiesNames","isEqual","length","i","trim","filteredOptions","useMemo","getFilteredOptionsFromEntityName","onSelect","useCallback","value","option","startsWith","groupName","split","prevSuggestionLimits","prefix","substring","startIndex","suffix","endIndex","localStorageInstance","useExperimentViewLocalStore","showTooltipOnError","setShowTooltipOnError","currentTimeSecs","Math","floor","Date","now","storedItem","getItem","parseInt","tooltipIcon","React","quickRegexpFilter","detectSqlSyntaxInSearchQuery","createQuickRegexpSearchFilter","_tooltipIcon$current","setItem","click","noMatches","flatMap","o","options","open","triggerSearch","_dropdownRef$current","activeItemClass","dropdownContainsActiveItem","Boolean","querySelector","key","preventDefault","_jsx","css","_css","display","gap","spacing","sm","width","responsive","mediaQueries","xs","children","AutoComplete","dropdownMatchSelectWidth","defaultOpen","dropdownRender","menu","ref","Input","componentId","SearchIcon","svg","general","iconFontSize","height","color","colors","textSecondary","onKeyDown","onClick","onFocus","onBlur","onChange","target","_jsxs","Button","type","CloseIcon","Tooltip","content","FormattedMessage","id","defaultMessage","values","filterSample","delayDuration","InfoFillIcon","formatMessage","actionPrimaryBackgroundDefault","LegacyTooltip","title","placement","dangerouslySetAntdProps","overlayInnerStyle","trigger","size","marginLeft","marginRight","icon","InfoSmallIcon","RunsSearchTooltipContent","whereBold","link","chunks","href","ExperimentRunSearchSyntaxDocUrl","rel","ATTRIBUTE_OPTIONS","s","mergeDeduplicate","list1","list2","Set","getTagNames","tagsList","tagRecord","Object","keys","RunsSearchAutoComplete","runsData","restProps","existingEntityNamesRef","metricNames","paramNames","tagNames","existingEntityNames","mergedEntityNames","newRunsData","existingNames","metricKeyList","paramKeyList","cleanEntitySearchTagNames","getEntityNamesFromRunsData","getEntitySearchOptionsFromEntityNames","shouldUseRegexpBasedAutoRunsSearchFilter","storeIdentifier","LocalStorageUtils","getStoreForComponent","ExperimentViewRunsTableResizer","runListHidden","onResize","onHiddenChange","maxWidth","updateUIState","useUpdateExperimentViewUIState","dragging","setDragging","_Fragment","ResizableBox","style","flex","axis","resizeHandles","minConstraints","maxConstraints","handle","ExperimentViewRunsTableResizerHandle","updateRunListHidden","state","event","onResizeStart","onResizeStop","Global","props","transition","overflow","position","zIndex","opacity","border","actionDefaultBorderHover","left","iconSize","cursor","top","bottom","backgroundColor","backgroundPrimary","borderRadius","alignItems","justifyContent","ChevronRightIcon","ChevronLeftIcon","filter","tag","MLFLOW_INTERNAL_PREFIX","includes","entityNames","attributeOptions","label","m","p","t","boldedText","wholeText","shouldBeBold","textArray","RegExp","replace","match","item","index","str","re","clauses","results","lastIndex","exec","push","clause","getClausesAndStartIndex","forEach","clauseObj","entity","group","newOptions","toLowerCase","limitForGroup","ellipsized","slice"],"sourceRoot":""}