{"version":3,"file":"static/js/47.c3fdc3f4.chunk.js","mappings":"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","sources":["experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableGroupCell.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableNameCell.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableDatasetCell.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableSourceRunCell.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelActionsCell.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableRegisteredModelsCell.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableDatasetColHeader.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelTableSourceCell.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelListPageTableColumns.tsx","common/components/ag-grid/AgGridFontInjector.tsx","common/components/ag-grid/AgGrid.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageColumnSelector.tsx","experiment-tracking/components/experiment-logged-models/hooks/useLoggedModelsListPagePageState.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageTable.utils.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageTableContext.tsx","common/static/versions-empty.svg","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageTableEmpty.tsx","experiment-tracking/components/experiment-logged-models/ExperimentLoggedModelListPageTable.tsx","experiment-tracking/components/experiment-logged-models/hooks/useExperimentLoggedModelListPageRowVisibility.tsx"],"sourcesContent":["import { Button, ChevronDownIcon, ChevronRightIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { useExperimentLoggedModelListPageTableContext } from './ExperimentLoggedModelListPageTableContext';\nimport type { LoggedModelDataGroupDataRow } from './ExperimentLoggedModelListPageTable.utils';\nimport { LoggedModelsTableSpecialRowID } from './ExperimentLoggedModelListPageTable.utils';\nimport { FormattedMessage } from 'react-intl';\n\nexport const ExperimentLoggedModelTableGroupCell = ({ data }: { data: LoggedModelDataGroupDataRow }) => {\n  const { theme } = useDesignSystemTheme();\n  const { expandedGroups, onGroupToggle } = useExperimentLoggedModelListPageTableContext();\n\n  const groupId = data.groupUuid;\n  const isExpanded = expandedGroups?.includes(groupId);\n\n  return (\n    <div css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}>\n      <Button\n        icon={isExpanded ? <ChevronDownIcon /> : <ChevronRightIcon />}\n        componentId=\"mlflow.logged_model_table.group_toggle\"\n        onClick={() => onGroupToggle?.(groupId)}\n        size=\"small\"\n      />\n      {data.groupData?.sourceRun ? (\n        <Link\n          to={Routes.getRunPageRoute(data.groupData.sourceRun.info.experimentId, data.groupData.sourceRun.info.runUuid)}\n          target=\"_blank\"\n        >\n          {data.groupData.sourceRun.info.runName || data.groupData.sourceRun.info.runUuid}\n        </Link>\n      ) : null}\n      {groupId === LoggedModelsTableSpecialRowID.REMAINING_MODELS_GROUP ? (\n        <Typography.Text>\n          {/* Shouldn't really happen, but we should handle it gracefully */}\n          <FormattedMessage\n            defaultMessage=\"Ungrouped\"\n            description=\"Label for the group of logged models that are not grouped by any source run\"\n          />\n        </Typography.Text>\n      ) : null}\n    </div>\n  );\n};\n","import { Overflow, ParagraphSkeleton, Tag, Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport type { LoggedModelProto } from '../../types';\nimport { getStableColorForRun } from '../../utils/RunNameUtils';\nimport { RunColorPill } from '../experiment-page/components/RunColorPill';\nimport { ExperimentLoggedModelTableGroupCell } from './ExperimentLoggedModelTableGroupCell';\nimport type { LoggedModelsTableRow } from './ExperimentLoggedModelListPageTable.utils';\nimport {\n  isLoggedModelDataGroupDataRow,\n  isLoggedModelRow,\n  LoggedModelsTableGroupingEnabledClass,\n} from './ExperimentLoggedModelListPageTable.utils';\nimport { isSymbol } from 'lodash';\nimport { useExperimentLoggedModelRegisteredVersions } from './hooks/useExperimentLoggedModelRegisteredVersions';\nimport { FormattedMessage } from 'react-intl';\nimport React, { useMemo } from 'react';\nimport { shouldUnifyLoggedModelsAndRegisteredModels } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\n\nexport const ExperimentLoggedModelTableNameCell = (props: { data: LoggedModelsTableRow }) => {\n  const { theme } = useDesignSystemTheme();\n  const { data } = props;\n  const loggedModelData = isLoggedModelRow(data) ? (data as LoggedModelProto) : null;\n  const loggedModels = useMemo(() => (loggedModelData ? [loggedModelData] : []), [loggedModelData]);\n\n  const isUnifiedLoggedModelsEnabled = shouldUnifyLoggedModelsAndRegisteredModels();\n\n  const { modelVersions: allModelVersions, isLoading } = useExperimentLoggedModelRegisteredVersions({\n    loggedModels,\n    checkAcl: Boolean(loggedModelData) && isUnifiedLoggedModelsEnabled,\n  });\n\n  if (isSymbol(data)) {\n    return null;\n  }\n\n  if (isLoggedModelDataGroupDataRow(data)) {\n    return <ExperimentLoggedModelTableGroupCell data={data} />;\n  }\n\n  // Filter to only show models that the user has access to\n  const registeredModelVersions =\n    isUnifiedLoggedModelsEnabled && allModelVersions ? allModelVersions.filter((model) => model.hasAccess) : [];\n\n  const originalName = data.info?.name;\n\n  // Build tooltip content for original logged model info\n  const getTooltipContent = () => {\n    if (!isUnifiedLoggedModelsEnabled || registeredModelVersions.length === 0) {\n      return null;\n    }\n\n    const linkUrl =\n      data.info?.experiment_id && data.info?.model_id\n        ? Routes.getExperimentLoggedModelDetailsPageRoute(data.info.experiment_id, data.info.model_id)\n        : null;\n\n    if (!linkUrl) {\n      return (\n        <FormattedMessage\n          defaultMessage=\"Original logged model: {originalName}\"\n          description=\"Tooltip text showing the original logged model name\"\n          values={{ originalName }}\n        />\n      );\n    }\n\n    return (\n      <div>\n        <FormattedMessage\n          defaultMessage=\"Original logged model: {originalModelLink}\"\n          description=\"Tooltip text with link to the original logged model\"\n          values={{\n            originalModelLink: (\n              <Link to={linkUrl} css={{ color: 'inherit', textDecoration: 'underline' }}>\n                {originalName}\n              </Link>\n            ),\n          }}\n        />\n      </div>\n    );\n  };\n\n  const tooltipContent = getTooltipContent();\n\n  // Show loading spinner if ACL checking is in progress\n  if (isLoading && isUnifiedLoggedModelsEnabled) {\n    return (\n      <div\n        css={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: theme.spacing.sm,\n          width: '100%',\n          [`.${LoggedModelsTableGroupingEnabledClass} &`]: {\n            paddingLeft: theme.spacing.lg,\n          },\n        }}\n      >\n        <RunColorPill color={getStableColorForRun(data.info?.model_id || '')} />\n        <ParagraphSkeleton label=\"Loading...\" />\n      </div>\n    );\n  }\n\n  // If we have any registered models, show them; otherwise show original logged model\n  if (registeredModelVersions.length > 0) {\n    // If there's only one registered model, show it normally with the color pill\n    if (registeredModelVersions.length === 1) {\n      const primaryModel = registeredModelVersions[0];\n\n      const content = (\n        <div\n          css={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: theme.spacing.sm,\n            [`.${LoggedModelsTableGroupingEnabledClass} &`]: {\n              paddingLeft: theme.spacing.lg,\n            },\n          }}\n        >\n          <RunColorPill color={getStableColorForRun(data.info?.model_id || '')} />\n          <Link to={primaryModel.link} css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n            {primaryModel.displayedName}\n            <Tag\n              componentId=\"mlflow.logged_model.name_cell_version_tag\"\n              css={{ marginRight: 0, verticalAlign: 'middle' }}\n            >\n              v{primaryModel.version}\n            </Tag>\n          </Link>\n        </div>\n      );\n\n      return tooltipContent ? (\n        <Tooltip content={tooltipContent} componentId=\"mlflow.logged_model.name_cell_tooltip\">\n          {content}\n        </Tooltip>\n      ) : (\n        content\n      );\n    }\n\n    // If there are multiple registered models, show primary + overflow for the rest\n    const content = (\n      <div\n        css={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: theme.spacing.sm,\n          [`.${LoggedModelsTableGroupingEnabledClass} &`]: {\n            paddingLeft: theme.spacing.lg,\n          },\n        }}\n      >\n        <RunColorPill color={getStableColorForRun(data.info?.model_id || '')} />\n        <Overflow>\n          {registeredModelVersions.map((modelVersion) => (\n            <React.Fragment key={modelVersion.link}>\n              <Link to={modelVersion.link} css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n                {modelVersion.displayedName}\n                <Tag\n                  componentId=\"mlflow.logged_model.name_cell_version_tag\"\n                  css={{ marginRight: 0, verticalAlign: 'middle' }}\n                >\n                  v{modelVersion.version}\n                </Tag>\n              </Link>\n            </React.Fragment>\n          ))}\n        </Overflow>\n      </div>\n    );\n\n    return tooltipContent ? (\n      <Tooltip content={tooltipContent} componentId=\"mlflow.logged_model.name_cell_tooltip\">\n        {content}\n      </Tooltip>\n    ) : (\n      content\n    );\n  }\n\n  // Fallback to original logged model behavior\n  const linkUrl =\n    data.info?.experiment_id && data.info?.model_id\n      ? Routes.getExperimentLoggedModelDetailsPageRoute(data.info.experiment_id, data.info.model_id)\n      : null;\n\n  if (!linkUrl) {\n    return <>{originalName}</>;\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: theme.spacing.sm,\n        [`.${LoggedModelsTableGroupingEnabledClass} &`]: {\n          paddingLeft: theme.spacing.lg,\n        },\n      }}\n    >\n      <RunColorPill color={getStableColorForRun(data.info?.model_id || '')} />\n      <Link to={linkUrl}>{originalName}</Link>\n    </div>\n  );\n};\n","import { useMemo } from 'react';\n\nimport type { LoggedModelProto } from '../../types';\nimport { Overflow } from '@databricks/design-system';\nimport { ExperimentLoggedModelDatasetButton } from './ExperimentLoggedModelDatasetButton';\n\nexport const ExperimentLoggedModelTableDatasetCell = ({ data: loggedModel }: { data?: LoggedModelProto }) => {\n  const uniqueDatasets = useMemo(() => {\n    const allMetrics = loggedModel?.data?.metrics ?? [];\n    return allMetrics.reduce<{ dataset_name: string; dataset_digest: string; run_id: string | undefined }[]>(\n      (aggregate, { dataset_digest, dataset_name, run_id }) => {\n        if (\n          dataset_name &&\n          dataset_digest &&\n          !aggregate.find(\n            (dataset) => dataset.dataset_name === dataset_name && dataset.dataset_digest === dataset_digest,\n          )\n        ) {\n          aggregate.push({ dataset_name, dataset_digest, run_id });\n        }\n        return aggregate;\n      },\n      [],\n    );\n  }, [loggedModel]);\n\n  if (!uniqueDatasets.length) {\n    return <>-</>;\n  }\n\n  return (\n    <Overflow>\n      {uniqueDatasets.map(({ dataset_digest, dataset_name, run_id }) => (\n        <ExperimentLoggedModelDatasetButton\n          datasetName={dataset_name}\n          datasetDigest={dataset_digest}\n          runId={run_id ?? null}\n          key={[dataset_name, dataset_digest].join('.')}\n        />\n      ))}\n    </Overflow>\n  );\n};\n","import type { GraphQLExperimentRun, LoggedModelProto } from '../../types';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\n\ninterface LoggedModelWithSourceRun extends LoggedModelProto {\n  sourceRun?: GraphQLExperimentRun;\n}\n\nexport const ExperimentLoggedModelTableSourceRunCell = ({ data }: { data: LoggedModelWithSourceRun }) => {\n  if (data.info?.experiment_id && data.info?.source_run_id) {\n    return (\n      <Link to={Routes.getRunPageRoute(data.info?.experiment_id, data.info?.source_run_id)} target=\"_blank\">\n        {data.sourceRun?.info?.runName ?? data.info?.source_run_id}\n      </Link>\n    );\n  }\n  return data.info?.source_run_id || <>-</>;\n};\n","import { Button, DashIcon, DropdownMenu, useDesignSystemTheme, VisibleOffIcon } from '@databricks/design-system';\nimport { type LoggedModelProto } from '../../types';\nimport { useExperimentLoggedModelListPageRowVisibilityContext } from './hooks/useExperimentLoggedModelListPageRowVisibility';\nimport { ReactComponent as VisibleFillIcon } from '../../../common/static/icon-visible-fill.svg';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RUNS_VISIBILITY_MODE } from '../experiment-page/models/ExperimentPageUIState';\nimport { coerceToEnum } from '@databricks/web-shared/utils';\n\nexport const ExperimentLoggedModelActionsCell = ({ data, rowIndex }: { data: LoggedModelProto; rowIndex: number }) => {\n  const { isRowHidden, toggleRowVisibility } = useExperimentLoggedModelListPageRowVisibilityContext();\n  const isHidden = isRowHidden(data.info?.model_id ?? '', rowIndex);\n  const { theme } = useDesignSystemTheme();\n  return (\n    <Button\n      componentId=\"mlflow.logged_model.list_page.row_visibility_toggle\"\n      type=\"link\"\n      onClick={() => toggleRowVisibility(data.info?.model_id ?? '', rowIndex)}\n      icon={\n        isHidden ? (\n          <VisibleOffIcon css={{ color: theme.colors.textSecondary }} />\n        ) : (\n          <VisibleFillIcon css={{ color: theme.colors.textSecondary }} />\n        )\n      }\n    />\n  );\n};\n\nexport const ExperimentLoggedModelActionsHeaderCell = () => {\n  const intl = useIntl();\n  const { visibilityMode, usingCustomVisibility, setRowVisibilityMode } =\n    useExperimentLoggedModelListPageRowVisibilityContext();\n  const { theme } = useDesignSystemTheme();\n  return (\n    <DropdownMenu.Root modal={false}>\n      <DropdownMenu.Trigger asChild>\n        <Button\n          componentId=\"mlflow.logged_model.list_page.global_row_visibility_toggle\"\n          type=\"link\"\n          data-testid=\"experiment-view-runs-visibility-column-header\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Toggle visibility of rows',\n            description:\n              'Accessibility label for the button that toggles visibility of rows in the experiment view logged models compare mode',\n          })}\n        >\n          {visibilityMode === RUNS_VISIBILITY_MODE.HIDEALL ? (\n            <VisibleOffIcon css={{ color: theme.colors.textSecondary }} />\n          ) : (\n            <VisibleFillIcon css={{ color: theme.colors.textSecondary }} />\n          )}\n        </Button>\n      </DropdownMenu.Trigger>\n\n      <DropdownMenu.Content>\n        <DropdownMenu.RadioGroup\n          componentId=\"mlflow.logged_model.list_page.global_row_visibility_toggle.options\"\n          value={visibilityMode}\n          onValueChange={(e) =>\n            setRowVisibilityMode(coerceToEnum(RUNS_VISIBILITY_MODE, e, RUNS_VISIBILITY_MODE.FIRST_10_RUNS))\n          }\n        >\n          <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.FIRST_10_RUNS}>\n            {/* Dropdown menu does not support indeterminate state, so we're doing it manually */}\n            <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n            <FormattedMessage\n              defaultMessage=\"Show first 10\"\n              description=\"Menu option for showing only 10 first runs in the experiment view runs compare mode\"\n            />\n          </DropdownMenu.RadioItem>\n          <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.FIRST_20_RUNS}>\n            <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n            <FormattedMessage\n              defaultMessage=\"Show first 20\"\n              description=\"Menu option for showing only 10 first runs in the experiment view runs compare mode\"\n            />\n          </DropdownMenu.RadioItem>\n          <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.SHOWALL}>\n            <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n            <FormattedMessage\n              defaultMessage=\"Show all runs\"\n              description=\"Menu option for revealing all hidden runs in the experiment view runs compare mode\"\n            />\n          </DropdownMenu.RadioItem>\n          <DropdownMenu.RadioItem value={RUNS_VISIBILITY_MODE.HIDEALL}>\n            <DropdownMenu.ItemIndicator>{usingCustomVisibility ? <DashIcon /> : null}</DropdownMenu.ItemIndicator>\n            <FormattedMessage\n              defaultMessage=\"Hide all runs\"\n              description=\"Menu option for revealing all hidden runs in the experiment view runs compare mode\"\n            />\n          </DropdownMenu.RadioItem>\n        </DropdownMenu.RadioGroup>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import type { LoggedModelProto } from '../../types';\nimport { GraphQLExperimentRun } from '../../types';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { useExperimentLoggedModelRegisteredVersions } from './hooks/useExperimentLoggedModelRegisteredVersions';\nimport { isEmpty } from 'lodash';\nimport React, { useMemo } from 'react';\nimport { Overflow, Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../common/static/registered-model-grey-ok.svg';\n\nexport const ExperimentLoggedModelTableRegisteredModelsCell = ({ data }: { data: LoggedModelProto }) => {\n  const { theme } = useDesignSystemTheme();\n\n  const loggedModels = useMemo(() => [data], [data]);\n\n  const { modelVersions } = useExperimentLoggedModelRegisteredVersions({ loggedModels });\n\n  if (!isEmpty(modelVersions)) {\n    return (\n      <Overflow>\n        {modelVersions.map((modelVersion) => (\n          <React.Fragment key={modelVersion.link}>\n            <Link to={modelVersion.link} css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n              <RegisteredModelOkIcon />\n              {modelVersion.displayedName}\n              <Tag\n                componentId=\"mlflow.logged_model.list.registered_model_cell_version_tag\"\n                css={{ marginRight: 0, verticalAlign: 'middle' }}\n              >\n                v{modelVersion.version}\n              </Tag>\n            </Link>\n          </React.Fragment>\n        ))}\n      </Overflow>\n    );\n  }\n  return '-';\n};\n","import { useMemo, useState } from 'react';\n\nimport type { LoggedModelProto } from '../../types';\nimport { Overflow, Spinner, TableIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { ExperimentLoggedModelDatasetButton } from './ExperimentLoggedModelDatasetButton';\nimport type { ColumnGroup } from '@ag-grid-community/core';\nimport { useExperimentLoggedModelOpenDatasetDetails } from './hooks/useExperimentLoggedModelOpenDatasetDetails';\nimport { FormattedMessage } from 'react-intl';\n\nexport const createLoggedModelDatasetColumnGroupId = (datasetName?: string, datasetDigest?: string, runId?: string) =>\n  `metrics.${JSON.stringify([datasetName, datasetDigest, runId])}`;\nconst parseLoggedModelDatasetColumnGroupId = (groupId: string) => {\n  try {\n    const match = groupId.match(/metrics\\.(.+)/);\n    if (!match) {\n      return null;\n    }\n    const datasetHash = match[1];\n    const [datasetName, datasetDigest, runId] = JSON.parse(datasetHash);\n    if (!datasetName || !datasetDigest) {\n      return null;\n    }\n    return { datasetName, datasetDigest, runId };\n  } catch {\n    return null;\n  }\n};\n\nexport const ExperimentLoggedModelTableDatasetColHeader = ({ columnGroup }: { columnGroup: ColumnGroup }) => {\n  const { onDatasetClicked } = useExperimentLoggedModelOpenDatasetDetails();\n  const { theme } = useDesignSystemTheme();\n  const [loading, setLoading] = useState(false);\n\n  const datasetObject = useMemo(() => {\n    try {\n      const groupId = columnGroup.getGroupId();\n      return groupId ? parseLoggedModelDatasetColumnGroupId(groupId) : null;\n    } catch {\n      return null;\n    }\n  }, [columnGroup]);\n  if (!datasetObject) {\n    return (\n      <FormattedMessage\n        defaultMessage=\"No dataset\"\n        description=\"Label for the metrics column group header that are not grouped by dataset\"\n      />\n    );\n  }\n  return (\n    <span css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs, overflow: 'hidden' }}>\n      Dataset:{' '}\n      <Typography.Link\n        css={{\n          '.anticon': {\n            fontSize: theme.general.iconFontSize,\n          },\n          fontSize: theme.typography.fontSizeBase,\n          fontWeight: 'normal',\n          display: 'flex',\n          alignItems: 'center',\n          gap: theme.spacing.xs,\n        }}\n        role=\"button\"\n        componentId=\"mlflow.logged_model.list.metric_by_dataset_column_header\"\n        onClick={async () => {\n          setLoading(true);\n          try {\n            await onDatasetClicked({\n              datasetName: datasetObject.datasetName,\n              datasetDigest: datasetObject.datasetDigest,\n              runId: datasetObject.runId,\n            });\n          } finally {\n            setLoading(false);\n          }\n        }}\n      >\n        {loading ? <Spinner size=\"small\" /> : <TableIcon />}\n        {datasetObject.datasetName} (#{datasetObject.datasetDigest})\n      </Typography.Link>\n    </span>\n  );\n};\n","import type { LoggedModelProto } from '../../types';\nimport { ExperimentLoggedModelSourceBox } from './ExperimentLoggedModelSourceBox';\n\n/**\n * A cell renderer/wrapper component for displaying the model's source in logged models table.\n */\nexport const ExperimentLoggedModelTableSourceCell = ({ data }: { data: LoggedModelProto }) => {\n  return <ExperimentLoggedModelSourceBox loggedModel={data} />;\n};\n","import type { ColDef, ColGroupDef } from '@ag-grid-community/core';\nimport { useMemo, useRef } from 'react';\nimport { useIntl } from 'react-intl';\nimport { ExperimentLoggedModelTableNameCell } from '../ExperimentLoggedModelTableNameCell';\nimport { ExperimentLoggedModelTableDateCell } from '../ExperimentLoggedModelTableDateCell';\nimport { ExperimentLoggedModelStatusIndicator } from '../ExperimentLoggedModelStatusIndicator';\nimport { ExperimentLoggedModelTableDatasetCell } from '../ExperimentLoggedModelTableDatasetCell';\nimport type { LoggedModelProto } from '../../../types';\nimport { compact, isEqual, values, uniq, orderBy, isObject } from 'lodash';\nimport { ExperimentLoggedModelTableSourceRunCell } from '../ExperimentLoggedModelTableSourceRunCell';\nimport {\n  ExperimentLoggedModelActionsCell,\n  ExperimentLoggedModelActionsHeaderCell,\n} from '../ExperimentLoggedModelActionsCell';\nimport { ExperimentLoggedModelTableRegisteredModelsCell } from '../ExperimentLoggedModelTableRegisteredModelsCell';\nimport {\n  createLoggedModelDatasetColumnGroupId,\n  ExperimentLoggedModelTableDatasetColHeader,\n} from '../ExperimentLoggedModelTableDatasetColHeader';\nimport { ExperimentLoggedModelTableSourceCell } from '../ExperimentLoggedModelTableSourceCell';\nimport { shouldUnifyLoggedModelsAndRegisteredModels } from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport {\n  LoggedModelsTableGroupHeaderRowClass,\n  type LoggedModelsTableRow,\n} from '../ExperimentLoggedModelListPageTable.utils';\n\n/**\n * Utility hook that memoizes value based on deep comparison.\n * Helps to regenerate columns only if underlying dependencies change.\n */\nconst useMemoizeColumns = <T,>(factory: () => T, deps: unknown[], disable?: boolean): T => {\n  const ref = useRef<{ deps: unknown[]; value: T }>();\n\n  if (!ref.current || (!isEqual(deps, ref.current.deps) && !disable)) {\n    ref.current = { deps, value: factory() };\n  }\n\n  return ref.current.value;\n};\n\nexport enum ExperimentLoggedModelListPageKnownColumnGroups {\n  Attributes = 'attributes',\n  Params = 'params',\n}\n\nexport enum ExperimentLoggedModelListPageKnownColumns {\n  RelationshipType = 'relationship_type',\n  Step = 'step',\n  Select = 'select',\n  Name = 'name',\n  Status = 'status',\n  CreationTime = 'creation_time',\n  Source = 'source',\n  SourceRun = 'source_run_id',\n  RegisteredModels = 'registered_models',\n  Dataset = 'dataset',\n}\n\nexport const LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX = 'metrics.';\n\nexport const ExperimentLoggedModelListPageStaticColumns: string[] = [\n  ExperimentLoggedModelListPageKnownColumns.Select,\n  ExperimentLoggedModelListPageKnownColumns.Name,\n  ExperimentLoggedModelListPageKnownColumns.CreationTime,\n];\n\nconst createDatasetHash = (datasetName?: string, datasetDigest?: string) => {\n  if (!datasetName || !datasetDigest) {\n    return '';\n  }\n  return JSON.stringify([datasetName, datasetDigest]);\n};\n\n// Creates a metric column ID based on the metric key and optional dataset name and digest.\n// The ID format is:\n// - `metrics.<datasetHash>.<metricKey>` for metrics grouped by dataset\n// - `metrics.<metricKey>` for ungrouped metrics\n// The dataset hash is created using the dataset name and digest: [datasetName, datasetDigest]\nconst createLoggedModelMetricOrderByColumnId = (metricKey: string, datasetName?: string, datasetDigest?: string) => {\n  const isUngroupedMetricColumn = !datasetName || !datasetDigest;\n  if (isUngroupedMetricColumn) {\n    return `${LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX}${metricKey}`;\n  }\n  return `${LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX}${createDatasetHash(datasetName, datasetDigest)}.${metricKey}`;\n};\n\n// Parse `metrics.<datasetHash>.<metricKey>` format\n// and return dataset name, digest and metric key.\n// Make it fall back to default values on error.\nexport const parseLoggedModelMetricOrderByColumnId = (metricColumnId: string) => {\n  const match = metricColumnId.match(/metrics\\.(.*?)(?:\\.(.*))?$/);\n  try {\n    if (match) {\n      const [, datasetHashOrMetricKey, metricKey] = match;\n      if (!metricKey) {\n        return { datasetName: undefined, datasetDigest: undefined, metricKey: datasetHashOrMetricKey };\n      }\n      const [datasetName, datasetDigest] = JSON.parse(datasetHashOrMetricKey);\n      return { datasetName, datasetDigest, metricKey };\n    }\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Failed to parse metric column ID', error);\n  }\n  return { datasetName: undefined, datasetDigest: undefined, metricKey: metricColumnId };\n};\n\n/**\n * Iterate through all logged models and metrics grouped by datasets.\n * Each group is identified by a hashed combination of dataset name and digest.\n * For metrics without dataset, use empty string as a key.\n * The result is a map of dataset hashes to an object containing the dataset name, digest, metrics\n * and the first run ID found for that dataset.\n */\nconst extractMetricGroups = (loggedModels: LoggedModelProto[]) => {\n  const result: Record<string, { datasetDigest?: string; datasetName?: string; runId?: string; metrics: string[] }> =\n    {};\n  for (const loggedModel of orderBy(loggedModels, (model) => model.info?.model_id)) {\n    for (const metric of loggedModel?.data?.metrics ?? []) {\n      if (!metric.key) {\n        continue;\n      }\n      const datasetHash =\n        metric.dataset_name && metric.dataset_digest\n          ? createDatasetHash(metric.dataset_name, metric.dataset_digest)\n          : '';\n\n      if (!result[datasetHash]) {\n        result[datasetHash] = {\n          datasetName: metric.dataset_name,\n          datasetDigest: metric.dataset_digest,\n          // We use first found run ID, as it will be used for dataset fetching.\n          runId: metric.run_id,\n          metrics: [],\n        };\n      }\n      if (result[datasetHash] && !result[datasetHash].metrics.includes(metric.key)) {\n        result[datasetHash].metrics.push(metric.key);\n      }\n    }\n  }\n  return result;\n};\n\nconst defaultColumnSet = [\n  ExperimentLoggedModelListPageKnownColumns.Name,\n  ExperimentLoggedModelListPageKnownColumns.Status,\n  ExperimentLoggedModelListPageKnownColumns.CreationTime,\n  ExperimentLoggedModelListPageKnownColumns.Source,\n  ExperimentLoggedModelListPageKnownColumns.SourceRun,\n  ExperimentLoggedModelListPageKnownColumns.RegisteredModels,\n  ExperimentLoggedModelListPageKnownColumns.Dataset,\n];\n\n/**\n * Returns the columns for the logged model list table.\n * Metric column IDs follow the structure:\n * - `metrics.<datasetName>.<metricKey>` for metrics grouped by dataset\n * - `metrics.<metricKey>` for ungrouped metrics\n */\nexport const useExperimentLoggedModelListPageTableColumns = ({\n  columnVisibility = {},\n  supportedAttributeColumnKeys = defaultColumnSet,\n  loggedModels = [],\n  disablePinnedColumns = false,\n  disableOrderBy = false,\n  enableSortingByMetrics,\n  orderByColumn,\n  orderByAsc,\n  isLoading,\n}: {\n  loggedModels?: LoggedModelProto[];\n  columnVisibility?: Record<string, boolean>;\n  disablePinnedColumns?: boolean;\n  supportedAttributeColumnKeys?: string[];\n  disableOrderBy?: boolean;\n  enableSortingByMetrics?: boolean;\n  orderByColumn?: string;\n  orderByAsc?: boolean;\n  isLoading?: boolean;\n}) => {\n  const datasetMetricGroups = useMemo(() => extractMetricGroups(loggedModels), [loggedModels]);\n\n  const parameterKeys = useMemo(\n    () => compact(uniq(loggedModels.map((loggedModel) => loggedModel?.data?.params?.map((param) => param.key)).flat())),\n    [loggedModels],\n  );\n\n  const intl = useIntl();\n\n  return useMemoizeColumns(\n    () => {\n      const isUnifiedLoggedModelsEnabled = shouldUnifyLoggedModelsAndRegisteredModels();\n\n      const attributeColumns: ColDef[] = [\n        {\n          colId: ExperimentLoggedModelListPageKnownColumns.RelationshipType,\n          headerName: 'Type',\n          sortable: false,\n          valueGetter: ({ data }) => {\n            return data.direction === 'input'\n              ? intl.formatMessage({\n                  defaultMessage: 'Input',\n                  description:\n                    'Label indicating that the logged model was the input of the experiment run. Displayed in logged model list table on the run page.',\n                })\n              : intl.formatMessage({\n                  defaultMessage: 'Output',\n                  description:\n                    'Label indicating that the logged model was the output of the experiment run Displayed in logged model list table on the run page.',\n                });\n          },\n          pinned: !disablePinnedColumns ? 'left' : undefined,\n          resizable: false,\n          width: 100,\n        },\n        {\n          colId: ExperimentLoggedModelListPageKnownColumns.Step,\n          headerName: intl.formatMessage({\n            defaultMessage: 'Step',\n            description:\n              'Header title for the step column in the logged model list table. Step indicates the run step where the model was logged.',\n          }),\n          field: 'step',\n          valueGetter: ({ data }) => data.step ?? '-',\n          pinned: !disablePinnedColumns ? 'left' : undefined,\n          resizable: false,\n          width: 60,\n        },\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Model name',\n            description: 'Header title for the model name column in the logged model list table',\n          }),\n          colId: ExperimentLoggedModelListPageKnownColumns.Name,\n          cellRenderer: ExperimentLoggedModelTableNameCell,\n          cellClass: ({ data }: { data: LoggedModelsTableRow }) => {\n            return isObject(data) && 'isGroup' in data ? LoggedModelsTableGroupHeaderRowClass : '';\n          },\n          resizable: true,\n          pinned: !disablePinnedColumns ? 'left' : undefined,\n          minWidth: 140,\n          flex: 1,\n        },\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Status',\n            description: 'Header title for the status column in the logged model list table',\n          }),\n          cellRenderer: ExperimentLoggedModelStatusIndicator,\n          colId: ExperimentLoggedModelListPageKnownColumns.Status,\n          pinned: !disablePinnedColumns ? 'left' : undefined,\n          width: 140,\n          resizable: false,\n        },\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Created',\n            description: 'Header title for the creation timestamp column in the logged model list table',\n          }),\n          field: 'info.creation_timestamp_ms',\n          colId: ExperimentLoggedModelListPageKnownColumns.CreationTime,\n          cellRenderer: ExperimentLoggedModelTableDateCell,\n          resizable: true,\n          pinned: !disablePinnedColumns ? 'left' : undefined,\n          sortable: !disableOrderBy,\n          sortingOrder: ['desc', 'asc'],\n          comparator: () => 0,\n        },\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Logged from',\n            description: \"Header title for the 'Logged from' column in the logged model list table\",\n          }),\n          colId: ExperimentLoggedModelListPageKnownColumns.Source,\n          cellRenderer: ExperimentLoggedModelTableSourceCell,\n          resizable: true,\n        },\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Source run',\n            description: 'Header title for the source run column in the logged model list table',\n          }),\n          colId: ExperimentLoggedModelListPageKnownColumns.SourceRun,\n          cellRenderer: ExperimentLoggedModelTableSourceRunCell,\n          resizable: true,\n        },\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Registered models',\n            description: 'Header title for the registered models column in the logged model list table',\n          }),\n          colId: ExperimentLoggedModelListPageKnownColumns.RegisteredModels,\n          cellRenderer: ExperimentLoggedModelTableRegisteredModelsCell,\n          resizable: true,\n        },\n\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Dataset',\n            description: 'Header title for the dataset column in the logged model list table',\n          }),\n          colId: ExperimentLoggedModelListPageKnownColumns.Dataset,\n          cellRenderer: ExperimentLoggedModelTableDatasetCell,\n          resizable: true,\n        },\n      ];\n\n      const columnDefs: ColGroupDef[] = [\n        {\n          groupId: 'attributes',\n          headerName: intl.formatMessage({\n            defaultMessage: 'Model attributes',\n            description: 'Header title for the model attributes section of the logged model list table',\n          }),\n          children: attributeColumns.filter((column) => {\n            // Exclude registered models column when unified logged models feature is enabled\n            if (\n              isUnifiedLoggedModelsEnabled &&\n              column.colId === ExperimentLoggedModelListPageKnownColumns.RegisteredModels\n            ) {\n              return false;\n            }\n            return !column.colId || supportedAttributeColumnKeys.includes(column.colId);\n          }),\n        },\n      ];\n\n      const metricGroups = orderBy(values(datasetMetricGroups), (group) => group?.datasetName);\n\n      metricGroups.forEach(({ datasetDigest, datasetName, runId, metrics }) => {\n        const isUngroupedMetricColumn = !datasetName || !datasetDigest;\n        const headerName = isUngroupedMetricColumn ? '' : `${datasetName} (#${datasetDigest})`;\n        columnDefs.push({\n          headerName,\n          groupId: createLoggedModelDatasetColumnGroupId(datasetName, datasetDigest, runId),\n          headerGroupComponent: ExperimentLoggedModelTableDatasetColHeader,\n          children:\n            metrics?.map((metricKey) => {\n              const metricColumnId = createLoggedModelMetricOrderByColumnId(metricKey, datasetName, datasetDigest);\n              return {\n                headerName: metricKey,\n                hide: columnVisibility[metricColumnId] === false,\n                colId: metricColumnId,\n                valueGetter: ({ data }: { data: LoggedModelProto }) => {\n                  // NB: Looping through metric values might not seem to be most efficient, but considering the number\n                  // metrics we render on the screen it might be more efficient than creating a lookup table.\n                  // Might be revisited if performance becomes an issue.\n                  for (const metric of data.data?.metrics ?? []) {\n                    if (metric.key === metricKey) {\n                      if (metric.dataset_name === datasetName || (!datasetName && !metric.dataset_name)) {\n                        return metric.value;\n                      }\n                    }\n                  }\n                  return undefined;\n                },\n                resizable: true,\n                sortable: enableSortingByMetrics && !disableOrderBy,\n                sortingOrder: ['desc', 'asc'],\n                comparator: () => 0,\n                sort: enableSortingByMetrics && metricColumnId === orderByColumn ? (orderByAsc ? 'asc' : 'desc') : null,\n              };\n            }) ?? [],\n        });\n      });\n\n      if (parameterKeys.length > 0) {\n        columnDefs.push({\n          headerName: intl.formatMessage({\n            defaultMessage: 'Parameters',\n            description: 'Header title for the parameters section of the logged model list table',\n          }),\n          groupId: 'params',\n          children: parameterKeys.map((paramKey) => ({\n            headerName: paramKey,\n            colId: `params.${paramKey}`,\n            hide: columnVisibility[`params.${paramKey}`] === false,\n            valueGetter: ({ data }: { data: LoggedModelProto }) => {\n              for (const param of data.data?.params ?? []) {\n                if (param.key === paramKey) {\n                  return param.value;\n                }\n              }\n              return undefined;\n            },\n            resizable: true,\n          })),\n        });\n      }\n\n      const compactColumnDefs = [\n        {\n          headerCheckboxSelection: false,\n          checkboxSelection: false,\n          width: 40,\n          maxWidth: 40,\n          resizable: false,\n          colId: ExperimentLoggedModelListPageKnownColumns.Select,\n          cellRenderer: ExperimentLoggedModelActionsCell,\n          headerComponent: ExperimentLoggedModelActionsHeaderCell,\n          flex: undefined,\n        },\n        {\n          headerName: intl.formatMessage({\n            defaultMessage: 'Model name',\n            description: 'Header title for the model name column in the logged model list table',\n          }),\n          colId: ExperimentLoggedModelListPageKnownColumns.Name,\n          cellRenderer: ExperimentLoggedModelTableNameCell,\n          resizable: true,\n          flex: 1,\n        },\n      ];\n\n      return { columnDefs, compactColumnDefs };\n    },\n    [datasetMetricGroups, parameterKeys, supportedAttributeColumnKeys],\n    // Do not recreate column definitions if logged models are being loaded, e.g. due to changing sort order\n    isLoading,\n  );\n};\n","import { useEffect, useRef } from 'react';\n\n// eslint-disable-next-line max-len\nconst stylesContent = `@font-face { font-family: \"agGridBalham\"; src: url(\"data:application/font-woff;charset=utf-8;base64,\") format(\"woff\"); font-weight: normal; font-style: normal; }`;\n\n/**\n * Embedding agGrid inside shadow DOM imposes a problem with its embedded fonts\n * that are not being present on the main document level which results in erroneous\n * checkbox rendering. This components checks if the component is being rendered inside\n * shadow DOM part and if true, it reinjects the snapshotted agGrid styles later on.\n */\nexport const AgGridFontInjector = () => {\n  const domElementReference = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    if (domElementReference.current && domElementReference.current.getRootNode() !== document) {\n      const injectedStyleElement = document.createElement('style');\n      injectedStyleElement.className = `ag-grid-snapshot-base-css`;\n      injectedStyleElement.appendChild(document.createTextNode(stylesContent));\n      document.head.appendChild(injectedStyleElement);\n\n      return () => injectedStyleElement.remove();\n    }\n\n    return () => {};\n  }, []);\n\n  return <span ref={domElementReference} />;\n};\n","import { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\nimport type { AgGridReactProps, AgReactUiProps } from '@ag-grid-community/react/main';\nimport { AgGridReact } from '@ag-grid-community/react/main';\nimport '@ag-grid-community/core/dist/styles/ag-grid.css';\nimport '@ag-grid-community/core/dist/styles/ag-theme-balham.css';\nimport { AgGridFontInjector } from './AgGridFontInjector';\n\n/**\n * A local wrapper component that embeds imported AgGrid instance.\n * Extracted to a separate module to ensure that it will be in placed a single chunk.\n */\nconst MLFlowAgGrid = (props: AgGridReactProps | AgReactUiProps) => (\n  <>\n    <AgGridFontInjector />\n    <AgGridReact modules={[ClientSideRowModelModule]} {...props} />\n  </>\n);\n\nexport default MLFlowAgGrid;\n","import type { TreeDataNode } from '@databricks/design-system';\nimport { Button, ColumnsIcon, DropdownMenu, Tree, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport { compact } from 'lodash';\nimport { useMemo } from 'react';\nimport {\n  ExperimentLoggedModelListPageKnownColumnGroups,\n  ExperimentLoggedModelListPageStaticColumns,\n  LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX,\n} from './hooks/useExperimentLoggedModelListPageTableColumns';\n\ninterface BasicColumnDef {\n  colId?: string;\n  groupId?: string;\n  headerName?: string;\n  children?: BasicColumnDef[];\n}\n\nconst METRIC_AGGREGATE_GROUP_ID = 'all_metrics';\n\nconst defaultExpandedTreeGroups = [\n  ExperimentLoggedModelListPageKnownColumnGroups.Attributes,\n  METRIC_AGGREGATE_GROUP_ID,\n];\n\nexport const ExperimentLoggedModelListPageColumnSelector = ({\n  onUpdateColumns,\n  columnVisibility = {},\n  columnDefs,\n  disabled,\n  customTrigger,\n}: {\n  onUpdateColumns: (columnVisibility: Record<string, boolean>) => void;\n  columnVisibility?: Record<string, boolean>;\n  columnDefs?: BasicColumnDef[];\n  disabled?: boolean;\n  customTrigger?: React.ReactNode;\n}) => {\n  const intl = useIntl();\n\n  // Calculate the tree data for the column selector\n  const { leafColumnIds = [], treeData = [] } = useMemo(() => {\n    // If there are no column definitions, return an empty tree\n    if (!columnDefs) {\n      return {};\n    }\n\n    // We need to regroup columns so all dataset metric groups are included in another subtree\n    const groupedColumnDefinitions: BasicColumnDef[] = [];\n\n    // First, add the attribute column group\n    const attributeColumnGroup = columnDefs.find(\n      (col) => col.groupId === ExperimentLoggedModelListPageKnownColumnGroups.Attributes,\n    );\n\n    if (attributeColumnGroup) {\n      groupedColumnDefinitions.push({\n        ...attributeColumnGroup,\n        // Filter out the static columns\n        children: attributeColumnGroup.children?.filter(\n          ({ colId }) => colId && !ExperimentLoggedModelListPageStaticColumns.includes(colId),\n        ),\n      });\n    }\n\n    // Next, get all the dataset-grouped metric column groups\n    const metricColumnGroups = columnDefs\n      .filter((col) => col.groupId?.startsWith(LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX))\n      .map((col) => ({\n        ...col,\n        headerName: col.headerName\n          ? `Dataset: ${col.headerName}`\n          : intl.formatMessage({\n              defaultMessage: 'No dataset',\n              description: 'Label for the ungrouped metrics column group in the logged model column selector',\n            }),\n      }));\n\n    // Aggregate all metric column groups into a single group\n    if (metricColumnGroups.length > 0) {\n      groupedColumnDefinitions.push({\n        groupId: METRIC_AGGREGATE_GROUP_ID,\n        headerName: intl.formatMessage({\n          defaultMessage: 'Metrics',\n          description: 'Label for the metrics column group in the logged model column selector',\n        }),\n        children: metricColumnGroups,\n      });\n    }\n\n    // In the end, add the parameter column group\n    const paramColumnGroup = columnDefs.find(\n      (col) => col.groupId === ExperimentLoggedModelListPageKnownColumnGroups.Params,\n    );\n\n    if (paramColumnGroup) {\n      groupedColumnDefinitions.push(paramColumnGroup);\n    }\n\n    const leafColumnIds: string[] = [];\n\n    // Function for building tree branches recursively\n    const buildDuboisTreeBranch = (col: BasicColumnDef): TreeDataNode => {\n      if (col.colId) {\n        leafColumnIds.push(col.colId);\n      }\n      return {\n        key: col.groupId ?? col.colId ?? '',\n        title: col.headerName ?? '',\n        children: compact(col.children?.map(buildDuboisTreeBranch) ?? []),\n      };\n    };\n\n    // Build a tree root for a column groups\n    const treeData = compact(groupedColumnDefinitions?.map((col) => buildDuboisTreeBranch(col)) ?? []);\n\n    return {\n      leafColumnIds,\n      treeData,\n    };\n  }, [columnDefs, intl]);\n\n  const treeCheckChangeHandler: React.ComponentProps<typeof Tree>['onCheck'] = (checkedKeys) => {\n    // Extract key data conforming to unusual antd API\n    const keys = 'checked' in checkedKeys ? checkedKeys.checked : checkedKeys;\n\n    // Start with empty visibility map\n    const columnVisibility: Record<string, boolean> = {};\n\n    // Go through all leaf columns and set visibility based on the checked keys.\n    // We use one-way visibility flag, i.e. use only \"false\" to hide a column.\n    for (const key of leafColumnIds) {\n      if (!keys.includes(key)) {\n        columnVisibility[key] = false;\n      }\n    }\n\n    // Call the update handler\n    onUpdateColumns(columnVisibility);\n  };\n\n  return (\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger asChild disabled={disabled}>\n        {customTrigger ?? (\n          <Button componentId=\"mlflow.logged_model.list.columns\" icon={<ColumnsIcon />} disabled={disabled}>\n            <FormattedMessage\n              defaultMessage=\"Columns\"\n              description=\"Label for the column selector button in the logged model list page\"\n            />\n          </Button>\n        )}\n      </DropdownMenu.Trigger>\n      <DropdownMenu.Content css={{ maxHeight: 500, paddingRight: 32 }}>\n        <Tree\n          treeData={treeData}\n          mode=\"checkable\"\n          showLine\n          defaultExpandedKeys={defaultExpandedTreeGroups}\n          // By default, check all columns that are visible\n          defaultCheckedKeys={leafColumnIds.filter((colId) => columnVisibility[colId] !== false)}\n          onCheck={treeCheckChangeHandler}\n        />\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import { first, isEmpty, isEqual } from 'lodash';\nimport { useCallback, useReducer, useState } from 'react';\nimport { RUNS_VISIBILITY_MODE } from '../../experiment-page/models/ExperimentPageUIState';\nimport { isLoggedModelRowHidden } from './useExperimentLoggedModelListPageRowVisibility';\nimport type { LoggedModelMetricDataset } from '../../../types';\nimport { ExperimentLoggedModelListPageKnownColumns } from './useExperimentLoggedModelListPageTableColumns';\nimport { useSafeDeferredValue } from '../../../../common/hooks/useSafeDeferredValue';\nimport type { LoggedModelsTableGroupByMode } from '../ExperimentLoggedModelListPageTable.utils';\n\ntype ActionType =\n  | { type: 'SET_ORDER_BY'; orderByColumn: string; orderByAsc: boolean }\n  | { type: 'SET_GROUP_BY'; groupBy?: LoggedModelsTableGroupByMode }\n  | { type: 'SET_COLUMN_VISIBILITY'; columnVisibility: Record<string, boolean> }\n  | { type: 'TOGGLE_DATASET'; dataset: LoggedModelMetricDataset }\n  | { type: 'CLEAR_DATASETS' }\n  | { type: 'SET_RUN_VISIBILITY'; visibilityMode?: RUNS_VISIBILITY_MODE; rowUuid?: string; rowIndex?: number };\n\n/**\n * Defines current state of the logged models table.\n */\nexport type LoggedModelsListPageState = {\n  orderByColumn?: string;\n  orderByAsc: boolean;\n  columnVisibility?: Record<string, boolean>;\n  rowVisibilityMode: RUNS_VISIBILITY_MODE;\n  rowVisibilityMap?: Record<string, boolean>;\n  selectedFilterDatasets?: LoggedModelMetricDataset[];\n  searchQuery?: string;\n  groupBy?: LoggedModelsTableGroupByMode;\n};\n\nexport const LoggedModelsListPageSortableColumns: string[] = [ExperimentLoggedModelListPageKnownColumns.CreationTime];\n\n/**\n * Provides state management for the logged models table.\n */\nexport const useLoggedModelsListPageState = () => {\n  const [state, dispatch] = useReducer(\n    (state: LoggedModelsListPageState, action: ActionType): LoggedModelsListPageState => {\n      if (action.type === 'SET_ORDER_BY') {\n        return { ...state, orderByColumn: action.orderByColumn, orderByAsc: action.orderByAsc };\n      }\n      if (action.type === 'SET_GROUP_BY') {\n        return { ...state, groupBy: action.groupBy };\n      }\n      if (action.type === 'SET_COLUMN_VISIBILITY') {\n        return { ...state, columnVisibility: action.columnVisibility };\n      }\n      if (action.type === 'CLEAR_DATASETS') {\n        return { ...state, selectedFilterDatasets: [] };\n      }\n      if (action.type === 'TOGGLE_DATASET') {\n        return {\n          ...state,\n          selectedFilterDatasets: state.selectedFilterDatasets?.some((dataset) => isEqual(dataset, action.dataset))\n            ? state.selectedFilterDatasets?.filter((dataset) => !isEqual(dataset, action.dataset))\n            : [...(state.selectedFilterDatasets ?? []), action.dataset],\n        };\n      }\n      if (action.type === 'SET_RUN_VISIBILITY') {\n        if (action.visibilityMode) {\n          return { ...state, rowVisibilityMode: action.visibilityMode, rowVisibilityMap: {} };\n        }\n        if (action.rowUuid && action.rowIndex !== undefined) {\n          const currentHidden = isLoggedModelRowHidden(\n            state.rowVisibilityMode,\n            action.rowUuid,\n            action.rowIndex,\n            state.rowVisibilityMap ?? {},\n          );\n          return { ...state, rowVisibilityMap: { ...state.rowVisibilityMap, [action.rowUuid]: currentHidden } };\n        }\n      }\n      return state;\n    },\n    {\n      orderByColumn: first(LoggedModelsListPageSortableColumns),\n      orderByAsc: false,\n      columnVisibility: {},\n      rowVisibilityMode: RUNS_VISIBILITY_MODE.FIRST_10_RUNS,\n    },\n  );\n\n  const setOrderBy = useCallback(\n    (orderByColumn: string, orderByAsc: boolean) => dispatch({ type: 'SET_ORDER_BY', orderByColumn, orderByAsc }),\n    [],\n  );\n\n  const setColumnVisibility = useCallback(\n    (columnVisibility: Record<string, boolean>) => dispatch({ type: 'SET_COLUMN_VISIBILITY', columnVisibility }),\n    [],\n  );\n\n  const setRowVisibilityMode = useCallback(\n    (visibilityMode: RUNS_VISIBILITY_MODE) => dispatch({ type: 'SET_RUN_VISIBILITY', visibilityMode }),\n    [],\n  );\n\n  const toggleRowVisibility = useCallback(\n    (rowUuid: string, rowIndex: number) => dispatch({ type: 'SET_RUN_VISIBILITY', rowUuid, rowIndex }),\n    [],\n  );\n\n  const toggleDataset = useCallback(\n    (dataset: LoggedModelMetricDataset) => dispatch({ type: 'TOGGLE_DATASET', dataset }),\n    [],\n  );\n\n  const setGroupBy = useCallback(\n    (groupBy?: LoggedModelsTableGroupByMode) => dispatch({ type: 'SET_GROUP_BY', groupBy }),\n    [],\n  );\n\n  const clearSelectedDatasets = useCallback(() => dispatch({ type: 'CLEAR_DATASETS' }), []);\n\n  const deferredState = useSafeDeferredValue(state);\n\n  // Search filter state does not go through deferred value\n  const [searchQuery, updateSearchQuery] = useState<string>('');\n\n  // To be expanded with other filters in the future\n  const isFilteringActive = Boolean(searchQuery || !isEmpty(state.selectedFilterDatasets));\n\n  return {\n    state: deferredState,\n    isFilteringActive,\n    searchQuery,\n    setOrderBy,\n    setColumnVisibility,\n    setRowVisibilityMode,\n    toggleRowVisibility,\n    updateSearchQuery,\n    toggleDataset,\n    clearSelectedDatasets,\n    setGroupBy,\n  };\n};\n","import { first, groupBy, isEmpty, isObject, orderBy } from 'lodash';\nimport type { LoggedModelProto, RunEntity } from '../../types';\nimport { useMemo } from 'react';\n\nexport enum LoggedModelsTableGroupByMode {\n  RUNS = 'runs',\n}\n\nexport interface LoggedModelDataGroupDataRow {\n  isGroup: true;\n  groupUuid: string;\n  groupData?: {\n    sourceRun?: RunEntity;\n  };\n}\n\nexport const isLoggedModelDataGroupDataRow = (data?: LoggedModelsTableDataRow): data is LoggedModelDataGroupDataRow => {\n  return isObject(data) && 'isGroup' in data && data.isGroup === true;\n};\n\nexport const isLoggedModelRow = (data?: LoggedModelsTableDataRow | symbol): data is LoggedModelDataWithSourceRun => {\n  return isObject(data) && !isLoggedModelDataGroupDataRow(data);\n};\n\nexport const LoggedModelsTableLoadMoreRowSymbol = Symbol('LoadMoreRow');\n\n/**\n * Represents a logged model entity enriched with source run\n */\nexport interface LoggedModelDataWithSourceRun extends LoggedModelProto {\n  sourceRun?: RunEntity;\n}\n\n/**\n * Represents a >data< row in the logged models table.\n * It's defined to distinguish it from the special \"Load more\" row.\n */\nexport type LoggedModelsTableDataRow = LoggedModelDataWithSourceRun | LoggedModelDataGroupDataRow;\n\n/**\n * All possible types of rows in the logged models table.\n */\nexport type LoggedModelsTableRow = LoggedModelsTableDataRow | typeof LoggedModelsTableLoadMoreRowSymbol;\n\nexport const LoggedModelsTableGroupingEnabledClass = 'mlflow-logged-models-table-grouped';\nexport const LoggedModelsTableGroupHeaderRowClass = 'mlflow-logged-models-table-group-cell';\n\nexport enum LoggedModelsTableSpecialRowID {\n  LOAD_MORE = 'LOAD_MORE',\n  REMAINING_MODELS_GROUP = 'REMAINING_MODELS_GROUP',\n}\n\n/**\n * Returns the ID of the logged models table row.\n */\nexport const getLoggedModelsTableRowID = ({ data }: { data: LoggedModelsTableRow }) => {\n  if (!isObject(data)) {\n    return LoggedModelsTableSpecialRowID.LOAD_MORE;\n  }\n  if ('isGroup' in data) {\n    return data.groupUuid;\n  }\n  return data?.info?.model_id ?? '';\n};\n\n/**\n * Generates the data rows for the logged models table based on the provided parameters.\n * Supports grouping by source runs if specified.\n */\nexport const useLoggedModelTableDataRows = ({\n  groupModelsBy,\n  loggedModelsWithSourceRuns,\n  expandedGroups,\n}: {\n  loggedModelsWithSourceRuns?: LoggedModelDataWithSourceRun[];\n  groupModelsBy?: LoggedModelsTableGroupByMode;\n  expandedGroups: string[];\n}) => {\n  return useMemo<LoggedModelsTableDataRow[] | undefined>(() => {\n    // If grouping is unavailable or not set, return the original list\n    if (!groupModelsBy || isEmpty(loggedModelsWithSourceRuns)) {\n      return loggedModelsWithSourceRuns;\n    }\n\n    const groups = groupBy(\n      loggedModelsWithSourceRuns,\n      (loggedModel) => loggedModel.info?.source_run_id ?? LoggedModelsTableSpecialRowID.REMAINING_MODELS_GROUP,\n    );\n\n    // Place ungrouped models in a special group at the end\n    const sortedGroups = orderBy(\n      Object.entries(groups),\n      ([groupId]) => groupId !== LoggedModelsTableSpecialRowID.REMAINING_MODELS_GROUP,\n      'desc',\n    );\n\n    const rows: LoggedModelsTableDataRow[] = [];\n\n    sortedGroups.forEach(([runUuid, models]) => {\n      rows.push({\n        isGroup: true,\n        groupUuid: runUuid,\n        groupData: {\n          sourceRun: first(models)?.sourceRun,\n        },\n      });\n      if (expandedGroups.includes(runUuid)) {\n        rows.push(...models);\n      }\n    });\n\n    return rows;\n  }, [loggedModelsWithSourceRuns, expandedGroups, groupModelsBy]);\n};\n","import { createContext, useContext, useMemo } from 'react';\n\ntype ExperimentLoggedModelListPageTableContextType = {\n  moreResultsAvailable?: boolean;\n  isLoadingMore?: boolean;\n  loadMoreResults?: () => void;\n  expandedGroups?: string[];\n  onGroupToggle?: (groupId: string) => void;\n};\n\nconst ExperimentLoggedModelListPageTableContext = createContext<ExperimentLoggedModelListPageTableContextType>({});\n\nexport const ExperimentLoggedModelListPageTableContextProvider = ({\n  loadMoreResults,\n  moreResultsAvailable,\n  isLoadingMore,\n  children,\n  expandedGroups,\n  onGroupToggle,\n}: React.PropsWithChildren<ExperimentLoggedModelListPageTableContextType>) => {\n  const contextValue = useMemo(\n    () => ({\n      moreResultsAvailable,\n      loadMoreResults,\n      isLoadingMore,\n      expandedGroups,\n      onGroupToggle,\n    }),\n    [moreResultsAvailable, loadMoreResults, isLoadingMore, expandedGroups, onGroupToggle],\n  );\n\n  return (\n    <ExperimentLoggedModelListPageTableContext.Provider value={contextValue}>\n      {children}\n    </ExperimentLoggedModelListPageTableContext.Provider>\n  );\n};\n\nexport const useExperimentLoggedModelListPageTableContext = () => useContext(ExperimentLoggedModelListPageTableContext);\n","var _path, _circle, _path2, _g, _path3, _circle2, _path4, _g2, _path5, _path6, _path7, _g3, _rect, _circle3, _rect2, _circle4, _rect3, _path8, _path9, _g4, _rect4, _circle5, _rect5, _circle6, _rect6, _path0, _path1, _g5, _rect7, _circle7, _rect8, _circle8, _rect9, _path10, _path11, _g6, _rect0, _circle9, _rect1, _circle0, _rect10, _defs;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgVersionsEmpty({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 658,\n    height: 236,\n    viewBox: \"0 0 658 236\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0.5 8C0.5 3.58172 4.08172 0 8.5 0H649.5C653.918 0 657.5 3.58172 657.5 8V228C657.5 232.418 653.918 236 649.5 236H8.50001C4.08173 236 0.5 232.418 0.5 228V8Z\",\n    fill: \"#F6F7F9\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 29.5,\n    cy: 133,\n    r: 6,\n    fill: \"#3451B2\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M43.0103 138L39.957 128.84H42.1089L44.1338 135.867H44.248L46.2666 128.84H48.4248L45.3716 138H43.0103ZM52.1191 138.146C49.9927 138.146 48.7041 136.756 48.7041 134.515V134.509C48.7041 132.287 50.0054 130.859 52.043 130.859C54.0806 130.859 55.3501 132.255 55.3501 134.369V134.947H50.5386C50.5576 136.096 51.1733 136.762 52.1572 136.762C52.9697 136.762 53.4204 136.331 53.5474 136.064L53.5664 136.026H55.293L55.2803 136.089C55.0645 136.965 54.1631 138.146 52.1191 138.146ZM52.0747 132.249C51.2686 132.249 50.6719 132.795 50.5576 133.785H53.5728C53.4585 132.77 52.8809 132.249 52.0747 132.249ZM56.8672 138V131.011H58.7207V132.097H58.835C59.0571 131.341 59.6919 130.897 60.5996 130.897C60.8472 130.897 61.1074 130.935 61.2915 130.986V132.604C61.0122 132.541 60.7266 132.497 60.4409 132.497C59.3872 132.497 58.7207 133.1 58.7207 134.09V138H56.8672ZM65.1445 138.146C63.2466 138.146 62.1675 137.295 62.0342 136.096L62.0278 136.07H63.8496L63.8623 136.096C64.0083 136.527 64.4336 136.838 65.1636 136.838C65.8745 136.838 66.3569 136.534 66.3569 136.07V136.058C66.3569 135.683 66.0776 135.448 65.3667 135.29L64.1987 135.042C62.8657 134.756 62.2056 134.103 62.2056 133.055V133.049C62.2056 131.735 63.3735 130.859 65.1191 130.859C66.9536 130.859 67.9692 131.773 68.0454 132.896V132.922H66.3252L66.3188 132.89C66.2173 132.516 65.8047 132.167 65.1128 132.167C64.4717 132.167 64.0146 132.465 64.0146 132.935V132.941C64.0146 133.315 64.2749 133.531 64.9985 133.69L66.1602 133.938C67.5566 134.236 68.2104 134.82 68.2104 135.854V135.861C68.2104 137.245 66.9346 138.146 65.1445 138.146ZM70.6733 129.938C70.1021 129.938 69.626 129.481 69.626 128.91C69.626 128.333 70.1021 127.875 70.6733 127.875C71.2446 127.875 71.7144 128.333 71.7144 128.91C71.7144 129.481 71.2446 129.938 70.6733 129.938ZM69.7402 138V131.011H71.5938V138H69.7402ZM76.564 138.146C74.4121 138.146 73.1172 136.781 73.1172 134.509V134.496C73.1172 132.243 74.4312 130.859 76.564 130.859C78.6968 130.859 80.0107 132.236 80.0107 134.496V134.509C80.0107 136.788 78.7158 138.146 76.564 138.146ZM76.564 136.692C77.5479 136.692 78.1128 135.886 78.1128 134.509V134.496C78.1128 133.131 77.5415 132.312 76.564 132.312C75.5801 132.312 75.0151 133.131 75.0151 134.496V134.509C75.0151 135.886 75.5737 136.692 76.564 136.692ZM81.5215 138V131.011H83.375V132.09H83.4893C83.8066 131.335 84.4985 130.859 85.4951 130.859C87.0503 130.859 87.8882 131.811 87.8882 133.48V138H86.0347V133.899C86.0347 132.916 85.6284 132.395 84.7524 132.395C83.8955 132.395 83.375 133.011 83.375 133.957V138H81.5215ZM93.0361 138V136.711L95.9878 133.798C97.2764 132.547 97.6255 132.084 97.6255 131.443V131.424C97.6255 130.643 97.0923 130.097 96.2163 130.097C95.3213 130.097 94.7056 130.694 94.7056 131.563V131.595H92.9346L92.9282 131.57C92.9282 129.812 94.2993 128.605 96.3052 128.605C98.1904 128.605 99.5107 129.685 99.5107 131.265V131.284C99.5107 132.325 98.9712 133.188 97.3018 134.731L95.6069 136.312V136.458H99.644V138H93.0361Z\",\n    fill: \"#5F7281\"\n  })), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip0_7077_86724)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23.5 155C23.5 150.582 27.0817 147 31.5 147H247.5C251.918 147 255.5 150.582 255.5 155V181C255.5 185.418 251.918 189 247.5 189H31.5C27.0817 189 23.5 185.418 23.5 181V155Z\",\n    fill: \"white\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31.5 168C31.5 164.686 34.1863 162 37.5 162H241.5C244.814 162 247.5 164.686 247.5 168C247.5 171.314 244.814 174 241.5 174H37.5C34.1863 174 31.5 171.314 31.5 168Z\",\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip1_7077_86724)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M43.875 166.75C43.5298 166.75 43.25 167.03 43.25 167.375C43.25 167.72 43.5298 168 43.875 168C44.2202 168 44.5 167.72 44.5 167.375C44.5 167.03 44.2202 166.75 43.875 166.75ZM42.5 167.375C42.5 166.616 43.1156 166 43.875 166C44.3884 166 44.8361 166.281 45.0723 166.698L47.2583 166.223C47.3339 165.535 47.9169 165 48.625 165C49.3844 165 50 165.616 50 166.375C50 166.938 49.6611 167.423 49.176 167.635L49.3171 168.763C49.9855 168.857 50.5 169.431 50.5 170.125C50.5 170.884 49.8844 171.5 49.125 171.5C48.6948 171.5 48.3107 171.302 48.0586 170.993L46.7487 171.566C46.7496 171.586 46.75 171.605 46.75 171.625C46.75 172.384 46.1344 173 45.375 173C44.6156 173 44 172.384 44 171.625C44 171.178 44.2128 170.782 44.5426 170.53L44.0066 168.744C43.9633 168.748 43.9194 168.75 43.875 168.75C43.1156 168.75 42.5 168.134 42.5 167.375ZM45.2327 167.594C45.2414 167.539 45.2469 167.484 45.249 167.427L47.382 166.964C47.5764 167.373 47.9673 167.672 48.4329 167.737L48.5739 168.865C48.3854 168.947 48.219 169.071 48.086 169.224L45.2327 167.594ZM44.914 168.276C44.852 168.347 44.7827 168.412 44.7074 168.47L45.2434 170.256C45.2867 170.252 45.3306 170.25 45.375 170.25C45.8474 170.25 46.2642 170.488 46.5117 170.851L47.7616 170.304C47.7539 170.246 47.75 170.186 47.75 170.125C47.75 170.05 47.7559 169.977 47.7673 169.906L44.914 168.276ZM48.5 170.125C48.5 169.78 48.7798 169.5 49.125 169.5C49.4702 169.5 49.75 169.78 49.75 170.125C49.75 170.47 49.4702 170.75 49.125 170.75C48.7798 170.75 48.5 170.47 48.5 170.125ZM45.375 171C45.0298 171 44.75 171.28 44.75 171.625C44.75 171.97 45.0298 172.25 45.375 172.25C45.7202 172.25 46 171.97 46 171.625C46 171.28 45.7202 171 45.375 171ZM48 166.375C48 166.03 48.2798 165.75 48.625 165.75C48.9702 165.75 49.25 166.03 49.25 166.375C49.25 166.72 48.9702 167 48.625 167C48.2798 167 48 166.72 48 166.375Z\",\n    fill: \"white\"\n  })))), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31.5 147.5H247.5C251.642 147.5 255 150.858 255 155V181C255 185.142 251.642 188.5 247.5 188.5H31.5C27.3579 188.5 24 185.142 24 181V155C24 150.858 27.3579 147.5 31.5 147.5Z\",\n    stroke: \"#D1D9E1\"\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 29.5,\n    cy: 46,\n    r: 6,\n    fill: \"#00776B\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M43.0103 51L39.957 41.8403H42.1089L44.1338 48.8672H44.248L46.2666 41.8403H48.4248L45.3716 51H43.0103ZM52.1191 51.146C49.9927 51.146 48.7041 49.7559 48.7041 47.5151V47.5088C48.7041 45.2871 50.0054 43.8589 52.043 43.8589C54.0806 43.8589 55.3501 45.2554 55.3501 47.3691V47.9468H50.5386C50.5576 49.0957 51.1733 49.7622 52.1572 49.7622C52.9697 49.7622 53.4204 49.3306 53.5474 49.064L53.5664 49.0259H55.293L55.2803 49.0894C55.0645 49.9653 54.1631 51.146 52.1191 51.146ZM52.0747 45.249C51.2686 45.249 50.6719 45.7949 50.5576 46.7852H53.5728C53.4585 45.7695 52.8809 45.249 52.0747 45.249ZM56.8672 51V44.0112H58.7207V45.0967H58.835C59.0571 44.3413 59.6919 43.897 60.5996 43.897C60.8472 43.897 61.1074 43.9351 61.2915 43.9858V45.6045C61.0122 45.541 60.7266 45.4966 60.4409 45.4966C59.3872 45.4966 58.7207 46.0996 58.7207 47.0898V51H56.8672ZM65.1445 51.146C63.2466 51.146 62.1675 50.2954 62.0342 49.0957L62.0278 49.0703H63.8496L63.8623 49.0957C64.0083 49.5273 64.4336 49.8384 65.1636 49.8384C65.8745 49.8384 66.3569 49.5337 66.3569 49.0703V49.0576C66.3569 48.6831 66.0776 48.4482 65.3667 48.2896L64.1987 48.042C62.8657 47.7563 62.2056 47.1025 62.2056 46.0552V46.0488C62.2056 44.7349 63.3735 43.8589 65.1191 43.8589C66.9536 43.8589 67.9692 44.7729 68.0454 45.8965V45.9219H66.3252L66.3188 45.8901C66.2173 45.5156 65.8047 45.1665 65.1128 45.1665C64.4717 45.1665 64.0146 45.4648 64.0146 45.9346V45.9409C64.0146 46.3154 64.2749 46.5312 64.9985 46.6899L66.1602 46.9375C67.5566 47.2358 68.2104 47.8198 68.2104 48.8545V48.8608C68.2104 50.2446 66.9346 51.146 65.1445 51.146ZM70.6733 42.9385C70.1021 42.9385 69.626 42.4814 69.626 41.9102C69.626 41.3325 70.1021 40.8755 70.6733 40.8755C71.2446 40.8755 71.7144 41.3325 71.7144 41.9102C71.7144 42.4814 71.2446 42.9385 70.6733 42.9385ZM69.7402 51V44.0112H71.5938V51H69.7402ZM76.564 51.146C74.4121 51.146 73.1172 49.7812 73.1172 47.5088V47.4961C73.1172 45.2427 74.4312 43.8589 76.564 43.8589C78.6968 43.8589 80.0107 45.2363 80.0107 47.4961V47.5088C80.0107 49.7876 78.7158 51.146 76.564 51.146ZM76.564 49.6924C77.5479 49.6924 78.1128 48.8862 78.1128 47.5088V47.4961C78.1128 46.1313 77.5415 45.3125 76.564 45.3125C75.5801 45.3125 75.0151 46.1313 75.0151 47.4961V47.5088C75.0151 48.8862 75.5737 49.6924 76.564 49.6924ZM81.5215 51V44.0112H83.375V45.0903H83.4893C83.8066 44.335 84.4985 43.8589 85.4951 43.8589C87.0503 43.8589 87.8882 44.811 87.8882 46.4805V51H86.0347V46.8994C86.0347 45.9155 85.6284 45.395 84.7524 45.395C83.8955 45.395 83.375 46.0107 83.375 46.9565V51H81.5215ZM95.2769 51V43.6494H95.1626L92.9155 45.2109V43.4844L95.2832 41.8403H97.1938V51H95.2769Z\",\n    fill: \"#5F7281\"\n  })), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip2_7077_86724)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23.5 69C23.5 64.5817 27.0817 61 31.5 61H247.5C251.918 61 255.5 64.5817 255.5 69V95C255.5 99.4183 251.918 103 247.5 103H31.5C27.0817 103 23.5 99.4183 23.5 95V69Z\",\n    fill: \"white\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31.5 82C31.5 78.6863 34.1863 76 37.5 76H241.5C244.814 76 247.5 78.6863 247.5 82C247.5 85.3137 244.814 88 241.5 88H37.5C34.1863 88 31.5 85.3137 31.5 82Z\",\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip3_7077_86724)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M43.875 80.75C43.5298 80.75 43.25 81.0298 43.25 81.375C43.25 81.7202 43.5298 82 43.875 82C44.2202 82 44.5 81.7202 44.5 81.375C44.5 81.0298 44.2202 80.75 43.875 80.75ZM42.5 81.375C42.5 80.6156 43.1156 80 43.875 80C44.3884 80 44.8361 80.2814 45.0723 80.6983L47.2583 80.2231C47.3339 79.5352 47.9169 79 48.625 79C49.3844 79 50 79.6156 50 80.375C50 80.9384 49.6611 81.4227 49.176 81.6351L49.3171 82.7633C49.9855 82.8567 50.5 83.4308 50.5 84.125C50.5 84.8844 49.8844 85.5 49.125 85.5C48.6948 85.5 48.3107 85.3024 48.0586 84.9931L46.7487 85.5661C46.7496 85.5856 46.75 85.6053 46.75 85.625C46.75 86.3844 46.1344 87 45.375 87C44.6156 87 44 86.3844 44 85.625C44 85.1785 44.2128 84.7816 44.5426 84.5305L44.0066 82.7438C43.9633 82.7479 43.9194 82.75 43.875 82.75C43.1156 82.75 42.5 82.1344 42.5 81.375ZM45.2327 81.5939C45.2414 81.5394 45.2469 81.4839 45.249 81.4274L47.382 80.9637C47.5764 81.3734 47.9673 81.6716 48.4329 81.7367L48.5739 82.8649C48.3854 82.9474 48.219 83.071 48.086 83.2244L45.2327 81.5939ZM44.914 82.2756C44.852 82.3471 44.7827 82.4121 44.7074 82.4695L45.2434 84.2562C45.2867 84.2521 45.3306 84.25 45.375 84.25C45.8474 84.25 46.2642 84.4883 46.5117 84.8512L47.7616 84.3044C47.7539 84.2457 47.75 84.1858 47.75 84.125C47.75 84.0505 47.7559 83.9774 47.7673 83.9061L44.914 82.2756ZM48.5 84.125C48.5 83.7798 48.7798 83.5 49.125 83.5C49.4702 83.5 49.75 83.7798 49.75 84.125C49.75 84.4702 49.4702 84.75 49.125 84.75C48.7798 84.75 48.5 84.4702 48.5 84.125ZM45.375 85C45.0298 85 44.75 85.2798 44.75 85.625C44.75 85.9702 45.0298 86.25 45.375 86.25C45.7202 86.25 46 85.9702 46 85.625C46 85.2798 45.7202 85 45.375 85ZM48 80.375C48 80.0298 48.2798 79.75 48.625 79.75C48.9702 79.75 49.25 80.0298 49.25 80.375C49.25 80.7202 48.9702 81 48.625 81C48.2798 81 48 80.7202 48 80.375Z\",\n    fill: \"white\"\n  })))), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31.5 61.5H247.5C251.642 61.5 255 64.8579 255 69V95C255 99.1421 251.642 102.5 247.5 102.5H31.5C27.3579 102.5 24 99.1421 24 95V69C24 64.8579 27.3579 61.5 31.5 61.5Z\",\n    stroke: \"#D1D9E1\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M302.5 17.5H444.5C448.642 17.5 452 20.8579 452 25V105C452 109.142 448.642 112.5 444.5 112.5H302.5C298.358 112.5 295 109.142 295 105V25C295 20.8579 298.358 17.5 302.5 17.5Z\",\n    fill: \"white\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M302.5 17.5H444.5C448.642 17.5 452 20.8579 452 25V105C452 109.142 448.642 112.5 444.5 112.5H302.5C298.358 112.5 295 109.142 295 105V25C295 20.8579 298.358 17.5 302.5 17.5Z\",\n    stroke: \"#D1D9E1\"\n  })), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip4_7077_86724)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M314.875 36.75C314.53 36.75 314.25 37.0298 314.25 37.375C314.25 37.7202 314.53 38 314.875 38C315.22 38 315.5 37.7202 315.5 37.375C315.5 37.0298 315.22 36.75 314.875 36.75ZM313.5 37.375C313.5 36.6156 314.116 36 314.875 36C315.388 36 315.836 36.2814 316.072 36.6983L318.258 36.2231C318.334 35.5352 318.917 35 319.625 35C320.384 35 321 35.6156 321 36.375C321 36.9384 320.661 37.4227 320.176 37.6351L320.317 38.7633C320.986 38.8567 321.5 39.4308 321.5 40.125C321.5 40.8844 320.884 41.5 320.125 41.5C319.695 41.5 319.311 41.3024 319.059 40.9931L317.749 41.5661C317.75 41.5856 317.75 41.6053 317.75 41.625C317.75 42.3844 317.134 43 316.375 43C315.616 43 315 42.3844 315 41.625C315 41.1785 315.213 40.7816 315.543 40.5305L315.007 38.7438C314.963 38.7479 314.919 38.75 314.875 38.75C314.116 38.75 313.5 38.1344 313.5 37.375ZM316.233 37.5939C316.241 37.5394 316.247 37.4839 316.249 37.4274L318.382 36.9637C318.576 37.3734 318.967 37.6716 319.433 37.7367L319.574 38.8649C319.385 38.9474 319.219 39.071 319.086 39.2244L316.233 37.5939ZM315.914 38.2756C315.852 38.3471 315.783 38.4121 315.707 38.4695L316.243 40.2562C316.287 40.2521 316.331 40.25 316.375 40.25C316.847 40.25 317.264 40.4883 317.512 40.8512L318.762 40.3044C318.754 40.2457 318.75 40.1858 318.75 40.125C318.75 40.0505 318.756 39.9774 318.767 39.9061L315.914 38.2756ZM319.5 40.125C319.5 39.7798 319.78 39.5 320.125 39.5C320.47 39.5 320.75 39.7798 320.75 40.125C320.75 40.4702 320.47 40.75 320.125 40.75C319.78 40.75 319.5 40.4702 319.5 40.125ZM316.375 41C316.03 41 315.75 41.2798 315.75 41.625C315.75 41.9702 316.03 42.25 316.375 42.25C316.72 42.25 317 41.9702 317 41.625C317 41.2798 316.72 41 316.375 41ZM319 36.375C319 36.0298 319.28 35.75 319.625 35.75C319.97 35.75 320.25 36.0298 320.25 36.375C320.25 36.7202 319.97 37 319.625 37C319.28 37 319 36.7202 319 36.375Z\",\n    fill: \"white\"\n  }))), _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 306.5,\n    y: 28,\n    width: 55,\n    height: 7,\n    rx: 3.5,\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  })), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 314.5,\n    cy: 65,\n    r: 6,\n    fill: \"#00776B\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 327.5,\n    y: 59,\n    width: 107,\n    height: 12,\n    rx: 2,\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  })), _circle4 || (_circle4 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 314.5,\n    cy: 90,\n    r: 6,\n    fill: \"#3451B2\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 327.5,\n    y: 84,\n    width: 67,\n    height: 12,\n    rx: 2,\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M302.5 123.5H444.5C448.642 123.5 452 126.858 452 131V211C452 215.142 448.642 218.5 444.5 218.5H302.5C298.358 218.5 295 215.142 295 211V131C295 126.858 298.358 123.5 302.5 123.5Z\",\n    fill: \"white\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M302.5 123.5H444.5C448.642 123.5 452 126.858 452 131V211C452 215.142 448.642 218.5 444.5 218.5H302.5C298.358 218.5 295 215.142 295 211V131C295 126.858 298.358 123.5 302.5 123.5Z\",\n    stroke: \"#D1D9E1\"\n  })), _g4 || (_g4 = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip5_7077_86724)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M314.875 142.75C314.53 142.75 314.25 143.03 314.25 143.375C314.25 143.72 314.53 144 314.875 144C315.22 144 315.5 143.72 315.5 143.375C315.5 143.03 315.22 142.75 314.875 142.75ZM313.5 143.375C313.5 142.616 314.116 142 314.875 142C315.388 142 315.836 142.281 316.072 142.698L318.258 142.223C318.334 141.535 318.917 141 319.625 141C320.384 141 321 141.616 321 142.375C321 142.938 320.661 143.423 320.176 143.635L320.317 144.763C320.986 144.857 321.5 145.431 321.5 146.125C321.5 146.884 320.884 147.5 320.125 147.5C319.695 147.5 319.311 147.302 319.059 146.993L317.749 147.566C317.75 147.586 317.75 147.605 317.75 147.625C317.75 148.384 317.134 149 316.375 149C315.616 149 315 148.384 315 147.625C315 147.178 315.213 146.782 315.543 146.53L315.007 144.744C314.963 144.748 314.919 144.75 314.875 144.75C314.116 144.75 313.5 144.134 313.5 143.375ZM316.233 143.594C316.241 143.539 316.247 143.484 316.249 143.427L318.382 142.964C318.576 143.373 318.967 143.672 319.433 143.737L319.574 144.865C319.385 144.947 319.219 145.071 319.086 145.224L316.233 143.594ZM315.914 144.276C315.852 144.347 315.783 144.412 315.707 144.47L316.243 146.256C316.287 146.252 316.331 146.25 316.375 146.25C316.847 146.25 317.264 146.488 317.512 146.851L318.762 146.304C318.754 146.246 318.75 146.186 318.75 146.125C318.75 146.05 318.756 145.977 318.767 145.906L315.914 144.276ZM319.5 146.125C319.5 145.78 319.78 145.5 320.125 145.5C320.47 145.5 320.75 145.78 320.75 146.125C320.75 146.47 320.47 146.75 320.125 146.75C319.78 146.75 319.5 146.47 319.5 146.125ZM316.375 147C316.03 147 315.75 147.28 315.75 147.625C315.75 147.97 316.03 148.25 316.375 148.25C316.72 148.25 317 147.97 317 147.625C317 147.28 316.72 147 316.375 147ZM319 142.375C319 142.03 319.28 141.75 319.625 141.75C319.97 141.75 320.25 142.03 320.25 142.375C320.25 142.72 319.97 143 319.625 143C319.28 143 319 142.72 319 142.375Z\",\n    fill: \"white\"\n  }))), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 306.5,\n    y: 134,\n    width: 55,\n    height: 7,\n    rx: 3.5,\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  })), _circle5 || (_circle5 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 314.5,\n    cy: 171,\n    r: 6,\n    fill: \"#00776B\"\n  })), _rect5 || (_rect5 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 327.5,\n    y: 165,\n    width: 55,\n    height: 12,\n    rx: 2,\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  })), _circle6 || (_circle6 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 314.5,\n    cy: 196,\n    r: 6,\n    fill: \"#3451B2\"\n  })), _rect6 || (_rect6 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 327.5,\n    y: 190,\n    width: 100,\n    height: 12,\n    rx: 2,\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  })), _path0 || (_path0 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M469.5 17.5H611.5C615.642 17.5 619 20.8579 619 25V105C619 109.142 615.642 112.5 611.5 112.5H469.5C465.358 112.5 462 109.142 462 105V25C462 20.8579 465.358 17.5 469.5 17.5Z\",\n    fill: \"white\"\n  })), _path1 || (_path1 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M469.5 17.5H611.5C615.642 17.5 619 20.8579 619 25V105C619 109.142 615.642 112.5 611.5 112.5H469.5C465.358 112.5 462 109.142 462 105V25C462 20.8579 465.358 17.5 469.5 17.5Z\",\n    stroke: \"#D1D9E1\"\n  })), _g5 || (_g5 = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip6_7077_86724)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M481.875 36.75C481.53 36.75 481.25 37.0298 481.25 37.375C481.25 37.7202 481.53 38 481.875 38C482.22 38 482.5 37.7202 482.5 37.375C482.5 37.0298 482.22 36.75 481.875 36.75ZM480.5 37.375C480.5 36.6156 481.116 36 481.875 36C482.388 36 482.836 36.2814 483.072 36.6983L485.258 36.2231C485.334 35.5352 485.917 35 486.625 35C487.384 35 488 35.6156 488 36.375C488 36.9384 487.661 37.4227 487.176 37.6351L487.317 38.7633C487.986 38.8567 488.5 39.4308 488.5 40.125C488.5 40.8844 487.884 41.5 487.125 41.5C486.695 41.5 486.311 41.3024 486.059 40.9931L484.749 41.5661C484.75 41.5856 484.75 41.6053 484.75 41.625C484.75 42.3844 484.134 43 483.375 43C482.616 43 482 42.3844 482 41.625C482 41.1785 482.213 40.7816 482.543 40.5305L482.007 38.7438C481.963 38.7479 481.919 38.75 481.875 38.75C481.116 38.75 480.5 38.1344 480.5 37.375ZM483.233 37.5939C483.241 37.5394 483.247 37.4839 483.249 37.4274L485.382 36.9637C485.576 37.3734 485.967 37.6716 486.433 37.7367L486.574 38.8649C486.385 38.9474 486.219 39.071 486.086 39.2244L483.233 37.5939ZM482.914 38.2756C482.852 38.3471 482.783 38.4121 482.707 38.4695L483.243 40.2562C483.287 40.2521 483.331 40.25 483.375 40.25C483.847 40.25 484.264 40.4883 484.512 40.8512L485.762 40.3044C485.754 40.2457 485.75 40.1858 485.75 40.125C485.75 40.0505 485.756 39.9774 485.767 39.9061L482.914 38.2756ZM486.5 40.125C486.5 39.7798 486.78 39.5 487.125 39.5C487.47 39.5 487.75 39.7798 487.75 40.125C487.75 40.4702 487.47 40.75 487.125 40.75C486.78 40.75 486.5 40.4702 486.5 40.125ZM483.375 41C483.03 41 482.75 41.2798 482.75 41.625C482.75 41.9702 483.03 42.25 483.375 42.25C483.72 42.25 484 41.9702 484 41.625C484 41.2798 483.72 41 483.375 41ZM486 36.375C486 36.0298 486.28 35.75 486.625 35.75C486.97 35.75 487.25 36.0298 487.25 36.375C487.25 36.7202 486.97 37 486.625 37C486.28 37 486 36.7202 486 36.375Z\",\n    fill: \"white\"\n  }))), _rect7 || (_rect7 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 473.5,\n    y: 28,\n    width: 55,\n    height: 7,\n    rx: 3.5,\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  })), _circle7 || (_circle7 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 481.5,\n    cy: 65,\n    r: 6,\n    fill: \"#00776B\"\n  })), _rect8 || (_rect8 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 494.5,\n    y: 59,\n    width: 107,\n    height: 12,\n    rx: 2,\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  })), _circle8 || (_circle8 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 481.5,\n    cy: 90,\n    r: 6,\n    fill: \"#3451B2\"\n  })), _rect9 || (_rect9 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 494.5,\n    y: 84,\n    width: 60,\n    height: 12,\n    rx: 2,\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M469.5 123.5H611.5C615.642 123.5 619 126.858 619 131V211C619 215.142 615.642 218.5 611.5 218.5H469.5C465.358 218.5 462 215.142 462 211V131C462 126.858 465.358 123.5 469.5 123.5Z\",\n    fill: \"white\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M469.5 123.5H611.5C615.642 123.5 619 126.858 619 131V211C619 215.142 615.642 218.5 611.5 218.5H469.5C465.358 218.5 462 215.142 462 211V131C462 126.858 465.358 123.5 469.5 123.5Z\",\n    stroke: \"#D1D9E1\"\n  })), _g6 || (_g6 = /*#__PURE__*/React.createElement(\"g\", {\n    clipPath: \"url(#clip7_7077_86724)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M481.875 142.75C481.53 142.75 481.25 143.03 481.25 143.375C481.25 143.72 481.53 144 481.875 144C482.22 144 482.5 143.72 482.5 143.375C482.5 143.03 482.22 142.75 481.875 142.75ZM480.5 143.375C480.5 142.616 481.116 142 481.875 142C482.388 142 482.836 142.281 483.072 142.698L485.258 142.223C485.334 141.535 485.917 141 486.625 141C487.384 141 488 141.616 488 142.375C488 142.938 487.661 143.423 487.176 143.635L487.317 144.763C487.986 144.857 488.5 145.431 488.5 146.125C488.5 146.884 487.884 147.5 487.125 147.5C486.695 147.5 486.311 147.302 486.059 146.993L484.749 147.566C484.75 147.586 484.75 147.605 484.75 147.625C484.75 148.384 484.134 149 483.375 149C482.616 149 482 148.384 482 147.625C482 147.178 482.213 146.782 482.543 146.53L482.007 144.744C481.963 144.748 481.919 144.75 481.875 144.75C481.116 144.75 480.5 144.134 480.5 143.375ZM483.233 143.594C483.241 143.539 483.247 143.484 483.249 143.427L485.382 142.964C485.576 143.373 485.967 143.672 486.433 143.737L486.574 144.865C486.385 144.947 486.219 145.071 486.086 145.224L483.233 143.594ZM482.914 144.276C482.852 144.347 482.783 144.412 482.707 144.47L483.243 146.256C483.287 146.252 483.331 146.25 483.375 146.25C483.847 146.25 484.264 146.488 484.512 146.851L485.762 146.304C485.754 146.246 485.75 146.186 485.75 146.125C485.75 146.05 485.756 145.977 485.767 145.906L482.914 144.276ZM486.5 146.125C486.5 145.78 486.78 145.5 487.125 145.5C487.47 145.5 487.75 145.78 487.75 146.125C487.75 146.47 487.47 146.75 487.125 146.75C486.78 146.75 486.5 146.47 486.5 146.125ZM483.375 147C483.03 147 482.75 147.28 482.75 147.625C482.75 147.97 483.03 148.25 483.375 148.25C483.72 148.25 484 147.97 484 147.625C484 147.28 483.72 147 483.375 147ZM486 142.375C486 142.03 486.28 141.75 486.625 141.75C486.97 141.75 487.25 142.03 487.25 142.375C487.25 142.72 486.97 143 486.625 143C486.28 143 486 142.72 486 142.375Z\",\n    fill: \"white\"\n  }))), _rect0 || (_rect0 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 473.5,\n    y: 134,\n    width: 55,\n    height: 7,\n    rx: 3.5,\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  })), _circle9 || (_circle9 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 481.5,\n    cy: 171,\n    r: 6,\n    fill: \"#00776B\"\n  })), _rect1 || (_rect1 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 494.5,\n    y: 165,\n    width: 39,\n    height: 12,\n    rx: 2,\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  })), _circle0 || (_circle0 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 481.5,\n    cy: 196,\n    r: 6,\n    fill: \"#3451B2\"\n  })), _rect10 || (_rect10 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 494.5,\n    y: 190,\n    width: 89,\n    height: 12,\n    rx: 2,\n    fill: \"#90A4B5\",\n    fillOpacity: 0.16\n  })), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip0_7077_86724\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23.5 155C23.5 150.582 27.0817 147 31.5 147H247.5C251.918 147 255.5 150.582 255.5 155V181C255.5 185.418 251.918 189 247.5 189H31.5C27.0817 189 23.5 185.418 23.5 181V155Z\",\n    fill: \"white\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip1_7077_86724\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 8,\n    height: 8,\n    fill: \"white\",\n    transform: \"translate(42.5 165)\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip2_7077_86724\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23.5 69C23.5 64.5817 27.0817 61 31.5 61H247.5C251.918 61 255.5 64.5817 255.5 69V95C255.5 99.4183 251.918 103 247.5 103H31.5C27.0817 103 23.5 99.4183 23.5 95V69Z\",\n    fill: \"white\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip3_7077_86724\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 8,\n    height: 8,\n    fill: \"white\",\n    transform: \"translate(42.5 79)\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip4_7077_86724\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 8,\n    height: 8,\n    fill: \"white\",\n    transform: \"translate(313.5 35)\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip5_7077_86724\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 8,\n    height: 8,\n    fill: \"white\",\n    transform: \"translate(313.5 141)\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip6_7077_86724\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 8,\n    height: 8,\n    fill: \"white\",\n    transform: \"translate(480.5 35)\"\n  })), /*#__PURE__*/React.createElement(\"clipPath\", {\n    id: \"clip7_7077_86724\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    width: 8,\n    height: 8,\n    fill: \"white\",\n    transform: \"translate(480.5 141)\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgVersionsEmpty);\nexport default __webpack_public_path__ + \"static/media/versions-empty.3e2d8bb8c5b8ddd0a19a34890b36ad41.svg\";\nexport { ForwardRef as ReactComponent };","import { Button, DangerIcon, Empty, Modal, Spacer, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport versionsEmptyImg from '@mlflow/mlflow/src/common/static/versions-empty.svg';\nimport { CodeSnippet } from '@databricks/web-shared/snippet';\nimport { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentKind, getMlflow3DocsLink } from '../../constants';\nimport { getExperimentKindFromTags } from '../../utils/ExperimentKindUtils';\nimport { useGetExperimentQuery } from '../../hooks/useExperimentQuery';\nimport { useParams } from '../../../common/utils/RoutingUtils';\nimport invariant from 'invariant';\n\nconst EXAMPLE_INSTALL_CODE = `pip install -U 'mlflow>=3.1'`;\n\nconst getGenAILearnMoreLink = (cloud: 'AWS' | 'GCP' | 'Azure') => {\n  return 'https://mlflow.org/docs/latest/genai/prompt-version-mgmt/version-tracking/';\n};\n\nconst getMLLearnMoreLink = (cloud: 'AWS' | 'GCP' | 'Azure') => {\n  return 'https://mlflow.org/docs/latest/ml/mlflow-3/deep-learning/';\n};\n\nconst getExampleCode = (isGenAIExperiment: boolean, experimentId: string) => {\n  if (isGenAIExperiment) {\n    return getExampleCodeGenAI(experimentId);\n  }\n  return getExampleCodeML(experimentId);\n};\n\nconst getExampleCodeML = (experimentId: string) =>\n  `\nimport pandas as pd\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\n\nimport mlflow\nimport mlflow.sklearn\nfrom mlflow.entities import Dataset\n\nmlflow.set_experiment(experimentid=\"${experimentId}\")\n\n# Helper function to compute metrics\ndef compute_metrics(actual, predicted):\n    rmse = mean_squared_error(actual, predicted) \n    mae = mean_absolute_error(actual, predicted)\n    r2 = r2_score(actual, predicted)\n    return rmse, mae, r2\n\n# Load Iris dataset and prepare the DataFrame\niris = load_iris()\niris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\niris_df['quality'] = (iris.target == 2).astype(int)  # Create a binary target for simplicity\n\n# Split into training and testing datasets\ntrain_df, test_df = train_test_split(iris_df, test_size=0.2, random_state=42)\n\n# Start a run to represent the training job\nwith mlflow.start_run() as training_run:\n    # Load the training dataset with MLflow. We will link training metrics to this dataset.\n    train_dataset: Dataset = mlflow.data.from_pandas(train_df, name=\"train\")\n    train_x = train_dataset.df.drop([\"quality\"], axis=1)\n    train_y = train_dataset.df[[\"quality\"]]\n\n    # Fit a model to the training dataset\n    lr = ElasticNet(alpha=0.5, l1_ratio=0.5, random_state=42)\n    lr.fit(train_x, train_y)\n\n    # Log the model, specifying its ElasticNet parameters (alpha, l1_ratio)\n    # As a new feature, the LoggedModel entity is linked to its name and params\n    model_info = mlflow.sklearn.log_model(\n        sk_model=lr,\n        name=\"elasticnet\",\n        params={\n            \"alpha\": 0.5,\n            \"l1_ratio\": 0.5,\n        },\n        input_example = train_x\n    )\n\n    # Inspect the LoggedModel and its properties\n    logged_model = mlflow.get_logged_model(model_info.model_id)\n    print(logged_model.model_id, logged_model.params)\n\n    # Evaluate the model on the training dataset and log metrics\n    # These metrics are now linked to the LoggedModel entity\n    predictions = lr.predict(train_x)\n    (rmse, mae, r2) = compute_metrics(train_y, predictions)\n    mlflow.log_metrics(\n        metrics={\n            \"rmse\": rmse,\n            \"r2\": r2,\n            \"mae\": mae,\n        },\n        model_id=logged_model.model_id,\n        dataset=train_dataset\n    )\n\n    # Inspect the LoggedModel, now with metrics\n    logged_model = mlflow.get_logged_model(model_info.model_id)\n    print(logged_model.model_id, logged_model.metrics)`.trim();\n\nconst getExampleCodeGenAI = (experimentId: string) =>\n  `\nimport mlflow\n\nmlflow.set_experiment(experiment_id=\"${experimentId}\")\n\n# Define a new GenAI app version, represented as an MLflow LoggedModel\nmlflow.set_active_model(name=\"my-app-v1\")\n\n# Log LLM hyperparameters, prompts, and more\nmlflow.log_model_params({\n    \"prompt_template\": \"My prompt template\",\n    \"llm\": \"databricks-llama-4-maverick\",\n    \"temperature\": 0.2,\n})\n\n# Define application code and add MLflow tracing to capture requests and responses.\n# (Replace this with your GenAI application or agent code)\n@mlflow.trace\ndef predict(query):\n    return f\"Response to query: {query}\"\n\n# Run your application code. Resulting traces are automatically linked to\n# your GenAI app version.\npredict(\"What is MLflow?\")\n`.trim();\n\nexport const ExperimentLoggedModelListPageTableEmpty = ({\n  displayShowExampleButton = true,\n  isFilteringActive = false,\n  badRequestError,\n}: {\n  displayShowExampleButton?: boolean;\n  isFilteringActive?: boolean;\n  badRequestError?: Error;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { experimentId } = useParams();\n  const cloud = 'AWS';\n\n  invariant(experimentId, 'Experiment ID must be defined');\n\n  const [isCodeExampleVisible, setIsCodeExampleVisible] = useState(false);\n  const { data: experimentEntity, loading: isExperimentLoading } = useGetExperimentQuery({\n    experimentId,\n  });\n  const experiment = experimentEntity;\n  const experimentKind = getExperimentKindFromTags(experiment?.tags);\n  const isGenAIExperiment =\n    experimentKind === ExperimentKind.GENAI_DEVELOPMENT || experimentKind === ExperimentKind.GENAI_DEVELOPMENT_INFERRED;\n\n  const isEmpty = !badRequestError && !isFilteringActive;\n\n  return (\n    <div\n      css={{\n        inset: 0,\n        top: theme.general.heightBase + theme.spacing.lg,\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        minHeight: 160,\n      }}\n    >\n      {isEmpty ? (\n        <div\n          css={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            maxWidth: 'min(100%, 600px)',\n            padding: `0px ${theme.spacing.md}px`,\n          }}\n        >\n          <Typography.Title level={3} color=\"secondary\">\n            {isGenAIExperiment ? (\n              <FormattedMessage\n                defaultMessage=\"Track and compare versions of your GenAI app\"\n                description=\"Empty state title displayed when no models are logged in the genai logged models list page\"\n              />\n            ) : (\n              <FormattedMessage\n                defaultMessage=\"Track and compare versions of your models\"\n                description=\"Empty state title displayed when no models are logged in the machine learning logged models list page\"\n              />\n            )}\n          </Typography.Title>\n          <Typography.Paragraph color=\"secondary\" css={{ textAlign: 'center' }}>\n            {isGenAIExperiment ? (\n              <FormattedMessage\n                defaultMessage=\"Track every version of your app's code and prompts to understand how quality changes over time. {learnMoreLink}\"\n                description=\"Empty state description displayed when no models are logged in the genai logged models list page\"\n                values={{\n                  learnMoreLink: (\n                    <Typography.Link\n                      componentId=\"mlflow.logged_models.list.genai_no_results_learn_more\"\n                      openInNewTab\n                      href={getGenAILearnMoreLink(cloud as 'AWS' | 'GCP' | 'Azure')}\n                      css={{ whiteSpace: 'nowrap' }}\n                    >\n                      <FormattedMessage defaultMessage=\"Learn more\" description=\"Learn more link text\" />\n                    </Typography.Link>\n                  ),\n                }}\n              />\n            ) : (\n              <FormattedMessage\n                defaultMessage=\"Track every version of your model to understand how quality changes over time. {learnMoreLink}\"\n                description=\"Empty state description displayed when no models are logged in the machine learning logged models list page\"\n                values={{\n                  learnMoreLink: (\n                    <Typography.Link\n                      componentId=\"mlflow.logged_models.list.ml_no_results_learn_more\"\n                      openInNewTab\n                      href={getMLLearnMoreLink(cloud as 'AWS' | 'GCP' | 'Azure')}\n                      css={{ whiteSpace: 'nowrap' }}\n                    >\n                      <FormattedMessage defaultMessage=\"Learn more\" description=\"Learn more link text\" />\n                    </Typography.Link>\n                  ),\n                }}\n              />\n            )}\n          </Typography.Paragraph>\n          <img css={{ maxWidth: 'min(100%, 600px)' }} src={versionsEmptyImg} alt=\"No models found\" />\n          <div css={{ display: 'flex', gap: theme.spacing.sm, marginTop: theme.spacing.md }}>\n            <Button\n              componentId=\"mlflow.logged_models.list.show_example_code\"\n              onClick={() => setIsCodeExampleVisible(!isCodeExampleVisible)}\n            >\n              {isGenAIExperiment ? (\n                <FormattedMessage\n                  defaultMessage=\"Create version\"\n                  description=\"Button for creating a new genai model version\"\n                />\n              ) : (\n                <FormattedMessage\n                  defaultMessage=\"Create model version\"\n                  description=\"Button for creating a new classic ML model version\"\n                />\n              )}\n            </Button>\n          </div>\n        </div>\n      ) : (\n        <Empty\n          title={\n            badRequestError ? (\n              <FormattedMessage\n                defaultMessage=\"Request error\"\n                description=\"Error state title displayed in the logged models list page\"\n              />\n            ) : (\n              <FormattedMessage\n                defaultMessage=\"No models found\"\n                description=\"Empty state title displayed when all models are filtered out in the logged models list page\"\n              />\n            )\n          }\n          description={\n            badRequestError ? (\n              badRequestError.message\n            ) : isFilteringActive ? (\n              <FormattedMessage\n                defaultMessage=\"We couldn't find any models matching your search criteria. Try changing your search filters.\"\n                description=\"Empty state message displayed when all models are filtered out in the logged models list page\"\n              />\n            ) : (\n              <FormattedMessage\n                defaultMessage=\"Your models will appear here once you log them using newest version of MLflow. <link>Learn more</link>.\"\n                description=\"Placeholder for empty models table on the logged models list page\"\n                values={{\n                  link: (chunks) => (\n                    <Typography.Link\n                      componentId=\"mlflow.logged_models.list.no_results_learn_more\"\n                      openInNewTab\n                      href={getMlflow3DocsLink()}\n                    >\n                      {chunks}\n                    </Typography.Link>\n                  ),\n                }}\n              />\n            )\n          }\n          image={badRequestError ? <DangerIcon /> : undefined}\n          button={\n            displayShowExampleButton && !isFilteringActive && !badRequestError ? (\n              <Button\n                type=\"primary\"\n                componentId=\"mlflow.logged_models.list.show_example_code\"\n                loading={isExperimentLoading}\n                onClick={() => setIsCodeExampleVisible(!isCodeExampleVisible)}\n              >\n                {isGenAIExperiment ? (\n                  <FormattedMessage\n                    defaultMessage=\"Create version\"\n                    description=\"Button for creating a new genai model version\"\n                  />\n                ) : (\n                  <FormattedMessage\n                    defaultMessage=\"Create model version\"\n                    description=\"Button for creating a new classic ML model version\"\n                  />\n                )}\n              </Button>\n            ) : null\n          }\n        />\n      )}\n      <Modal\n        size=\"wide\"\n        visible={isCodeExampleVisible}\n        onCancel={() => setIsCodeExampleVisible(false)}\n        title={\n          <FormattedMessage\n            defaultMessage=\"Example code\"\n            description=\"Title of the modal with the logged models quickstart example code\"\n          />\n        }\n        componentId=\"mlflow.logged_models.list.example_code_modal\"\n        okText={\n          <FormattedMessage\n            defaultMessage=\"Close\"\n            description=\"Button for closing modal with the logged models quickstart example code\"\n          />\n        }\n        onOk={() => setIsCodeExampleVisible(false)}\n      >\n        <Typography.Text>\n          <FormattedMessage\n            defaultMessage=\"Install MLflow 3:\"\n            description=\"Instruction for installing MLflow from mlflow-3 branch in log MLflow 3 models\"\n          />\n        </Typography.Text>\n        <CodeSnippet language=\"text\">{EXAMPLE_INSTALL_CODE}</CodeSnippet>\n        <Spacer size=\"sm\" />\n        {isGenAIExperiment ? (\n          <FormattedMessage\n            defaultMessage=\"Run example code:\"\n            description=\"Instruction for running example GenAI code in order to log MLflow 3 models\"\n          />\n        ) : (\n          <FormattedMessage\n            defaultMessage=\"Run example training code:\"\n            description=\"Instruction for running example training code in order to log MLflow 3 models\"\n          />\n        )}\n        <CodeSnippet language=\"python\">{getExampleCode(isGenAIExperiment, experimentId)}</CodeSnippet>\n      </Modal>\n    </div>\n  );\n};\n","import {\n  Button,\n  Empty,\n  getShadowScrollStyles,\n  TableSkeleton,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport MLFlowAgGrid from '../../../common/components/ag-grid/AgGrid';\nimport { useExperimentAgGridTableStyles } from '../experiment-page/components/runs/ExperimentViewRunsTable';\nimport type { LoggedModelProto, RunEntity } from '../../types';\nimport React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport {\n  ExperimentLoggedModelListPageTableContextProvider,\n  useExperimentLoggedModelListPageTableContext,\n} from './ExperimentLoggedModelListPageTableContext';\nimport { LoggedModelsListPageSortableColumns } from './hooks/useLoggedModelsListPagePageState';\nimport type { ColumnApi, IsFullWidthRowParams } from '@ag-grid-community/core';\nimport { type ColDef, type ColGroupDef, type SortChangedEvent } from '@ag-grid-community/core';\nimport { FormattedMessage } from 'react-intl';\nimport { useRunsHighlightTableRow } from '../runs-charts/hooks/useRunsHighlightTableRow';\nimport { ExperimentLoggedModelListPageTableEmpty } from './ExperimentLoggedModelListPageTableEmpty';\nimport { LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX } from './hooks/useExperimentLoggedModelListPageTableColumns';\nimport { first, groupBy, isEmpty, orderBy } from 'lodash';\nimport type {\n  LoggedModelDataWithSourceRun,\n  LoggedModelsTableGroupByMode,\n  LoggedModelsTableRow,\n} from './ExperimentLoggedModelListPageTable.utils';\nimport {\n  getLoggedModelsTableRowID,\n  LoggedModelsTableDataRow,\n  LoggedModelsTableGroupHeaderRowClass,\n  LoggedModelsTableGroupingEnabledClass,\n  LoggedModelsTableLoadMoreRowSymbol,\n  LoggedModelsTableSpecialRowID,\n  useLoggedModelTableDataRows,\n} from './ExperimentLoggedModelListPageTable.utils';\n\nconst LOGGED_MODELS_GRID_ROW_HEIGHT = 36;\n\ninterface ExperimentLoggedModelListPageTableProps {\n  loggedModels?: LoggedModelProto[];\n  isLoading: boolean;\n  isLoadingMore: boolean;\n  badRequestError?: Error;\n  moreResultsAvailable?: boolean;\n  onLoadMore?: () => void;\n  onOrderByChange?: (orderByColumn: string, orderByAsc: boolean) => void;\n  orderByColumn?: string;\n  orderByAsc?: boolean;\n  columnDefs?: (ColDef | ColGroupDef)[];\n  columnVisibility?: Record<string, boolean>;\n  relatedRunsData?: RunEntity[] | null;\n  className?: string;\n  disableLoadMore?: boolean;\n  displayShowExampleButton?: boolean;\n  isFilteringActive?: boolean;\n  groupModelsBy?: LoggedModelsTableGroupByMode | undefined;\n}\n\nconst ExperimentLoggedModelListPageTableImpl = ({\n  loggedModels,\n  isLoading,\n  isLoadingMore,\n  badRequestError,\n  onLoadMore,\n  orderByColumn,\n  orderByAsc,\n  moreResultsAvailable,\n  onOrderByChange,\n  columnDefs = [],\n  columnVisibility,\n  relatedRunsData,\n  className,\n  disableLoadMore,\n  displayShowExampleButton = true,\n  isFilteringActive = true,\n  groupModelsBy,\n}: ExperimentLoggedModelListPageTableProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  const styles = useExperimentAgGridTableStyles({ usingCustomHeaderComponent: false });\n\n  // Keep track of expanded groups in the table\n  const [expandedGroups, setExpandedGroups] = React.useState<string[]>([]);\n\n  const columnApiRef = useRef<ColumnApi | null>(null);\n\n  const loggedModelsWithSourceRuns = useMemo<LoggedModelDataWithSourceRun[] | undefined>(() => {\n    if (!loggedModels || !relatedRunsData) {\n      return loggedModels;\n    }\n    return loggedModels.map((loggedModel) => {\n      const sourceRun = relatedRunsData.find((run) => run?.info?.runUuid === loggedModel?.info?.source_run_id);\n      return { ...loggedModel, sourceRun };\n    });\n  }, [loggedModels, relatedRunsData]);\n\n  // Expand or collapse the group based on its ID\n  const onGroupToggle = useCallback((groupId: string) => {\n    setExpandedGroups((prev) => (prev.includes(groupId) ? prev.filter((id) => id !== groupId) : [...prev, groupId]));\n  }, []);\n\n  // Get all data rows in the table: logged models and groups if applicable\n  const loggedModelsDataRows = useLoggedModelTableDataRows({\n    loggedModelsWithSourceRuns,\n    groupModelsBy,\n    expandedGroups,\n  });\n\n  // Get all the table rows, including data rows and the \"Load more\" row if applicable\n  const loggedModelsTableRows = useMemo<LoggedModelsTableRow[] | undefined>(() => {\n    if (isLoading) {\n      return undefined;\n    }\n    if (disableLoadMore || !loggedModelsDataRows || loggedModelsDataRows.length === 0) {\n      return loggedModelsDataRows;\n    }\n    return [...loggedModelsDataRows, LoggedModelsTableLoadMoreRowSymbol];\n  }, [loggedModelsDataRows, isLoading, disableLoadMore]);\n\n  const sortChangedHandler = useCallback(\n    (event: SortChangedEvent) => {\n      // Find the currently sorted column using ag-grid's column API\n      const sortedColumn = event.columnApi.getColumnState().find((col) => col.sort);\n      if (!sortedColumn?.colId) {\n        return;\n      }\n      if (\n        LoggedModelsListPageSortableColumns.includes(sortedColumn.colId) ||\n        sortedColumn.colId.startsWith(LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX)\n      ) {\n        onOrderByChange?.(sortedColumn?.colId, sortedColumn.sort === 'asc');\n      }\n    },\n    [onOrderByChange],\n  );\n\n  const updateSortIndicator = useCallback((field?: string, asc?: boolean) => {\n    // Reflect the sort state in the ag-grid's column state\n    const column = columnApiRef.current?.getColumn(field);\n    if (column) {\n      // Find the currently sorted column and if it's no the same one, clear its sort state\n      const currentSortedColumnId = columnApiRef.current?.getColumnState().find((col) => col.sort)?.colId;\n      if (currentSortedColumnId !== column.getColId()) {\n        columnApiRef.current?.getColumn(currentSortedColumnId)?.setSort(null);\n      }\n      column.setSort(asc ? 'asc' : 'desc');\n    }\n  }, []);\n\n  const updateColumnVisibility = useCallback((newColumnVisibility?: Record<string, boolean>) => {\n    // Reflect the visibility state in the ag-grid's column state\n    for (const column of columnApiRef?.current?.getAllColumns() ?? []) {\n      columnApiRef.current?.setColumnVisible(column, newColumnVisibility?.[column.getColId()] !== false);\n    }\n  }, []);\n\n  // Since ag-grid column API is not stateful, we use side effect to update the UI\n  useEffect(() => updateSortIndicator(orderByColumn, orderByAsc), [updateSortIndicator, orderByColumn, orderByAsc]);\n  useEffect(() => updateColumnVisibility(columnVisibility), [updateColumnVisibility, columnVisibility]);\n\n  const containsGroupedColumns = useMemo(() => columnDefs.some((col) => 'children' in col), [columnDefs]);\n\n  const containerElement = useRef<HTMLDivElement | null>(null);\n\n  const { cellMouseOverHandler, cellMouseOutHandler } = useRunsHighlightTableRow(\n    containerElement,\n    undefined,\n    true,\n    getLoggedModelsTableRowID,\n  );\n\n  return (\n    <ExperimentLoggedModelListPageTableContextProvider\n      loadMoreResults={onLoadMore}\n      moreResultsAvailable={moreResultsAvailable}\n      isLoadingMore={isLoadingMore}\n      expandedGroups={expandedGroups}\n      onGroupToggle={onGroupToggle}\n    >\n      <div\n        css={{\n          overflow: 'hidden',\n          flex: 1,\n          ...styles,\n          '.ag-cell': {\n            alignItems: 'center',\n            [`&.${LoggedModelsTableGroupHeaderRowClass}`]: {\n              overflow: 'visible',\n            },\n          },\n          borderTop: `1px solid ${theme.colors.border}`,\n          '.ag-header-cell.is-checkbox-header-cell': {\n            paddingLeft: theme.spacing.sm,\n          },\n          '&& .ag-root-wrapper': { border: 0 },\n        }}\n        className={[\n          'ag-theme-balham',\n          className,\n          // When using grouping, add a special class to the table\n          // to enable padding\n          groupModelsBy ? LoggedModelsTableGroupingEnabledClass : '',\n        ].join(' ')}\n        ref={containerElement}\n      >\n        <MLFlowAgGrid\n          columnDefs={columnDefs}\n          rowData={loggedModelsTableRows}\n          rowHeight={LOGGED_MODELS_GRID_ROW_HEIGHT}\n          rowSelection=\"multiple\"\n          suppressRowClickSelection\n          suppressMovableColumns\n          getRowId={getLoggedModelsTableRowID}\n          suppressLoadingOverlay\n          suppressNoRowsOverlay\n          suppressColumnMoveAnimation\n          isFullWidthRow={isFullWidthRow}\n          fullWidthCellRenderer={LoadMoreRow}\n          onSortChanged={sortChangedHandler}\n          onGridReady={({ columnApi }) => {\n            columnApiRef.current = columnApi;\n            updateSortIndicator(orderByColumn, orderByAsc);\n            updateColumnVisibility(columnVisibility);\n          }}\n          onCellMouseOver={cellMouseOverHandler}\n          onCellMouseOut={cellMouseOutHandler}\n        />\n        {isLoading && (\n          <div\n            css={{\n              inset: 0,\n              top: (containsGroupedColumns ? theme.general.heightBase : 0) + theme.spacing.lg,\n              position: 'absolute',\n              paddingTop: theme.spacing.md,\n              paddingRight: theme.spacing.md,\n            }}\n          >\n            <TableSkeleton\n              lines={8}\n              label={\n                <FormattedMessage\n                  defaultMessage=\"Models loading\"\n                  description=\"Label for a loading spinner when table containing models is being loaded\"\n                />\n              }\n            />\n          </div>\n        )}\n        {!isLoading && loggedModels?.length === 0 && (\n          <ExperimentLoggedModelListPageTableEmpty\n            displayShowExampleButton={displayShowExampleButton}\n            badRequestError={badRequestError}\n            isFilteringActive={isFilteringActive}\n          />\n        )}\n      </div>\n    </ExperimentLoggedModelListPageTableContextProvider>\n  );\n};\n\nconst LoadMoreRow = () => {\n  const { theme } = useDesignSystemTheme();\n\n  const { moreResultsAvailable, loadMoreResults, isLoadingMore } = useExperimentLoggedModelListPageTableContext();\n\n  if (!moreResultsAvailable) {\n    return null;\n  }\n  return (\n    <div\n      css={{\n        pointerEvents: 'all',\n        userSelect: 'all',\n        padding: theme.spacing.sm,\n        display: 'flex',\n        justifyContent: 'center',\n      }}\n    >\n      <Button\n        componentId=\"mlflow.logged_models.list.load_more\"\n        type=\"primary\"\n        size=\"small\"\n        onClick={loadMoreResults}\n        loading={isLoadingMore}\n      >\n        <FormattedMessage\n          defaultMessage=\"Load more\"\n          description=\"Label for a button to load more results in the logged models table\"\n        />\n      </Button>\n    </div>\n  );\n};\n\nexport const ExperimentLoggedModelListPageTable = React.memo(ExperimentLoggedModelListPageTableImpl);\n\nconst isFullWidthRow: ((params: IsFullWidthRowParams) => boolean) | undefined = ({ rowNode }) =>\n  rowNode.data === LoggedModelsTableLoadMoreRowSymbol;\n","import { createContext, useCallback, useContext, useMemo, useRef } from 'react';\nimport { RUNS_VISIBILITY_MODE } from '../../experiment-page/models/ExperimentPageUIState';\nimport { determineIfRowIsHidden } from '../../experiment-page/utils/experimentPage.common-row-utils';\nimport { isUndefined } from 'lodash';\n\nconst ExperimentLoggedModelListPageRowVisibilityContext = createContext<{\n  isRowHidden: (rowUuid: string, rowIndex: number) => boolean;\n  setRowVisibilityMode: (visibilityMode: RUNS_VISIBILITY_MODE) => void;\n  toggleRowVisibility: (rowUuid: string, rowIndex: number) => void;\n  visibilityMode: RUNS_VISIBILITY_MODE;\n  usingCustomVisibility: boolean;\n}>({\n  isRowHidden: () => false,\n  setRowVisibilityMode: () => {},\n  toggleRowVisibility: () => {},\n  visibilityMode: RUNS_VISIBILITY_MODE.FIRST_10_RUNS,\n  usingCustomVisibility: false,\n});\n\n// Utility function that determines if a particular table row should be hidden,\n// based on the selected mode, position on the list and the visibility map.\nexport const isLoggedModelRowHidden = (\n  rowsVisibilityMode: RUNS_VISIBILITY_MODE,\n  runUuid: string,\n  rowIndex: number,\n  runsVisibilityMap: Record<string, boolean>,\n) => {\n  // If using rows visibility map, we should always use it to determine visibility\n  if (!isUndefined(runsVisibilityMap[runUuid])) {\n    return !runsVisibilityMap[runUuid];\n  }\n  if (rowsVisibilityMode === RUNS_VISIBILITY_MODE.HIDEALL) {\n    return true;\n  }\n  if (rowsVisibilityMode === RUNS_VISIBILITY_MODE.FIRST_10_RUNS) {\n    return rowIndex >= 10;\n  }\n  if (rowsVisibilityMode === RUNS_VISIBILITY_MODE.FIRST_20_RUNS) {\n    return rowIndex >= 20;\n  }\n\n  return false;\n};\n\nexport const ExperimentLoggedModelListPageRowVisibilityContextProvider = ({\n  children,\n  visibilityMap = {},\n  visibilityMode,\n  setRowVisibilityMode,\n  toggleRowVisibility,\n}: {\n  visibilityMap?: Record<string, boolean>;\n  visibilityMode: RUNS_VISIBILITY_MODE;\n  children: React.ReactNode;\n  setRowVisibilityMode: (visibilityMode: RUNS_VISIBILITY_MODE) => void;\n  toggleRowVisibility: (rowUuid: string, rowIndex: number) => void;\n}) => {\n  const isRowHidden = useCallback(\n    (rowUuid: string, rowIndex: number) => isLoggedModelRowHidden(visibilityMode, rowUuid, rowIndex, visibilityMap),\n    [visibilityMap, visibilityMode],\n  );\n\n  const usingCustomVisibility = useMemo(() => Object.keys(visibilityMap).length > 0, [visibilityMap]);\n\n  const contextValue = useMemo(\n    () => ({ isRowHidden, setRowVisibilityMode, toggleRowVisibility, visibilityMode, usingCustomVisibility }),\n    [isRowHidden, setRowVisibilityMode, toggleRowVisibility, visibilityMode, usingCustomVisibility],\n  );\n\n  return (\n    <ExperimentLoggedModelListPageRowVisibilityContext.Provider value={contextValue}>\n      {children}\n    </ExperimentLoggedModelListPageRowVisibilityContext.Provider>\n  );\n};\n\nexport const useExperimentLoggedModelListPageRowVisibilityContext = () =>\n  useContext(ExperimentLoggedModelListPageRowVisibilityContext);\n"],"names":["ExperimentLoggedModelTableGroupCell","data","_data$groupData","theme","useDesignSystemTheme","expandedGroups","onGroupToggle","useExperimentLoggedModelListPageTableContext","groupId","groupUuid","isExpanded","includes","_jsxs","css","_css","display","alignItems","gap","spacing","sm","children","_jsx","Button","icon","ChevronDownIcon","ChevronRightIcon","componentId","onClick","size","groupData","sourceRun","Link","to","Routes","getRunPageRoute","info","experimentId","runUuid","target","runName","LoggedModelsTableSpecialRowID","REMAINING_MODELS_GROUP","Typography","Text","FormattedMessage","id","defaultMessage","_ref","name","styles","_ref2","_ref3","ExperimentLoggedModelTableNameCell","props","_data$info","_data$info7","_data$info8","_data$info9","loggedModelData","isLoggedModelRow","loggedModels","useMemo","isUnifiedLoggedModelsEnabled","shouldUnifyLoggedModelsAndRegisteredModels","modelVersions","allModelVersions","isLoading","useExperimentLoggedModelRegisteredVersions","checkAcl","Boolean","isSymbol","isLoggedModelDataGroupDataRow","registeredModelVersions","filter","model","hasAccess","originalName","tooltipContent","getTooltipContent","_data$info2","_data$info3","length","linkUrl","experiment_id","model_id","getExperimentLoggedModelDetailsPageRoute","values","originalModelLink","_data$info4","width","LoggedModelsTableGroupingEnabledClass","paddingLeft","lg","RunColorPill","color","getStableColorForRun","ParagraphSkeleton","label","_data$info6","_data$info5","primaryModel","content","link","xs","displayedName","Tag","version","Tooltip","Overflow","map","modelVersion","React","_Fragment","ExperimentLoggedModelTableDatasetCell","loggedModel","uniqueDatasets","_loggedModel$data$met","_loggedModel$data","metrics","reduce","aggregate","dataset_digest","dataset_name","run_id","find","dataset","push","ExperimentLoggedModelDatasetButton","datasetName","datasetDigest","runId","join","ExperimentLoggedModelTableSourceRunCell","_data$sourceRun$info$","_data$sourceRun","_data$sourceRun$info","source_run_id","ExperimentLoggedModelActionsCell","rowIndex","_data$info$model_id","isRowHidden","toggleRowVisibility","useExperimentLoggedModelListPageRowVisibilityContext","isHidden","type","_data$info$model_id2","VisibleOffIcon","colors","textSecondary","VisibleFillIcon","ExperimentLoggedModelActionsHeaderCell","intl","useIntl","visibilityMode","usingCustomVisibility","setRowVisibilityMode","DropdownMenu","Root","modal","Trigger","asChild","formatMessage","RUNS_VISIBILITY_MODE","HIDEALL","Content","RadioGroup","value","onValueChange","e","coerceToEnum","FIRST_10_RUNS","RadioItem","ItemIndicator","DashIcon","FIRST_20_RUNS","SHOWALL","ExperimentLoggedModelTableRegisteredModelsCell","isEmpty","RegisteredModelOkIcon","createLoggedModelDatasetColumnGroupId","JSON","stringify","ExperimentLoggedModelTableDatasetColHeader","columnGroup","onDatasetClicked","useExperimentLoggedModelOpenDatasetDetails","loading","setLoading","useState","datasetObject","getGroupId","match","datasetHash","parse","parseLoggedModelDatasetColumnGroupId","overflow","fontSize","general","iconFontSize","typography","fontSizeBase","fontWeight","role","async","Spinner","TableIcon","ExperimentLoggedModelTableSourceCell","ExperimentLoggedModelSourceBox","ExperimentLoggedModelListPageKnownColumnGroups","ExperimentLoggedModelListPageKnownColumns","LOGGED_MODEL_LIST_METRIC_COLUMN_PREFIX","ExperimentLoggedModelListPageStaticColumns","Select","Name","CreationTime","createDatasetHash","parseLoggedModelMetricOrderByColumnId","metricColumnId","datasetHashOrMetricKey","metricKey","undefined","error","console","defaultColumnSet","Status","Source","SourceRun","RegisteredModels","Dataset","useExperimentLoggedModelListPageTableColumns","columnVisibility","supportedAttributeColumnKeys","disablePinnedColumns","disableOrderBy","enableSortingByMetrics","orderByColumn","orderByAsc","datasetMetricGroups","result","orderBy","_model$info","metric","key","extractMetricGroups","parameterKeys","compact","uniq","_loggedModel$data2","_loggedModel$data2$pa","params","param","flat","useMemoizeColumns","factory","deps","disable","ref","useRef","current","isEqual","attributeColumns","colId","RelationshipType","headerName","sortable","valueGetter","direction","pinned","resizable","Step","field","_data$step","step","cellRenderer","cellClass","isObject","LoggedModelsTableGroupHeaderRowClass","minWidth","flex","ExperimentLoggedModelStatusIndicator","ExperimentLoggedModelTableDateCell","sortingOrder","comparator","columnDefs","column","group","forEach","_metrics$map","headerGroupComponent","createLoggedModelMetricOrderByColumnId","hide","_data$data$metrics","_data$data","sort","paramKey","_data$data$params","_data$data2","compactColumnDefs","headerCheckboxSelection","checkboxSelection","maxWidth","headerComponent","AgGridFontInjector","domElementReference","useEffect","getRootNode","document","injectedStyleElement","createElement","className","appendChild","createTextNode","head","remove","AgGridReact","modules","ClientSideRowModelModule","METRIC_AGGREGATE_GROUP_ID","defaultExpandedTreeGroups","Attributes","ExperimentLoggedModelListPageColumnSelector","onUpdateColumns","disabled","customTrigger","leafColumnIds","treeData","_groupedColumnDefinit","groupedColumnDefinitions","attributeColumnGroup","col","_attributeColumnGroup","metricColumnGroups","_col$groupId","startsWith","paramColumnGroup","Params","buildDuboisTreeBranch","_col$groupId2","_col$headerName","_col$children$map","_col$children","title","ColumnsIcon","Tree","mode","showLine","defaultExpandedKeys","defaultCheckedKeys","onCheck","checkedKeys","keys","checked","LoggedModelsListPageSortableColumns","useLoggedModelsListPageState","state","dispatch","useReducer","action","groupBy","selectedFilterDatasets","_state$selectedFilter","_state$selectedFilter2","_state$selectedFilter3","some","rowVisibilityMode","rowVisibilityMap","rowUuid","_state$rowVisibilityM","currentHidden","isLoggedModelRowHidden","first","setOrderBy","useCallback","setColumnVisibility","toggleDataset","setGroupBy","clearSelectedDatasets","deferredState","useSafeDeferredValue","searchQuery","updateSearchQuery","isFilteringActive","LoggedModelsTableGroupByMode","isGroup","LoggedModelsTableLoadMoreRowSymbol","Symbol","getLoggedModelsTableRowID","LOAD_MORE","useLoggedModelTableDataRows","groupModelsBy","loggedModelsWithSourceRuns","groups","_loggedModel$info$sou","_loggedModel$info","sortedGroups","Object","entries","rows","models","_first","ExperimentLoggedModelListPageTableContext","createContext","ExperimentLoggedModelListPageTableContextProvider","loadMoreResults","moreResultsAvailable","isLoadingMore","contextValue","Provider","useContext","getExampleCode","isGenAIExperiment","getExampleCodeGenAI","getExampleCodeML","trim","_ref4","ExperimentLoggedModelListPageTableEmpty","displayShowExampleButton","badRequestError","useParams","invariant","isCodeExampleVisible","setIsCodeExampleVisible","experimentEntity","isExperimentLoading","useGetExperimentQuery","experiment","experimentKind","getExperimentKindFromTags","tags","ExperimentKind","GENAI_DEVELOPMENT","GENAI_DEVELOPMENT_INFERRED","inset","top","heightBase","position","justifyContent","minHeight","flexDirection","padding","md","Title","level","Paragraph","learnMoreLink","openInNewTab","href","src","versionsEmptyImg","alt","marginTop","Empty","description","message","chunks","getMlflow3DocsLink","image","DangerIcon","button","Modal","visible","onCancel","okText","onOk","CodeSnippet","language","Spacer","ExperimentLoggedModelListPageTableImpl","onLoadMore","onOrderByChange","relatedRunsData","disableLoadMore","useExperimentAgGridTableStyles","usingCustomHeaderComponent","setExpandedGroups","columnApiRef","run","_run$info","prev","loggedModelsDataRows","loggedModelsTableRows","sortChangedHandler","event","sortedColumn","columnApi","getColumnState","updateSortIndicator","asc","_columnApiRef$current","getColumn","_columnApiRef$current2","_columnApiRef$current3","currentSortedColumnId","_columnApiRef$current4","_columnApiRef$current5","getColId","setSort","updateColumnVisibility","newColumnVisibility","_columnApiRef$current6","_columnApiRef$current7","getAllColumns","_columnApiRef$current8","setColumnVisible","containsGroupedColumns","containerElement","cellMouseOverHandler","cellMouseOutHandler","useRunsHighlightTableRow","borderTop","border","MLFlowAgGrid","rowData","rowHeight","rowSelection","suppressRowClickSelection","suppressMovableColumns","getRowId","suppressLoadingOverlay","suppressNoRowsOverlay","suppressColumnMoveAnimation","isFullWidthRow","fullWidthCellRenderer","LoadMoreRow","onSortChanged","onGridReady","onCellMouseOver","onCellMouseOut","paddingTop","paddingRight","TableSkeleton","lines","pointerEvents","userSelect","ExperimentLoggedModelListPageTable","rowNode","ExperimentLoggedModelListPageRowVisibilityContext","rowsVisibilityMode","runsVisibilityMap","isUndefined","ExperimentLoggedModelListPageRowVisibilityContextProvider","visibilityMap"],"sourceRoot":""}