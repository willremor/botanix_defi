{"version":3,"file":"static/js/8455.d8d24bfc.chunk.js","mappings":"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","sources":["experiment-tracking/components/runs-charts/components/RunsChartsGlobalChartSettingsDropdown.tsx","common/hooks/useIsTabActive.tsx","experiment-tracking/components/run-page/RunViewArtifactTab.tsx","experiment-tracking/components/run-page/useRunViewActiveTab.tsx","experiment-tracking/components/run-page/RunViewModeSwitch.tsx","experiment-tracking/components/run-page/RunViewHeaderRegisterModelButton.tsx","experiment-tracking/components/run-page/RunViewHeader.tsx","experiment-tracking/components/run-page/overview/RunViewStatusBox.tsx","experiment-tracking/components/run-page/overview/RunViewUserLinkBox.tsx","experiment-tracking/components/run-page/overview/RunViewMetricsTable.tsx","experiment-tracking/components/run-page/overview/RunViewParentRunBox.tsx","experiment-tracking/components/run-page/overview/RunViewTagsBox.tsx","experiment-tracking/components/run-page/overview/RunViewDescriptionBox.tsx","experiment-tracking/components/run-page/overview/RunViewRegisteredModelsBox.tsx","experiment-tracking/pages/prompts/hooks/usePromptVersionsForRunQuery.tsx","experiment-tracking/components/run-page/overview/RunViewRegisteredPromptsBox.tsx","experiment-tracking/components/run-page/overview/RunViewLoggedModelsBox.tsx","experiment-tracking/components/run-page/overview/RunViewSourceBox.tsx","experiment-tracking/components/run-page/overview/RunViewLoggedModelsTable.tsx","experiment-tracking/hooks/logged-models/useCombinedRunInputsOutputsModels.tsx","experiment-tracking/components/run-page/overview/RunViewDatasetBoxV2.tsx","experiment-tracking/components/run-page/hooks/useRunDetailsPageOverviewSectionsV2.tsx","experiment-tracking/components/run-page/RunViewOverview.tsx","experiment-tracking/components/RunNotFoundView.tsx","experiment-tracking/components/run-page/RunViewChartTooltipBody.tsx","experiment-tracking/components/run-page/RunViewMetricCharts.tsx","experiment-tracking/components/experiment-page/hooks/useLoggedModelsForExperimentRunV2.tsx","experiment-tracking/components/run-page/RunPage.tsx","experiment-tracking/components/experiment-page/hooks/useLoggedModelsForExperimentRun.tsx","graphql/get-graphql-error.ts","experiment-tracking/components/modals/DeleteRunModal.tsx","shared/web-shared/unified-tagging/components/TagAssignmentUI/TagAssignmentRowContainer.tsx","shared/web-shared/unified-tagging/context/TagAssignmentContextProvider.tsx","shared/web-shared/unified-tagging/components/TagAssignmentRoot.tsx","shared/web-shared/unified-tagging/components/TagAssignmentRow.tsx","shared/web-shared/unified-tagging/components/TagAssignmentLabel.tsx","shared/web-shared/unified-tagging/components/TagAssignmentField/TagAssignmentInput.tsx","shared/web-shared/unified-tagging/components/TagAssignmentKey.tsx","shared/web-shared/unified-tagging/components/TagAssignmentValue.tsx","shared/web-shared/unified-tagging/components/TagAssignmentUI/TagAssignmentRemoveButtonUI.tsx","shared/web-shared/unified-tagging/components/TagAssignmentRemoveButton.tsx","shared/web-shared/unified-tagging/hooks/useTagAssignmentFieldArray.ts","shared/web-shared/unified-tagging/hooks/useTagAssignmentForm.tsx","common/components/UnifiedTaggingForm.tsx","common/hooks/useTagAssignmentModal.tsx","experiment-tracking/components/runs-charts/components/RunsChartsFilterInput.tsx","common/components/PageContainer.tsx","experiment-tracking/components/modals/RenameRunModal.tsx","experiment-tracking/components/experiment-page/hooks/usePopulateImagesByRunUuid.tsx","experiment-tracking/components/NotFoundPage.tsx","experiment-tracking/hooks/logged-models/useGetLoggedModelsQuery.tsx"],"sourcesContent":["import { Button, CheckIcon, DropdownMenu, GearIcon, Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport type { RunsChartsGlobalLineChartConfig } from '../../experiment-page/models/ExperimentPageUIState';\nimport { isUndefined } from 'lodash';\nimport { RunsChartsLineChartXAxisType } from './RunsCharts.common';\nimport { useCallback } from 'react';\nimport { LineSmoothSlider } from '../../LineSmoothSlider';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport type { RunsChartsUIConfigurationSetter } from '../hooks/useRunsChartsUIConfiguration';\n\nexport const RunsChartsGlobalChartSettingsDropdown = ({\n  globalLineChartConfig,\n  metricKeyList,\n  updateUIState,\n}: {\n  metricKeyList: string[];\n  globalLineChartConfig?: RunsChartsGlobalLineChartConfig;\n  updateUIState: (stateSetter: RunsChartsUIConfigurationSetter) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n  const { lineSmoothness, selectedXAxisMetricKey, xAxisKey } = globalLineChartConfig || {};\n\n  const updateGlobalLineChartSettings = useCallback(\n    (newSettings: Partial<RunsChartsGlobalLineChartConfig>) =>\n      updateUIState((state) => ({\n        ...state,\n        globalLineChartConfig: {\n          ...state.globalLineChartConfig,\n          ...newSettings,\n        },\n      })),\n    [updateUIState],\n  );\n\n  const isUsingGlobalMetricXaxis = xAxisKey === RunsChartsLineChartXAxisType.METRIC;\n\n  const label = intl.formatMessage({\n    defaultMessage: 'Configure charts',\n    description: 'Experiment page > view controls > global settings for line chart view > dropdown button label',\n  });\n\n  return (\n    <DropdownMenu.Root modal={false}>\n      <Tooltip\n        componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_44\"\n        content={label}\n      >\n        <DropdownMenu.Trigger asChild>\n          <Button\n            componentId=\"mlflow.charts.controls.global_chart_setup_dropdown\"\n            icon={<GearIcon />}\n            aria-label={label}\n            css={{ flexShrink: 0 }}\n          />\n        </DropdownMenu.Trigger>\n      </Tooltip>\n      <DropdownMenu.Content align=\"end\" css={{ minWidth: 300 }}>\n        <DropdownMenu.Group\n          role=\"region\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'X-axis',\n            description:\n              'Experiment page > view controls > global settings for line chart view > settings for x-axis section label',\n          })}\n        >\n          <DropdownMenu.Label css={{ display: 'flex', gap: 8 }}>\n            <FormattedMessage\n              defaultMessage=\"X-axis\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis section label\"\n            />\n          </DropdownMenu.Label>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_68\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.STEP}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.STEP })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Step\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use step axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_78\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.TIME}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.TIME })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Time (wall)\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use wall time axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.CheckboxItem\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_88\"\n            checked={xAxisKey === RunsChartsLineChartXAxisType.TIME_RELATIVE}\n            onClick={() => updateGlobalLineChartSettings({ xAxisKey: RunsChartsLineChartXAxisType.TIME_RELATIVE })}\n          >\n            <DropdownMenu.ItemIndicator />\n            <FormattedMessage\n              defaultMessage=\"Time (relative)\"\n              description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use relative time axis in all charts\"\n            />\n          </DropdownMenu.CheckboxItem>\n          <DropdownMenu.Sub>\n            <DropdownMenu.SubTrigger\n              css={{\n                paddingLeft: theme.spacing.xs + theme.spacing.sm,\n              }}\n            >\n              <DropdownMenu.IconWrapper>\n                <CheckIcon\n                  css={{\n                    visibility: isUsingGlobalMetricXaxis ? 'visible' : 'hidden',\n                  }}\n                />\n              </DropdownMenu.IconWrapper>\n              <FormattedMessage\n                defaultMessage=\"Metric\"\n                description=\"Experiment page > view controls > global settings for line chart view > settings for x-axis > label for setting to use metric axis in all charts\"\n              />\n            </DropdownMenu.SubTrigger>\n            <DropdownMenu.SubContent css={{ maxHeight: 300, overflow: 'auto' }}>\n              {metricKeyList.map((metricKey) => (\n                <DropdownMenu.CheckboxItem\n                  componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsglobalchartsettingsdropdown.tsx_118\"\n                  key={metricKey}\n                  checked={selectedXAxisMetricKey === metricKey && isUsingGlobalMetricXaxis}\n                  onClick={() =>\n                    updateGlobalLineChartSettings({\n                      xAxisKey: RunsChartsLineChartXAxisType.METRIC,\n                      selectedXAxisMetricKey: metricKey,\n                    })\n                  }\n                >\n                  <DropdownMenu.ItemIndicator />\n                  {metricKey}\n                </DropdownMenu.CheckboxItem>\n              ))}\n            </DropdownMenu.SubContent>\n          </DropdownMenu.Sub>\n        </DropdownMenu.Group>\n        <DropdownMenu.Group\n          role=\"region\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Line smoothing',\n            description:\n              'Runs charts > line chart > configuration > label for line smoothing slider control. The control allows changing data trace line smoothness from 1 to 100, where 1 is the original data trace and 100 is the smoothest trace. Line smoothing helps eliminate noise in the data.',\n          })}\n        >\n          <DropdownMenu.Label>\n            <FormattedMessage\n              defaultMessage=\"Line smoothing\"\n              description=\"Runs charts > line chart > configuration > label for line smoothing slider control. The control allows changing data trace line smoothness from 1 to 100, where 1 is the original data trace and 100 is the smoothest trace. Line smoothing helps eliminate noise in the data.\"\n            />\n          </DropdownMenu.Label>\n\n          <div css={{ padding: theme.spacing.sm }}>\n            <LineSmoothSlider\n              min={0}\n              max={100}\n              onChange={(lineSmoothness) => updateGlobalLineChartSettings({ lineSmoothness })}\n              value={lineSmoothness ? lineSmoothness : 0}\n            />\n          </div>\n        </DropdownMenu.Group>\n      </DropdownMenu.Content>\n    </DropdownMenu.Root>\n  );\n};\n","import { useEffect, useState } from 'react';\n\n/**\n * Hook that returns whether the browser tab is active or not.\n * @returns true if the tab is active, false otherwise\n */\nexport const useIsTabActive = () => {\n  const [isTabActive, setIsTabActive] = useState(document.visibilityState === 'visible');\n  useEffect(() => {\n    document.addEventListener('visibilitychange', (x) => {\n      setIsTabActive(document.visibilityState === 'visible');\n    });\n  }, []);\n  return isTabActive;\n};\n","import { useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../../../common/types';\nimport ArtifactPage from '../ArtifactPage';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport type { UseGetRunQueryResponseOutputs } from './hooks/useGetRunQuery';\n\n/**\n * A run page tab containing the artifact browser\n */\nexport const RunViewArtifactTab = ({\n  runTags,\n  experimentId,\n  runOutputs,\n  artifactUri,\n  runUuid,\n}: {\n  runUuid: string;\n  experimentId: string;\n  artifactUri?: string;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n  runTags: Record<string, KeyValueEntity>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  // Use scrollable artifact area only for non-xs screens\n  const useFullHeightPage = useMediaQuery(`(min-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        overflow: 'hidden',\n        display: 'flex',\n        paddingBottom: theme.spacing.md,\n        position: 'relative',\n      }}\n    >\n      <ArtifactPage\n        runUuid={runUuid}\n        runTags={runTags}\n        runOutputs={runOutputs}\n        useAutoHeight={useFullHeightPage}\n        artifactRootUri={artifactUri}\n        experimentId={experimentId}\n      />\n    </div>\n  );\n};\n","import { useParams } from '../../../common/utils/RoutingUtils';\nimport { RunPageTabName } from '../../constants';\n\n/**\n * Returns the run view's active tab.\n * - Supports multi-slash artifact paths (hence '*' catch-all param)\n * - Supports both new (/artifacts/...) and previous (/artifactPath/...) routes\n */\nexport const useRunViewActiveTab = (): RunPageTabName => {\n  const { '*': tabParam } = useParams<{ '*': string }>();\n  if (tabParam === 'model-metrics') {\n    return RunPageTabName.MODEL_METRIC_CHARTS;\n  }\n  if (tabParam === 'system-metrics') {\n    return RunPageTabName.SYSTEM_METRIC_CHARTS;\n  }\n  if (tabParam === 'evaluations') {\n    return RunPageTabName.EVALUATIONS;\n  }\n  if (tabParam === 'traces') {\n    return RunPageTabName.TRACES;\n  }\n  if (tabParam?.match(/^(artifactPath|artifacts)/)) {\n    return RunPageTabName.ARTIFACTS;\n  }\n\n  return RunPageTabName.OVERVIEW;\n};\n","import { LegacyTabs, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport { useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport Routes from '../../routes';\nimport { RunPageTabName } from '../../constants';\nimport { useRunViewActiveTab } from './useRunViewActiveTab';\nimport { useState } from 'react';\n\n// Set of tabs that when active, the margin of the tab selector should be removed for better displaying\nconst TABS_WITHOUT_MARGIN = [RunPageTabName.ARTIFACTS, RunPageTabName.EVALUATIONS];\n\n/**\n * Mode switcher for the run details page.\n */\nexport const RunViewModeSwitch = () => {\n  const { experimentId, runUuid } = useParams<{ runUuid: string; experimentId: string }>();\n  const navigate = useNavigate();\n  const { theme } = useDesignSystemTheme();\n  const currentTab = useRunViewActiveTab();\n  const [removeTabMargin, setRemoveTabMargin] = useState(TABS_WITHOUT_MARGIN.includes(currentTab));\n\n  const onTabChanged = (newTabKey: string) => {\n    if (!experimentId || !runUuid || currentTab === newTabKey) {\n      return;\n    }\n\n    setRemoveTabMargin(TABS_WITHOUT_MARGIN.includes(newTabKey as RunPageTabName));\n\n    if (newTabKey === RunPageTabName.OVERVIEW) {\n      navigate(Routes.getRunPageRoute(experimentId, runUuid));\n      return;\n    }\n    navigate(Routes.getRunPageTabRoute(experimentId, runUuid, newTabKey));\n  };\n\n  return (\n    // @ts-expect-error TS(2322)\n    <LegacyTabs activeKey={currentTab} onChange={onTabChanged} tabBarStyle={{ margin: removeTabMargin && '0px' }}>\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage defaultMessage=\"Overview\" description=\"Run details page > tab selector > overview tab\" />\n        }\n        key={RunPageTabName.OVERVIEW}\n      />\n\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage\n            defaultMessage=\"Model metrics\"\n            description=\"Run details page > tab selector > Model metrics tab\"\n          />\n        }\n        key={RunPageTabName.MODEL_METRIC_CHARTS}\n      />\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage\n            defaultMessage=\"System metrics\"\n            description=\"Run details page > tab selector > Model metrics tab\"\n          />\n        }\n        key={RunPageTabName.SYSTEM_METRIC_CHARTS}\n      />\n      <LegacyTabs.TabPane\n        tab={<FormattedMessage defaultMessage=\"Traces\" description=\"Run details page > tab selector > Traces tab\" />}\n        key={RunPageTabName.EVALUATIONS}\n      />\n      <LegacyTabs.TabPane\n        tab={\n          <FormattedMessage defaultMessage=\"Artifacts\" description=\"Run details page > tab selector > artifacts tab\" />\n        }\n        key={RunPageTabName.ARTIFACTS}\n      />\n    </LegacyTabs>\n  );\n};\n","import {\n  Button,\n  ChevronDownIcon,\n  DropdownMenu,\n  NewWindowIcon,\n  Tag,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { first, last, orderBy } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { RegisterModel } from '../../../model-registry/components/RegisterModel';\nimport { ModelVersionStatusIcons } from '../../../model-registry/constants';\nimport { ModelRegistryRoutes } from '../../../model-registry/routes';\nimport Routes from '../../routes';\nimport type { ModelVersionInfoEntity } from '../../types';\nimport type { KeyValueEntity } from '../../../common/types';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../common/static/registered-model-grey-ok.svg';\nimport type { RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\n\ninterface LoggedModelWithRegistrationInfo {\n  path: string;\n  absolutePath: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}\n\nfunction LoggedModelsDropdownContent({\n  models,\n  onRegisterClick,\n  experimentId,\n  runUuid,\n}: {\n  models: LoggedModelWithRegistrationInfo[];\n  onRegisterClick: (model: LoggedModelWithRegistrationInfo) => void;\n  experimentId: string;\n  runUuid: string;\n}) {\n  const { theme } = useDesignSystemTheme();\n  const renderSection = (title: string, sectionModels: LoggedModelWithRegistrationInfo[]) => {\n    return (\n      <DropdownMenu.Group>\n        <DropdownMenu.Label>{title}</DropdownMenu.Label>\n        {sectionModels.map((model) => {\n          const registeredModelSummary = first(model.registeredModelVersionSummaries);\n          if (!registeredModelSummary) {\n            return (\n              <DropdownMenu.Item\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_50\"\n                onClick={() => onRegisterClick(model)}\n                key={model.absolutePath}\n              >\n                <div css={{ marginRight: theme.spacing.md }}>{last(model.path.split('/'))}</div>\n                <DropdownMenu.HintColumn>\n                  <Link\n                    target=\"_blank\"\n                    to={Routes.getRunPageTabRoute(experimentId, runUuid, 'artifacts/' + model.path)}\n                  >\n                    <Button\n                      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_58\"\n                      type=\"link\"\n                      size=\"small\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                      }}\n                      endIcon={<NewWindowIcon />}\n                    >\n                      <FormattedMessage\n                        defaultMessage=\"View model\"\n                        description=\"Run page > Header > Register model dropdown > View model button label\"\n                      />\n                    </Button>\n                  </Link>\n                </DropdownMenu.HintColumn>\n              </DropdownMenu.Item>\n            );\n          }\n          const { status, displayedName, version, link } = registeredModelSummary;\n\n          return (\n            <Link target=\"_blank\" to={link} key={model.absolutePath}>\n              <DropdownMenu.Item componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_80\">\n                <DropdownMenu.IconWrapper css={{ display: 'flex', alignItems: 'center' }}>\n                  {status === 'READY' ? <RegisteredModelOkIcon /> : status ? ModelVersionStatusIcons[status] : null}\n                </DropdownMenu.IconWrapper>\n                <span css={{ marginRight: theme.spacing.md }}>\n                  {displayedName}\n                  <Tag\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_90\"\n                    css={{ marginLeft: 8, marginRight: 4 }}\n                  >\n                    v{version}\n                  </Tag>\n                </span>\n                <DropdownMenu.HintColumn>\n                  <Button\n                    componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_89\"\n                    type=\"link\"\n                    size=\"small\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                    }}\n                    endIcon={<NewWindowIcon />}\n                  >\n                    <FormattedMessage\n                      defaultMessage=\"Go to model\"\n                      description=\"Run page > Header > Register model dropdown > Go to model button label\"\n                    />\n                  </Button>\n                </DropdownMenu.HintColumn>\n              </DropdownMenu.Item>\n            </Link>\n          );\n        })}\n      </DropdownMenu.Group>\n    );\n  };\n  const registeredModels = models.filter((model) => model.registeredModelVersionSummaries.length > 0);\n  const unregisteredModels = models.filter((model) => !model.registeredModelVersionSummaries.length);\n  return (\n    <>\n      {unregisteredModels.length ? renderSection('Unregistered models', unregisteredModels) : null}\n      {unregisteredModels.length && registeredModels.length ? <DropdownMenu.Separator /> : null}\n      {registeredModels.length ? renderSection('Registered models', registeredModels) : null}\n    </>\n  );\n}\n\nconst getRegisteredModelVersionLink = (modelVersion: ModelVersionInfoEntity) => {\n  const { name, version } = modelVersion;\n  return ModelRegistryRoutes.getModelVersionPageRoute(name, version);\n};\n\nexport const RunViewHeaderRegisterModelButton = ({\n  runUuid,\n  experimentId,\n  runTags,\n  artifactRootUri,\n  registeredModelVersionSummaries,\n}: {\n  runUuid: string;\n  experimentId: string;\n  runTags: Record<string, KeyValueEntity>;\n  artifactRootUri?: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const loggedModelPaths = useMemo(\n    () => (runTags ? Utils.getLoggedModelsFromTags(runTags).map(({ artifactPath }) => artifactPath) : []),\n    [runTags],\n  );\n\n  const models = useMemo<LoggedModelWithRegistrationInfo[]>(\n    () =>\n      orderBy(\n        loggedModelPaths.map((path) => ({\n          path,\n          absolutePath: `${artifactRootUri}/${path}`,\n          registeredModelVersionSummaries:\n            registeredModelVersionSummaries?.filter(({ source }) => source === `${artifactRootUri}/${path}`) || [],\n        })),\n        (model) => parseInt(model.registeredModelVersionSummaries[0]?.version || '0', 10),\n        'desc',\n      ),\n    [loggedModelPaths, registeredModelVersionSummaries, artifactRootUri],\n  );\n\n  const [selectedModelToRegister, setSelectedModelToRegister] = useState<LoggedModelWithRegistrationInfo | null>(null);\n\n  if (models.length > 1) {\n    const modelsRegistered = models.filter((model) => model.registeredModelVersionSummaries.length > 0);\n\n    return (\n      <>\n        {selectedModelToRegister && (\n          <RegisterModel\n            runUuid={runUuid}\n            modelPath={selectedModelToRegister.absolutePath}\n            modelRelativePath={selectedModelToRegister.path}\n            disabled={false}\n            showButton={false}\n            modalVisible\n            onCloseModal={() => setSelectedModelToRegister(null)}\n          />\n        )}\n        <DropdownMenu.Root modal={false}>\n          <LegacyTooltip\n            placement=\"bottom\"\n            title={\n              <FormattedMessage\n                defaultMessage=\"{registeredCount}/{loggedCount} logged models are registered\"\n                description=\"Run page > Header > Register model dropdown > Button tooltip\"\n                values={{ registeredCount: modelsRegistered.length, loggedCount: models.length }}\n              />\n            }\n          >\n            <DropdownMenu.Trigger asChild>\n              <Button\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_195\"\n                type=\"primary\"\n                endIcon={<ChevronDownIcon />}\n              >\n                <FormattedMessage\n                  defaultMessage=\"Register model\"\n                  description=\"Run page > Header > Register model dropdown > Button label when some models are not registered\"\n                />\n              </Button>\n            </DropdownMenu.Trigger>\n          </LegacyTooltip>\n          <DropdownMenu.Content align=\"end\">\n            <LoggedModelsDropdownContent\n              models={models}\n              onRegisterClick={setSelectedModelToRegister}\n              experimentId={experimentId}\n              runUuid={runUuid}\n            />\n          </DropdownMenu.Content>\n        </DropdownMenu.Root>\n      </>\n    );\n  }\n\n  const singleModel = first(models);\n\n  if (!singleModel) {\n    return null;\n  }\n\n  const registeredModelVersionSummary = first(singleModel.registeredModelVersionSummaries);\n\n  if (registeredModelVersionSummary) {\n    return (\n      <Link to={registeredModelVersionSummary.link} target=\"_blank\" css={{ marginLeft: theme.spacing.sm }}>\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewheaderregistermodelbutton.tsx_231\"\n          endIcon={<NewWindowIcon />}\n          type=\"link\"\n        >\n          Model registered\n        </Button>\n      </Link>\n    );\n  }\n  return (\n    <RegisterModel\n      disabled={false}\n      runUuid={runUuid}\n      modelPath={singleModel.absolutePath}\n      modelRelativePath={singleModel.path}\n      showButton\n      buttonType=\"primary\"\n    />\n  );\n};\n","import { FormattedMessage } from 'react-intl';\nimport { Link } from '../../../common/utils/RoutingUtils';\nimport { OverflowMenu, PageHeader } from '../../../shared/building_blocks/PageHeader';\nimport Routes, { PageId as ExperimentTrackingPageId } from '../../routes';\nimport type { ExperimentEntity } from '../../types';\nimport type { KeyValueEntity } from '../../../common/types';\nimport { RunViewModeSwitch } from './RunViewModeSwitch';\nimport Utils from '../../../common/utils/Utils';\nimport { RunViewHeaderRegisterModelButton } from './RunViewHeaderRegisterModelButton';\nimport type { UseGetRunQueryResponseExperiment, UseGetRunQueryResponseOutputs } from './hooks/useGetRunQuery';\nimport type { RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { ExperimentKind } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { ExperimentPageTabName } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { EXPERIMENT_KIND_TAG_KEY } from '../../utils/ExperimentKindUtils';\nimport { useMemo } from 'react';\n\n/**\n * Run details page header component, common for all page view modes\n */\nexport const RunViewHeader = ({\n  hasComparedExperimentsBefore,\n  comparedExperimentIds = [],\n  experiment,\n  runDisplayName,\n  runTags,\n  runParams,\n  runUuid,\n  runOutputs,\n  handleRenameRunClick,\n  handleDeleteRunClick,\n  artifactRootUri,\n  registeredModelVersionSummaries,\n  isLoading,\n}: {\n  hasComparedExperimentsBefore?: boolean;\n  comparedExperimentIds?: string[];\n  runDisplayName: string;\n  runUuid: string;\n  runOutputs?: UseGetRunQueryResponseOutputs | null;\n  runTags: Record<string, KeyValueEntity>;\n  runParams: Record<string, KeyValueEntity>;\n  experiment: ExperimentEntity | UseGetRunQueryResponseExperiment;\n  handleRenameRunClick: () => void;\n  handleDeleteRunClick?: () => void;\n  artifactRootUri?: string;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n  isLoading?: boolean;\n}) => {\n  const shouldRouteToEvaluations = useMemo(() => {\n    const isGenAIExperiment =\n      experiment.tags?.find((tag) => tag.key === EXPERIMENT_KIND_TAG_KEY)?.value === ExperimentKind.GENAI_DEVELOPMENT;\n    const hasModelOutputs = runOutputs && runOutputs.modelOutputs ? runOutputs.modelOutputs.length > 0 : false;\n    return isGenAIExperiment && !hasModelOutputs;\n  }, [experiment, runOutputs]);\n\n  const experimentPageTabRoute = Routes.getExperimentPageTabRoute(\n    experiment.experimentId ?? '',\n    shouldRouteToEvaluations ? ExperimentPageTabName.EvaluationRuns : ExperimentPageTabName.Runs,\n  );\n\n  function getExperimentPageLink() {\n    return hasComparedExperimentsBefore && comparedExperimentIds ? (\n      <Link to={Routes.getCompareExperimentsPageRoute(comparedExperimentIds)}>\n        <FormattedMessage\n          defaultMessage=\"Displaying Runs from {numExperiments} Experiments\"\n          // eslint-disable-next-line max-len\n          description=\"Breadcrumb nav item to link to the compare-experiments page on compare runs page\"\n          values={{\n            numExperiments: comparedExperimentIds.length,\n          }}\n        />\n      </Link>\n    ) : (\n      <Link to={experimentPageTabRoute} data-testid=\"experiment-runs-link\">\n        {experiment.name}\n      </Link>\n    );\n  }\n\n  const breadcrumbs = [getExperimentPageLink()];\n  if (experiment.experimentId) {\n    breadcrumbs.push(\n      <Link to={experimentPageTabRoute} data-testid=\"experiment-observatory-link-runs\">\n        {shouldRouteToEvaluations ? (\n          <FormattedMessage\n            defaultMessage=\"Evaluations\"\n            description=\"Breadcrumb nav item to link to the evaluations tab on the parent experiment\"\n          />\n        ) : (\n          <FormattedMessage\n            defaultMessage=\"Runs\"\n            description=\"Breadcrumb nav item to link to the runs tab on the parent experiment\"\n          />\n        )}\n      </Link>,\n    );\n  }\n\n  const renderRegisterModelButton = () => {\n    return (\n      <RunViewHeaderRegisterModelButton\n        runUuid={runUuid}\n        experimentId={experiment?.experimentId ?? ''}\n        runTags={runTags}\n        artifactRootUri={artifactRootUri}\n        registeredModelVersionSummaries={registeredModelVersionSummaries}\n      />\n    );\n  };\n\n  return (\n    <div css={{ flexShrink: 0 }}>\n      <PageHeader\n        title={<span data-testid=\"runs-header\">{runDisplayName}</span>}\n        breadcrumbs={breadcrumbs}\n        /* prettier-ignore */\n      >\n        <OverflowMenu\n          menu={[\n            {\n              id: 'overflow-rename-button',\n              onClick: handleRenameRunClick,\n              itemName: (\n                <FormattedMessage defaultMessage=\"Rename\" description=\"Menu item to rename an experiment run\" />\n              ),\n            },\n            ...(handleDeleteRunClick\n              ? [\n                  {\n                    id: 'overflow-delete-button',\n                    onClick: handleDeleteRunClick,\n                    itemName: (\n                      <FormattedMessage defaultMessage=\"Delete\" description=\"Menu item to delete an experiment run\" />\n                    ),\n                  },\n                ]\n              : []),\n          ]}\n        />\n\n        {renderRegisterModelButton()}\n      </PageHeader>\n      <RunViewModeSwitch />\n    </div>\n  );\n};\n","import { Tag, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { RunInfoEntity } from '../../../types';\nimport { RunStatusIcon } from '../../RunStatusIcon';\nimport { FormattedMessage } from 'react-intl';\nimport type { MlflowRunStatus } from '../../../../graphql/__generated__/graphql';\n\n/**\n * Displays run status cell in run detail overview.\n */\nexport const RunViewStatusBox = ({ status }: { status: RunInfoEntity['status'] | MlflowRunStatus | null }) => {\n  const { theme } = useDesignSystemTheme();\n  const getTagColor = () => {\n    if (status === 'FINISHED') {\n      return theme.isDarkMode ? theme.colors.green800 : theme.colors.green100;\n    }\n    if (status === 'KILLED' || status === 'FAILED') {\n      return theme.isDarkMode ? theme.colors.red800 : theme.colors.red100;\n    }\n    if (status === 'SCHEDULED' || status === 'RUNNING') {\n      return theme.isDarkMode ? theme.colors.blue800 : theme.colors.blue100;\n    }\n\n    return undefined;\n  };\n\n  const getStatusLabel = () => {\n    if (status === 'FINISHED') {\n      return (\n        <Typography.Text color=\"success\">\n          <FormattedMessage\n            defaultMessage=\"Finished\"\n            description=\"Run page > Overview > Run status cell > Value for finished state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'KILLED') {\n      return (\n        <Typography.Text color=\"error\">\n          <FormattedMessage\n            defaultMessage=\"Killed\"\n            description=\"Run page > Overview > Run status cell > Value for killed state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'FAILED') {\n      return (\n        <Typography.Text color=\"error\">\n          <FormattedMessage\n            defaultMessage=\"Failed\"\n            description=\"Run page > Overview > Run status cell > Value for failed state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'RUNNING') {\n      return (\n        <Typography.Text color=\"info\">\n          <FormattedMessage\n            defaultMessage=\"Running\"\n            description=\"Run page > Overview > Run status cell > Value for running state\"\n          />\n        </Typography.Text>\n      );\n    }\n    if (status === 'SCHEDULED') {\n      return (\n        <Typography.Text color=\"info\">\n          <FormattedMessage\n            defaultMessage=\"Scheduled\"\n            description=\"Run page > Overview > Run status cell > Value for scheduled state\"\n          />\n        </Typography.Text>\n      );\n    }\n    return status;\n  };\n\n  return (\n    <Tag\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewstatusbox.tsx_81\"\n      css={{ backgroundColor: getTagColor() }}\n    >\n      {status && <RunStatusIcon status={status} />}{' '}\n      <Typography.Text css={{ marginLeft: theme.spacing.sm }}>{getStatusLabel()}</Typography.Text>\n    </Tag>\n  );\n};\n","import { Link } from '../../../../common/utils/RoutingUtils';\nimport Utils from '../../../../common/utils/Utils';\nimport Routes from '../../../routes';\nimport type { RunInfoEntity } from '../../../types';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\nexport const RunViewUserLinkBox = ({\n  runInfo,\n  tags,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n}) => {\n  const user = Utils.getUser(runInfo, tags);\n  return <Link to={Routes.searchRunsByUser(runInfo?.experimentId ?? '', user)}>{user}</Link>;\n};\n","import {\n  Empty,\n  Input,\n  Overflow,\n  SearchIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport type { LoggedModelProto, MetricEntitiesByName, MetricEntity, RunInfoEntity } from '../../../types';\nimport { compact, flatMap, groupBy, isEmpty, keyBy, mapValues, sum, values } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { RunPageTabName } from '../../../constants';\nimport { FormattedMessage, defineMessages, useIntl } from 'react-intl';\nimport { isSystemMetricKey } from '../../../utils/MetricsUtils';\nimport type { ColumnDef, Table as TableDef } from '@tanstack/react-table';\nimport { flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\nimport { isUndefined } from 'lodash';\nimport { useExperimentTrackingDetailsPageLayoutStyles } from '../../../hooks/useExperimentTrackingDetailsPageLayoutStyles';\n\nconst { systemMetricsLabel, modelMetricsLabel } = defineMessages({\n  systemMetricsLabel: {\n    defaultMessage: 'System metrics',\n    description: 'Run page > Overview > Metrics table > System charts section > title',\n  },\n  modelMetricsLabel: {\n    defaultMessage: 'Model metrics',\n    description: 'Run page > Overview > Metrics table > Model charts section > title',\n  },\n});\n\nconst metricKeyMatchesFilter =\n  (filter: string) =>\n  ({ key }: MetricEntity) =>\n    key.toLowerCase().includes(filter.toLowerCase());\n\ninterface MetricEntityWithLoggedModels extends MetricEntity {\n  loggedModels?: LoggedModelProto[];\n}\n\nconst RunViewMetricsTableSection = ({\n  metricsList,\n  runInfo,\n  header,\n  table,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  metricsList: MetricEntityWithLoggedModels[];\n  header?: React.ReactNode;\n  table: TableDef<MetricEntityWithLoggedModels>;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [{ column: keyColumn }, ...otherColumns] = table.getLeafHeaders();\n\n  const valueColumn = otherColumns.find((column) => column.id === 'value')?.column;\n\n  const anyRowHasModels = metricsList.some(({ loggedModels }) => !isEmpty(loggedModels));\n  const modelColumn = otherColumns.find((column) => column.id === 'models')?.column;\n\n  return metricsList.length ? (\n    <>\n      {header && (\n        <TableRow>\n          <TableCell css={{ flex: 1, backgroundColor: theme.colors.backgroundSecondary }}>\n            <Typography.Text bold>\n              {header} ({metricsList.length})\n            </Typography.Text>\n          </TableCell>\n        </TableRow>\n      )}\n      {metricsList.map(\n        ({\n          // Get metric key and value to display in table\n          key,\n          value,\n          loggedModels,\n        }) => (\n          <TableRow key={key}>\n            <TableCell\n              style={{\n                flex: keyColumn.getCanResize() ? keyColumn.getSize() / 100 : undefined,\n              }}\n            >\n              <Link\n                to={Routes.getRunPageTabRoute(\n                  runInfo.experimentId ?? '',\n                  runInfo.runUuid ?? '',\n                  RunPageTabName.MODEL_METRIC_CHARTS,\n                )}\n              >\n                {key}\n              </Link>\n            </TableCell>\n            <TableCell\n              css={{\n                flex: valueColumn?.getCanResize() ? valueColumn.getSize() / 100 : undefined,\n              }}\n            >\n              {value.toString()}\n            </TableCell>\n            {anyRowHasModels && (\n              <TableCell\n                css={{\n                  flex: modelColumn?.getCanResize() ? modelColumn.getSize() / 100 : undefined,\n                }}\n              >\n                {!isEmpty(loggedModels) ? (\n                  <Overflow>\n                    {loggedModels?.map((model) => (\n                      <Link\n                        key={model.info?.model_id}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        to={Routes.getExperimentLoggedModelDetailsPage(\n                          model.info?.experiment_id ?? '',\n                          model.info?.model_id ?? '',\n                        )}\n                      >\n                        {model.info?.name}\n                      </Link>\n                    ))}\n                  </Overflow>\n                ) : (\n                  '-'\n                )}\n              </TableCell>\n            )}\n          </TableRow>\n        ),\n      )}\n    </>\n  ) : null;\n};\n\n/**\n * Displays table with metrics key/values in run detail overview.\n */\nexport const RunViewMetricsTable = ({\n  latestMetrics,\n  runInfo,\n  loggedModels,\n}: {\n  latestMetrics: MetricEntitiesByName;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  loggedModels?: LoggedModelProto[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { detailsPageTableStyles, detailsPageNoEntriesStyles } = useExperimentTrackingDetailsPageLayoutStyles();\n  const intl = useIntl();\n  const [filter, setFilter] = useState('');\n\n  /**\n   * Aggregate logged models by metric key.\n   * This is used to display the models associated with each metric in the table.\n   */\n  const loggedModelsByMetricKey = useMemo(() => {\n    if (!loggedModels) {\n      return {};\n    }\n    const metricsWithModels = compact(\n      flatMap(loggedModels, (model) => model.data?.metrics?.map(({ key }) => ({ key, model }))),\n    );\n    const groupedMetrics = groupBy(metricsWithModels, 'key');\n    return mapValues(groupedMetrics, (group) => group.map(({ model }) => model));\n  }, [loggedModels]);\n\n  /**\n   * Enrich the metric list with related logged models.\n   */\n  const metricValues = useMemo<MetricEntityWithLoggedModels[]>(() => {\n    const metricList = values(latestMetrics);\n\n    if (isEmpty(loggedModelsByMetricKey)) {\n      return metricList;\n    }\n    return metricList.map((metric) => ({\n      ...metric,\n      loggedModels: loggedModelsByMetricKey[metric.key] ?? [],\n    }));\n  }, [latestMetrics, loggedModelsByMetricKey]);\n\n  const anyRowHasModels = metricValues.some(({ loggedModels }) => !isEmpty(loggedModels));\n\n  const modelColumnDefs: ColumnDef<MetricEntityWithLoggedModels>[] = useMemo(\n    () => [\n      {\n        id: 'models',\n        header: intl.formatMessage({\n          defaultMessage: 'Models',\n          description: 'Run page > Overview > Metrics table > Models column header',\n        }),\n        accessorKey: 'models',\n        enableResizing: true,\n      },\n    ],\n    [intl],\n  );\n\n  const columns = useMemo(() => {\n    const columnDefs: ColumnDef<MetricEntityWithLoggedModels>[] = [\n      {\n        id: 'key',\n        accessorKey: 'key',\n        header: () => (\n          <FormattedMessage\n            defaultMessage=\"Metric\"\n            description=\"Run page > Overview > Metrics table > Key column header\"\n          />\n        ),\n        enableResizing: true,\n        size: 240,\n      },\n      {\n        id: 'value',\n        header: () => (\n          <FormattedMessage\n            defaultMessage=\"Value\"\n            description=\"Run page > Overview > Metrics table > Value column header\"\n          />\n        ),\n        accessorKey: 'value',\n        enableResizing: true,\n      },\n    ];\n\n    if (anyRowHasModels) {\n      columnDefs.push(...modelColumnDefs);\n    }\n\n    return columnDefs;\n  }, [anyRowHasModels, modelColumnDefs]);\n\n  // Break down metric lists into system and model segments. If no system (or model) metrics\n  // are detected, return a single segment.\n  const metricSegments = useMemo(() => {\n    const systemMetrics = metricValues.filter(({ key }) => isSystemMetricKey(key));\n    const modelMetrics = metricValues.filter(({ key }) => !isSystemMetricKey(key));\n    const isSegmented = systemMetrics.length > 0 && modelMetrics.length > 0;\n    if (!isSegmented) {\n      return [{ header: undefined, metrics: metricValues.filter(metricKeyMatchesFilter(filter)) }];\n    }\n    return [\n      {\n        header: intl.formatMessage(systemMetricsLabel),\n        metrics: systemMetrics.filter(metricKeyMatchesFilter(filter)),\n      },\n      {\n        header: intl.formatMessage(modelMetricsLabel),\n        metrics: modelMetrics.filter(metricKeyMatchesFilter(filter)),\n      },\n    ];\n  }, [filter, metricValues, intl]);\n\n  const table = useReactTable<MetricEntity>({\n    data: metricValues,\n    getCoreRowModel: getCoreRowModel(),\n    getRowId: (row) => row.key,\n    enableColumnResizing: true,\n    columnResizeMode: 'onChange',\n    columns,\n  });\n\n  const renderTableContent = () => {\n    if (!metricValues.length) {\n      return (\n        <div css={detailsPageNoEntriesStyles}>\n          <Empty\n            description={\n              <FormattedMessage\n                defaultMessage=\"No metrics recorded\"\n                description=\"Run page > Overview > Metrics table > No metrics recorded\"\n              />\n            }\n          />\n        </div>\n      );\n    }\n\n    const areAllResultsFiltered = sum(metricSegments.map(({ metrics }) => metrics.length)) < 1;\n\n    return (\n      <>\n        <div css={{ marginBottom: theme.spacing.sm }}>\n          <Input\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewmetricstable.tsx_186\"\n            prefix={<SearchIcon />}\n            placeholder={intl.formatMessage({\n              defaultMessage: 'Search metrics',\n              description: 'Run page > Overview > Metrics table > Filter input placeholder',\n            })}\n            value={filter}\n            onChange={(e) => setFilter(e.target.value)}\n            allowClear\n          />\n        </div>\n\n        <Table\n          scrollable\n          empty={\n            areAllResultsFiltered ? (\n              <div>\n                <Empty\n                  description={\n                    <FormattedMessage\n                      defaultMessage=\"No metrics match the search filter\"\n                      description=\"Message displayed when no metrics match the search filter in the run details page details metrics table\"\n                    />\n                  }\n                />\n              </div>\n            ) : null\n          }\n          css={detailsPageTableStyles}\n        >\n          <TableRow isHeader>\n            {table.getLeafHeaders().map((header) => (\n              <TableHeader\n                componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewmetricstable.tsx_312\"\n                key={header.id}\n                header={header}\n                column={header.column}\n                setColumnSizing={table.setColumnSizing}\n                isResizing={header.column.getIsResizing()}\n                style={{\n                  flex: header.column.getCanResize() ? header.column.getSize() / 100 : undefined,\n                }}\n              >\n                {flexRender(header.column.columnDef.header, header.getContext())}\n              </TableHeader>\n            ))}\n          </TableRow>\n          {metricSegments.map((segment, index) => (\n            <RunViewMetricsTableSection\n              key={segment.header || index}\n              metricsList={segment.metrics}\n              runInfo={runInfo}\n              header={segment.header}\n              table={table}\n            />\n          ))}\n        </Table>\n      </>\n    );\n  };\n  return (\n    <div\n      css={{\n        flex: '0 0 auto',\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n      }}\n    >\n      <Typography.Title level={4} css={{ flexShrink: 0 }}>\n        <FormattedMessage\n          defaultMessage=\"Metrics ({length})\"\n          description=\"Run page > Overview > Metrics table > Section title\"\n          values={{ length: metricValues.filter(metricKeyMatchesFilter(filter)).length }}\n        />\n      </Typography.Title>\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.borderDecorative}`,\n          borderRadius: theme.general.borderRadiusBase,\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          overflow: 'hidden',\n        }}\n      >\n        {renderTableContent()}\n      </div>\n    </div>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport type { ReduxState, ThunkDispatch } from '../../../../redux-types';\nimport { useEffect, useMemo } from 'react';\nimport { getRunApi } from '../../../actions';\nimport { ParagraphSkeleton } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport Routes from '../../../routes';\nimport { FormattedMessage } from 'react-intl';\nimport { shouldEnableGraphQLRunDetailsPage } from '../../../../common/utils/FeatureUtils';\nimport { useGetRunQuery } from '../hooks/useGetRunQuery';\n\nexport const RunViewParentRunBox = ({ parentRunUuid }: { parentRunUuid: string }) => {\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const parentRunInfoRedux = useSelector(({ entities }: ReduxState) => {\n    return entities.runInfosByUuid[parentRunUuid];\n  });\n\n  const parentRunInfoGraphql = useGetRunQuery({\n    runUuid: parentRunUuid,\n    disabled: !shouldEnableGraphQLRunDetailsPage(),\n  });\n\n  const parentRunInfo = useMemo(() => {\n    return shouldEnableGraphQLRunDetailsPage() ? parentRunInfoGraphql?.data?.info : parentRunInfoRedux;\n  }, [parentRunInfoGraphql, parentRunInfoRedux]);\n\n  useEffect(() => {\n    // Don't call REST API if GraphQL is enabled\n    if (shouldEnableGraphQLRunDetailsPage()) {\n      return;\n    }\n    if (!parentRunInfo) {\n      dispatch(getRunApi(parentRunUuid));\n    }\n  }, [dispatch, parentRunUuid, parentRunInfo]);\n\n  if (!parentRunInfo) {\n    return (\n      <ParagraphSkeleton\n        loading\n        label={\n          <FormattedMessage\n            defaultMessage=\"Parent run name loading\"\n            description=\"Run page > Overview > Parent run name loading\"\n          />\n        }\n      />\n    );\n  }\n\n  if (!parentRunInfo.experimentId || !parentRunInfo.runUuid) {\n    return null;\n  }\n\n  return (\n    <Link to={Routes.getRunPageRoute(parentRunInfo.experimentId, parentRunInfo.runUuid)}>{parentRunInfo.runName}</Link>\n  );\n};\n","import { Button, PencilIcon, Spinner, Tooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport { shouldUseSharedTaggingUI } from '../../../../common/utils/FeatureUtils';\nimport { useEditKeyValueTagsModal } from '../../../../common/hooks/useEditKeyValueTagsModal';\nimport { useTagAssignmentModal } from '../../../../common/hooks/useTagAssignmentModal';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport { KeyValueTag } from '../../../../common/components/KeyValueTag';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { keys, values } from 'lodash';\nimport { useDispatch } from 'react-redux';\nimport type { ThunkDispatch } from '../../../../redux-types';\nimport { setRunTagsBulkApi, saveRunTagsApi } from '../../../actions';\nimport { useMemo, useState } from 'react';\nimport { isUserFacingTag } from '../../../../common/utils/TagUtils';\n\n/**\n * Displays run tags cell in run detail overview.\n */\nexport const RunViewTagsBox = ({\n  runUuid,\n  tags,\n  onTagsUpdated,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  onTagsUpdated: () => void;\n}) => {\n  const sharedTaggingUIEnabled = shouldUseSharedTaggingUI();\n\n  const [isSavingTags, setIsSavingTags] = useState(false);\n\n  const { theme } = useDesignSystemTheme();\n  const dispatch = useDispatch<ThunkDispatch>();\n  const intl = useIntl();\n\n  // Get keys and tag entities while excluding system tags\n  const [visibleTagKeys, visibleTagEntities] = useMemo(\n    () => [keys(tags).filter(isUserFacingTag), values(tags).filter(({ key }) => isUserFacingTag(key))],\n    [tags],\n  );\n\n  const tagsKeyValueMap: KeyValueEntity[] = visibleTagEntities.map(({ key, value }) => ({ key, value }));\n\n  const { TagAssignmentModal, showTagAssignmentModal } = useTagAssignmentModal({\n    componentIdPrefix: 'mlflow.run-view-tags-box',\n    initialTags: tagsKeyValueMap,\n    isLoading: isSavingTags,\n    onSubmit: (newTags: KeyValueEntity[], deletedTags: KeyValueEntity[]) => {\n      setIsSavingTags(true);\n      return dispatch(saveRunTagsApi(runUuid, newTags, deletedTags)).then(() => {\n        setIsSavingTags(false);\n      });\n    },\n    onSuccess: onTagsUpdated,\n  });\n\n  const { EditTagsModal, showEditTagsModal, isLoading } = useEditKeyValueTagsModal({\n    valueRequired: true,\n    allAvailableTags: visibleTagKeys,\n    saveTagsHandler: async (_, existingTags, newTags) =>\n      dispatch(setRunTagsBulkApi(runUuid, existingTags, newTags)).then(onTagsUpdated),\n  });\n\n  const showEditModal = () => {\n    if (sharedTaggingUIEnabled) {\n      showTagAssignmentModal();\n      return;\n    }\n\n    showEditTagsModal({ tags: visibleTagEntities });\n  };\n\n  const editTagsLabel = intl.formatMessage({\n    defaultMessage: 'Edit tags',\n    description: \"Run page > Overview > Tags cell > 'Edit' button label\",\n  });\n\n  return (\n    <div\n      css={{\n        paddingTop: theme.spacing.xs,\n        paddingBottom: theme.spacing.xs,\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        gap: theme.spacing.xs,\n      }}\n    >\n      {tagsKeyValueMap.length < 1 ? (\n        <Button\n          componentId=\"mlflow.run_details.overview.tags.add_button\"\n          size=\"small\"\n          type=\"tertiary\"\n          onClick={showEditModal}\n        >\n          <FormattedMessage\n            defaultMessage=\"Add tags\"\n            description=\"Run page > Overview > Tags cell > 'Add' button label\"\n          />\n        </Button>\n      ) : (\n        <>\n          {tagsKeyValueMap.map((tag) => (\n            <KeyValueTag tag={tag} key={`${tag.key}-${tag.value}`} enableFullViewModal css={{ marginRight: 0 }} />\n          ))}\n          <Tooltip componentId=\"mlflow.run_details.overview.tags.edit_button.tooltip\" content={editTagsLabel}>\n            <Button\n              componentId=\"mlflow.run_details.overview.tags.edit_button\"\n              aria-label={editTagsLabel}\n              size=\"small\"\n              icon={<PencilIcon />}\n              onClick={showEditModal}\n            />\n          </Tooltip>\n        </>\n      )}\n      {isLoading && <Spinner size=\"small\" />}\n      {/** Old modal for editing tags */}\n      {EditTagsModal}\n      {/** New modal for editing tags, using shared tagging UI */}\n      {TagAssignmentModal}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { EditableNote } from '../../../../common/components/EditableNote';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport { NOTE_CONTENT_TAG } from '../../../utils/NoteUtils';\nimport { Button, PencilIcon, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useDispatch } from 'react-redux';\nimport type { ThunkDispatch } from '../../../../redux-types';\nimport { setTagApi } from '../../../actions';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\n/**\n * Displays editable description section in run detail overview.\n */\nexport const RunViewDescriptionBox = ({\n  runUuid,\n  tags,\n  onDescriptionChanged,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  onDescriptionChanged: () => void | Promise<void>;\n}) => {\n  const noteContent = tags[NOTE_CONTENT_TAG]?.value || '';\n\n  const [showNoteEditor, setShowNoteEditor] = useState(false);\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const handleSubmitEditNote = (markdown: string) =>\n    dispatch(setTagApi(runUuid, NOTE_CONTENT_TAG, markdown))\n      .then(onDescriptionChanged)\n      .then(() => setShowNoteEditor(false));\n  const handleCancelEditNote = () => setShowNoteEditor(false);\n\n  const isEmpty = !noteContent;\n\n  return (\n    <div css={{ marginBottom: theme.spacing.md }}>\n      <Typography.Title level={4} css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.xs }}>\n        <FormattedMessage\n          defaultMessage=\"Description\"\n          description=\"Run page > Overview > Description section > Section title\"\n        />\n        <Button\n          componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewdescriptionbox.tsx_46\"\n          size=\"small\"\n          type=\"tertiary\"\n          aria-label={intl.formatMessage({\n            defaultMessage: 'Edit description',\n            description: 'Run page > Overview > Description section > Edit button label',\n          })}\n          onClick={() => setShowNoteEditor(true)}\n          icon={<PencilIcon />}\n        />\n      </Typography.Title>\n      {isEmpty && !showNoteEditor && (\n        <Typography.Hint>\n          <FormattedMessage\n            defaultMessage=\"No description\"\n            description=\"Run page > Overview > Description section > Empty value placeholder\"\n          />\n        </Typography.Hint>\n      )}\n      {(!isEmpty || showNoteEditor) && (\n        <EditableNote\n          defaultMarkdown={noteContent}\n          onSubmit={handleSubmitEditNote}\n          onCancel={handleCancelEditNote}\n          showEditor={showNoteEditor}\n        />\n      )}\n    </div>\n  );\n};\n","import { Overflow, Tag, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { ReactComponent as RegisteredModelOkIcon } from '../../../../common/static/registered-model-grey-ok.svg';\nimport type { RunPageModelVersionSummary } from '../hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\n\n/**\n * Displays list of registered models in run detail overview.\n * TODO: expand with logged models after finalizing design\n */\nexport const RunViewRegisteredModelsBox = ({\n  registeredModelVersionSummaries,\n}: {\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <Overflow>\n      {registeredModelVersionSummaries?.map((modelSummary) => (\n        <Link\n          key={modelSummary.displayedName}\n          to={modelSummary.link}\n          css={{ display: 'flex', alignItems: 'center', gap: theme.spacing.sm }}\n        >\n          <RegisteredModelOkIcon /> {modelSummary.displayedName}{' '}\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewregisteredmodelsbox.tsx_40\"\n            css={{ cursor: 'pointer' }}\n          >\n            v{modelSummary.version}\n          </Tag>\n        </Link>\n      ))}\n    </Overflow>\n  );\n};\n","import type { QueryFunctionContext, UseQueryOptions } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport { useQuery } from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport type { PromptVersionsForRunResponse, RegisteredPromptDetailsResponse, RegisteredPromptVersion } from '../types';\nimport { RegisteredPromptsApi } from '../api';\n\nconst queryFn = async ({ queryKey }: QueryFunctionContext<PromptVersionsForRunQueryKey>) => {\n  const [, { runUuid }] = queryKey;\n  return RegisteredPromptsApi.getPromptVersionsForRun(runUuid);\n};\n\ntype PromptVersionsForRunQueryKey = ['run_uuid', { runUuid: string }];\n\nexport const usePromptVersionsForRunQuery = (\n  { runUuid }: { runUuid: string },\n  options: UseQueryOptions<\n    PromptVersionsForRunResponse,\n    Error,\n    PromptVersionsForRunResponse,\n    PromptVersionsForRunQueryKey\n  > = {},\n) => {\n  const queryResult = useQuery<\n    PromptVersionsForRunResponse,\n    Error,\n    PromptVersionsForRunResponse,\n    PromptVersionsForRunQueryKey\n  >(['run_uuid', { runUuid }], {\n    queryFn,\n    retry: false,\n    ...options,\n  });\n\n  return {\n    data: queryResult.data,\n    error: queryResult.error ?? undefined,\n    isLoading: queryResult.isLoading,\n    refetch: queryResult.refetch,\n  };\n};\n","import { ParagraphSkeleton, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '@mlflow/mlflow/src/common/types';\n\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport { usePromptVersionsForRunQuery } from '../../../pages/prompts/hooks/usePromptVersionsForRunQuery';\nimport Routes from '../../../routes';\nimport { parseLinkedPromptsFromRunTags } from '../../../pages/prompts/utils';\n\nexport const RunViewRegisteredPromptsBox = ({\n  tags,\n  runUuid,\n}: {\n  tags: Record<string, KeyValueEntity>;\n  runUuid: string;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  // This part is for supporting prompt versions created using mlflow < 3.1.0\n  const { data, error, isLoading } = usePromptVersionsForRunQuery({ runUuid });\n  const promptVersionsFromPromptTags = data?.model_versions || [];\n  const promptVersionsFromRunTags = parseLinkedPromptsFromRunTags(tags);\n  const promptVersions = [...promptVersionsFromPromptTags, ...promptVersionsFromRunTags];\n\n  if (isLoading) {\n    return <ParagraphSkeleton />;\n  }\n\n  if (error || !promptVersions || promptVersions.length === 0) {\n    return <Typography.Hint css={{ padding: `${theme.spacing.xs}px 0px` }}>—</Typography.Hint>;\n  }\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexDirection: 'row',\n        gap: theme.spacing.sm,\n        flexWrap: 'wrap',\n        padding: `${theme.spacing.xs}px 0px`,\n      }}\n    >\n      {promptVersions.map((promptVersion, index) => {\n        const to = Routes.getPromptDetailsPageRoute(encodeURIComponent(promptVersion.name));\n        const displayText = `${promptVersion.name} (v${promptVersion.version})`;\n        return (\n          <Typography.Text key={displayText} css={{ whiteSpace: 'nowrap' }}>\n            <Link to={to}>{displayText}</Link>\n            {index < promptVersions.length - 1 && ','}\n          </Typography.Text>\n        );\n      })}\n    </div>\n  );\n};\n","import { ModelsIcon, Overflow, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { Link } from '../../../../common/utils/RoutingUtils';\nimport type { RunInfoEntity } from '../../../types';\nimport { type LoggedModelProto } from '../../../types';\nimport Routes from '../../../routes';\nimport { first } from 'lodash';\nimport { FormattedMessage } from 'react-intl';\nimport { useMemo } from 'react';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Displays list of registered models in run detail overview.\n */\nexport const RunViewLoggedModelsBox = ({\n  loggedModels,\n  loggedModelsV3,\n  runInfo,\n}: {\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  loggedModelsV3: LoggedModelProto[];\n  loggedModels: {\n    artifactPath: string;\n    flavors: string[];\n    utcTimeCreated: number;\n  }[];\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { experimentId, runUuid } = runInfo;\n\n  const getModelFlavorName = (flavors: string[]) => {\n    return (\n      first(flavors) || (\n        <FormattedMessage\n          defaultMessage=\"Model\"\n          description=\"Run page > Overview > Logged models > Unknown model flavor\"\n        />\n      )\n    );\n  };\n\n  // Check if list has models with same flavor names.\n  // If true, display artifact path in dropdown menu to reduce ambiguity.\n  const shouldDisplayArtifactPaths = useMemo(() => {\n    const flavors = loggedModels.map((model) => getModelFlavorName(model.flavors));\n    const uniqueFlavors = new Set(flavors);\n    return uniqueFlavors.size !== flavors.length;\n  }, [loggedModels]);\n\n  return (\n    <Overflow>\n      {loggedModels.map((model, index) => {\n        return (\n          <Link\n            to={Routes.getRunPageRoute(experimentId ?? '', runUuid ?? '', model.artifactPath)}\n            key={model.artifactPath}\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: theme.spacing.sm,\n              cursor: 'pointer',\n              height: shouldDisplayArtifactPaths && index > 0 ? theme.general.heightBase : theme.general.heightSm,\n            }}\n          >\n            <ModelsIcon />\n            <div>\n              {getModelFlavorName(model.flavors)}\n              {shouldDisplayArtifactPaths && index > 0 && <Typography.Hint>{model.artifactPath}</Typography.Hint>}\n            </div>\n          </Link>\n        );\n      })}\n      {loggedModelsV3.map((model, index) => {\n        return (\n          <Link\n            to={Routes.getExperimentLoggedModelDetailsPageRoute(experimentId ?? '', model.info?.model_id ?? '')}\n            key={model.info?.model_id ?? index}\n            css={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: theme.spacing.sm,\n              cursor: 'pointer',\n              height: shouldDisplayArtifactPaths && index > 0 ? theme.general.heightBase : theme.general.heightSm,\n            }}\n          >\n            <ModelsIcon />\n            <div>{model.info?.name}</div>\n          </Link>\n        );\n      })}\n    </Overflow>\n  );\n};\n","import {\n  BranchIcon,\n  CopyIcon,\n  GitCommitIcon,\n  Tag,\n  LegacyTooltip,\n  Typography,\n  useDesignSystemTheme,\n  Popover,\n} from '@databricks/design-system';\nimport Utils from '../../../../common/utils/Utils';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport { MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG } from '../../../constants';\nimport { CopyButton } from '@mlflow/mlflow/src/shared/building_blocks/CopyButton';\nimport { ExperimentSourceTypeIcon } from '../../ExperimentSourceTypeIcon';\n\nexport const RunViewSourceBox = ({\n  runUuid,\n  tags,\n  search,\n  className,\n}: {\n  runUuid: string;\n  tags: Record<string, KeyValueEntity>;\n  search: string;\n  className?: string;\n}) => {\n  const branchName = tags?.[MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG]?.value;\n  const commitHash = tags?.[Utils.gitCommitTag]?.value;\n  const runSource = Utils.renderSource(tags, search, runUuid, branchName);\n\n  const { theme } = useDesignSystemTheme();\n  return runSource ? (\n    <div\n      css={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: theme.spacing.sm,\n        paddingTop: theme.spacing.sm,\n        paddingBottom: theme.spacing.sm,\n        flexWrap: 'wrap',\n      }}\n      className={className}\n    >\n      <ExperimentSourceTypeIcon\n        sourceType={tags[Utils.sourceTypeTag]?.value}\n        css={{ color: theme.colors.actionPrimaryBackgroundDefault }}\n      />\n      {runSource}{' '}\n      {branchName && (\n        <LegacyTooltip title={branchName}>\n          <Tag\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_overview_runviewsourcebox.tsx_48\"\n            css={{ marginRight: 0 }}\n          >\n            <div css={{ display: 'flex', gap: 4, whiteSpace: 'nowrap' }}>\n              <BranchIcon /> {branchName}\n            </div>\n          </Tag>\n        </LegacyTooltip>\n      )}\n      {commitHash && (\n        <Popover.Root componentId=\"mlflow.run_details.overview.source.commit_hash_popover\">\n          <Popover.Trigger asChild>\n            <Tag\n              componentId=\"mlflow.run_details.overview.source.commit_hash\"\n              css={{ marginRight: 0, '&>div': { paddingRight: 0 } }}\n            >\n              <div css={{ display: 'flex', gap: theme.spacing.xs, whiteSpace: 'nowrap', alignContent: 'center' }}>\n                <GitCommitIcon />\n                {commitHash.slice(0, 7)}\n              </div>\n            </Tag>\n          </Popover.Trigger>\n          <Popover.Content align=\"start\">\n            <Popover.Arrow />\n            <div css={{ display: 'flex', gap: theme.spacing.xs, alignItems: 'center' }}>\n              {commitHash}\n              <CopyButton showLabel={false} size=\"small\" type=\"tertiary\" copyText={commitHash} icon={<CopyIcon />} />\n            </div>\n          </Popover.Content>\n        </Popover.Root>\n      )}\n    </div>\n  ) : (\n    <Typography.Hint>—</Typography.Hint>\n  );\n};\n","import {\n  Alert,\n  Button,\n  ColumnsIcon,\n  getShadowScrollStyles,\n  Spacer,\n  Typography,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport type { Theme } from '@emotion/react';\nimport { useMemo, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useCombinedRunInputsOutputsModels } from '../../../hooks/logged-models/useCombinedRunInputsOutputsModels';\nimport type { LoggedModelProto, RunInfoEntity } from '../../../types';\nimport { ExperimentLoggedModelListPageTable } from '../../experiment-logged-models/ExperimentLoggedModelListPageTable';\nimport {\n  ExperimentLoggedModelListPageKnownColumns,\n  useExperimentLoggedModelListPageTableColumns,\n} from '../../experiment-logged-models/hooks/useExperimentLoggedModelListPageTableColumns';\nimport { ExperimentLoggedModelOpenDatasetDetailsContextProvider } from '../../experiment-logged-models/hooks/useExperimentLoggedModelOpenDatasetDetails';\nimport type {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from '../hooks/useGetRunQuery';\nimport { ExperimentLoggedModelListPageColumnSelector } from '../../experiment-logged-models/ExperimentLoggedModelListPageColumnSelector';\n\nconst supportedAttributeColumnKeys = [\n  ExperimentLoggedModelListPageKnownColumns.RelationshipType,\n  ExperimentLoggedModelListPageKnownColumns.Step,\n  ExperimentLoggedModelListPageKnownColumns.Name,\n  ExperimentLoggedModelListPageKnownColumns.Status,\n  ExperimentLoggedModelListPageKnownColumns.CreationTime,\n  ExperimentLoggedModelListPageKnownColumns.RegisteredModels,\n  ExperimentLoggedModelListPageKnownColumns.Dataset,\n];\n\nexport const RunViewLoggedModelsTable = ({\n  inputs,\n  outputs,\n  runInfo,\n  loggedModelsV3,\n  isLoadingLoggedModels = false,\n  loggedModelsError,\n}: {\n  inputs?: UseGetRunQueryResponseInputs;\n  outputs?: UseGetRunQueryResponseOutputs;\n  runInfo?: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  loggedModelsV3: LoggedModelProto[];\n  isLoadingLoggedModels?: boolean;\n  loggedModelsError?: Error;\n}) => {\n  const { theme } = useDesignSystemTheme();\n\n  const { models: loggedModels } = useCombinedRunInputsOutputsModels(inputs, outputs, runInfo, loggedModelsV3);\n\n  const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>({});\n\n  const { columnDefs } = useExperimentLoggedModelListPageTableColumns({\n    loggedModels: loggedModels,\n    columnVisibility,\n    disablePinnedColumns: true,\n    disableOrderBy: true,\n    supportedAttributeColumnKeys,\n  });\n\n  return (\n    <div css={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n      <div css={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\n        <Typography.Title level={4} css={{ flexShrink: 0 }}>\n          <FormattedMessage\n            defaultMessage=\"Logged models ({length})\"\n            description=\"A header for a table of logged models displayed on the run page. The 'length' variable is being replaced with the number of displayed logged models.\"\n            values={{ length: loggedModels.length }}\n          />\n        </Typography.Title>\n        <ExperimentLoggedModelListPageColumnSelector\n          columnDefs={columnDefs}\n          onUpdateColumns={setColumnVisibility}\n          columnVisibility={columnVisibility}\n          customTrigger={<Button componentId=\"mlflow.logged_model.list.columns\" icon={<ColumnsIcon />} />}\n        />\n      </div>\n      <Spacer size=\"sm\" shrinks={false} />\n      <div\n        css={{\n          padding: theme.spacing.sm,\n          border: `1px solid ${theme.colors.border}`,\n          borderRadius: theme.general.borderRadiusBase,\n          display: 'flex',\n          flexDirection: 'column',\n          flex: 1,\n          overflow: 'hidden',\n        }}\n      >\n        {loggedModelsError instanceof Error && loggedModelsError.message && (\n          <>\n            <Alert\n              type=\"error\"\n              description={loggedModelsError.message}\n              message={\n                <FormattedMessage\n                  defaultMessage=\"Error loading logged models\"\n                  description=\"Error message displayed in the experiment run details page when loading logged models fails\"\n                />\n              }\n              closable={false}\n              componentId=\"mlflow.run_page.logged_model.list.error\"\n            />\n            <Spacer size=\"sm\" shrinks={false} />\n          </>\n        )}\n        <ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n          <ExperimentLoggedModelListPageTable\n            columnDefs={columnDefs}\n            loggedModels={loggedModels}\n            columnVisibility={columnVisibility}\n            isLoading={isLoadingLoggedModels}\n            isLoadingMore={false}\n            moreResultsAvailable={false}\n            disableLoadMore\n            css={getTableTheme(theme)}\n            displayShowExampleButton={false}\n          />\n        </ExperimentLoggedModelOpenDatasetDetailsContextProvider>\n      </div>\n    </div>\n  );\n};\n\nconst getTableTheme = (theme: Theme) => ({\n  '&.ag-theme-balham': {\n    '--ag-border-color': theme.colors.border,\n    '--ag-row-border-color': theme.colors.border,\n    '--ag-foreground-color': theme.colors.textPrimary,\n    '--ag-background-color': 'transparent',\n    '--ag-odd-row-background-color': 'transparent',\n    '--ag-row-hover-color': theme.colors.actionDefaultBackgroundHover,\n    '--ag-selected-row-background-color': theme.colors.actionDefaultBackgroundPress,\n    '--ag-header-foreground-color': theme.colors.textPrimary,\n    '--ag-header-background-color': theme.colors.backgroundPrimary,\n    '--ag-modal-overlay-background-color': theme.colors.overlayOverlay,\n    '.ag-header-row.ag-header-row-column-group': {\n      '--ag-header-foreground-color': theme.colors.textPrimary,\n    },\n    borderTop: 0,\n    fontSize: theme.typography.fontSizeBase,\n    '.ag-center-cols-viewport': {\n      ...getShadowScrollStyles(theme, {\n        orientation: 'horizontal',\n      }),\n    },\n  },\n});\n","import { compact, uniq, uniqBy } from 'lodash';\nimport { useMemo } from 'react';\nimport type {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from '../../components/run-page/hooks/useGetRunQuery';\nimport type { LoggedModelProto, RunInfoEntity } from '../../types';\n\ntype LoggedModelProtoWithRunDirection = LoggedModelProto & { direction: 'input' | 'output'; step?: string };\n\nconst filterMetricsByMatchingRunId = (runUuid?: string | null) => (loggedModel: LoggedModelProtoWithRunDirection) => {\n  if (loggedModel.data?.metrics) {\n    return {\n      ...loggedModel,\n      data: {\n        ...loggedModel.data,\n        metrics: loggedModel.data.metrics.filter((metric) => !runUuid || metric.run_id === runUuid),\n      },\n    };\n  }\n  return loggedModel;\n};\n\nexport const useCombinedRunInputsOutputsModels = (\n  inputs?: UseGetRunQueryResponseInputs,\n  outputs?: UseGetRunQueryResponseOutputs,\n  runInfo?: RunInfoEntity | UseGetRunQueryResponseRunInfo,\n  loggedModelsV3?: LoggedModelProto[],\n) => {\n  const inputLoggedModels = useMemo(() => {\n    const inputModelIds = compact(uniq(inputs?.modelInputs?.map((modelInput) => modelInput.modelId)));\n    return inputModelIds.map<LoggedModelProtoWithRunDirection | undefined>((model_id) => {\n      const model = loggedModelsV3?.find((model) => model.info?.model_id === model_id);\n      if (!model) return undefined;\n      return { ...model, direction: 'input' as const };\n    });\n  }, [inputs?.modelInputs, loggedModelsV3]);\n\n  const outputLoggedModels = useMemo(() => {\n    const outputModelIds = compact(uniq(outputs?.modelOutputs?.map((modelOutput) => modelOutput.modelId)));\n    return outputModelIds.map<LoggedModelProtoWithRunDirection | undefined>((model_id) => {\n      const model = loggedModelsV3?.find((model) => model.info?.model_id === model_id);\n\n      const correspondingOutputEntry = outputs?.modelOutputs?.find(({ modelId }) => modelId === model?.info?.model_id);\n\n      if (!model) return undefined;\n      return { ...model, direction: 'output' as const, step: correspondingOutputEntry?.step ?? undefined };\n    });\n  }, [outputs?.modelOutputs, loggedModelsV3]);\n\n  const modelsWithDirection = useMemo(() => {\n    return (\n      uniqBy(\n        compact([...inputLoggedModels, ...outputLoggedModels]).map(filterMetricsByMatchingRunId(runInfo?.runUuid)),\n        (modelData) => modelData.info?.model_id,\n      ) ?? []\n    );\n  }, [inputLoggedModels, outputLoggedModels, runInfo]);\n\n  return { models: modelsWithDirection };\n};\n","import { Overflow, Typography, useDesignSystemTheme } from '@databricks/design-system';\nimport { useState } from 'react';\nimport type { RunDatasetWithTags, RunInfoEntity } from '../../../types';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport type { DatasetWithRunType } from '../../experiment-page/components/runs/ExperimentViewDatasetDrawer';\nimport { ExperimentViewDatasetDrawer } from '../../experiment-page/components/runs/ExperimentViewDatasetDrawer';\nimport { ExperimentViewDatasetWithContext } from '../../experiment-page/components/runs/ExperimentViewDatasetWithContext';\nimport type { UseGetRunQueryResponseRunInfo } from '../hooks/useGetRunQuery';\n\n/**\n * Displays run datasets section in run detail overview.\n */\nexport const RunViewDatasetBoxV2 = ({\n  tags,\n  runInfo,\n  datasets,\n}: {\n  tags: Record<string, KeyValueEntity>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  datasets: RunDatasetWithTags[];\n}) => {\n  const [selectedDatasetWithRun, setSelectedDatasetWithRun] = useState<DatasetWithRunType | null>(null);\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const { theme } = useDesignSystemTheme();\n\n  if (!datasets || !datasets.length) {\n    return null;\n  }\n\n  const datasetClicked = (dataset: RunDatasetWithTags) => {\n    setSelectedDatasetWithRun({\n      datasetWithTags: dataset,\n      runData: {\n        experimentId: runInfo.experimentId ?? undefined,\n        runUuid: runInfo.runUuid ?? '',\n        runName: runInfo.runName ?? undefined,\n        datasets: datasets,\n        tags: tags,\n      },\n    });\n    setIsDrawerOpen(true);\n  };\n\n  return (\n    <>\n      <Overflow>\n        {datasets.map((datasetWithTags) => (\n          // eslint-disable-next-line react/jsx-key\n          <Typography.Link\n            componentId=\"mlflow.run_details.datasets_box.dataset_link\"\n            css={{\n              textAlign: 'left',\n              '.anticon': {\n                fontSize: theme.general.iconFontSize,\n              },\n            }}\n            onClick={() => datasetClicked(datasetWithTags)}\n          >\n            <ExperimentViewDatasetWithContext datasetWithTags={datasetWithTags} displayTextAsLink css={{ margin: 0 }} />\n          </Typography.Link>\n        ))}\n      </Overflow>\n      {selectedDatasetWithRun && (\n        <ExperimentViewDatasetDrawer\n          isOpen={isDrawerOpen}\n          setIsOpen={setIsDrawerOpen}\n          selectedDatasetWithRun={selectedDatasetWithRun}\n          setSelectedDatasetWithRun={setSelectedDatasetWithRun}\n        />\n      )}\n    </>\n  );\n};\n","import { Button, FileIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport type { AsideSections } from '@databricks/web-shared/utils';\nimport { KeyValueProperty, NoneCell } from '@databricks/web-shared/utils';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport type { LoggedModelProto, RunDatasetWithTags, RunInfoEntity } from '../../../types';\nimport type { KeyValueEntity } from '../../../../common/types';\nimport type { UseGetRunQueryResponseRunInfo } from './useGetRunQuery';\nimport Utils from '../../../../common/utils/Utils';\nimport { RunViewTagsBox } from '../overview/RunViewTagsBox';\nimport { RunViewUserLinkBox } from '../overview/RunViewUserLinkBox';\nimport { DetailsOverviewCopyableIdBox } from '../../DetailsOverviewCopyableIdBox';\nimport { RunViewStatusBox } from '../overview/RunViewStatusBox';\nimport { RunViewParentRunBox } from '../overview/RunViewParentRunBox';\nimport { EXPERIMENT_PARENT_ID_TAG } from '../../experiment-page/utils/experimentPage.common-utils';\nimport { RunViewDatasetBoxV2 } from '../overview/RunViewDatasetBoxV2';\nimport { RunViewSourceBox } from '../overview/RunViewSourceBox';\nimport { Link, useLocation } from '../../../../common/utils/RoutingUtils';\nimport { RunViewLoggedModelsBox } from '../overview/RunViewLoggedModelsBox';\nimport { useMemo } from 'react';\nimport type { RunPageModelVersionSummary } from './useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { RunViewRegisteredModelsBox } from '../overview/RunViewRegisteredModelsBox';\nimport Routes from '../../../routes';\nimport { RunViewRegisteredPromptsBox } from '../overview/RunViewRegisteredPromptsBox';\n\nenum RunDetailsPageMetadataSections {\n  DETAILS = 'DETAILS',\n  DATASETS = 'DATASETS',\n  TAGS = 'TAGS',\n  REGISTERED_MODELS = 'REGISTERED_MODELS',\n}\n\nexport const useRunDetailsPageOverviewSectionsV2 = ({\n  runUuid,\n  runInfo,\n  tags,\n  onTagsUpdated,\n  datasets,\n  shouldRenderLoggedModelsBox,\n  loggedModelsV3,\n  registeredModelVersionSummaries,\n}: {\n  runUuid: string;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n  onTagsUpdated: () => void;\n  datasets?: RunDatasetWithTags[];\n  shouldRenderLoggedModelsBox?: boolean;\n  loggedModelsV3: LoggedModelProto[];\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n}): AsideSections => {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const { search } = useLocation();\n  const loggedModelsFromTags = useMemo(() => Utils.getLoggedModelsFromTags(tags), [tags]);\n\n  const parentRunIdTag = tags[EXPERIMENT_PARENT_ID_TAG];\n\n  const renderPromptMetadataRow = () => {\n    return (\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Registered prompts',\n          description: 'Run page > Overview > Run prompts section label',\n        })}\n        value={<RunViewRegisteredPromptsBox tags={tags} runUuid={runUuid} />}\n      />\n    );\n  };\n\n  const detailsContent = runInfo && (\n    <>\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Created at',\n          description: 'Run page > Overview > Run start time section label',\n        })}\n        value={runInfo.startTime ? Utils.formatTimestamp(runInfo.startTime, intl) : <NoneCell />}\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Created by',\n          description: 'Run page > Overview > Run author section label',\n        })}\n        value={<RunViewUserLinkBox runInfo={runInfo} tags={tags} />}\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Experiment ID',\n          description: 'Run page > Overview > experiment ID section label',\n        })}\n        value={\n          <DetailsOverviewCopyableIdBox\n            value={runInfo?.experimentId ?? ''}\n            element={\n              runInfo?.experimentId ? (\n                <Link to={Routes.getExperimentPageRoute(runInfo.experimentId)}>{runInfo?.experimentId}</Link>\n              ) : undefined\n            }\n          />\n        }\n      />\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Status',\n          description: 'Run page > Overview > Run status section label',\n        })}\n        value={<RunViewStatusBox status={runInfo.status} />}\n      />\n\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Run ID',\n          description: 'Run page > Overview > Run ID section label',\n        })}\n        value={<DetailsOverviewCopyableIdBox value={runInfo.runUuid ?? ''} />}\n      />\n\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Duration',\n          description: 'Run page > Overview > Run duration section label',\n        })}\n        value={Utils.getDuration(runInfo.startTime, runInfo.endTime)}\n      />\n\n      {parentRunIdTag && (\n        <KeyValueProperty\n          keyValue={intl.formatMessage({\n            defaultMessage: 'Parent run',\n            description: 'Run page > Overview > Parent run',\n          })}\n          value={<RunViewParentRunBox parentRunUuid={parentRunIdTag.value} />}\n        />\n      )}\n      <KeyValueProperty\n        keyValue={intl.formatMessage({\n          defaultMessage: 'Source',\n          description: 'Run page > Overview > Run source section label',\n        })}\n        value={\n          <RunViewSourceBox\n            tags={tags}\n            search={search}\n            runUuid={runUuid}\n            css={{\n              paddingTop: theme.spacing.xs,\n              paddingBottom: theme.spacing.xs,\n            }}\n          />\n        }\n      />\n      {shouldRenderLoggedModelsBox && (\n        <KeyValueProperty\n          keyValue={intl.formatMessage({\n            defaultMessage: 'Logged models',\n            description: 'Run page > Overview > Run models section label',\n          })}\n          value={\n            <RunViewLoggedModelsBox\n              // Pass the run info and logged models\n              runInfo={runInfo}\n              loggedModels={loggedModelsFromTags}\n              loggedModelsV3={loggedModelsV3}\n            />\n          }\n        />\n      )}\n      {renderPromptMetadataRow()}\n    </>\n  );\n\n  return [\n    {\n      id: RunDetailsPageMetadataSections.DETAILS,\n      title: intl.formatMessage({\n        defaultMessage: 'About this run',\n        description: 'Title for the details/metadata section on the run details page',\n      }),\n      content: detailsContent,\n    },\n    {\n      id: RunDetailsPageMetadataSections.DATASETS,\n      title: intl.formatMessage({\n        defaultMessage: 'Datasets',\n        description: 'Title for the datasets section on the run details page',\n      }),\n      content: datasets?.length ? (\n        <RunViewDatasetBoxV2 tags={tags} runInfo={runInfo} datasets={datasets} />\n      ) : (\n        <NoneCell />\n      ),\n    },\n    {\n      id: RunDetailsPageMetadataSections.TAGS,\n      title: intl.formatMessage({\n        defaultMessage: 'Tags',\n        description: 'Title for the tags section on the run details page',\n      }),\n      content: <RunViewTagsBox runUuid={runInfo.runUuid ?? ''} tags={tags} onTagsUpdated={onTagsUpdated} />,\n    },\n    {\n      id: RunDetailsPageMetadataSections.REGISTERED_MODELS,\n      title: intl.formatMessage({\n        defaultMessage: 'Registered models',\n        description: 'Title for the registered models section on the run details page',\n      }),\n      content:\n        registeredModelVersionSummaries?.length > 0 ? (\n          <RunViewRegisteredModelsBox registeredModelVersionSummaries={registeredModelVersionSummaries} />\n        ) : (\n          <NoneCell />\n        ),\n    },\n  ];\n};\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport { useMemo } from 'react';\n\nimport { Button, FileIcon, Spacer, Spinner, Typography, useDesignSystemTheme } from '@databricks/design-system';\n\nimport Utils from '../../../common/utils/Utils';\nimport { useLocation } from '../../../common/utils/RoutingUtils';\nimport { EXPERIMENT_PARENT_ID_TAG } from '../experiment-page/utils/experimentPage.common-utils';\n\nimport { RunViewStatusBox } from './overview/RunViewStatusBox';\nimport { RunViewUserLinkBox } from './overview/RunViewUserLinkBox';\nimport { DetailsOverviewParamsTable } from '../DetailsOverviewParamsTable';\nimport { RunViewMetricsTable } from './overview/RunViewMetricsTable';\nimport { RunViewDatasetBox } from './overview/RunViewDatasetBox';\nimport { RunViewParentRunBox } from './overview/RunViewParentRunBox';\nimport { RunViewTagsBox } from './overview/RunViewTagsBox';\nimport { RunViewDescriptionBox } from './overview/RunViewDescriptionBox';\nimport { DetailsOverviewMetadataRow } from '../DetailsOverviewMetadataRow';\nimport { RunViewRegisteredModelsBox } from './overview/RunViewRegisteredModelsBox';\nimport { RunViewRegisteredPromptsBox } from './overview/RunViewRegisteredPromptsBox';\nimport { RunViewLoggedModelsBox } from './overview/RunViewLoggedModelsBox';\nimport { RunViewSourceBox } from './overview/RunViewSourceBox';\nimport { DetailsOverviewMetadataTable } from '@mlflow/mlflow/src/experiment-tracking/components/DetailsOverviewMetadataTable';\nimport type { LoggedModelProto } from '../../types';\nimport { ExperimentKind } from '../../constants';\nimport { useExperimentLoggedModelRegisteredVersions } from '../experiment-logged-models/hooks/useExperimentLoggedModelRegisteredVersions';\nimport { DetailsOverviewCopyableIdBox } from '../DetailsOverviewCopyableIdBox';\nimport type { RunInfoEntity } from '../../types';\nimport type {\n  UseGetRunQueryResponseInputs,\n  UseGetRunQueryResponseOutputs,\n  UseGetRunQueryResponseRunInfo,\n} from './hooks/useGetRunQuery';\nimport type { MetricEntitiesByName, RunDatasetWithTags } from '../../types';\nimport type { KeyValueEntity } from '../../../common/types';\nimport { type RunPageModelVersionSummary } from './hooks/useUnifiedRegisteredModelVersionsSummariesForRun';\nimport { isEmpty, uniqBy } from 'lodash';\nimport { RunViewLoggedModelsTable } from './overview/RunViewLoggedModelsTable';\nimport { DetailsPageLayout } from '../../../common/components/details-page-layout/DetailsPageLayout';\nimport { useRunDetailsPageOverviewSectionsV2 } from './hooks/useRunDetailsPageOverviewSectionsV2';\n\nconst EmptyValue = () => <Typography.Hint>—</Typography.Hint>;\n\nexport const RunViewOverview = ({\n  runUuid,\n  onRunDataUpdated,\n  tags,\n  runInfo,\n  datasets,\n  params,\n  latestMetrics,\n  runInputs,\n  runOutputs,\n  registeredModelVersionSummaries: registeredModelVersionSummariesForRun,\n  loggedModelsV3 = [],\n  isLoadingLoggedModels = false,\n  loggedModelsError,\n  experimentKind,\n}: {\n  runUuid: string;\n  onRunDataUpdated: () => void | Promise<any>;\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  tags: Record<string, KeyValueEntity>;\n  latestMetrics: MetricEntitiesByName;\n  runInputs?: UseGetRunQueryResponseInputs;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n  datasets?: RunDatasetWithTags[];\n  params: Record<string, KeyValueEntity>;\n  registeredModelVersionSummaries: RunPageModelVersionSummary[];\n  loggedModelsV3?: LoggedModelProto[];\n  isLoadingLoggedModels?: boolean;\n  loggedModelsError?: Error;\n  experimentKind?: ExperimentKind;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const { search } = useLocation();\n  const intl = useIntl();\n\n  const loggedModelsFromTags = useMemo(() => Utils.getLoggedModelsFromTags(tags), [tags]);\n  const parentRunIdTag = tags[EXPERIMENT_PARENT_ID_TAG];\n  const containsLoggedModelsFromInputsOutputs = !isEmpty(runInputs?.modelInputs) || !isEmpty(runOutputs?.modelOutputs);\n  const shouldRenderLoggedModelsBox = !containsLoggedModelsFromInputsOutputs;\n  const shouldRenderLinkedPromptsTable = experimentKind === ExperimentKind.GENAI_DEVELOPMENT;\n\n  // We have two flags for controlling the visibility of the \"logged models\" section:\n  // - `shouldRenderLoggedModelsBox` determines if \"logged models\" section should be rendered.\n  //   It is hidden if any IAv3 logged models are detected in inputs/outputs, in this case we're\n  //   displaying a big table instead.\n  // - `shouldDisplayContentsOfLoggedModelsBox` determines if the contents of the \"logged models\"\n  //   section should be displayed. It is hidden if there are no logged models to display.\n  const shouldDisplayContentsOfLoggedModelsBox = loggedModelsFromTags?.length > 0 || loggedModelsV3?.length > 0;\n  const { modelVersions: loggedModelsV3RegisteredModels } = useExperimentLoggedModelRegisteredVersions({\n    loggedModels: loggedModelsV3,\n  });\n\n  /**\n   * We have to query multiple sources for registered model versions (logged models API, models API, UC)\n   * and it's possible to end up with duplicates.\n   * We can dedupe them using `link` field, which should be unique for each model.\n   */\n  const registeredModelVersionSummaries = uniqBy(\n    [...registeredModelVersionSummariesForRun, ...loggedModelsV3RegisteredModels],\n    (model) => model?.link,\n  );\n\n  const renderPromptMetadataRow = () => {\n    return (\n      <DetailsOverviewMetadataRow\n        title={\n          <FormattedMessage\n            defaultMessage=\"Registered prompts\"\n            description=\"Run page > Overview > Run prompts section label\"\n          />\n        }\n        value={<RunViewRegisteredPromptsBox tags={tags} runUuid={runUuid} />}\n      />\n    );\n  };\n\n  const renderDetails = () => {\n    return (\n      <DetailsOverviewMetadataTable>\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created at\"\n              description=\"Run page > Overview > Run start time section label\"\n            />\n          }\n          value={runInfo.startTime ? Utils.formatTimestamp(runInfo.startTime, intl) : <EmptyValue />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Created by\"\n              description=\"Run page > Overview > Run author section label\"\n            />\n          }\n          value={<RunViewUserLinkBox runInfo={runInfo} tags={tags} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Experiment ID\"\n              description=\"Run page > Overview > experiment ID section label\"\n            />\n          }\n          value={<DetailsOverviewCopyableIdBox value={runInfo?.experimentId ?? ''} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage defaultMessage=\"Status\" description=\"Run page > Overview > Run status section label\" />\n          }\n          value={<RunViewStatusBox status={runInfo.status} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={<FormattedMessage defaultMessage=\"Run ID\" description=\"Run page > Overview > Run ID section label\" />}\n          value={<DetailsOverviewCopyableIdBox value={runInfo.runUuid ?? ''} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Duration\"\n              description=\"Run page > Overview > Run duration section label\"\n            />\n          }\n          value={Utils.getDuration(runInfo.startTime, runInfo.endTime)}\n        />\n        {parentRunIdTag && (\n          <DetailsOverviewMetadataRow\n            title={<FormattedMessage defaultMessage=\"Parent run\" description=\"Run page > Overview > Parent run\" />}\n            value={<RunViewParentRunBox parentRunUuid={parentRunIdTag.value} />}\n          />\n        )}\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Datasets used\"\n              description=\"Run page > Overview > Run datasets section label\"\n            />\n          }\n          value={\n            datasets?.length ? <RunViewDatasetBox tags={tags} runInfo={runInfo} datasets={datasets} /> : <EmptyValue />\n          }\n        />\n        <DetailsOverviewMetadataRow\n          title={<FormattedMessage defaultMessage=\"Tags\" description=\"Run page > Overview > Run tags section label\" />}\n          value={<RunViewTagsBox runUuid={runInfo.runUuid ?? ''} tags={tags} onTagsUpdated={onRunDataUpdated} />}\n        />\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage defaultMessage=\"Source\" description=\"Run page > Overview > Run source section label\" />\n          }\n          value={<RunViewSourceBox tags={tags} search={search} runUuid={runUuid} />}\n        />\n        {shouldRenderLoggedModelsBox && (\n          <DetailsOverviewMetadataRow\n            title={\n              <FormattedMessage\n                defaultMessage=\"Logged models\"\n                description=\"Run page > Overview > Run models section label\"\n              />\n            }\n            value={\n              isLoadingLoggedModels ? (\n                <Spinner />\n              ) : shouldDisplayContentsOfLoggedModelsBox ? (\n                <RunViewLoggedModelsBox\n                  // Pass the run info and logged models\n                  runInfo={runInfo}\n                  loggedModels={loggedModelsFromTags}\n                  // Provide loggedModels from IA v3\n                  loggedModelsV3={loggedModelsV3}\n                />\n              ) : (\n                <EmptyValue />\n              )\n            }\n          />\n        )}\n        <DetailsOverviewMetadataRow\n          title={\n            <FormattedMessage\n              defaultMessage=\"Registered models\"\n              description=\"Run page > Overview > Run models section label\"\n            />\n          }\n          value={\n            registeredModelVersionSummaries?.length > 0 ? (\n              <RunViewRegisteredModelsBox registeredModelVersionSummaries={registeredModelVersionSummaries} />\n            ) : (\n              <EmptyValue />\n            )\n          }\n        />\n        {renderPromptMetadataRow()}\n      </DetailsOverviewMetadataTable>\n    );\n  };\n\n  const renderParams = () => {\n    return <DetailsOverviewParamsTable params={params} />;\n  };\n\n  const detailsSectionsV2 = useRunDetailsPageOverviewSectionsV2({\n    runUuid,\n    runInfo,\n    tags,\n    onTagsUpdated: onRunDataUpdated,\n    datasets,\n    loggedModelsV3,\n    shouldRenderLoggedModelsBox,\n    registeredModelVersionSummaries,\n  });\n  const usingSidebarLayout = true;\n  return (\n    <DetailsPageLayout\n      css={{ flex: 1, alignSelf: 'flex-start' }}\n      // Enable sidebar layout based on feature flag\n      usingSidebarLayout={usingSidebarLayout}\n      secondarySections={detailsSectionsV2}\n    >\n      <RunViewDescriptionBox runUuid={runUuid} tags={tags} onDescriptionChanged={onRunDataUpdated} />\n      {!usingSidebarLayout && (\n        <>\n          <Typography.Title level={4}>\n            <FormattedMessage defaultMessage=\"Details\" description=\"Run page > Overview > Details section title\" />\n          </Typography.Title>\n          {renderDetails()}\n        </>\n      )}\n      <div\n        // Use different grid setup for unified details page layout\n        css={[\n          usingSidebarLayout ? { flexDirection: 'column' } : { minHeight: 360, maxHeight: 760 },\n          { display: 'flex', gap: theme.spacing.lg, overflow: 'hidden' },\n        ]}\n      >\n        <RunViewMetricsTable latestMetrics={latestMetrics} runInfo={runInfo} loggedModels={loggedModelsV3} />\n        {renderParams()}\n      </div>\n      {containsLoggedModelsFromInputsOutputs && (\n        <>\n          {!usingSidebarLayout && <Spacer />}\n          <div css={{ minHeight: 360, maxHeight: 760, overflow: 'hidden', display: 'flex' }}>\n            <RunViewLoggedModelsTable\n              loggedModelsV3={loggedModelsV3}\n              isLoadingLoggedModels={isLoadingLoggedModels}\n              inputs={runInputs}\n              outputs={runOutputs}\n              runInfo={runInfo}\n              loggedModelsError={loggedModelsError}\n            />\n          </div>\n        </>\n      )}\n      {!usingSidebarLayout && <Spacer />}\n    </DetailsPageLayout>\n  );\n};\n","import Routes from '../routes';\nimport { ErrorView } from '../../common/components/ErrorView';\n\ntype Props = {\n  runId: string;\n};\n\nexport function RunNotFoundView({ runId }: Props) {\n  return (\n    <ErrorView\n      statusCode={404}\n      subMessage={`Run ID ${runId} does not exist`}\n      fallbackHomePageReactRoute={Routes.rootRoute}\n    />\n  );\n}\n","import type { MetricHistoryByName, RunInfoEntity } from '../../types';\nimport {\n  containsMultipleRunsTooltipData,\n  RunsChartsTooltipMode,\n  type RunsChartsTooltipBodyProps,\n} from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { isSystemMetricKey } from '../../utils/MetricsUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { isUndefined } from 'lodash';\nimport type {\n  RunsCompareMultipleTracesTooltipData,\n  RunsMetricsSingleTraceTooltipData,\n} from '../runs-charts/components/RunsMetricsLinePlot';\nimport type { RunsMetricsBarPlotHoverData } from '../runs-charts/components/RunsMetricsBarPlot';\nimport { RunsMultipleTracesTooltipBody } from '../runs-charts/components/RunsMultipleTracesTooltipBody';\nimport { Spacer, Typography } from '@databricks/design-system';\n\n/**\n * Tooltip body displayed when hovering over run view metric charts\n */\nexport const RunViewChartTooltipBody = ({\n  contextData: { metricsForRun },\n  hoverData,\n  chartData: { metricKey },\n  isHovering,\n  mode,\n}: RunsChartsTooltipBodyProps<\n  { metricsForRun: MetricHistoryByName },\n  { metricKey: string },\n  RunsMetricsBarPlotHoverData | RunsMetricsSingleTraceTooltipData | RunsCompareMultipleTracesTooltipData\n>) => {\n  const singleTraceHoverData = containsMultipleRunsTooltipData(hoverData) ? hoverData.hoveredDataPoint : hoverData;\n  const intl = useIntl();\n\n  if (\n    mode === RunsChartsTooltipMode.MultipleTracesWithScanline &&\n    containsMultipleRunsTooltipData(hoverData) &&\n    isHovering\n  ) {\n    return <RunsMultipleTracesTooltipBody hoverData={hoverData} />;\n  }\n\n  if (!singleTraceHoverData?.metricEntity) {\n    return null;\n  }\n\n  const { timestamp, step, value } = singleTraceHoverData.metricEntity;\n\n  const metricContainsHistory = metricsForRun?.[metricKey]?.length > 1;\n  const isSystemMetric = isSystemMetricKey(metricKey);\n  const displayTimestamp = metricContainsHistory && isSystemMetric && !isUndefined(timestamp);\n  const displayStep = metricContainsHistory && !isSystemMetric && !isUndefined(step);\n\n  return (\n    <div>\n      {displayStep && (\n        <div css={styles.valueField}>\n          <strong>\n            <FormattedMessage defaultMessage=\"Step\" description=\"Run page > Charts tab > Chart tooltip > Step label\" />:\n          </strong>{' '}\n          {step}\n        </div>\n      )}\n      {displayTimestamp && (\n        <div css={styles.valueField}>\n          <strong>\n            <FormattedMessage\n              defaultMessage=\"Timestamp\"\n              description=\"Run page > Charts tab > Chart tooltip > Timestamp label\"\n            />\n            :\n          </strong>{' '}\n          {Utils.formatTimestamp(timestamp, intl)}\n        </div>\n      )}\n      {value && (\n        <div>\n          <Typography.Text bold>{metricKey}</Typography.Text>\n          <Spacer size=\"xs\" />\n          <Typography.Text>{value}</Typography.Text>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst styles = {\n  valueField: {\n    whiteSpace: 'nowrap' as const,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n};\n","import { TableSkeleton, ToggleButton, useDesignSystemTheme } from '@databricks/design-system';\nimport { compact, mapValues, values } from 'lodash';\nimport type { ReactNode } from 'react';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport type { ReduxState } from '../../../redux-types';\nimport type { MetricEntitiesByName, RunInfoEntity } from '../../types';\nimport type { KeyValueEntity } from '../../../common/types';\n\nimport { RunsChartsTooltipWrapper } from '../runs-charts/hooks/useRunsChartsTooltip';\nimport { RunViewChartTooltipBody } from './RunViewChartTooltipBody';\nimport { RunsChartType, RunsChartsCardConfig } from '../runs-charts/runs-charts.types';\nimport type { RunsChartsRunData } from '../runs-charts/components/RunsCharts.common';\nimport { RunsChartsLineChartXAxisType } from '../runs-charts/components/RunsCharts.common';\nimport type { ExperimentRunsChartsUIConfiguration } from '../experiment-page/models/ExperimentPageUIState';\nimport { RunsChartsSectionAccordion } from '../runs-charts/components/sections/RunsChartsSectionAccordion';\nimport { RunsChartsConfigureModal } from '../runs-charts/components/RunsChartsConfigureModal';\nimport {\n  RunsChartsUIConfigurationContextProvider,\n  useConfirmChartCardConfigurationFn,\n  useInsertRunsChartsFn,\n  useRemoveRunsChartFn,\n  useReorderRunsChartsFn,\n} from '../runs-charts/hooks/useRunsChartsUIConfiguration';\nimport {\n  LOG_IMAGE_TAG_INDICATOR,\n  MLFLOW_MODEL_METRIC_NAME,\n  MLFLOW_SYSTEM_METRIC_NAME,\n  MLFLOW_SYSTEM_METRIC_PREFIX,\n} from '../../constants';\nimport LocalStorageUtils from '../../../common/utils/LocalStorageUtils';\nimport { RunsChartsFullScreenModal } from '../runs-charts/components/RunsChartsFullScreenModal';\nimport { useIsTabActive } from '../../../common/hooks/useIsTabActive';\nimport { shouldEnableRunDetailsPageAutoRefresh } from '../../../common/utils/FeatureUtils';\nimport { usePopulateImagesByRunUuid } from '../experiment-page/hooks/usePopulateImagesByRunUuid';\nimport type { UseGetRunQueryResponseRunInfo } from './hooks/useGetRunQuery';\nimport { RunsChartsGlobalChartSettingsDropdown } from '../runs-charts/components/RunsChartsGlobalChartSettingsDropdown';\nimport { RunsChartsDraggableCardsGridContextProvider } from '../runs-charts/components/RunsChartsDraggableCardsGridContext';\nimport { RunsChartsFilterInput } from '../runs-charts/components/RunsChartsFilterInput';\n\ninterface RunViewMetricChartsProps {\n  metricKeys: string[];\n  runInfo: RunInfoEntity | UseGetRunQueryResponseRunInfo;\n  /**\n   * Whether to display model or system metrics. This affects labels and tooltips.\n   */\n  mode: 'model' | 'system';\n\n  latestMetrics?: MetricEntitiesByName;\n  tags?: Record<string, KeyValueEntity>;\n  params?: Record<string, KeyValueEntity>;\n}\n\n/**\n * Component displaying metric charts for a single run\n */\nconst RunViewMetricChartsImpl = ({\n  runInfo,\n  metricKeys,\n  mode,\n  chartUIState,\n  updateChartsUIState,\n  latestMetrics = {},\n  params = {},\n  tags = {},\n}: RunViewMetricChartsProps & {\n  chartUIState: ExperimentRunsChartsUIConfiguration;\n  updateChartsUIState: (\n    stateSetter: (state: ExperimentRunsChartsUIConfiguration) => ExperimentRunsChartsUIConfiguration,\n  ) => void;\n}) => {\n  const { theme } = useDesignSystemTheme();\n  const [search, setSearch] = useState('');\n  const { formatMessage } = useIntl();\n\n  const { compareRunCharts, compareRunSections, chartsSearchFilter } = chartUIState;\n\n  // For the draggable grid layout, we filter visible cards on this level\n  const visibleChartCards = useMemo(() => {\n    return compareRunCharts?.filter((chart) => !chart.deleted) ?? [];\n  }, [compareRunCharts]);\n\n  const [fullScreenChart, setFullScreenChart] = useState<\n    | {\n        config: RunsChartsCardConfig;\n        title: string | ReactNode;\n        subtitle: ReactNode;\n      }\n    | undefined\n  >(undefined);\n\n  const metricsForRun = useSelector(({ entities }: ReduxState) => {\n    return mapValues(entities.sampledMetricsByRunUuid[runInfo.runUuid ?? ''], (metricsByRange) => {\n      return compact(\n        values(metricsByRange)\n          .map(({ metricsHistory }) => metricsHistory)\n          .flat(),\n      );\n    });\n  });\n\n  const tooltipContextValue = useMemo(() => ({ runInfo, metricsForRun }), [runInfo, metricsForRun]);\n\n  const { imagesByRunUuid } = useSelector((state: ReduxState) => ({\n    imagesByRunUuid: state.entities.imagesByRunUuid,\n  }));\n\n  const [configuredCardConfig, setConfiguredCardConfig] = useState<RunsChartsCardConfig | null>(null);\n\n  const reorderCharts = useReorderRunsChartsFn();\n\n  const addNewChartCard = (metricSectionId: string) => (type: RunsChartType) =>\n    setConfiguredCardConfig(RunsChartsCardConfig.getEmptyChartCardByType(type, false, undefined, metricSectionId));\n\n  const insertCharts = useInsertRunsChartsFn();\n\n  const startEditChart = (chartCard: RunsChartsCardConfig) => setConfiguredCardConfig(chartCard);\n\n  const removeChart = useRemoveRunsChartFn();\n\n  const confirmChartCardConfiguration = useConfirmChartCardConfigurationFn();\n\n  const submitForm = (configuredCard: Partial<RunsChartsCardConfig>) => {\n    confirmChartCardConfiguration(configuredCard);\n\n    // Hide the modal\n    setConfiguredCardConfig(null);\n  };\n\n  // Create a single run data object to be used in charts\n  const chartData: RunsChartsRunData[] = useMemo(\n    () => [\n      {\n        displayName: runInfo.runName ?? '',\n        metrics: latestMetrics,\n        params,\n        tags,\n        images: imagesByRunUuid[runInfo.runUuid ?? ''] || {},\n        metricHistory: {},\n        uuid: runInfo.runUuid ?? '',\n        color: theme.colors.primary,\n        runInfo,\n      },\n    ],\n    [runInfo, latestMetrics, params, tags, imagesByRunUuid, theme],\n  );\n\n  useEffect(() => {\n    if ((!compareRunSections || !compareRunCharts) && chartData.length > 0) {\n      const { resultChartSet, resultSectionSet } = RunsChartsCardConfig.getBaseChartAndSectionConfigs({\n        runsData: chartData,\n        enabledSectionNames: [mode === 'model' ? MLFLOW_MODEL_METRIC_NAME : MLFLOW_SYSTEM_METRIC_NAME],\n        // Filter only model or system metrics\n        filterMetricNames: (name) => {\n          const isSystemMetric = name.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX);\n          return mode === 'model' ? !isSystemMetric : isSystemMetric;\n        },\n      });\n\n      updateChartsUIState((current) => ({\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      }));\n    }\n  }, [compareRunCharts, compareRunSections, chartData, mode, updateChartsUIState]);\n\n  /**\n   * Update charts with the latest metrics if new are found\n   */\n  useEffect(() => {\n    updateChartsUIState((current) => {\n      if (!current.compareRunCharts || !current.compareRunSections) {\n        return current;\n      }\n      const { resultChartSet, resultSectionSet, isResultUpdated } = RunsChartsCardConfig.updateChartAndSectionConfigs({\n        compareRunCharts: current.compareRunCharts,\n        compareRunSections: current.compareRunSections,\n        runsData: chartData,\n        isAccordionReordered: current.isAccordionReordered,\n        // Filter only model or system metrics\n        filterMetricNames: (name) => {\n          const isSystemMetric = name.startsWith(MLFLOW_SYSTEM_METRIC_PREFIX);\n          return mode === 'model' ? !isSystemMetric : isSystemMetric;\n        },\n      });\n\n      if (!isResultUpdated) {\n        return current;\n      }\n      return {\n        ...current,\n        compareRunCharts: resultChartSet,\n        compareRunSections: resultSectionSet,\n      };\n    });\n  }, [chartData, updateChartsUIState, mode]);\n\n  const isTabActive = useIsTabActive();\n  const autoRefreshEnabled = chartUIState.autoRefreshEnabled && shouldEnableRunDetailsPageAutoRefresh() && isTabActive;\n\n  // Determine if run contains images logged by `mlflow.log_image()`\n  const containsLoggedImages = Boolean(tags[LOG_IMAGE_TAG_INDICATOR]);\n\n  usePopulateImagesByRunUuid({\n    runUuids: [runInfo.runUuid ?? ''],\n    runUuidsIsActive: [runInfo.status === 'RUNNING'],\n    autoRefreshEnabled,\n    enabled: containsLoggedImages,\n  });\n\n  return (\n    <div\n      css={{\n        flex: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n      }}\n    >\n      <div\n        css={{\n          paddingBottom: theme.spacing.md,\n          display: 'flex',\n          gap: theme.spacing.sm,\n          flex: '0 0 auto',\n        }}\n      >\n        <RunsChartsFilterInput chartsSearchFilter={chartsSearchFilter} />\n        {shouldEnableRunDetailsPageAutoRefresh() && (\n          <ToggleButton\n            componentId=\"codegen_mlflow_app_src_experiment-tracking_components_run-page_runviewmetricchartsv2.tsx_244\"\n            pressed={chartUIState.autoRefreshEnabled}\n            onPressedChange={(pressed) => {\n              updateChartsUIState((current) => ({ ...current, autoRefreshEnabled: pressed }));\n            }}\n          >\n            {formatMessage({\n              defaultMessage: 'Auto-refresh',\n              description: 'Run page > Charts tab > Auto-refresh toggle button',\n            })}\n          </ToggleButton>\n        )}\n        <RunsChartsGlobalChartSettingsDropdown\n          metricKeyList={metricKeys}\n          globalLineChartConfig={chartUIState.globalLineChartConfig}\n          updateUIState={updateChartsUIState}\n        />\n      </div>\n      <div\n        css={{\n          flex: 1,\n          overflow: 'auto',\n        }}\n      >\n        <RunsChartsTooltipWrapper contextData={tooltipContextValue} component={RunViewChartTooltipBody}>\n          <RunsChartsDraggableCardsGridContextProvider visibleChartCards={visibleChartCards}>\n            <RunsChartsSectionAccordion\n              compareRunSections={compareRunSections}\n              compareRunCharts={visibleChartCards}\n              reorderCharts={reorderCharts}\n              insertCharts={insertCharts}\n              chartData={chartData}\n              startEditChart={startEditChart}\n              removeChart={removeChart}\n              addNewChartCard={addNewChartCard}\n              search={chartsSearchFilter ?? ''}\n              supportedChartTypes={[RunsChartType.LINE, RunsChartType.BAR, RunsChartType.IMAGE]}\n              setFullScreenChart={setFullScreenChart}\n              autoRefreshEnabled={autoRefreshEnabled}\n              globalLineChartConfig={chartUIState.globalLineChartConfig}\n              groupBy={null}\n            />\n          </RunsChartsDraggableCardsGridContextProvider>\n        </RunsChartsTooltipWrapper>\n      </div>\n      {configuredCardConfig && (\n        <RunsChartsConfigureModal\n          chartRunData={chartData}\n          metricKeyList={metricKeys}\n          paramKeyList={[]}\n          config={configuredCardConfig}\n          onSubmit={submitForm}\n          onCancel={() => setConfiguredCardConfig(null)}\n          groupBy={null}\n          supportedChartTypes={[RunsChartType.LINE, RunsChartType.BAR, RunsChartType.IMAGE]}\n          globalLineChartConfig={chartUIState.globalLineChartConfig}\n        />\n      )}\n      <RunsChartsFullScreenModal\n        fullScreenChart={fullScreenChart}\n        onCancel={() => setFullScreenChart(undefined)}\n        chartData={chartData}\n        tooltipContextValue={tooltipContextValue}\n        tooltipComponent={RunViewChartTooltipBody}\n        autoRefreshEnabled={autoRefreshEnabled}\n        groupBy={null}\n      />\n    </div>\n  );\n};\n\nexport const RunViewMetricCharts = (props: RunViewMetricChartsProps) => {\n  const persistenceIdentifier = `${props.runInfo.runUuid}-${props.mode}`;\n\n  const localStore = useMemo(\n    () => LocalStorageUtils.getStoreForComponent('RunPage', persistenceIdentifier),\n    [persistenceIdentifier],\n  );\n\n  const [chartUIState, updateChartsUIState] = useState<ExperimentRunsChartsUIConfiguration>(() => {\n    const defaultChartState: ExperimentRunsChartsUIConfiguration = {\n      isAccordionReordered: false,\n      compareRunCharts: undefined,\n      compareRunSections: undefined,\n      // Auto-refresh is enabled by default only if the flag is set\n      autoRefreshEnabled: shouldEnableRunDetailsPageAutoRefresh(),\n      globalLineChartConfig: {\n        xAxisKey: RunsChartsLineChartXAxisType.STEP,\n        lineSmoothness: 0,\n        selectedXAxisMetricKey: '',\n      },\n    };\n    try {\n      const persistedChartState = localStore.getItem('chartUIState');\n\n      if (!persistedChartState) {\n        return defaultChartState;\n      }\n      return JSON.parse(persistedChartState);\n    } catch {\n      return defaultChartState;\n    }\n  });\n\n  useEffect(() => {\n    localStore.setItem('chartUIState', JSON.stringify(chartUIState));\n  }, [chartUIState, localStore]);\n\n  return (\n    <RunsChartsUIConfigurationContextProvider updateChartsUIState={updateChartsUIState}>\n      <RunViewMetricChartsImpl {...props} chartUIState={chartUIState} updateChartsUIState={updateChartsUIState} />\n    </RunsChartsUIConfigurationContextProvider>\n  );\n};\n\nconst RunViewMetricChartsSkeleton = ({ className }: { className?: string }) => {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div\n      css={{\n        flex: 1,\n        display: 'grid',\n        gridTemplateColumns: '1fr 1fr 1fr',\n        gridTemplateRows: '200px',\n        gap: theme.spacing.md,\n      }}\n      className={className}\n    >\n      {new Array(6).fill(null).map((_, index) => (\n        <TableSkeleton key={index} lines={5} seed={index.toString()} />\n      ))}\n    </div>\n  );\n};\n","import { useMemo } from 'react';\nimport { useGetLoggedModelsQuery } from '../../../hooks/logged-models/useGetLoggedModelsQuery';\nimport type { UseGetRunQueryResponseInputs, UseGetRunQueryResponseOutputs } from '../../run-page/hooks/useGetRunQuery';\nimport { compact, isEmpty, uniq } from 'lodash';\n\nexport const useLoggedModelsForExperimentRunV2 = ({\n  runInputs,\n  runOutputs,\n  enabled = true,\n}: {\n  runInputs?: UseGetRunQueryResponseInputs;\n  runOutputs?: UseGetRunQueryResponseOutputs;\n  enabled?: boolean;\n}) => {\n  const modelIds = useMemo(() => {\n    const inputs = runInputs?.modelInputs ?? [];\n    const outputs = runOutputs?.modelOutputs ?? [];\n    const allModels = [...inputs, ...outputs];\n    const modelIds = uniq(compact(allModels.map(({ modelId }) => modelId)));\n\n    if (isEmpty(modelIds)) {\n      return undefined;\n    }\n\n    return modelIds;\n  }, [runInputs, runOutputs]);\n\n  const isHookEnabled = enabled && !isEmpty(modelIds);\n\n  const {\n    data: loggedModelsData,\n    isLoading,\n    error,\n  } = useGetLoggedModelsQuery(\n    {\n      modelIds,\n    },\n    {\n      enabled: isHookEnabled,\n    },\n  );\n\n  return { models: loggedModelsData, isLoading: isHookEnabled && isLoading, error };\n};\n","import { DangerIcon, Empty, ParagraphSkeleton, TitleSkeleton, useDesignSystemTheme } from '@databricks/design-system';\nimport { useSelector } from 'react-redux';\nimport invariant from 'invariant';\nimport { useMemo, useState } from 'react';\n\nimport { PageContainer } from '../../../common/components/PageContainer';\nimport { useNavigate, useParams } from '../../../common/utils/RoutingUtils';\nimport Utils from '../../../common/utils/Utils';\nimport { RunPageTabName } from '../../constants';\nimport { RenameRunModal } from '../modals/RenameRunModal';\nimport { RunViewArtifactTab } from './RunViewArtifactTab';\nimport { RunViewHeader } from './RunViewHeader';\nimport { RunViewOverview } from './RunViewOverview';\nimport { useRunDetailsPageData } from './hooks/useRunDetailsPageData';\nimport { useRunViewActiveTab } from './useRunViewActiveTab';\nimport type { ReduxState } from '../../../redux-types';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\nimport { RunNotFoundView } from '../RunNotFoundView';\nimport { ErrorCodes } from '../../../common/constants';\nimport NotFoundPage from '../NotFoundPage';\nimport { RunViewEvaluationsTab } from '../evaluations/RunViewEvaluationsTab';\nimport { FormattedMessage } from 'react-intl';\nimport { isSystemMetricKey } from '../../utils/MetricsUtils';\nimport DeleteRunModal from '../modals/DeleteRunModal';\nimport Routes from '../../routes';\nimport { RunViewMetricCharts } from './RunViewMetricCharts';\nimport {\n  shouldEnableGraphQLRunDetailsPage,\n  shouldUseGetLoggedModelsBatchAPI,\n} from '@mlflow/mlflow/src/common/utils/FeatureUtils';\nimport { useMediaQuery } from '@databricks/web-shared/hooks';\nimport { getGraphQLErrorMessage } from '../../../graphql/get-graphql-error';\nimport { useLoggedModelsForExperimentRun } from '../experiment-page/hooks/useLoggedModelsForExperimentRun';\nimport { useLoggedModelsForExperimentRunV2 } from '../experiment-page/hooks/useLoggedModelsForExperimentRunV2';\nimport { getExperimentKindFromTags } from '../../utils/ExperimentKindUtils';\n\nconst RunPageLoadingState = () => (\n  <PageContainer>\n    <TitleSkeleton\n      loading\n      label={<FormattedMessage defaultMessage=\"Run page loading\" description=\"Run page > Loading state\" />}\n    />\n    {[...Array(3).keys()].map((i) => (\n      <ParagraphSkeleton key={i} seed={`s-${i}`} />\n    ))}\n  </PageContainer>\n);\n\nexport const RunPage = () => {\n  const { runUuid, experimentId } = useParams<{\n    runUuid: string;\n    experimentId: string;\n  }>();\n  const navigate = useNavigate();\n  const { theme } = useDesignSystemTheme();\n  const [renameModalVisible, setRenameModalVisible] = useState(false);\n  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\n\n  invariant(runUuid, '[RunPage] Run UUID route param not provided');\n  invariant(experimentId, '[RunPage] Experiment ID route param not provided');\n\n  // After invariant checks, we can safely cast these as non-null\n  const safeRunUuid = runUuid as string;\n  const safeExperimentId = experimentId as string;\n\n  const {\n    experiment,\n    error,\n    latestMetrics,\n    loading,\n    params,\n    refetchRun,\n    runInfo,\n    tags,\n    experimentFetchError,\n    runFetchError,\n    apiError,\n    datasets,\n    runInputs,\n    runOutputs,\n    registeredModelVersionSummaries,\n  } = useRunDetailsPageData({\n    experimentId: safeExperimentId,\n    runUuid: safeRunUuid,\n  });\n\n  const hasRunData = Boolean(runInfo);\n\n  const [modelMetricKeys, systemMetricKeys] = useMemo<[string[], string[]]>(() => {\n    if (!latestMetrics) {\n      return [[], []];\n    }\n\n    return [\n      Object.keys(latestMetrics).filter((metricKey) => !isSystemMetricKey(metricKey)),\n      Object.keys(latestMetrics).filter((metricKey) => isSystemMetricKey(metricKey)),\n    ];\n  }, [latestMetrics]);\n\n  const { comparedExperimentIds = [], hasComparedExperimentsBefore = false } = useSelector(\n    (state: ReduxState) => state.comparedExperiments || {},\n  );\n\n  const activeTab = useRunViewActiveTab();\n\n  const isUsingGetLoggedModelsApi = shouldUseGetLoggedModelsBatchAPI();\n\n  const loggedModelsForRun = useLoggedModelsForExperimentRun(\n    safeExperimentId,\n    safeRunUuid,\n    runInputs,\n    runOutputs,\n    !isUsingGetLoggedModelsApi,\n  );\n  const loggedModelsForRunV2 = useLoggedModelsForExperimentRunV2({\n    runInputs,\n    runOutputs,\n    enabled: isUsingGetLoggedModelsApi,\n  });\n\n  const {\n    error: loggedModelsError,\n    isLoading: isLoadingLoggedModels,\n    models: loggedModelsV3,\n  } = isUsingGetLoggedModelsApi ? loggedModelsForRunV2 : loggedModelsForRun;\n\n  const renderActiveTab = () => {\n    if (!runInfo) {\n      return null;\n    }\n    const renderEvaluationTab = () => (\n      <RunViewEvaluationsTab\n        runUuid={safeRunUuid}\n        runTags={tags}\n        experimentId={safeExperimentId}\n        runDisplayName={Utils.getRunDisplayName(runInfo, safeRunUuid)}\n      />\n    );\n    switch (activeTab) {\n      case RunPageTabName.MODEL_METRIC_CHARTS:\n        return (\n          <RunViewMetricCharts\n            key=\"model\"\n            mode=\"model\"\n            metricKeys={modelMetricKeys}\n            runInfo={runInfo}\n            latestMetrics={latestMetrics}\n            tags={tags}\n            params={params}\n          />\n        );\n\n      case RunPageTabName.SYSTEM_METRIC_CHARTS:\n        return (\n          <RunViewMetricCharts\n            key=\"system\"\n            mode=\"system\"\n            metricKeys={systemMetricKeys}\n            runInfo={runInfo}\n            latestMetrics={latestMetrics}\n            tags={tags}\n            params={params}\n          />\n        );\n      case RunPageTabName.EVALUATIONS:\n        return renderEvaluationTab();\n      case RunPageTabName.ARTIFACTS:\n        return (\n          <RunViewArtifactTab\n            runUuid={safeRunUuid}\n            runTags={tags}\n            runOutputs={runOutputs}\n            experimentId={safeExperimentId}\n            artifactUri={runInfo.artifactUri ?? undefined}\n          />\n        );\n      case RunPageTabName.TRACES:\n        return renderEvaluationTab();\n    }\n\n    return (\n      <RunViewOverview\n        runInfo={runInfo}\n        tags={tags}\n        params={params}\n        latestMetrics={latestMetrics}\n        runUuid={safeRunUuid}\n        onRunDataUpdated={refetchRun}\n        runInputs={runInputs}\n        runOutputs={runOutputs}\n        datasets={datasets}\n        registeredModelVersionSummaries={registeredModelVersionSummaries}\n        loggedModelsV3={loggedModelsV3}\n        isLoadingLoggedModels={isLoadingLoggedModels}\n        loggedModelsError={loggedModelsError ?? undefined}\n        experimentKind={getExperimentKindFromTags(experiment?.tags)}\n      />\n    );\n  };\n\n  // Use full height page with scrollable tab area only for non-xs screens\n  const useFullHeightPage = useMediaQuery(`(min-width: ${theme.responsive.breakpoints.sm}px)`);\n\n  const initialLoading = loading && (!runInfo || !experiment);\n\n  // Handle \"run not found\" error\n  if (\n    // For REST API:\n    (runFetchError instanceof ErrorWrapper && runFetchError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST) ||\n    // For GraphQL:\n    apiError?.code === ErrorCodes.RESOURCE_DOES_NOT_EXIST ||\n    (error && getGraphQLErrorMessage(error).match(/not found$/))\n  ) {\n    return <RunNotFoundView runId={safeRunUuid} />;\n  }\n\n  // Handle experiment not found error\n  if (\n    experimentFetchError instanceof ErrorWrapper &&\n    experimentFetchError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST\n  ) {\n    return <NotFoundPage />;\n  }\n\n  // Catch-all for legacy REST API errors\n  if (runFetchError || experimentFetchError) {\n    return null;\n  }\n\n  // Catch-all for GraphQL errors\n  if (\n    shouldEnableGraphQLRunDetailsPage() &&\n    (error || apiError) &&\n    // We display the error only if we have no run data, as it's possible\n    // to get partial results due to failure in a nested resolver\n    !hasRunData\n  ) {\n    return (\n      <div css={{ marginTop: theme.spacing.lg }}>\n        <Empty\n          title={\n            <FormattedMessage\n              defaultMessage=\"Can't load run details\"\n              description=\"Run page > error loading page title\"\n            />\n          }\n          description={getGraphQLErrorMessage(apiError ?? error)}\n          image={<DangerIcon />}\n        />\n      </div>\n    );\n  }\n\n  // Display spinner/skeleton for the initial data load\n  if (initialLoading || !runInfo || !experiment) {\n    return <RunPageLoadingState />;\n  }\n\n  return (\n    <>\n      <PageContainer usesFullHeight={useFullHeightPage}>\n        {/* Header fixed on top */}\n        <RunViewHeader\n          comparedExperimentIds={comparedExperimentIds}\n          experiment={experiment}\n          handleRenameRunClick={() => setRenameModalVisible(true)}\n          handleDeleteRunClick={() => setDeleteModalVisible(true)}\n          hasComparedExperimentsBefore={hasComparedExperimentsBefore}\n          runDisplayName={Utils.getRunDisplayName(runInfo, safeRunUuid)}\n          runTags={tags}\n          runParams={params}\n          runUuid={safeRunUuid}\n          runOutputs={runOutputs}\n          artifactRootUri={runInfo?.artifactUri ?? undefined}\n          registeredModelVersionSummaries={registeredModelVersionSummaries}\n          isLoading={loading || isLoadingLoggedModels}\n        />\n        {/* Scroll tab contents independently within own container */}\n        <div css={{ flex: 1, overflow: 'auto', marginBottom: theme.spacing.sm, display: 'flex' }}>\n          {renderActiveTab()}\n        </div>\n      </PageContainer>\n      <RenameRunModal\n        runUuid={safeRunUuid}\n        onClose={() => setRenameModalVisible(false)}\n        runName={runInfo.runName ?? ''}\n        isOpen={renameModalVisible}\n        onSuccess={refetchRun}\n      />\n      <DeleteRunModal\n        selectedRunIds={[safeRunUuid]}\n        onClose={() => setDeleteModalVisible(false)}\n        isOpen={deleteModalVisible}\n        onSuccess={() => {\n          navigate(Routes.getExperimentPageRoute(safeExperimentId));\n        }}\n      />\n    </>\n  );\n};\n\nexport default RunPage;\n","import { useMemo } from 'react';\nimport { useSearchLoggedModelsQuery } from '../../../hooks/logged-models/useSearchLoggedModelsQuery';\nimport type { UseGetRunQueryResponseInputs, UseGetRunQueryResponseOutputs } from '../../run-page/hooks/useGetRunQuery';\nimport { compact, isEmpty, uniq } from 'lodash';\n\nexport const useLoggedModelsForExperimentRun = (\n  experimentId: string,\n  runId: string,\n  runInputs?: UseGetRunQueryResponseInputs,\n  runOutputs?: UseGetRunQueryResponseOutputs,\n  enabled = true,\n) => {\n  const searchQuery = useMemo(() => {\n    const inputs = runInputs?.modelInputs ?? [];\n    const outputs = runOutputs?.modelOutputs ?? [];\n    const allModels = [...inputs, ...outputs];\n    const modelIds = uniq(compact(allModels.map(({ modelId }) => modelId)));\n\n    if (isEmpty(modelIds)) {\n      return undefined;\n    }\n\n    return `attributes.model_id IN (${modelIds.map((id) => `'${id}'`).join(',')})`;\n  }, [runInputs, runOutputs]);\n\n  const isHookEnabled = enabled && Boolean(searchQuery);\n\n  const {\n    data: loggedModelsData,\n    isLoading,\n    error,\n  } = useSearchLoggedModelsQuery(\n    { experimentIds: [experimentId], searchQuery },\n    {\n      enabled: isHookEnabled,\n    },\n  );\n\n  return {\n    // We explicitly check if the hook is supposed to be enabled before returning data,\n    // otherwise react-query might erroneously return data from the cache.\n    models: isHookEnabled ? loggedModelsData : undefined,\n    // Same goes for `isLoading` which sometimes returns `true` despite the hook being disabled.\n    isLoading: isHookEnabled && isLoading,\n    error,\n  };\n};\n","import { ApolloError } from '@mlflow/mlflow/src/common/utils/graphQLHooks';\n\ninterface CommonGraphQLApiError {\n  code: string | null;\n  message: string | null;\n}\n\nexport const getGraphQLErrorMessage = (error?: CommonGraphQLApiError | ApolloError | Error | any) => {\n  if (!error) {\n    return undefined;\n  }\n  if (error instanceof ApolloError) {\n    if (error.graphQLErrors.length > 0) {\n      return error.graphQLErrors.map((e) => e.message || e.toString()).join(', ');\n    }\n  }\n\n  if ('message' in error) {\n    return error.message;\n  }\n\n  return error.toString();\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { ConfirmModal } from './ConfirmModal';\nimport { deleteRunApi, openErrorModal } from '../../actions';\nimport { connect } from 'react-redux';\nimport Utils from '../../../common/utils/Utils';\nimport type { IntlShape } from 'react-intl';\nimport { injectIntl } from 'react-intl';\n\ntype Props = {\n  isOpen: boolean;\n  onClose: (...args: any[]) => any;\n  selectedRunIds: string[];\n  openErrorModal: (...args: any[]) => any;\n  deleteRunApi: (...args: any[]) => any;\n  onSuccess?: () => void;\n  intl: IntlShape;\n};\n\nexport class DeleteRunModalImpl extends Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const deletePromises: any = [];\n    this.props.selectedRunIds.forEach((runId) => {\n      deletePromises.push(this.props.deleteRunApi(runId));\n    });\n    return Promise.all(deletePromises)\n      .catch(() => {\n        const errorModalContent = `${this.props.intl.formatMessage({\n          defaultMessage: 'While deleting an experiment run, an error occurred.',\n          description: 'Experiment tracking > delete run modal > error message',\n        })}`;\n        this.props.openErrorModal(errorModalContent);\n      })\n      .then(() => {\n        this.props.onSuccess?.();\n      });\n  }\n\n  render() {\n    const number = this.props.selectedRunIds.length;\n    return (\n      <ConfirmModal\n        isOpen={this.props.isOpen}\n        onClose={this.props.onClose}\n        handleSubmit={this.handleSubmit}\n        title={`Delete Experiment ${Utils.pluralize('Run', number)}`}\n        helpText={\n          <div>\n            <p>\n              <b>\n                {number} experiment {Utils.pluralize('run', number)} will be deleted.\n              </b>\n            </p>\n            {/* @ts-expect-error TS(4111): Property 'MLFLOW_SHOW_GDPR_PURGING_MESSAGES' comes from a... Remove this comment to see the full error message */}\n            {process.env.MLFLOW_SHOW_GDPR_PURGING_MESSAGES === 'true' ? (\n              <p>\n                Deleted runs are restorable for 30 days, after which they are purged along with associated metrics,\n                params, tags, and artifacts.\n              </p>\n            ) : (\n              ''\n            )}\n          </div>\n        }\n        confirmButtonText=\"Delete\"\n      />\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  deleteRunApi,\n  openErrorModal,\n};\n\nexport default connect(null, mapDispatchToProps)(injectIntl(DeleteRunModalImpl));\n","import { useDesignSystemTheme } from '@databricks/design-system';\n\nexport function TagAssignmentRowContainer({ children }: { children: React.ReactNode }) {\n  const { theme } = useDesignSystemTheme();\n  return <div css={{ display: 'flex', flexDirection: 'column', gap: theme.spacing.sm }}>{children}</div>;\n}\n","import invariant from 'invariant';\nimport { createContext, useContext } from 'react';\nimport type { FieldValues, ArrayPath, FieldArray } from 'react-hook-form';\n\nimport type { UseTagAssignmentFormReturn } from '../hooks/useTagAssignmentForm';\n\nexport const TagAssignmentContext = createContext<UseTagAssignmentFormReturn | null>(null);\n\nexport function TagAssignmentContextProvider<\n  T extends FieldValues = FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n>({ children, ...props }: { children: React.ReactNode } & UseTagAssignmentFormReturn<T, K, V>) {\n  return <TagAssignmentContext.Provider value={props as any}>{children}</TagAssignmentContext.Provider>;\n}\n\nexport function useTagAssignmentContext<\n  T extends FieldValues = FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n>() {\n  const context = useContext(TagAssignmentContext as React.Context<UseTagAssignmentFormReturn<T, K, V> | null>);\n  invariant(context, 'useTagAssignmentContext must be used within a TagAssignmentRoot');\n  return context;\n}\n","import invariant from 'invariant';\nimport type { ArrayPath, FieldArray, FieldValues } from 'react-hook-form';\nimport { FormProvider, useFormContext } from 'react-hook-form';\n\nimport { TagAssignmentRowContainer } from './TagAssignmentUI/TagAssignmentRowContainer';\nimport { TagAssignmentContextProvider } from '../context/TagAssignmentContextProvider';\nimport type { UseTagAssignmentFormReturn } from '../hooks/useTagAssignmentForm';\n\nexport function TagAssignmentRoot<\n  T extends FieldValues = FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n>({ children, ...props }: { children: React.ReactNode } & UseTagAssignmentFormReturn<T, K, V>) {\n  const formCtx = useFormContext();\n\n  const Component = (\n    <TagAssignmentContextProvider {...props}>\n      <TagAssignmentRowContainer>{children}</TagAssignmentRowContainer>\n    </TagAssignmentContextProvider>\n  );\n\n  if (formCtx) {\n    return Component;\n  }\n\n  invariant(props.form, 'Nest your component on a FormProvider or pass a form prop');\n\n  return <FormProvider {...props.form}>{Component}</FormProvider>;\n}\n","import invariant from 'invariant';\nimport React from 'react';\n\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nexport function TagAssignmentRow({ children }: { children: React.ReactNode }) {\n  const { theme } = useDesignSystemTheme();\n\n  const stableChildren = React.Children.toArray(children);\n  invariant(stableChildren.length <= 3, 'TagAssignmentRow must have 3 children or less');\n\n  const parsedChildren = Array(3)\n    .fill(null)\n    .map((_, i) => stableChildren[i] ?? <span key={i} style={{ width: theme.general.heightSm }} />); // Sync width with only icon button width\n\n  return (\n    <div css={{ display: 'grid', gridTemplateColumns: '1fr 1fr min-content', gap: theme.spacing.sm }}>\n      {parsedChildren}\n    </div>\n  );\n}\n","import { Typography } from '@databricks/design-system';\n\nexport function TagAssignmentLabel({ children }: { children: React.ReactNode }) {\n  return <Typography.Text bold>{children}</Typography.Text>;\n}\n","import { forwardRef } from 'react';\n\nimport type { InputProps, InputRef } from '@databricks/design-system';\nimport { FormUI, Input } from '@databricks/design-system';\n\ninterface TagAssignmentInputProps extends InputProps {\n  errorMessage?: string;\n}\n\nexport const TagAssignmentInput: React.ForwardRefExoticComponent<\n  TagAssignmentInputProps & React.RefAttributes<InputRef>\n> = forwardRef<InputRef, TagAssignmentInputProps>(({ errorMessage, ...otherProps }: TagAssignmentInputProps, ref) => {\n  return (\n    <div css={{ flex: 1 }}>\n      <Input validationState={errorMessage ? 'error' : 'info'} {...otherProps} ref={ref} />\n      {errorMessage && <FormUI.Message message={errorMessage} type=\"error\" />}\n    </div>\n  );\n});\n","// Do not modify this file\n\nimport React from 'react';\nimport type { ControllerProps, FieldValues, Path, UseControllerProps } from 'react-hook-form';\nimport { Controller } from 'react-hook-form';\n\nimport { TagAssignmentInput } from './TagAssignmentField/TagAssignmentInput';\nimport { useTagAssignmentContext } from '../context/TagAssignmentContextProvider';\n\ninterface TagAssignmentKeyProps<T extends FieldValues> {\n  index: number;\n  rules?: UseControllerProps<T>['rules'];\n  render?: ControllerProps<T>['render'];\n}\n\nexport function TagAssignmentKey<T extends FieldValues>({ index, rules, render }: TagAssignmentKeyProps<T>) {\n  const { name, keyProperty, getTagsValues, emptyValue, appendIfPossible } = useTagAssignmentContext<T>();\n\n  return (\n    <Controller\n      name={`${name}.${index}.${keyProperty}` as Path<T>}\n      rules={rules}\n      render={({ field, fieldState, formState }) => {\n        const legacyChange = field.onChange;\n\n        function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n          legacyChange(e);\n\n          const tags = getTagsValues();\n          if (!tags?.at(-1)?.[keyProperty]) return;\n          appendIfPossible(emptyValue, { shouldFocus: false });\n        }\n        field.onChange = handleChange;\n\n        if (render) {\n          return render({ field, fieldState, formState });\n        }\n\n        return (\n          <TagAssignmentInput\n            componentId=\"TagAssignmentKey.Default.Input\"\n            errorMessage={fieldState.error?.message}\n            {...field}\n          />\n        );\n      }}\n    />\n  );\n}\n","// Do not modify this file\n\nimport type { ControllerProps, FieldValues, Path } from 'react-hook-form';\nimport { Controller } from 'react-hook-form';\n\nimport { TagAssignmentInput } from './TagAssignmentField/TagAssignmentInput';\nimport { useTagAssignmentContext } from '../context/TagAssignmentContextProvider';\n\ninterface TagAssignmentValueProps<T extends FieldValues> {\n  rules?: ControllerProps<T>['rules'];\n  index: number;\n  render?: ControllerProps<T>['render'];\n}\n\nexport function TagAssignmentValue<T extends FieldValues>({ rules, index, render }: TagAssignmentValueProps<T>) {\n  const { name, valueProperty } = useTagAssignmentContext<T>();\n\n  return (\n    <Controller\n      rules={rules}\n      name={`${name}.${index}.${valueProperty}` as Path<T>}\n      render={({ field, fieldState, formState }) => {\n        if (render) {\n          return render({ field, fieldState, formState });\n        }\n\n        return (\n          <TagAssignmentInput\n            componentId=\"TagAssignmentValue.Default.Input\"\n            errorMessage={fieldState.error?.message}\n            {...field}\n          />\n        );\n      }}\n    />\n  );\n}\n","import type { ButtonProps } from '@databricks/design-system';\nimport { Button, TrashIcon } from '@databricks/design-system';\n\nexport function TagAssignmentRemoveButtonUI(props: Omit<ButtonProps, 'icon'>) {\n  return <Button icon={<TrashIcon />} {...props} />;\n}\n","import type { ButtonProps } from '@databricks/design-system';\n\nimport { TagAssignmentRemoveButtonUI } from './TagAssignmentUI/TagAssignmentRemoveButtonUI';\nimport { useTagAssignmentContext } from '../context/TagAssignmentContextProvider';\n\nexport interface TagAssignmentRemoveButtonProps extends Omit<ButtonProps, 'onClick' | 'icon'> {\n  index: number;\n}\n\nexport function TagAssignmentRemoveButton({ index, ...props }: TagAssignmentRemoveButtonProps) {\n  const { removeOrUpdate } = useTagAssignmentContext();\n\n  return <TagAssignmentRemoveButtonUI onClick={() => removeOrUpdate(index)} {...props} />;\n}\n","import invariant from 'invariant';\nimport { useCallback, useState } from 'react';\nimport type { ArrayPath, FieldArray, FieldArrayMethodProps, FieldValues, Path } from 'react-hook-form';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\n\nimport { useIntl } from 'react-intl';\nimport type { IntlShape } from 'react-intl';\n\nimport type { UseTagAssignmentProps } from './useTagAssignmentForm';\n\nfunction getTagAssignmentRules(maxLength: number | undefined, intl: IntlShape) {\n  if (maxLength === undefined) return undefined;\n  if (maxLength === 0) {\n    invariant(false, 'maxLength must be greater than 0');\n  }\n  return {\n    maxLength: {\n      value: maxLength,\n      message: intl.formatMessage(\n        {\n          defaultMessage: `You can set a maximum of {maxLength} values`,\n          description:\n            'Error message when trying to submit a key-value pair form with more than the maximum allowed values',\n        },\n        {\n          maxLength,\n        },\n      ),\n    },\n  };\n}\n\ntype UseTagAssignmentFieldArrayProps<\n  T extends FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n> = Pick<UseTagAssignmentProps<T, K, V>, 'name' | 'maxLength' | 'emptyValue' | 'form' | 'keyProperty'>;\n\n/**\n * Alternative to useTagAssignmentForm that only provides a wrapper around RHF's useFieldArray without any\n * side effects to initialize the form state.\n *\n * As with useFieldArray, the caller is expected to manage the form state themselves using these methods.\n * For conformance to the unified tagging pattern, there are 2 key things you are responsible for:\n *   1. Initialize the form state with an empty tag\n *   2. Call appendIfPossible when the user inputs something into the last tag key field\n */\nexport function useTagAssignmentFieldArray<\n  T extends FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n>({ name, maxLength, emptyValue, form, keyProperty }: UseTagAssignmentFieldArrayProps<T, K, V>) {\n  const intl = useIntl();\n\n  const formCtx = useFormContext<T>();\n  const shouldUseFormContext = Boolean(formCtx) && !form;\n  const internalForm = shouldUseFormContext ? formCtx : form;\n\n  invariant(internalForm, 'Nest your component on a FormProvider or pass a form prop');\n\n  const [_emptyValue] = useState(emptyValue);\n  const {\n    append: originalAppend,\n    update,\n    remove: originalRemove,\n    ...fieldArrayMethods\n  } = useFieldArray<T, K>({\n    name,\n    control: internalForm.control,\n    rules: getTagAssignmentRules(maxLength, intl),\n  });\n\n  const { getValues } = internalForm;\n\n  const getTagsValues = useCallback(() => {\n    return getValues(name as Path<T>) as V[] | undefined;\n  }, [getValues, name]);\n\n  const appendIfPossible = useCallback(\n    (value: V | V[], options: FieldArrayMethodProps) => {\n      const tags = getTagsValues();\n      if (maxLength && tags && tags.length >= maxLength) return;\n      originalAppend(value, options);\n    },\n    [getTagsValues, maxLength, originalAppend],\n  );\n\n  const removeOrUpdate = useCallback(\n    (index: number) => {\n      const tags = getTagsValues();\n      if (tags && index === tags.length - 1) {\n        return update(index, _emptyValue);\n      }\n      const lastTag = tags?.at(-1);\n      if (lastTag?.[keyProperty]) {\n        originalRemove(index);\n        originalAppend(_emptyValue, { shouldFocus: false });\n        return;\n      }\n      originalRemove(index);\n    },\n    [_emptyValue, getTagsValues, keyProperty, originalAppend, originalRemove, update],\n  );\n\n  return {\n    form: internalForm,\n    ...fieldArrayMethods,\n    originalAppend,\n    update,\n    originalRemove,\n    appendIfPossible,\n    removeOrUpdate,\n    getTagsValues,\n  };\n}\n\nexport type UseTagAssignmentFieldArrayReturn<\n  T extends FieldValues = FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n> = ReturnType<typeof useTagAssignmentFieldArray<T, K, V>>;\n","import invariant from 'invariant';\nimport { useEffect, useState } from 'react';\nimport type { ArrayPath, FieldArray, FieldValues, Path, PathValue, UseFormReturn } from 'react-hook-form';\nimport { useFormContext } from 'react-hook-form';\n\nimport { useTagAssignmentFieldArray } from './useTagAssignmentFieldArray';\n\nexport interface UseTagAssignmentProps<\n  T extends FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n> {\n  name: K;\n  maxLength?: number;\n  emptyValue: V;\n  loading?: boolean;\n  defaultValues?: V[];\n  form?: UseFormReturn<T>;\n  keyProperty: keyof V extends string ? keyof V : never;\n  valueProperty: keyof V extends string ? keyof V : never;\n}\n\nexport function useTagAssignmentForm<\n  T extends FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n>({\n  name,\n  maxLength,\n  emptyValue,\n  defaultValues,\n  loading,\n  form,\n  keyProperty,\n  valueProperty,\n}: UseTagAssignmentProps<T, K, V>) {\n  const [_emptyValue] = useState(emptyValue);\n\n  const formCtx = useFormContext<T>();\n  const shouldUseFormContext = Boolean(formCtx) && !form;\n  const internalForm = shouldUseFormContext ? formCtx : form;\n\n  invariant(internalForm, 'Nest your component on a FormProvider or pass a form prop');\n  invariant(!(defaultValues && shouldUseFormContext), 'Define defaultValues at form context level');\n\n  const { setValue } = internalForm;\n\n  const fieldArrayMethods = useTagAssignmentFieldArray({\n    name,\n    maxLength,\n    emptyValue,\n    form: internalForm,\n    keyProperty,\n  });\n  const getTagsValues = fieldArrayMethods.getTagsValues;\n\n  useEffect(() => {\n    if (loading) return;\n    if (defaultValues) {\n      const newValues = [...defaultValues];\n      if (!maxLength || (maxLength && newValues.length < maxLength)) {\n        newValues.push(_emptyValue);\n      }\n      setValue(name as Path<T>, newValues as PathValue<T, Path<T>>);\n      return;\n    }\n\n    if (shouldUseFormContext) {\n      const existentValues = getTagsValues() ?? [];\n      if (!maxLength || (maxLength && existentValues.length < maxLength)) {\n        existentValues.push(_emptyValue);\n      }\n      setValue(name as Path<T>, existentValues as PathValue<T, Path<T>>);\n      return;\n    }\n\n    setValue(name as Path<T>, [_emptyValue] as PathValue<T, Path<T>>);\n  }, [defaultValues, setValue, loading, maxLength, name, _emptyValue, shouldUseFormContext, getTagsValues]);\n\n  return {\n    ...fieldArrayMethods,\n    form: internalForm,\n    maxLength,\n    emptyValue,\n    name,\n    keyProperty,\n    valueProperty,\n  };\n}\n\nexport type UseTagAssignmentFormReturn<\n  T extends FieldValues = FieldValues,\n  K extends ArrayPath<T> = ArrayPath<T>,\n  V extends FieldArray<T, K> = FieldArray<T, K>,\n> = ReturnType<typeof useTagAssignmentForm<T, K, V>>;\n","import {\n  useTagAssignmentForm,\n  TagAssignmentRoot,\n  TagAssignmentRow,\n  TagAssignmentLabel,\n  TagAssignmentKey,\n  TagAssignmentValue,\n  TagAssignmentRemoveButton,\n} from '@databricks/web-shared/unified-tagging';\nimport type { UseFormReturn } from 'react-hook-form';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport type { KeyValueEntity } from '../types';\n\nconst keyProperty = 'key';\nconst valueProperty = 'value';\n\ninterface Props {\n  name: string;\n  form: UseFormReturn<any>;\n  initialTags?: KeyValueEntity[];\n}\n\n/**\n * A component used for displaying the unified tagging form.\n */\nexport const UnifiedTaggingForm = ({ form, name, initialTags }: Props) => {\n  const intl = useIntl();\n\n  const tagsForm = useTagAssignmentForm({\n    name,\n    emptyValue: { key: '', value: '' },\n    keyProperty,\n    valueProperty,\n    form,\n    defaultValues: initialTags,\n  });\n\n  return (\n    <TagAssignmentRoot {...tagsForm}>\n      <TagAssignmentRow>\n        <TagAssignmentLabel>\n          <FormattedMessage defaultMessage=\"Key\" description=\"Tag assignment modal > Key label\" />\n        </TagAssignmentLabel>\n        <TagAssignmentLabel>\n          <FormattedMessage defaultMessage=\"Value\" description=\"Tag assignment modal > Value label\" />\n        </TagAssignmentLabel>\n      </TagAssignmentRow>\n\n      {tagsForm.fields.map((field, index) => {\n        return (\n          <TagAssignmentRow key={field.id}>\n            <TagAssignmentKey\n              index={index}\n              rules={{\n                validate: {\n                  unique: (value) => {\n                    const tags = tagsForm.getTagsValues();\n                    if (tags?.findIndex((tag) => tag[keyProperty] === value) !== index) {\n                      return intl.formatMessage({\n                        defaultMessage: 'Key must be unique',\n                        description: 'Error message for unique key in tag assignment modal',\n                      });\n                    }\n                    return true;\n                  },\n                  required: (value) => {\n                    const tags = tagsForm.getTagsValues();\n                    if (tags?.at(index)?.[valueProperty] && !value) {\n                      return intl.formatMessage({\n                        defaultMessage: 'Key is required if value is present',\n                        description: 'Error message for required key in tag assignment modal',\n                      });\n                    }\n                    return true;\n                  },\n                },\n              }}\n            />\n            <TagAssignmentValue index={index} />\n            <TagAssignmentRemoveButton index={index} componentId=\"endpoint-tags-section.remove-button\" />\n          </TagAssignmentRow>\n        );\n      })}\n    </TagAssignmentRoot>\n  );\n};\n","import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Modal, Button, Alert, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport type { FieldValues } from 'react-hook-form';\nimport type { KeyValueEntity } from '../types';\nimport { UnifiedTaggingForm } from '../components/UnifiedTaggingForm';\n\ninterface Params {\n  componentIdPrefix: string;\n  title?: React.ReactNode;\n  isLoading?: boolean;\n  visible?: boolean;\n  initialTags?: KeyValueEntity[];\n  error?: string;\n  onSubmit: (newTags: KeyValueEntity[], deletedTags: KeyValueEntity[]) => Promise<any>;\n  onSuccess?: () => void;\n  onClose?: () => void;\n}\n\nconst keyProperty = 'key' as const;\nconst valueProperty = 'value' as const;\nconst formName = 'tags';\n\nconst emptyValue = { key: '', value: '' };\n\nexport const useTagAssignmentModal = ({\n  componentIdPrefix,\n  title,\n  visible,\n  initialTags,\n  isLoading = false,\n  error,\n  onSubmit,\n  onSuccess,\n  onClose,\n}: Params) => {\n  const baseComponentId = `${componentIdPrefix}.tag-assignment-modal`;\n\n  const [isVisible, setIsVisible] = useState(false);\n  const { theme } = useDesignSystemTheme();\n  const form = useForm<{ tags: KeyValueEntity[] }>({ mode: 'onChange' });\n\n  const showTagAssignmentModal = () => {\n    setIsVisible(true);\n  };\n\n  const hideTagAssignmentModal = () => {\n    setIsVisible(false);\n    form.reset({ [formName]: [emptyValue] });\n    onClose?.();\n  };\n\n  const handleSubmit = (data: FieldValues) => {\n    const tags: KeyValueEntity[] = data[formName].filter((tag: FieldValues) => Boolean(tag[keyProperty]));\n    const newTags =\n      tags.filter(\n        (tag) =>\n          !initialTags?.some((t) => t[keyProperty] === tag[keyProperty] && t[valueProperty] === tag[valueProperty]),\n      ) ?? [];\n    const deletedTags =\n      initialTags?.filter(\n        (tag) => !tags.some((t) => t[keyProperty] === tag[keyProperty] && t[valueProperty] === tag[valueProperty]),\n      ) ?? [];\n\n    onSubmit(newTags, deletedTags).then(() => {\n      hideTagAssignmentModal();\n      onSuccess?.();\n    });\n  };\n\n  const defaultTitleNode = (\n    <FormattedMessage defaultMessage=\"Add tags\" description=\"Tag assignment modal > Title of the add tags modal\" />\n  );\n\n  const TagAssignmentModal = (\n    <Modal\n      componentId={`${baseComponentId}`}\n      title={title ?? defaultTitleNode}\n      visible={visible ?? isVisible}\n      destroyOnClose\n      onCancel={hideTagAssignmentModal}\n      footer={\n        <>\n          <Button\n            componentId={`${baseComponentId}.submit-button`}\n            onClick={hideTagAssignmentModal}\n            disabled={isLoading}\n          >\n            <FormattedMessage defaultMessage=\"Cancel\" description=\"Tag assignment modal > Cancel button\" />\n          </Button>\n          <Button\n            componentId={`${baseComponentId}.submit-button`}\n            type=\"primary\"\n            onClick={form.handleSubmit(handleSubmit)}\n            loading={isLoading}\n            disabled={isLoading}\n          >\n            <FormattedMessage defaultMessage=\"Save\" description=\"Tag assignment modal > Save button\" />\n          </Button>\n        </>\n      }\n    >\n      {error && (\n        <Alert\n          type=\"error\"\n          message={error}\n          componentId={`${baseComponentId}.error`}\n          closable={false}\n          css={{ marginBottom: theme.spacing.sm }}\n        />\n      )}\n      <UnifiedTaggingForm name={formName} form={form} initialTags={initialTags} />\n    </Modal>\n  );\n\n  return {\n    TagAssignmentModal,\n    showTagAssignmentModal,\n    hideTagAssignmentModal,\n  };\n};\n\nexport type { Params as TagAssignmentModalParams };\n","import { useCallback, useState } from 'react';\nimport { useUpdateRunsChartsUIConfiguration } from '../hooks/useRunsChartsUIConfiguration';\nimport { useIntl } from 'react-intl';\nimport { Input, SearchIcon, Spinner, useDesignSystemTheme } from '@databricks/design-system';\nimport { useDebouncedCallback } from 'use-debounce';\n\nexport const RunsChartsFilterInput = ({ chartsSearchFilter }: { chartsSearchFilter?: string }) => {\n  const updateChartsUIState = useUpdateRunsChartsUIConfiguration();\n  const { theme } = useDesignSystemTheme();\n\n  const [inputValue, setInputValue] = useState(() => chartsSearchFilter ?? '');\n  const [searching, setSearching] = useState(false);\n\n  const { formatMessage } = useIntl();\n\n  const updateChartFilter = useCallback(\n    (value: string) => {\n      updateChartsUIState((current) => ({\n        ...current,\n        chartsSearchFilter: value,\n      }));\n      setSearching(false);\n    },\n    [updateChartsUIState],\n  );\n\n  const updateChartFilterDebounced = useDebouncedCallback(updateChartFilter, 150);\n\n  return (\n    <Input\n      componentId=\"codegen_mlflow_app_src_experiment-tracking_components_runs-charts_components_runschartsfilterinput.tsx_30\"\n      role=\"searchbox\"\n      prefix={\n        <div css={{ width: theme.general.iconFontSize, lineHeight: 0 }}>\n          {searching ? <Spinner size=\"small\" /> : <SearchIcon />}\n        </div>\n      }\n      value={inputValue}\n      allowClear\n      onChange={(e) => {\n        setInputValue(e.target.value);\n        setSearching(true);\n        updateChartFilterDebounced(e.target.value);\n      }}\n      placeholder={formatMessage({\n        defaultMessage: 'Search metric charts',\n        description: 'Run page > Charts tab > Filter metric charts input > placeholder',\n      })}\n    />\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { PageWrapper, Spacer } from '@databricks/design-system';\n\ntype OwnProps = {\n  usesFullHeight?: boolean;\n  children?: React.ReactNode;\n};\n\n// @ts-expect-error TS(2565): Property 'defaultProps' is used before being assig... Remove this comment to see the full error message\ntype Props = OwnProps & typeof PageContainer.defaultProps;\n\nexport function PageContainer(props: Props) {\n  const { usesFullHeight, ...restProps } = props;\n  return (\n    // @ts-expect-error TS(2322): Type '{ height: string; display: string; flexDirec... Remove this comment to see the full error message\n    <PageWrapper css={usesFullHeight ? styles.useFullHeightLayout : styles.wrapper}>\n      {/* @ts-expect-error TS(2322): Type '{ css: { flexShrink: number; }; }' is not as... Remove this comment to see the full error message */}\n      <Spacer css={styles.fixedSpacer} />\n      {usesFullHeight ? props.children : <div {...restProps} css={styles.container} />}\n    </PageWrapper>\n  );\n}\n\nPageContainer.defaultProps = {\n  usesFullHeight: false,\n};\n\nconst styles = {\n  useFullHeightLayout: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n    '&:last-child': {\n      flexGrow: 1,\n    },\n  },\n  wrapper: { flex: 1 },\n  fixedSpacer: {\n    // Ensure spacer's fixed height regardless of flex\n    flexShrink: 0,\n  },\n  container: {\n    width: '100%',\n    flexGrow: 1,\n    paddingBottom: 24,\n  },\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport type { IntlShape } from 'react-intl';\nimport { injectIntl } from 'react-intl';\n\nimport { GenericInputModal } from './GenericInputModal';\nimport { RenameForm, NEW_NAME_FIELD } from './RenameForm';\n\nimport { updateRunApi } from '../../actions';\nimport { getUUID } from '../../../common/utils/ActionUtils';\n\ntype Props = {\n  isOpen?: boolean;\n  runUuid: string;\n  runName: string;\n  onClose: () => void;\n  updateRunApi: (runId: string, newName: string, id: string) => any;\n  intl: IntlShape;\n  onSuccess?: () => void;\n};\n\nclass RenameRunModalImpl extends Component<Props> {\n  formRef = React.createRef();\n\n  handleRenameRun = (values: Record<string, string>) => {\n    // get value of input field\n    const newRunName = values[NEW_NAME_FIELD];\n\n    const updateRunRequestId = getUUID();\n\n    return this.props\n      .updateRunApi(this.props.runUuid, newRunName, updateRunRequestId)\n      .then(() => this.props.onSuccess?.());\n  };\n\n  render() {\n    const { isOpen = false, runName } = this.props;\n    return (\n      <GenericInputModal\n        title={this.props.intl.formatMessage({\n          defaultMessage: 'Rename Run',\n          description: 'Modal title to rename the experiment run name',\n        })}\n        okText={this.props.intl.formatMessage({\n          defaultMessage: 'Save',\n          description: 'Modal button text to save the changes to rename the experiment run name',\n        })}\n        isOpen={isOpen}\n        handleSubmit={this.handleRenameRun}\n        onClose={this.props.onClose}\n      >\n        <RenameForm\n          type=\"run\"\n          name={runName}\n          innerRef={this.formRef}\n          visible={isOpen}\n          validator={async (_, value) => {\n            if (typeof value === 'string' && value.length && !value.trim()) {\n              throw new Error(\n                this.props.intl.formatMessage({\n                  defaultMessage: 'Run name cannot consist only of whitespace!',\n                  description: \"An error shown when user sets the run's name to whitespace characters only\",\n                }),\n              );\n            }\n            return true;\n          }}\n        />\n      </GenericInputModal>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  updateRunApi,\n};\n\nexport const RenameRunModalWithIntl = injectIntl(RenameRunModalImpl);\nexport const RenameRunModal = connect(undefined, mapDispatchToProps)(RenameRunModalWithIntl);\n","import Utils from '@mlflow/mlflow/src/common/utils/Utils';\nimport { listImagesApi } from '@mlflow/mlflow/src/experiment-tracking/actions';\nimport { EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL } from '@mlflow/mlflow/src/experiment-tracking/constants';\nimport { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport type { ThunkDispatch } from '@mlflow/mlflow/src/redux-types';\nimport { NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE } from '@mlflow/mlflow/src/experiment-tracking/constants';\n\nexport const usePopulateImagesByRunUuid = ({\n  runUuids,\n  runUuidsIsActive,\n  autoRefreshEnabled,\n  enabled,\n}: {\n  runUuids: string[];\n  runUuidsIsActive: boolean[];\n  autoRefreshEnabled?: boolean;\n  enabled?: boolean;\n}) => {\n  // Retrieve image keys for each run. This should only re-render when the runUuids change.\n  // This populates the imagesByRunUuid with imageKeys, which will be used elsewhere to fetch metadata.\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  /**\n   * The criteria to populate images for a run is\n   * 1. The run is not hidden\n   * 2. The run includes the mlflow.loggedImage tag\n   * 3. The run's image is not already populated\n   */\n  // We need to use a serialized version of runUuids to avoid re-triggering the effect when using an array.\n  const runUuidsSerialized = runUuids.slice(0, NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE).join(',');\n  useEffect(() => {\n    // Regular single fetch event with no auto-refresh capabilities. Used if auto-refresh is disabled.\n    if (!enabled || autoRefreshEnabled) {\n      return;\n    }\n    runUuidsSerialized.split(',').forEach((runUuid) => {\n      if (runUuid) {\n        dispatch(listImagesApi(runUuid));\n      }\n    });\n  }, [runUuidsSerialized, dispatch, autoRefreshEnabled, enabled]);\n\n  const refreshTimeoutRef = useRef<number | undefined>(undefined);\n  const autoRefreshEnabledRef = useRef(autoRefreshEnabled && enabled);\n  autoRefreshEnabledRef.current = autoRefreshEnabled;\n\n  const runUuidsIsActiveSerialized = runUuidsIsActive.slice(0, NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE).join(',');\n  // A fetch effect with auto-refresh capabilities. Used only if auto-refresh is enabled.\n  useEffect(() => {\n    let hookUnmounted = false;\n\n    if (!enabled || !autoRefreshEnabled) {\n      return;\n    }\n\n    const fetchImagesFn = async (autoRefresh: boolean) => {\n      const runUuids = runUuidsSerialized.split(',');\n\n      const activeRunUuids = runUuidsIsActiveSerialized.split(',');\n      // If auto-refresh is enabled, only fetch images for runs that are currently active\n      const filteredRunUuids = autoRefresh ? runUuids.filter((_, index) => activeRunUuids[index] === 'true') : runUuids;\n\n      filteredRunUuids.forEach((runUuid) => {\n        if (runUuid) {\n          dispatch(listImagesApi(runUuid, autoRefresh));\n        }\n      });\n    };\n\n    const scheduleRefresh = async () => {\n      // Initial check to confirm that auto-refresh is still enabled and the hook is still mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n      try {\n        await fetchImagesFn(true);\n      } catch (e) {\n        // In case of error during auto-refresh, log the error but do break the auto-refresh loop\n        Utils.logErrorAndNotifyUser(e);\n      }\n      clearTimeout(refreshTimeoutRef.current);\n\n      // After loading the data, schedule the next refresh if the hook is still enabled and mounted\n      if (!autoRefreshEnabledRef.current || hookUnmounted) {\n        return;\n      }\n\n      refreshTimeoutRef.current = window.setTimeout(scheduleRefresh, EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL);\n    };\n\n    fetchImagesFn(false).then(scheduleRefresh);\n\n    return () => {\n      fetchImagesFn(true);\n      // Mark the hook as unmounted to prevent scheduling new auto-refreshes with current data\n      hookUnmounted = true;\n      // Clear the timeout\n      clearTimeout(refreshTimeoutRef.current);\n    };\n  }, [dispatch, runUuidsSerialized, runUuidsIsActiveSerialized, autoRefreshEnabled, enabled]);\n};\n","import React, { Component } from 'react';\n\nclass NotFoundPage extends Component {\n  render() {\n    return <div>Resource not found.</div>;\n  }\n}\n\nexport default NotFoundPage;\n","import {\n  type QueryFunctionContext,\n  useQuery,\n  type UseQueryOptions,\n} from '@mlflow/mlflow/src/common/utils/reactQueryHooks';\nimport type { LoggedModelProto } from '../../types';\nimport { loggedModelsDataRequest } from './request.utils';\nimport { chunk } from 'lodash';\nimport { getAjaxUrl } from '@mlflow/mlflow/src/common/utils/FetchUtils';\n\nconst LOGGED_MODEL_BY_ID_BATCH_LIMIT = 100; // API supports batch size of 100\n\ntype QueryResult = {\n  models?: LoggedModelProto[];\n};\n\ntype QueryKey = ['GET_LOGGED_MODELS', string[]];\n\nconst getQueryKey = (loggedModelIds: string[]): QueryKey => ['GET_LOGGED_MODELS', loggedModelIds] as const;\n\nconst queryFn = async ({ queryKey: [, loggedModelIds] }: QueryFunctionContext<QueryKey>): Promise<QueryResult[]> => {\n  const modelIdChunks = chunk(loggedModelIds, LOGGED_MODEL_BY_ID_BATCH_LIMIT);\n  return Promise.all<QueryResult>(\n    modelIdChunks.map((chunkedIds) => {\n      const queryParams = new URLSearchParams();\n      for (const id of chunkedIds) {\n        queryParams.append('model_ids', id);\n      }\n      return loggedModelsDataRequest(\n        getAjaxUrl(`ajax-api/2.0/mlflow/logged-models:batchGet?${queryParams.toString()}`),\n        'GET',\n      );\n    }),\n  );\n};\n\n/**\n * Retrieve many logged model from API based on IDs\n */\nexport const useGetLoggedModelsQuery = (\n  {\n    modelIds,\n  }: {\n    modelIds?: string[];\n  },\n  options: UseQueryOptions<QueryResult[], Error, LoggedModelProto[], QueryKey>,\n) => {\n  const { data, isLoading, isFetching, refetch, error } = useQuery<QueryResult[], Error, LoggedModelProto[], QueryKey>({\n    queryKey: getQueryKey(modelIds ?? []),\n    queryFn,\n    select: (results) => results?.flatMap((result) => result?.models || []),\n    retry: false,\n    ...options,\n  });\n\n  return {\n    isLoading,\n    isFetching,\n    data,\n    refetch,\n    error,\n  } as const;\n};\n"],"names":["_ref","name","styles","_ref2","_ref3","_ref4","RunsChartsGlobalChartSettingsDropdown","globalLineChartConfig","metricKeyList","updateUIState","theme","useDesignSystemTheme","intl","useIntl","lineSmoothness","selectedXAxisMetricKey","xAxisKey","updateGlobalLineChartSettings","useCallback","newSettings","state","isUsingGlobalMetricXaxis","RunsChartsLineChartXAxisType","METRIC","label","formatMessage","id","defaultMessage","_jsxs","DropdownMenu","Root","modal","children","_jsx","Tooltip","componentId","content","Trigger","asChild","Button","icon","GearIcon","css","Content","align","Group","role","Label","FormattedMessage","CheckboxItem","checked","STEP","onClick","ItemIndicator","TIME","TIME_RELATIVE","Sub","SubTrigger","_css","paddingLeft","spacing","xs","sm","IconWrapper","CheckIcon","visibility","SubContent","map","metricKey","padding","LineSmoothSlider","min","max","onChange","value","useIsTabActive","isTabActive","setIsTabActive","useState","document","visibilityState","useEffect","addEventListener","x","RunViewArtifactTab","runTags","experimentId","runOutputs","artifactUri","runUuid","useFullHeightPage","useMediaQuery","responsive","breakpoints","flex","overflow","display","paddingBottom","md","position","ArtifactPage","useAutoHeight","artifactRootUri","useRunViewActiveTab","tabParam","useParams","RunPageTabName","MODEL_METRIC_CHARTS","SYSTEM_METRIC_CHARTS","EVALUATIONS","TRACES","match","ARTIFACTS","OVERVIEW","TABS_WITHOUT_MARGIN","RunViewModeSwitch","navigate","useNavigate","currentTab","removeTabMargin","setRemoveTabMargin","includes","LegacyTabs","activeKey","newTabKey","Routes","getRunPageTabRoute","getRunPageRoute","tabBarStyle","margin","TabPane","tab","LoggedModelsDropdownContent","models","onRegisterClick","renderSection","title","sectionModels","model","registeredModelSummary","first","registeredModelVersionSummaries","Item","marginRight","last","path","split","HintColumn","Link","target","to","type","size","e","stopPropagation","endIcon","NewWindowIcon","absolutePath","status","displayedName","version","link","RegisteredModelOkIcon","ModelVersionStatusIcons","Tag","registeredModels","filter","length","unregisteredModels","_Fragment","Separator","RunViewHeaderRegisterModelButton","loggedModelPaths","useMemo","Utils","getLoggedModelsFromTags","artifactPath","orderBy","source","_model$registeredMode","parseInt","selectedModelToRegister","setSelectedModelToRegister","modelsRegistered","RegisterModel","modelPath","modelRelativePath","disabled","showButton","modalVisible","onCloseModal","LegacyTooltip","placement","values","registeredCount","loggedCount","ChevronDownIcon","singleModel","registeredModelVersionSummary","marginLeft","buttonType","RunViewHeader","hasComparedExperimentsBefore","comparedExperimentIds","experiment","runDisplayName","runParams","handleRenameRunClick","handleDeleteRunClick","isLoading","_experiment$experimen","shouldRouteToEvaluations","_experiment$tags","_experiment$tags$find","isGenAIExperiment","tags","find","tag","key","EXPERIMENT_KIND_TAG_KEY","ExperimentKind","GENAI_DEVELOPMENT","hasModelOutputs","modelOutputs","experimentPageTabRoute","getExperimentPageTabRoute","ExperimentPageTabName","EvaluationRuns","Runs","breadcrumbs","getCompareExperimentsPageRoute","numExperiments","push","PageHeader","OverflowMenu","menu","itemName","renderRegisterModelButton","_experiment$experimen2","RunViewStatusBox","backgroundColor","isDarkMode","colors","green800","green100","red800","red100","blue800","blue100","RunStatusIcon","Typography","Text","color","RunViewUserLinkBox","runInfo","_runInfo$experimentId","user","getUser","searchRunsByUser","systemMetricsLabel","modelMetricsLabel","defineMessages","metricKeyMatchesFilter","toLowerCase","RunViewMetricsTableSection","metricsList","header","table","_otherColumns$find","_otherColumns$find2","column","keyColumn","otherColumns","getLeafHeaders","valueColumn","anyRowHasModels","some","loggedModels","isEmpty","modelColumn","TableRow","TableCell","backgroundSecondary","bold","_runInfo$runUuid","style","getCanResize","getSize","undefined","toString","Overflow","_model$info","_model$info$experimen","_model$info2","_model$info$model_id","_model$info3","_model$info4","rel","getExperimentLoggedModelDetailsPage","info","experiment_id","model_id","RunViewMetricsTable","latestMetrics","detailsPageTableStyles","detailsPageNoEntriesStyles","useExperimentTrackingDetailsPageLayoutStyles","setFilter","loggedModelsByMetricKey","metricsWithModels","compact","flatMap","_model$data","_model$data$metrics","data","metrics","groupedMetrics","groupBy","mapValues","group","metricValues","metricList","metric","_loggedModelsByMetric","modelColumnDefs","accessorKey","enableResizing","columns","columnDefs","metricSegments","systemMetrics","isSystemMetricKey","modelMetrics","useReactTable","getCoreRowModel","getRowId","row","enableColumnResizing","columnResizeMode","Title","level","border","borderDecorative","borderRadius","general","borderRadiusBase","flexDirection","renderTableContent","Empty","description","areAllResultsFiltered","sum","marginBottom","Input","prefix","SearchIcon","placeholder","allowClear","Table","scrollable","empty","isHeader","TableHeader","setColumnSizing","isResizing","getIsResizing","flexRender","columnDef","getContext","segment","index","RunViewParentRunBox","parentRunUuid","dispatch","useDispatch","parentRunInfoRedux","useSelector","entities","runInfosByUuid","parentRunInfoGraphql","useGetRunQuery","shouldEnableGraphQLRunDetailsPage","parentRunInfo","_parentRunInfoGraphql","getRunApi","runName","ParagraphSkeleton","loading","RunViewTagsBox","onTagsUpdated","sharedTaggingUIEnabled","shouldUseSharedTaggingUI","isSavingTags","setIsSavingTags","visibleTagKeys","visibleTagEntities","keys","isUserFacingTag","tagsKeyValueMap","TagAssignmentModal","showTagAssignmentModal","useTagAssignmentModal","componentIdPrefix","initialTags","onSubmit","newTags","deletedTags","saveRunTagsApi","then","onSuccess","EditTagsModal","showEditTagsModal","useEditKeyValueTagsModal","valueRequired","allAvailableTags","saveTagsHandler","async","_","existingTags","setRunTagsBulkApi","showEditModal","editTagsLabel","paddingTop","flexWrap","alignItems","gap","KeyValueTag","enableFullViewModal","PencilIcon","Spinner","RunViewDescriptionBox","onDescriptionChanged","_tags$NOTE_CONTENT_TA","noteContent","NOTE_CONTENT_TAG","showNoteEditor","setShowNoteEditor","Hint","EditableNote","defaultMarkdown","markdown","setTagApi","onCancel","handleCancelEditNote","showEditor","RunViewRegisteredModelsBox","modelSummary","queryFn","queryKey","RegisteredPromptsApi","getPromptVersionsForRun","RunViewRegisteredPromptsBox","error","usePromptVersionsForRunQuery","options","_queryResult$error","queryResult","useQuery","retry","refetch","promptVersions","model_versions","parseLinkedPromptsFromRunTags","promptVersion","getPromptDetailsPageRoute","encodeURIComponent","displayText","RunViewLoggedModelsBox","loggedModelsV3","getModelFlavorName","flavors","shouldDisplayArtifactPaths","Set","cursor","height","heightBase","heightSm","ModelsIcon","_model$info$model_id2","getExperimentLoggedModelDetailsPageRoute","RunViewSourceBox","search","className","_tags$MLFLOW_RUN_GIT_","_tags$Utils$gitCommit","_tags$Utils$sourceTyp","branchName","MLFLOW_RUN_GIT_SOURCE_BRANCH_TAG","commitHash","gitCommitTag","runSource","renderSource","ExperimentSourceTypeIcon","sourceType","sourceTypeTag","actionPrimaryBackgroundDefault","BranchIcon","Popover","whiteSpace","alignContent","GitCommitIcon","slice","Arrow","CopyButton","showLabel","copyText","CopyIcon","supportedAttributeColumnKeys","ExperimentLoggedModelListPageKnownColumns","RelationshipType","Step","Name","Status","CreationTime","RegisteredModels","Dataset","RunViewLoggedModelsTable","inputs","outputs","isLoadingLoggedModels","loggedModelsError","useCombinedRunInputsOutputsModels","inputLoggedModels","_inputs$modelInputs","uniq","modelInputs","modelInput","modelId","direction","outputLoggedModels","_outputs$modelOutputs","modelOutput","_outputs$modelOutputs2","_correspondingOutputE","correspondingOutputEntry","step","_uniqBy","uniqBy","loggedModel","_loggedModel$data","run_id","modelData","_modelData$info","columnVisibility","setColumnVisibility","useExperimentLoggedModelListPageTableColumns","disablePinnedColumns","disableOrderBy","ExperimentLoggedModelListPageColumnSelector","onUpdateColumns","customTrigger","ColumnsIcon","Spacer","shrinks","Error","message","Alert","closable","ExperimentLoggedModelOpenDatasetDetailsContextProvider","ExperimentLoggedModelListPageTable","isLoadingMore","moreResultsAvailable","disableLoadMore","getTableTheme","displayShowExampleButton","textPrimary","actionDefaultBackgroundHover","actionDefaultBackgroundPress","backgroundPrimary","overlayOverlay","borderTop","fontSize","typography","fontSizeBase","getShadowScrollStyles","orientation","RunViewDatasetBoxV2","datasets","selectedDatasetWithRun","setSelectedDatasetWithRun","isDrawerOpen","setIsDrawerOpen","datasetWithTags","textAlign","iconFontSize","dataset","_runInfo$runName","runData","datasetClicked","ExperimentViewDatasetWithContext","displayTextAsLink","ExperimentViewDatasetDrawer","isOpen","setIsOpen","RunDetailsPageMetadataSections","RunViewOverview","onRunDataUpdated","params","runInputs","registeredModelVersionSummariesForRun","experimentKind","useLocation","loggedModelsFromTags","containsLoggedModelsFromInputsOutputs","EXPERIMENT_PARENT_ID_TAG","shouldRenderLoggedModelsBox","modelVersions","loggedModelsV3RegisteredModels","useExperimentLoggedModelRegisteredVersions","detailsSectionsV2","useRunDetailsPageOverviewSectionsV2","_runInfo$runUuid2","parentRunIdTag","detailsContent","KeyValueProperty","keyValue","startTime","formatTimestamp","NoneCell","DetailsOverviewCopyableIdBox","element","getExperimentPageRoute","getDuration","endTime","DETAILS","DATASETS","TAGS","REGISTERED_MODELS","usingSidebarLayout","DetailsPageLayout","secondarySections","lg","DetailsOverviewParamsTable","RunNotFoundView","runId","ErrorView","statusCode","subMessage","fallbackHomePageReactRoute","rootRoute","RunViewChartTooltipBody","contextData","metricsForRun","hoverData","chartData","isHovering","mode","_metricsForRun$metric","singleTraceHoverData","containsMultipleRunsTooltipData","hoveredDataPoint","RunsChartsTooltipMode","MultipleTracesWithScanline","RunsMultipleTracesTooltipBody","metricEntity","timestamp","metricContainsHistory","isSystemMetric","displayTimestamp","isUndefined","displayStep","valueField","textOverflow","RunViewMetricChartsImpl","metricKeys","chartUIState","updateChartsUIState","_runInfo$runUuid4","setSearch","compareRunCharts","compareRunSections","chartsSearchFilter","visibleChartCards","_compareRunCharts$fil","chart","deleted","fullScreenChart","setFullScreenChart","sampledMetricsByRunUuid","metricsByRange","metricsHistory","flat","tooltipContextValue","imagesByRunUuid","configuredCardConfig","setConfiguredCardConfig","reorderCharts","useReorderRunsChartsFn","insertCharts","useInsertRunsChartsFn","removeChart","useRemoveRunsChartFn","confirmChartCardConfiguration","useConfirmChartCardConfigurationFn","_runInfo$runUuid3","displayName","images","metricHistory","uuid","primary","resultChartSet","resultSectionSet","RunsChartsCardConfig","getBaseChartAndSectionConfigs","runsData","enabledSectionNames","MLFLOW_MODEL_METRIC_NAME","MLFLOW_SYSTEM_METRIC_NAME","filterMetricNames","startsWith","MLFLOW_SYSTEM_METRIC_PREFIX","current","isResultUpdated","updateChartAndSectionConfigs","isAccordionReordered","autoRefreshEnabled","shouldEnableRunDetailsPageAutoRefresh","containsLoggedImages","Boolean","LOG_IMAGE_TAG_INDICATOR","usePopulateImagesByRunUuid","runUuids","runUuidsIsActive","enabled","RunsChartsFilterInput","ToggleButton","pressed","onPressedChange","RunsChartsTooltipWrapper","component","RunsChartsDraggableCardsGridContextProvider","RunsChartsSectionAccordion","startEditChart","chartCard","addNewChartCard","metricSectionId","getEmptyChartCardByType","supportedChartTypes","RunsChartType","LINE","BAR","IMAGE","RunsChartsConfigureModal","chartRunData","paramKeyList","config","configuredCard","RunsChartsFullScreenModal","tooltipComponent","RunViewMetricCharts","props","persistenceIdentifier","localStore","LocalStorageUtils","getStoreForComponent","defaultChartState","persistedChartState","getItem","JSON","parse","setItem","stringify","RunsChartsUIConfigurationContextProvider","RunPageLoadingState","PageContainer","TitleSkeleton","Array","i","seed","RunPage","_runInfo$artifactUri2","renameModalVisible","setRenameModalVisible","deleteModalVisible","setDeleteModalVisible","invariant","safeRunUuid","safeExperimentId","refetchRun","experimentFetchError","runFetchError","apiError","useRunDetailsPageData","hasRunData","modelMetricKeys","systemMetricKeys","Object","comparedExperiments","activeTab","isUsingGetLoggedModelsApi","shouldUseGetLoggedModelsBatchAPI","loggedModelsForRun","useLoggedModelsForExperimentRun","searchQuery","_runInputs$modelInput","_runOutputs$modelOutp","allModels","modelIds","join","isHookEnabled","loggedModelsData","useSearchLoggedModelsQuery","experimentIds","loggedModelsForRunV2","useLoggedModelsForExperimentRunV2","useGetLoggedModelsQuery","initialLoading","ErrorWrapper","getErrorCode","ErrorCodes","RESOURCE_DOES_NOT_EXIST","code","getGraphQLErrorMessage","NotFoundPage","marginTop","image","DangerIcon","usesFullHeight","getRunDisplayName","renderActiveTab","_runInfo$artifactUri","renderEvaluationTab","RunViewEvaluationsTab","getExperimentKindFromTags","RenameRunModal","onClose","DeleteRunModal","selectedRunIds","ApolloError","graphQLErrors","DeleteRunModalImpl","Component","constructor","super","this","handleSubmit","bind","deletePromises","forEach","deleteRunApi","Promise","all","catch","errorModalContent","openErrorModal","_this$props$onSuccess","_this$props","call","render","number","ConfirmModal","pluralize","helpText","confirmButtonText","mapDispatchToProps","connect","injectIntl","TagAssignmentRowContainer","TagAssignmentContext","createContext","TagAssignmentContextProvider","Provider","useTagAssignmentContext","context","useContext","TagAssignmentRoot","formCtx","useFormContext","form","FormProvider","TagAssignmentRow","stableChildren","React","toArray","parsedChildren","fill","_stableChildren$i","width","gridTemplateColumns","TagAssignmentLabel","TagAssignmentInput","forwardRef","errorMessage","otherProps","ref","validationState","FormUI","Message","TagAssignmentKey","rules","keyProperty","getTagsValues","emptyValue","appendIfPossible","Controller","field","fieldState","formState","_fieldState$error","legacyChange","_tags$at","at","shouldFocus","TagAssignmentValue","valueProperty","TagAssignmentRemoveButtonUI","TrashIcon","TagAssignmentRemoveButton","removeOrUpdate","getTagAssignmentRules","maxLength","useTagAssignmentForm","defaultValues","_emptyValue","shouldUseFormContext","internalForm","setValue","fieldArrayMethods","append","originalAppend","update","remove","originalRemove","useFieldArray","control","getValues","lastTag","useTagAssignmentFieldArray","newValues","_getTagsValues","existentValues","UnifiedTaggingForm","tagsForm","fields","validate","unique","findIndex","required","formName","visible","baseComponentId","isVisible","setIsVisible","useForm","hideTagAssignmentModal","reset","defaultTitleNode","Modal","destroyOnClose","footer","_tags$filter","_initialTags$filter","t","useUpdateRunsChartsUIConfiguration","inputValue","setInputValue","searching","setSearching","updateChartFilter","updateChartFilterDebounced","useDebouncedCallback","lineHeight","restProps","PageWrapper","useFullHeightLayout","wrapper","fixedSpacer","container","defaultProps","flexGrow","flexShrink","RenameRunModalImpl","args","formRef","handleRenameRun","newRunName","NEW_NAME_FIELD","updateRunRequestId","getUUID","updateRunApi","GenericInputModal","okText","RenameForm","innerRef","validator","trim","RenameRunModalWithIntl","runUuidsSerialized","NUM_RUNS_TO_SUPPORT_FOR_LOG_IMAGE","listImagesApi","refreshTimeoutRef","useRef","autoRefreshEnabledRef","runUuidsIsActiveSerialized","hookUnmounted","fetchImagesFn","activeRunUuids","autoRefresh","scheduleRefresh","logErrorAndNotifyUser","clearTimeout","window","setTimeout","EXPERIMENT_RUNS_IMAGE_AUTO_REFRESH_INTERVAL","loggedModelIds","modelIdChunks","chunk","chunkedIds","queryParams","URLSearchParams","loggedModelsDataRequest","getAjaxUrl","isFetching","select","results","result"],"sourceRoot":""}