{"version":3,"file":"static/js/9831.32296588.chunk.js","mappings":"2PAAA,SAASA,EAAyBC,GAGjC,OAAOC,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBL,EAAM,KAEjD,MADAI,EAAEE,KAAO,mBACHF,CACP,GACD,CACAL,EAAyBQ,KAAO,WAAa,MAAO,EAAI,EACxDR,EAAyBG,QAAUH,EACnCA,EAAyBS,GAAK,MAC9BC,EAAOC,QAAUX,C,uECcHY,EAAAA,EAAAA,K,iJCpBP,MAQMC,EAAqFA,EAChGC,YAAW,EACXC,eAGOC,EAAAA,EAAAA,GAACC,EAAAA,GAAyB,CAACC,YAAY,EAAMH,SAAEA,IAe7BI,OAAOC,WAAW,gC,4CCvB7C,MAAMC,EAAyBC,EAAAA,MAAW,IACxC,iGAAsDlB,MAAMM,IAAM,CAChEa,QAASb,EAAOc,4CAIdC,EAAsBA,IAAM,gCAE5BC,EAA2BJ,EAAAA,MAAW,IAC1CG,IAAsBrB,MAAMM,IAAM,CAAQa,QAASb,EAAOiB,2BAGtDC,EAAwBN,EAAAA,MAAW,IACvCG,IAAsBrB,MAAMM,IAAM,CAAQa,QAASb,EAAOmB,wBAGtDC,EAA0BR,EAAAA,MAAW,IACzCG,IAAsBrB,MAAMM,IAAM,CAAQa,QAASb,EAAOqB,gCAGtDC,EAAoEA,EAAGjB,eAEzEC,EAAAA,EAAAA,GAACH,EAAoB,CAAAE,UACnBC,EAAAA,EAAAA,GAACc,EAAuB,CAACG,SAAUA,OAASlB,UAC1CmB,EAAAA,EAAAA,IAACR,EAAwB,CAAAX,SAAA,EACvBC,EAAAA,EAAAA,GAACY,EAAqB,IACrBb,SAOLoB,EAA0C,CAE9C,8CAA8C,EAC9C,iDAAiD,GAGtCC,EAAeA,KAC1B,MAAMC,GAAcC,EAAAA,EAAAA,UAAQ,IAAM,IAAIC,EAAAA,GAAe,IAuBrD,OApBMpB,OAAeqB,sBACnBC,OAAOC,eAAevB,OAAQ,uBAAwB,CACpDwB,cAAc,EACdC,UAAU,EACVC,MAAO,CAELC,SAAUA,CAACrC,EAAYsC,KACb,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMC,YAAYb,EACbA,EAAmB,OAAJY,QAAI,IAAJA,OAAI,EAAJA,EAAMC,UAGnB,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAME,aAEfC,cAAeA,KAAM,EACrBC,gBAAiBA,OACjBC,kBAAmBA,WAMvBpC,EAAAA,EAAAA,GAACM,EAAAA,SAAc,CAAC+B,SAAU,KAAKtC,UAC7BC,EAAAA,EAAAA,GAACgB,EAAqB,CAAAjB,UACpBC,EAAAA,EAAAA,GAACsC,EAAAA,GAAY,CAACC,OAAO,KAAIxC,UACvBC,EAAAA,EAAAA,GAACwC,EAAAA,GAAmB,CAACC,OAAQpB,EAAYtB,UACvCC,EAAAA,EAAAA,GAACK,EAAsB,WAId,EAKrBqC,EAAAA,QAAgB1C,EAAAA,EAAAA,GAACoB,EAAY,IAAKuB,SAASC,eAAe,Q","sources":["lang/compiled|lazy|/^/.//.*/.json$/|groupOptions: {}|namespace object","i18n/I18nUtils.ts","shared/web-shared/design-system/index.tsx","shared/web-shared/model-trace-explorer/oss-notebook-renderer/bootstrap.tsx"],"sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 51531;\nmodule.exports = webpackEmptyAsyncContext;","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport type { IntlShape } from 'react-intl';\nimport { createIntlCache, createIntl } from 'react-intl';\nimport { DEFAULT_LOCALE, loadMessages } from './loadMessages';\nimport { useEffect, useState } from 'react';\nimport Utils from '../common/utils/Utils';\n\nconst FALLBACK_LOCALES: Record<string, string> = {\n  es: 'es-ES',\n  fr: 'fr-FR',\n  pt: 'pt-PT',\n  ja: 'ja-JP',\n  kr: 'kr-KR',\n  it: 'it-IT',\n  de: 'de-DE',\n  zh: 'zh-CN',\n};\n\nconst loadedMessages: Record<string, any> = {};\n\nconst cache = createIntlCache();\n\nexport const I18nUtils = {\n  async initI18n() {\n    const locale = I18nUtils.getCurrentLocale();\n    await I18nUtils.loadMessages(locale);\n    return I18nUtils.createIntlWithLocale();\n  },\n\n  getIntlProviderParams() {\n    const locale = I18nUtils.getCurrentLocale();\n    return {\n      locale,\n      messages: loadedMessages[locale] || {},\n    };\n  },\n\n  /**\n   * When intl object is used entirely outside of React (e.g., Backbone Views) then\n   * this method can be used to get the intl object.\n   */\n  createIntlWithLocale() {\n    const params = I18nUtils.getIntlProviderParams();\n    const intl = createIntl({ locale: params.locale, messages: params.messages }, cache);\n\n    return intl;\n  },\n\n  getCurrentLocale() {\n    const queryParams = new URLSearchParams(window.location.search);\n    const getLocale = () => {\n      const langFromQuery = queryParams.get('l');\n      if (langFromQuery) {\n        window.localStorage.setItem('locale', langFromQuery);\n      }\n      return window.localStorage.getItem('locale') || DEFAULT_LOCALE;\n    };\n    const locale = getLocale();\n\n    // _ in the locale causes createIntl to throw, so convert to default locale\n    if (locale.includes('_')) {\n      return DEFAULT_LOCALE;\n    }\n    return locale;\n  },\n\n  /* Gets the locale to fall back on if messages are missing */\n  getFallbackLocale(locale: string) {\n    const lang = locale.split('-')[0];\n    const fallback = FALLBACK_LOCALES[lang];\n    return fallback === lang ? undefined : fallback;\n  },\n\n  async loadMessages(locale: string) {\n    const locales = [\n      locale === DEFAULT_LOCALE ? undefined : DEFAULT_LOCALE,\n      I18nUtils.getFallbackLocale(locale),\n      locale,\n    ].filter(Boolean);\n    const results = await Promise.all(locales.map(loadMessages));\n    loadedMessages[locale] = Object.assign({}, ...results);\n    return loadedMessages[locale];\n  },\n};\n\n/**\n * Ensure initialization of i18n subsystem and return\n * an object with current locale and messages storage.\n *\n * The returned value will be null before initialization.\n *\n * This hook is intended to be used once in the top-level components.\n */\nexport const useI18nInit = () => {\n  const [intl, setIntl] = useState<IntlShape | null>(null);\n  useEffect(() => {\n    I18nUtils.initI18n()\n      .then((initializedIntlState) => {\n        setIntl(initializedIntlState);\n      })\n      .catch((error) => {\n        // Fall back to the defaults if loading translation fails\n        setIntl(I18nUtils.createIntlWithLocale());\n      });\n  }, []);\n\n  return intl;\n};\n","import React from 'react';\n\nimport { DesignSystemThemeProvider } from '@databricks/design-system';\n\nexport type DarkModePref = 'system' | 'dark' | 'light';\n\nexport const DARK_MODE_PREF_DEFAULT = 'system';\n\nexport const LOCAL_STORAGE_DARK_MODE_PREF_KEY: any = 'dark-mode-pref';\n\nexport interface SupportsDuBoisThemesProps {\n  disabled?: boolean;\n}\n\nexport const SupportsDuBoisThemes: React.FC<React.PropsWithChildren<SupportsDuBoisThemesProps>> = ({\n  disabled = false,\n  children,\n}) => {\n  // eslint-disable-next-line react/forbid-elements\n  return <DesignSystemThemeProvider isDarkMode={false}>{children}</DesignSystemThemeProvider>;\n};\n\nexport const getIsDarkMode = (prefersDarkMode: DarkModePref): boolean => {\n  return prefersDarkMode === 'dark';\n};\n\nexport function getUserDarkModePref(): DarkModePref {\n  return 'system';\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function setUserDarkModePref(value: DarkModePref) {}\n\n// For system-level dark mode preference\nconst darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n\nexport function systemPrefersDark(): boolean {\n  return darkModeMediaQuery.matches;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function setDarkModeSupported(value: boolean) {}\n\nexport function WorkspaceImg(props: React.ImgHTMLAttributes<HTMLImageElement> & { src?: string; alt?: string }) {\n  return <img alt=\"altt\" {...props} />;\n}\n","import React, { useMemo } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { IntlProvider } from '@databricks/i18n';\nimport { SupportsDuBoisThemes } from '@databricks/web-shared/design-system';\nimport { QueryClient, QueryClientProvider } from '@databricks/web-shared/query-client';\nimport '@databricks/design-system/dist/index.css';\nimport '@databricks/design-system/dist/index-dark.css';\n\nimport './index.css';\n\nconst LazyModelTraceExplorer = React.lazy(() =>\n  import('@databricks/web-shared/model-trace-explorer').then((module) => ({\n    default: module.ModelTraceExplorerOSSNotebookRenderer,\n  })),\n);\n\nconst getLazyDesignSystem = () => import('@databricks/design-system');\n\nconst LazyDesignSystemProvider = React.lazy(() =>\n  getLazyDesignSystem().then((module) => ({ default: module.DesignSystemProvider })),\n);\n\nconst LazyApplyGlobalStyles = React.lazy(() =>\n  getLazyDesignSystem().then((module) => ({ default: module.ApplyGlobalStyles })),\n);\n\nconst LazyDesignSystemContext = React.lazy(() =>\n  getLazyDesignSystem().then((module) => ({ default: module.DesignSystemEventProvider })),\n);\n\nconst DesignSystemProviders: React.FC<React.PropsWithChildren<unknown>> = ({ children }) => {\n  return (\n    <SupportsDuBoisThemes>\n      <LazyDesignSystemContext callback={() => {}}>\n        <LazyDesignSystemProvider>\n          <LazyApplyGlobalStyles />\n          {children}\n        </LazyDesignSystemProvider>\n      </LazyDesignSystemContext>\n    </SupportsDuBoisThemes>\n  );\n};\n\nconst FLAG_OVERRIDES: Record<string, boolean> = {\n  // without this, the tags look really ugly in OSS\n  'databricks.fe.designsystem.useNewTagColors': true,\n  'databricks.fe.traceExplorer.enableSummaryView': true,\n};\n\nexport const AppComponent = () => {\n  const queryClient = useMemo(() => new QueryClient(), []);\n\n  // hack to silence console warnings in OSS\n  if (!(window as any).__databricks_mfe_rpc) {\n    Object.defineProperty(window, '__databricks_mfe_rpc', {\n      configurable: false,\n      writable: false,\n      value: {\n        // mock all safex calls to return their default value\n        makeCall: (id: string, args: any) => {\n          if (args?.flagName in FLAG_OVERRIDES) {\n            return FLAG_OVERRIDES[args?.flagName];\n          }\n\n          return args?.defaultValue;\n        },\n        hasHandlerFor: () => true,\n        registerHandler: () => {},\n        unregisterHandler: () => {},\n      },\n    });\n  }\n\n  return (\n    <React.Suspense fallback={null}>\n      <DesignSystemProviders>\n        <IntlProvider locale=\"en\">\n          <QueryClientProvider client={queryClient}>\n            <LazyModelTraceExplorer />\n          </QueryClientProvider>\n        </IntlProvider>\n      </DesignSystemProviders>\n    </React.Suspense>\n  );\n};\n\n// eslint-disable-next-line no-restricted-syntax\nReactDOM.render(<AppComponent />, document.getElementById('root'));\n"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","createIntlCache","SupportsDuBoisThemes","disabled","children","_jsx","DesignSystemThemeProvider","isDarkMode","window","matchMedia","LazyModelTraceExplorer","React","default","ModelTraceExplorerOSSNotebookRenderer","getLazyDesignSystem","LazyDesignSystemProvider","DesignSystemProvider","LazyApplyGlobalStyles","ApplyGlobalStyles","LazyDesignSystemContext","DesignSystemEventProvider","DesignSystemProviders","callback","_jsxs","FLAG_OVERRIDES","AppComponent","queryClient","useMemo","QueryClient","__databricks_mfe_rpc","Object","defineProperty","configurable","writable","value","makeCall","args","flagName","defaultValue","hasHandlerFor","registerHandler","unregisterHandler","fallback","IntlProvider","locale","QueryClientProvider","client","ReactDOM","document","getElementById"],"sourceRoot":""}