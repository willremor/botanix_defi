{"version":3,"file":"static/js/8649.57701976.chunk.js","mappings":"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","sources":["common/components/KeyValueTagsEditorCell.tsx","model-registry/components/ModelVersionTable.tsx","model-registry/components/ModelView.tsx","model-registry/components/ModelPage.tsx","common/utils/LocalStorageUtils.ts","common/components/TagSelectDropdown.tsx","common/hooks/useEditKeyValueTagsModal.tsx","common/utils/StringUtils.ts","model-registry/components/aliases/ModelVersionTableAliasesCell.tsx"],"sourcesContent":["import { Button, PencilIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { FormattedMessage } from 'react-intl';\nimport type { KeyValueEntity } from '../types';\nimport { KeyValueTag } from './KeyValueTag';\n\ninterface KeyValueTagsEditorCellProps {\n  tags?: KeyValueEntity[];\n  onAddEdit: () => void;\n}\n\n/**\n * A cell renderer used in tables, displaying a list of key-value tags with button for editing those\n */\nexport const KeyValueTagsEditorCell = ({ tags = [], onAddEdit }: KeyValueTagsEditorCellProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        flexWrap: 'wrap',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        gap: theme.spacing.xs,\n      }}\n    >\n      {tags.length < 1 ? (\n        <Button\n          componentId=\"codegen_mlflow_app_src_common_components_keyvaluetagseditorcell.tsx_29\"\n          size=\"small\"\n          type=\"link\"\n          onClick={onAddEdit}\n        >\n          <FormattedMessage defaultMessage=\"Add\" description=\"Key-value tag table cell > 'add' button label\" />\n        </Button>\n      ) : (\n        <>\n          {tags.map((tag) => (\n            <KeyValueTag tag={tag} key={`${tag.key}-${tag.value}`} />\n          ))}\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_components_keyvaluetagseditorcell.tsx_37\"\n            size=\"small\"\n            icon={<PencilIcon />}\n            onClick={onAddEdit}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n","import {\n  Empty,\n  PlusIcon,\n  Table,\n  TableCell,\n  TableHeader,\n  TableRow,\n  TableRowSelectCell,\n  LegacyTooltip,\n  Typography,\n  useDesignSystemTheme,\n  TableSkeletonRows,\n} from '@databricks/design-system';\nimport type { ColumnDef, RowSelectionState, SortingState, ColumnSort } from '@tanstack/react-table';\nimport { flexRender, getCoreRowModel, getSortedRowModel, useReactTable } from '@tanstack/react-table';\nimport type { ModelEntity, ModelVersionInfoEntity, ModelAliasMap } from '../../experiment-tracking/types';\nimport type { KeyValueEntity } from '../../common/types';\nimport { useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { RegisteringModelDocUrl } from '../../common/constants';\nimport {\n  ACTIVE_STAGES,\n  ModelVersionStatusIcons,\n  StageTagComponents,\n  mlflowAliasesLearnMoreLink,\n  modelVersionStatusIconTooltips,\n} from '../constants';\nimport { Link } from '../../common/utils/RoutingUtils';\nimport { ModelRegistryRoutes } from '../routes';\nimport Utils from '../../common/utils/Utils';\nimport { KeyValueTagsEditorCell } from '../../common/components/KeyValueTagsEditorCell';\nimport { useDispatch } from 'react-redux';\nimport type { ThunkDispatch } from '../../redux-types';\nimport { useEditKeyValueTagsModal } from '../../common/hooks/useEditKeyValueTagsModal';\nimport { useEditAliasesModal } from '../../common/hooks/useEditAliasesModal';\nimport { updateModelVersionTagsApi } from '../actions';\nimport { ModelVersionTableAliasesCell } from './aliases/ModelVersionTableAliasesCell';\nimport type { Interpolation, Theme } from '@emotion/react';\nimport { truncateToFirstLineWithMaxLength } from '../../common/utils/StringUtils';\nimport { setModelVersionAliasesApi } from '../actions';\n\ntype ModelVersionTableProps = {\n  isLoading: boolean;\n  modelName: string;\n  pagination: React.ReactElement;\n  orderByKey: string;\n  orderByAsc: boolean;\n  modelVersions?: ModelVersionInfoEntity[];\n  activeStageOnly?: boolean;\n  onChange: (selectedRowKeys: string[], selectedRows: ModelVersionInfoEntity[]) => void;\n  getSortFieldName: (columnId: string) => string | null;\n  onSortChange: (params: { sorter: ColumnSort }) => void;\n  modelEntity?: ModelEntity;\n  onMetadataUpdated: () => void;\n  usingNextModelsUI: boolean;\n  aliases?: ModelAliasMap;\n};\n\ntype ModelVersionColumnDef = ColumnDef<ModelVersionInfoEntity> & {\n  meta?: { styles?: Interpolation<Theme>; multiline?: boolean; className?: string };\n};\n\nenum COLUMN_IDS {\n  STATUS = 'status',\n  VERSION = 'version',\n  CREATION_TIMESTAMP = 'creation_timestamp',\n  USER_ID = 'user_id',\n  TAGS = 'tags',\n  STAGE = 'current_stage',\n  DESCRIPTION = 'description',\n  ALIASES = 'aliases',\n}\n\nconst getAliasesModalTitle = (version: string) => (\n  <FormattedMessage\n    defaultMessage=\"Add/Edit alias for model version {version}\"\n    description=\"Model registry > model version alias editor > Title of the update alias modal\"\n    values={{ version }}\n  />\n);\n\nexport const ModelVersionTable = ({\n  modelName,\n  modelVersions,\n  activeStageOnly,\n  orderByAsc,\n  orderByKey,\n  onSortChange,\n  onChange,\n  getSortFieldName,\n  modelEntity,\n  onMetadataUpdated,\n  usingNextModelsUI,\n  aliases,\n  pagination,\n  isLoading,\n}: ModelVersionTableProps) => {\n  const aliasesByVersion = useMemo(() => {\n    const result: Record<string, string[]> = {};\n    aliases?.forEach(({ alias, version }) => {\n      if (!result[version]) {\n        result[version] = [];\n      }\n      result[version].push(alias);\n    });\n    return result;\n  }, [aliases]);\n  const versions = useMemo(\n    () =>\n      activeStageOnly\n        ? (modelVersions || []).filter(({ current_stage }) => ACTIVE_STAGES.includes(current_stage))\n        : modelVersions,\n    [activeStageOnly, modelVersions],\n  );\n\n  const { theme } = useDesignSystemTheme();\n  const intl = useIntl();\n\n  const allTagsKeys = useMemo(() => {\n    const allTagsList: KeyValueEntity[] = versions?.map((modelVersion) => modelVersion?.tags || []).flat() || [];\n\n    // Extract keys, remove duplicates and sort the\n    return Array.from(new Set(allTagsList.map(({ key }) => key))).sort();\n  }, [versions]);\n\n  const dispatch = useDispatch<ThunkDispatch>();\n\n  const { EditTagsModal, showEditTagsModal } = useEditKeyValueTagsModal<ModelVersionInfoEntity>({\n    allAvailableTags: allTagsKeys,\n    saveTagsHandler: async (modelVersion, existingTags, newTags) =>\n      dispatch(updateModelVersionTagsApi(modelVersion, existingTags, newTags)),\n    onSuccess: onMetadataUpdated,\n  });\n\n  const { EditAliasesModal, showEditAliasesModal } = useEditAliasesModal({\n    aliases: modelEntity?.aliases ?? [],\n    onSuccess: onMetadataUpdated,\n    onSave: async (currentlyEditedVersion: string, existingAliases: string[], draftAliases: string[]) =>\n      dispatch(setModelVersionAliasesApi(modelName, currentlyEditedVersion, existingAliases, draftAliases)),\n    getTitle: getAliasesModalTitle,\n    description: (\n      <FormattedMessage\n        defaultMessage=\"Aliases allow you to assign a mutable, named reference to a particular model version. <link>Learn more</link>\"\n        description=\"Explanation of registered model aliases\"\n        values={{\n          link: (chunks) => (\n            <a href={mlflowAliasesLearnMoreLink} rel=\"noreferrer\" target=\"_blank\">\n              {chunks}\n            </a>\n          ),\n        }}\n      />\n    ),\n  });\n\n  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});\n\n  useEffect(() => {\n    const selectedVersions = (versions || []).filter(({ version }) => rowSelection[version]);\n    const selectedVersionNumbers = selectedVersions.map(({ version }) => version);\n    onChange(selectedVersionNumbers, selectedVersions);\n  }, [rowSelection, onChange, versions]);\n\n  const tableColumns = useMemo(() => {\n    const columns: ModelVersionColumnDef[] = [\n      {\n        id: COLUMN_IDS.STATUS,\n        enableSorting: false,\n        header: '', // Status column does not have title\n        meta: { styles: { flexBasis: theme.general.heightSm, flexGrow: 0 } },\n        cell: ({ row: { original } }) => {\n          const { status, status_message } = original || {};\n          return (\n            <LegacyTooltip title={status_message || modelVersionStatusIconTooltips[status]}>\n              <Typography.Text>{ModelVersionStatusIcons[status]}</Typography.Text>\n            </LegacyTooltip>\n          );\n        },\n      },\n    ];\n    columns.push(\n      {\n        id: COLUMN_IDS.VERSION,\n        enableSorting: false,\n        header: intl.formatMessage({\n          defaultMessage: 'Version',\n          description: 'Column title text for model version in model version table',\n        }),\n        meta: { className: 'model-version' },\n        accessorKey: 'version',\n        cell: ({ getValue }) => (\n          <FormattedMessage\n            defaultMessage=\"<link>Version {versionNumber}</link>\"\n            description=\"Link to model version in the model version table\"\n            values={{\n              link: (chunks) => (\n                <Link to={ModelRegistryRoutes.getModelVersionPageRoute(modelName, String(getValue()))}>{chunks}</Link>\n              ),\n              versionNumber: getValue(),\n            }}\n          />\n        ),\n      },\n      {\n        id: COLUMN_IDS.CREATION_TIMESTAMP,\n        enableSorting: true,\n        meta: { styles: { minWidth: 200 } },\n        header: intl.formatMessage({\n          defaultMessage: 'Registered at',\n          description: 'Column title text for created at timestamp in model version table',\n        }),\n        accessorKey: 'creation_timestamp',\n        cell: ({ getValue }) => Utils.formatTimestamp(getValue(), intl),\n      },\n\n      {\n        id: COLUMN_IDS.USER_ID,\n        enableSorting: false,\n        meta: { styles: { minWidth: 100 } },\n        header: intl.formatMessage({\n          defaultMessage: 'Created by',\n          description: 'Column title text for creator username in model version table',\n        }),\n        accessorKey: 'user_id',\n        cell: ({ getValue }) => <span>{getValue()}</span>,\n      },\n    );\n\n    if (usingNextModelsUI) {\n      // Display tags and aliases columns only when \"new models UI\" is flipped\n      columns.push(\n        {\n          id: COLUMN_IDS.TAGS,\n          enableSorting: false,\n          header: intl.formatMessage({\n            defaultMessage: 'Tags',\n            description: 'Column title text for model version tags in model version table',\n          }),\n          meta: { styles: { flex: 2 } },\n          accessorKey: 'tags',\n          cell: ({ getValue, row: { original } }) => {\n            return (\n              <KeyValueTagsEditorCell\n                tags={getValue() as KeyValueEntity[]}\n                onAddEdit={() => {\n                  showEditTagsModal?.(original);\n                }}\n              />\n            );\n          },\n        },\n        {\n          id: COLUMN_IDS.ALIASES,\n          accessorKey: 'aliases',\n          enableSorting: false,\n          header: intl.formatMessage({\n            defaultMessage: 'Aliases',\n            description: 'Column title text for model version aliases in model version table',\n          }),\n          meta: { styles: { flex: 2 }, multiline: true },\n          cell: ({ getValue, row: { original } }) => {\n            const mvAliases = aliasesByVersion[original.version] || [];\n            return (\n              <ModelVersionTableAliasesCell\n                modelName={modelName}\n                version={original.version}\n                aliases={mvAliases}\n                onAddEdit={() => {\n                  showEditAliasesModal?.(original.version);\n                }}\n              />\n            );\n          },\n        },\n      );\n    } else {\n      // If not, display legacy \"Stage\" columns\n      columns.push({\n        id: COLUMN_IDS.STAGE,\n        enableSorting: false,\n        header: intl.formatMessage({\n          defaultMessage: 'Stage',\n          description: 'Column title text for model version stage in model version table',\n        }),\n        accessorKey: 'current_stage',\n        cell: ({ getValue }) => {\n          return StageTagComponents[getValue() as string];\n        },\n      });\n    }\n    columns.push({\n      id: COLUMN_IDS.DESCRIPTION,\n      enableSorting: false,\n      header: intl.formatMessage({\n        defaultMessage: 'Description',\n        description: 'Column title text for description in model version table',\n      }),\n      meta: { styles: { flex: 2 } },\n      accessorKey: 'description',\n      cell: ({ getValue }) => truncateToFirstLineWithMaxLength(getValue() as string, 32),\n    });\n    return columns;\n  }, [theme, intl, modelName, showEditTagsModal, showEditAliasesModal, usingNextModelsUI, aliasesByVersion]);\n\n  const sorting: SortingState = [{ id: orderByKey, desc: !orderByAsc }];\n\n  const setSorting = (stateUpdater: SortingState | ((state: SortingState) => SortingState)) => {\n    const [newSortState] = typeof stateUpdater === 'function' ? stateUpdater(sorting) : stateUpdater;\n    if (newSortState) {\n      onSortChange({ sorter: newSortState });\n    }\n  };\n\n  const table = useReactTable<ModelVersionInfoEntity>({\n    data: versions || [],\n    columns: tableColumns,\n    state: {\n      rowSelection,\n      sorting,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getRowId: ({ version }) => version,\n    onRowSelectionChange: setRowSelection,\n    onSortingChange: setSorting,\n  });\n\n  const isEmpty = () => table.getRowModel().rows.length === 0;\n\n  const getLearnMoreLinkUrl = () => {\n    return RegisteringModelDocUrl;\n  };\n\n  const emptyComponent = (\n    <Empty\n      description={\n        <FormattedMessage\n          defaultMessage=\"No models versions are registered yet. <link>Learn more</link> about how to\n          register a model version.\"\n          description=\"Message text when no model versions are registered\"\n          values={{\n            link: (chunks) => (\n              <Typography.Link\n                componentId=\"codegen_mlflow_app_src_model-registry_components_modelversiontable.tsx_425\"\n                target=\"_blank\"\n                href={getLearnMoreLinkUrl()}\n              >\n                {chunks}\n              </Typography.Link>\n            ),\n          }}\n        />\n      }\n      image={<PlusIcon />}\n    />\n  );\n  return (\n    <>\n      <Table\n        data-testid=\"model-version-table\"\n        pagination={pagination}\n        scrollable\n        empty={isEmpty() ? emptyComponent : undefined}\n        someRowsSelected={table.getIsSomeRowsSelected() || table.getIsAllRowsSelected()}\n      >\n        <TableRow isHeader>\n          <TableRowSelectCell\n            componentId=\"codegen_mlflow_app_src_model-registry_components_modelversiontable.tsx_450\"\n            checked={table.getIsAllRowsSelected()}\n            indeterminate={table.getIsSomeRowsSelected()}\n            onChange={table.getToggleAllRowsSelectedHandler()}\n          />\n          {table.getLeafHeaders().map((header) => (\n            <TableHeader\n              componentId=\"codegen_mlflow_app_src_model-registry_components_modelversiontable.tsx_458\"\n              multiline={false}\n              key={header.id}\n              sortable={header.column.getCanSort()}\n              sortDirection={header.column.getIsSorted() || 'none'}\n              onToggleSort={() => {\n                const [currentSortColumn] = sorting;\n                const changingDirection = header.column.id === currentSortColumn.id;\n                const sortDesc = changingDirection ? !currentSortColumn.desc : false;\n                header.column.toggleSorting(sortDesc);\n              }}\n              css={(header.column.columnDef as ModelVersionColumnDef).meta?.styles}\n            >\n              {flexRender(header.column.columnDef.header, header.getContext())}\n            </TableHeader>\n          ))}\n        </TableRow>\n        {isLoading ? (\n          <TableSkeletonRows table={table} />\n        ) : (\n          table.getRowModel().rows.map((row) => (\n            <TableRow\n              key={row.id}\n              css={{\n                '.table-row-select-cell': {\n                  alignItems: 'flex-start',\n                },\n              }}\n            >\n              <TableRowSelectCell\n                componentId=\"codegen_mlflow_app_src_model-registry_components_modelversiontable.tsx_477\"\n                checked={row.getIsSelected()}\n                onChange={row.getToggleSelectedHandler()}\n              />\n              {row.getAllCells().map((cell) => (\n                <TableCell\n                  className={(cell.column.columnDef as ModelVersionColumnDef).meta?.className}\n                  multiline={(cell.column.columnDef as ModelVersionColumnDef).meta?.multiline}\n                  key={cell.id}\n                  css={(cell.column.columnDef as ModelVersionColumnDef).meta?.styles}\n                >\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))\n        )}\n      </Table>\n      {EditTagsModal}\n      {EditAliasesModal}\n    </>\n  );\n};\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { ModelVersionTable } from './ModelVersionTable';\nimport Utils from '../../common/utils/Utils';\nimport type { NavigateFunction } from '../../common/utils/RoutingUtils';\nimport { Link } from '../../common/utils/RoutingUtils';\nimport { ModelRegistryRoutes } from '../routes';\nimport {\n  // prettier-ignore\n  ACTIVE_STAGES,\n  MODEL_VERSIONS_PER_PAGE_COMPACT,\n  MODEL_VERSIONS_SEARCH_TIMESTAMP_FIELD,\n} from '../constants';\nimport { CollapsibleSection } from '../../common/components/CollapsibleSection';\nimport { EditableNote } from '../../common/components/EditableNote';\nimport { EditableTagsTableView } from '../../common/components/EditableTagsTableView';\nimport { getRegisteredModelTags } from '../reducers';\nimport { setRegisteredModelTagApi, deleteRegisteredModelTagApi } from '../actions';\nimport { connect } from 'react-redux';\nimport { OverflowMenu, PageHeader } from '../../shared/building_blocks/PageHeader';\nimport { FormattedMessage, type IntlShape, injectIntl } from 'react-intl';\nimport {\n  Button,\n  SegmentedControlGroup,\n  SegmentedControlButton,\n  DangerModal,\n  CursorPagination,\n} from '@databricks/design-system';\nimport type { KeyValueEntity } from '../../common/types';\nimport { Descriptions } from '../../common/components/Descriptions';\nimport { TagList } from '../../common/components/TagList';\nimport type { ModelVersionInfoEntity } from '../../experiment-tracking/types';\nimport { type ModelEntity } from '../../experiment-tracking/types';\nimport { shouldShowModelsNextUI, shouldUseSharedTaggingUI } from '../../common/utils/FeatureUtils';\nimport { ModelsNextUIToggleSwitch } from './ModelsNextUIToggleSwitch';\nimport { withNextModelsUIContext } from '../hooks/useNextModelsUI';\nimport { ErrorWrapper } from '../../common/utils/ErrorWrapper';\nimport type { ColumnSort } from '@tanstack/react-table';\nimport { sortBy } from 'lodash';\n\nconst CREATION_TIMESTAMP_COLUMN_INDEX = 'creation_timestamp';\n\nexport const StageFilters = {\n  ALL: 'ALL',\n  ACTIVE: 'ACTIVE',\n};\n\ntype ModelViewImplProps = {\n  model?: ModelEntity;\n  modelVersions?: ModelVersionInfoEntity[];\n  handleEditDescription: (...args: any[]) => any;\n  handleDelete: (...args: any[]) => any;\n  navigate: NavigateFunction;\n  showEditPermissionModal: (...args: any[]) => any;\n  activePane?: any; // TODO: PropTypes.oneOf(Object.values(PANES))\n  emailSubscriptionStatus?: string;\n  userLevelEmailSubscriptionStatus?: string;\n  handleEmailNotificationPreferenceChange?: (...args: any[]) => any;\n  tags: any;\n  setRegisteredModelTagApi: (...args: any[]) => any;\n  deleteRegisteredModelTagApi: (...args: any[]) => any;\n  intl: IntlShape;\n  onMetadataUpdated: () => void;\n  usingNextModelsUI: boolean;\n  orderByKey: string;\n  orderByAsc: boolean;\n  currentPage: number;\n  nextPageToken: string | null;\n  onClickNext: () => void;\n  onClickPrev: () => void;\n  onClickSortableColumn: (fieldName: string | null, isDescending: boolean) => void;\n  onSetMaxResult: (key: number) => void;\n  maxResultValue: number;\n  loading?: boolean;\n};\n\ntype ModelViewImplState = any;\n\nexport class ModelViewImpl extends React.Component<ModelViewImplProps, ModelViewImplState> {\n  constructor(props: ModelViewImplProps) {\n    super(props);\n    this.onCompare = this.onCompare.bind(this);\n  }\n\n  state = {\n    maxResultsSelection: MODEL_VERSIONS_PER_PAGE_COMPACT,\n    stageFilter: StageFilters.ALL,\n    showDescriptionEditor: false,\n    isDeleteModalVisible: false,\n    isDeleteModalConfirmLoading: false,\n    runsSelected: {},\n    isTagsRequestPending: false,\n    updatingEmailPreferences: false,\n    isTagAssignmentModalVisible: false,\n    isSavingTags: false,\n    tagSavingError: undefined,\n  };\n\n  formRef = React.createRef();\n\n  sharedTaggingUIEnabled = shouldUseSharedTaggingUI();\n\n  componentDidMount() {\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    const pageTitle = `${this.props.model.name} - MLflow Model`;\n    Utils.updatePageTitle(pageTitle);\n  }\n\n  handleSetMaxResult = ({ key }: { key: number }) => {\n    this.props.onSetMaxResult(key);\n  };\n\n  getSortFieldName = (column: any) => {\n    switch (column) {\n      case CREATION_TIMESTAMP_COLUMN_INDEX:\n        return MODEL_VERSIONS_SEARCH_TIMESTAMP_FIELD;\n      default:\n        return null;\n    }\n  };\n\n  handleSortChange = (params: { sorter: ColumnSort }) => {\n    const sorter = params.sorter;\n    this.props.onClickSortableColumn(this.getSortFieldName(sorter.id), sorter.desc);\n  };\n\n  handleStageFilterChange = (e: any) => {\n    this.setState({ stageFilter: e.target.value });\n  };\n\n  getActiveVersionsCount() {\n    const { modelVersions } = this.props;\n    return modelVersions ? modelVersions.filter((v) => ACTIVE_STAGES.includes(v.current_stage)).length : 0;\n  }\n\n  handleCancelEditDescription = () => {\n    this.setState({ showDescriptionEditor: false });\n  };\n\n  handleSubmitEditDescription = (description: any) => {\n    return this.props.handleEditDescription(description).then(() => {\n      this.setState({ showDescriptionEditor: false });\n    });\n  };\n\n  startEditingDescription = (e: any) => {\n    e.stopPropagation();\n    this.setState({ showDescriptionEditor: true });\n  };\n\n  getOverflowMenuItems() {\n    const menuItems = [\n      {\n        id: 'delete',\n        itemName: (\n          <FormattedMessage\n            defaultMessage=\"Delete\"\n            // eslint-disable-next-line max-len\n            description=\"Text for disabled delete button due to active versions on model view page header\"\n          />\n        ),\n        onClick: this.showDeleteModal,\n        disabled: this.getActiveVersionsCount() > 0,\n      },\n    ];\n\n    return menuItems;\n  }\n\n  showDeleteModal = () => {\n    this.setState({ isDeleteModalVisible: true });\n  };\n\n  hideDeleteModal = () => {\n    this.setState({ isDeleteModalVisible: false });\n  };\n\n  showConfirmLoading = () => {\n    this.setState({ isDeleteModalConfirmLoading: true });\n  };\n\n  hideConfirmLoading = () => {\n    this.setState({ isDeleteModalConfirmLoading: false });\n  };\n\n  handleDeleteConfirm = () => {\n    const { navigate } = this.props;\n    this.showConfirmLoading();\n    this.props\n      .handleDelete()\n      .then(() => {\n        navigate(ModelRegistryRoutes.modelListPageRoute);\n      })\n      .catch((e: any) => {\n        this.hideConfirmLoading();\n        Utils.logErrorAndNotifyUser(e);\n      });\n  };\n\n  getTags = () =>\n    sortBy(\n      Utils.getVisibleTagValues(this.props.tags).map((values) => ({\n        key: values[0],\n        name: values[0],\n        value: values[1],\n      })),\n      'name',\n    );\n\n  handleEditTags = () => {\n    this.setState({ isTagAssignmentModalVisible: true, tagSavingError: undefined });\n  };\n\n  handleCloseTagAssignmentModal = () => {\n    this.setState({ isTagAssignmentModalVisible: false, tagSavingError: undefined });\n  };\n\n  handleAddTag = (values: any) => {\n    const form = this.formRef.current;\n    const { model } = this.props;\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    const modelName = model.name;\n    this.setState({ isTagsRequestPending: true });\n    this.props\n      .setRegisteredModelTagApi(modelName, values.name, values.value)\n      .then(() => {\n        this.setState({ isTagsRequestPending: false });\n        (form as any).resetFields();\n      })\n      .catch((ex: ErrorWrapper | Error) => {\n        this.setState({ isTagsRequestPending: false });\n        // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n        console.error(ex);\n        const message = ex instanceof ErrorWrapper ? ex.getMessageField() : ex.message;\n        Utils.displayGlobalErrorNotification('Failed to add tag. Error: ' + message);\n      });\n  };\n\n  handleSaveEdit = ({ name, value }: any) => {\n    const { model } = this.props;\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    const modelName = model.name;\n    return this.props.setRegisteredModelTagApi(modelName, name, value).catch((ex: ErrorWrapper | Error) => {\n      // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n      console.error(ex);\n      const message = ex instanceof ErrorWrapper ? ex.getMessageField() : ex.message;\n      Utils.displayGlobalErrorNotification('Failed to set tag. Error: ' + message);\n    });\n  };\n\n  handleDeleteTag = ({ name }: any) => {\n    const { model } = this.props;\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    const modelName = model.name;\n    return this.props.deleteRegisteredModelTagApi(modelName, name).catch((ex: ErrorWrapper | Error) => {\n      // eslint-disable-next-line no-console -- TODO(FEINF-3587)\n      console.error(ex);\n      const message = ex instanceof ErrorWrapper ? ex.getMessageField() : ex.message;\n      Utils.displayGlobalErrorNotification('Failed to delete tag. Error: ' + message);\n    });\n  };\n\n  handleSaveTags = (newTags: KeyValueEntity[], deletedTags: KeyValueEntity[]): Promise<void> => {\n    this.setState({ isSavingTags: true });\n    const { model } = this.props;\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    const modelName = model.name;\n\n    const newTagsToSet = newTags.map(({ key, value }) => this.props.setRegisteredModelTagApi(modelName, key, value));\n\n    const deletedTagsToDelete = deletedTags.map(({ key }) => this.props.deleteRegisteredModelTagApi(modelName, key));\n\n    return Promise.all([...newTagsToSet, ...deletedTagsToDelete])\n      .then(() => {\n        this.setState({ isSavingTags: false });\n      })\n      .catch((error: ErrorWrapper | Error) => {\n        const message = error instanceof ErrorWrapper ? error.getMessageField() : error.message;\n\n        this.setState({ isSavingTags: false, tagSavingError: message });\n      });\n  };\n\n  onChange = (selectedRowKeys: any, selectedRows: any) => {\n    const newState = Object.assign({}, this.state);\n    newState.runsSelected = {};\n    selectedRows.forEach((row: any) => {\n      newState.runsSelected = {\n        ...newState.runsSelected,\n        [row.version]: row.run_id,\n      };\n    });\n    this.setState(newState);\n  };\n\n  onCompare() {\n    if (!this.props.model) {\n      return;\n    }\n    this.props.navigate(\n      ModelRegistryRoutes.getCompareModelVersionsPageRoute(this.props.model.name, this.state.runsSelected),\n    );\n  }\n\n  renderDescriptionEditIcon() {\n    return (\n      <Button\n        componentId=\"codegen_mlflow_app_src_model-registry_components_modelview.tsx_467\"\n        data-testid=\"descriptionEditButton\"\n        type=\"link\"\n        css={styles.editButton}\n        onClick={this.startEditingDescription}\n      >\n        <FormattedMessage\n          defaultMessage=\"Edit\"\n          description=\"Text for the edit button next to the description section title on\n             the model view page\"\n        />\n      </Button>\n    );\n  }\n\n  renderDetails = () => {\n    const { model, modelVersions, tags, currentPage, nextPageToken } = this.props;\n    const {\n      stageFilter,\n      showDescriptionEditor,\n      isDeleteModalVisible,\n      isDeleteModalConfirmLoading,\n      isTagsRequestPending,\n    } = this.state;\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    const modelName = model.name;\n    const compareDisabled = Object.keys(this.state.runsSelected).length < 2;\n    return (\n      <div css={styles.wrapper}>\n        {/* Metadata List */}\n        <Descriptions columns={3} data-testid=\"model-view-metadata\">\n          <Descriptions.Item\n            data-testid=\"model-view-metadata-item\"\n            label={this.props.intl.formatMessage({\n              defaultMessage: 'Created Time',\n              description: 'Label name for the created time under details tab on the model view page',\n            })}\n          >\n            {/* @ts-expect-error TS(2532): Object is possibly 'undefined'. */}\n            {Utils.formatTimestamp(model.creation_timestamp, this.props.intl)}\n          </Descriptions.Item>\n          <Descriptions.Item\n            data-testid=\"model-view-metadata-item\"\n            label={this.props.intl.formatMessage({\n              defaultMessage: 'Last Modified',\n              description: 'Label name for the last modified time under details tab on the model view page',\n            })}\n          >\n            {/* @ts-expect-error TS(2532): Object is possibly 'undefined'. */}\n            {Utils.formatTimestamp(model.last_updated_timestamp, this.props.intl)}\n          </Descriptions.Item>\n          {/* Reported during ESLint upgrade */}\n          {/* eslint-disable-next-line react/prop-types */}\n          {(model as any).user_id && (\n            <Descriptions.Item\n              data-testid=\"model-view-metadata-item\"\n              label={this.props.intl.formatMessage({\n                defaultMessage: 'Creator',\n                description: 'Lable name for the creator under details tab on the model view page',\n              })}\n            >\n              {/* eslint-disable-next-line react/prop-types */}\n              <div>{(model as any).user_id}</div>\n            </Descriptions.Item>\n          )}\n        </Descriptions>\n        {this.sharedTaggingUIEnabled && (\n          <Descriptions columns={1} data-testid=\"model-view-tags\">\n            <Descriptions.Item label=\"Tags\">\n              <TagList tags={this.getTags()} onEdit={this.handleEditTags} />\n            </Descriptions.Item>\n          </Descriptions>\n        )}\n        {/* Page Sections */}\n        <CollapsibleSection\n          css={styles.collapsiblePanel}\n          title={\n            <span>\n              <FormattedMessage\n                defaultMessage=\"Description\"\n                description=\"Title text for the description section under details tab on the model\n                   view page\"\n              />{' '}\n              {!showDescriptionEditor ? this.renderDescriptionEditIcon() : null}\n            </span>\n          }\n          forceOpen={showDescriptionEditor}\n          // Reported during ESLint upgrade\n          // eslint-disable-next-line react/prop-types\n          defaultCollapsed={!(model as any).description}\n          data-testid=\"model-description-section\"\n        >\n          <EditableNote\n            defaultMarkdown={(model as any).description}\n            onSubmit={this.handleSubmitEditDescription}\n            onCancel={this.handleCancelEditDescription}\n            showEditor={showDescriptionEditor}\n          />\n        </CollapsibleSection>\n        {!this.sharedTaggingUIEnabled && (\n          <div data-testid=\"tags-section\">\n            <CollapsibleSection\n              css={styles.collapsiblePanel}\n              title={\n                <FormattedMessage\n                  defaultMessage=\"Tags\"\n                  description=\"Title text for the tags section under details tab on the model view\n                   page\"\n                />\n              }\n              defaultCollapsed={Utils.getVisibleTagValues(tags).length === 0}\n              data-testid=\"model-tags-section\"\n            >\n              <EditableTagsTableView\n                // @ts-expect-error TS(2322): Type '{ innerRef: RefObject<unknown>; handleAddTag... Remove this comment to see the full error message\n                innerRef={this.formRef}\n                handleAddTag={this.handleAddTag}\n                handleDeleteTag={this.handleDeleteTag}\n                handleSaveEdit={this.handleSaveEdit}\n                tags={tags}\n                isRequestPending={isTagsRequestPending}\n              />\n            </CollapsibleSection>\n          </div>\n        )}\n        <CollapsibleSection\n          css={styles.collapsiblePanel}\n          title={\n            <>\n              <div css={styles.versionsTabButtons}>\n                <span>\n                  <FormattedMessage\n                    defaultMessage=\"Versions\"\n                    description=\"Title text for the versions section under details tab on the\n                       model view page\"\n                  />\n                </span>\n                {!this.props.usingNextModelsUI && (\n                  <SegmentedControlGroup\n                    componentId=\"codegen_mlflow_app_src_model-registry_components_modelview.tsx_600\"\n                    name=\"stage-filter\"\n                    value={this.state.stageFilter}\n                    onChange={(e) => this.handleStageFilterChange(e)}\n                    css={{ fontWeight: 'normal' }}\n                  >\n                    <SegmentedControlButton value={StageFilters.ALL}>\n                      <FormattedMessage\n                        defaultMessage=\"All\"\n                        description=\"Tab text to view all versions under details tab on the model view page\"\n                      />\n                    </SegmentedControlButton>\n                    <SegmentedControlButton value={StageFilters.ACTIVE}>\n                      <FormattedMessage\n                        defaultMessage=\"Active\"\n                        description=\"Tab text to view active versions under details tab\n                                on the model view page\"\n                      />{' '}\n                      {this.getActiveVersionsCount()}\n                    </SegmentedControlButton>\n                  </SegmentedControlGroup>\n                )}\n                <Button\n                  componentId=\"codegen_mlflow_app_src_model-registry_components_modelview.tsx_619\"\n                  data-testid=\"compareButton\"\n                  disabled={compareDisabled}\n                  onClick={this.onCompare}\n                >\n                  <FormattedMessage\n                    defaultMessage=\"Compare\"\n                    description=\"Text for compare button to compare versions under details tab\n                       on the model view page\"\n                  />\n                </Button>\n              </div>\n            </>\n          }\n          data-testid=\"model-versions-section\"\n        >\n          {shouldShowModelsNextUI() && (\n            <div\n              css={{\n                marginBottom: 8,\n                display: 'flex',\n                justifyContent: 'flex-end',\n              }}\n            >\n              <ModelsNextUIToggleSwitch />\n            </div>\n          )}\n          <ModelVersionTable\n            isLoading={this.props.loading || false}\n            activeStageOnly={stageFilter === StageFilters.ACTIVE && !this.props.usingNextModelsUI}\n            modelName={modelName}\n            modelVersions={modelVersions}\n            modelEntity={model}\n            onChange={this.onChange}\n            onMetadataUpdated={this.props.onMetadataUpdated}\n            usingNextModelsUI={this.props.usingNextModelsUI}\n            aliases={model?.aliases}\n            orderByKey={this.props.orderByKey}\n            orderByAsc={this.props.orderByAsc}\n            onSortChange={this.handleSortChange}\n            getSortFieldName={this.getSortFieldName}\n            pagination={\n              <div\n                data-testid=\"model-view-pagination-section\"\n                css={{ width: '100%', alignItems: 'center', display: 'flex' }}\n              >\n                <div css={{ display: 'flex', justifyContent: 'flex-end', marginTop: 8 }}>\n                  <CursorPagination\n                    componentId=\"codegen_mlflow_app_src_model-registry_components_modelview.tsx_646\"\n                    hasNextPage={Boolean(nextPageToken)}\n                    hasPreviousPage={currentPage > 1}\n                    onNextPage={this.props.onClickNext}\n                    onPreviousPage={this.props.onClickPrev}\n                    pageSizeSelect={{\n                      onChange: (num) => this.handleSetMaxResult({ key: num }),\n                      default: this.props.maxResultValue,\n                      options: [10, 25, 50, 100],\n                    }}\n                  />\n                </div>\n              </div>\n            }\n          />\n        </CollapsibleSection>\n\n        {/* Delete Model Dialog */}\n        <DangerModal\n          componentId=\"codegen_mlflow_app_src_model-registry_components_modelview.tsx_662\"\n          data-testid=\"mlflow-input-modal\"\n          title={this.props.intl.formatMessage({\n            defaultMessage: 'Delete Model',\n            description: 'Title text for delete model modal on model view page',\n          })}\n          visible={isDeleteModalVisible}\n          confirmLoading={isDeleteModalConfirmLoading}\n          onOk={this.handleDeleteConfirm}\n          okText={this.props.intl.formatMessage({\n            defaultMessage: 'Delete',\n            description: 'OK text for delete model modal on model view page',\n          })}\n          cancelText={this.props.intl.formatMessage({\n            defaultMessage: 'Cancel',\n            description: 'Cancel text for delete model modal on model view page',\n          })}\n          onCancel={this.hideDeleteModal}\n        >\n          <span>\n            <FormattedMessage\n              defaultMessage=\"Are you sure you want to delete {modelName}? This cannot be undone.\"\n              description=\"Confirmation message for delete model modal on model view page\"\n              values={{ modelName: modelName }}\n            />\n          </span>\n        </DangerModal>\n      </div>\n    );\n  };\n\n  renderMainPanel() {\n    return this.renderDetails();\n  }\n\n  render() {\n    const { model } = this.props;\n    // @ts-expect-error TS(2532): Object is possibly 'undefined'.\n    const modelName = model.name;\n\n    const breadcrumbs = [\n      <Link to={ModelRegistryRoutes.modelListPageRoute} key=\"registered-models\">\n        <FormattedMessage\n          defaultMessage=\"Registered Models\"\n          description=\"Text for link back to model page under the header on the model view page\"\n        />\n      </Link>,\n    ];\n    return (\n      <div>\n        <PageHeader title={modelName} breadcrumbs={breadcrumbs}>\n          <OverflowMenu menu={this.getOverflowMenuItems()} />\n        </PageHeader>\n        {this.renderMainPanel()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: any) => {\n  const modelName = ownProps.model.name;\n  const tags = getRegisteredModelTags(modelName, state);\n  return { tags };\n};\nconst mapDispatchToProps = { setRegisteredModelTagApi, deleteRegisteredModelTagApi };\n\nconst styles = {\n  emailNotificationPreferenceDropdown: (theme: any) => ({\n    width: 300,\n    marginBottom: theme.spacing.md,\n  }),\n  emailNotificationPreferenceTip: (theme: any) => ({\n    paddingLeft: theme.spacing.sm,\n    paddingRight: theme.spacing.sm,\n  }),\n  collapsiblePanel: (theme: any) => ({\n    marginBottom: theme.spacing.md,\n  }),\n  wrapper: (theme: any) => ({\n    /**\n     * This seems to be a best and most stable method to catch\n     * antd's collapsible section buttons without hacks\n     * and using class names.\n     */\n    'div[role=\"button\"][aria-expanded]': {\n      height: theme.general.buttonHeight,\n    },\n  }),\n  editButton: (theme: any) => ({\n    marginLeft: theme.spacing.md,\n  }),\n  versionsTabButtons: (theme: any) => ({\n    display: 'flex',\n    gap: theme.spacing.md,\n    alignItems: 'center',\n  }),\n};\n\nexport const ModelView = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withNextModelsUIContext(injectIntl(ModelViewImpl)));\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  searchModelVersionsApi,\n  getRegisteredModelApi,\n  updateRegisteredModelApi,\n  deleteRegisteredModelApi,\n} from '../actions';\nimport { ModelView } from './ModelView';\nimport { getModelVersions } from '../reducers';\nimport LocalStorageUtils from '../../common/utils/LocalStorageUtils';\nimport { MODEL_VERSIONS_SEARCH_TIMESTAMP_FIELD, MODEL_VERSIONS_PER_PAGE_COMPACT } from '../constants';\nimport { PageContainer } from '../../common/components/PageContainer';\nimport RequestStateWrapper, { triggerError } from '../../common/components/RequestStateWrapper';\nimport { Spinner } from '../../common/components/Spinner';\nimport { ErrorView } from '../../common/components/ErrorView';\nimport { ModelRegistryRoutes } from '../routes';\nimport Utils from '../../common/utils/Utils';\nimport { getUUID } from '../../common/utils/ActionUtils';\nimport { injectIntl } from 'react-intl';\nimport { withRouterNext } from '../../common/utils/withRouterNext';\nimport type { WithRouterNextProps } from '../../common/utils/withRouterNext';\nimport { withErrorBoundary } from '../../common/utils/withErrorBoundary';\nimport ErrorUtils from '../../common/utils/ErrorUtils';\nimport { ErrorCodes } from '../../common/constants';\n\ntype ModelPageImplState = {\n  maxResultsSelection: number;\n  pageTokens: Record<number, string | null>;\n  loading: boolean;\n  error: Error | undefined;\n};\n\ntype ModelPageImplProps = WithRouterNextProps<{ subpage: string }> & {\n  modelName: string;\n  model?: any;\n  modelVersions?: any[];\n  emailSubscriptionStatus?: string;\n  userLevelEmailSubscriptionStatus?: string;\n  searchModelVersionsApi: (...args: any[]) => any;\n  getRegisteredModelApi: (...args: any[]) => any;\n  updateRegisteredModelApi: (...args: any[]) => any;\n  deleteRegisteredModelApi: (...args: any[]) => any;\n  setEmailSubscriptionStatusApi: (...args: any[]) => any;\n  getEmailSubscriptionStatusApi: (...args: any[]) => any;\n  getUserLevelEmailSubscriptionStatusApi: (...args: any[]) => any;\n  searchEndpointsByModelNameApi: (...args: any[]) => any;\n  searchParams: URLSearchParams;\n  setSearchParams: (params: URLSearchParams | ((prev: URLSearchParams) => URLSearchParams)) => void;\n  intl?: any;\n};\n\n/**\n * Returns a LocalStorageStore instance that can be used to persist data associated with the\n * ModelRegistry component.\n */\nfunction getModelPageSessionStore(key: any) {\n  return LocalStorageUtils.getSessionScopedStoreForComponent('ModelPage', key);\n}\n\nexport function getOrderByExpr(orderByKey: string, orderByAsc: boolean): string {\n  return orderByKey ? `${orderByKey} ${orderByAsc ? 'ASC' : 'DESC'}` : '';\n}\n\nexport class ModelPageImpl extends React.Component<ModelPageImplProps, ModelPageImplState> {\n  constructor(props: ModelPageImplProps) {\n    super(props);\n    const persistedPageTokens = this.getPersistedPageTokens();\n    const maxResultsForTokens = this.getPersistedMaxResults();\n\n    this.state = {\n      maxResultsSelection: maxResultsForTokens,\n      pageTokens: persistedPageTokens,\n      loading: true,\n      error: undefined,\n    };\n  }\n  modelPageStoreKey = 'ModelPageStore';\n  defaultPersistedPageTokens = { 1: null };\n\n  initSearchModelVersionsApiRequestId = getUUID();\n  initgetRegisteredModelApiRequestId = getUUID();\n  updateRegisteredModelApiId = getUUID();\n  deleteRegisteredModelApiId = getUUID();\n\n  criticalInitialRequestIds = [this.initSearchModelVersionsApiRequestId, this.initgetRegisteredModelApiRequestId];\n\n  componentDidMount() {\n    this.loadModelVersions(true);\n  }\n\n  updateUrlWithState(orderByKey: string, orderByAsc: boolean, page: number): Promise<void> {\n    return new Promise((resolve) => {\n      const newParams = new URLSearchParams(this.props.searchParams);\n      if (orderByKey) newParams.set('orderByKey', orderByKey);\n      if (orderByAsc !== undefined) newParams.set('orderByAsc', String(orderByAsc));\n      if (page) newParams.set('page', String(page));\n      this.props.setSearchParams(newParams);\n      resolve();\n    });\n  }\n\n  resetHistoryState() {\n    this.setState((prevState: any) => ({\n      pageTokens: this.defaultPersistedPageTokens,\n    }));\n    this.setPersistedPageTokens(this.defaultPersistedPageTokens);\n  }\n\n  isEmptyPageResponse = (value: any) => {\n    return !value || !value.model_versions || !value.next_page_token;\n  };\n\n  // Loads the initial set of model versions.\n  loadModelVersions(isInitialLoading = true) {\n    this.loadPage(this.currentPage, isInitialLoading, true);\n  }\n\n  get currentPage() {\n    const urlPage = parseInt(this.props.searchParams.get('page') || '1', 10);\n    return isNaN(urlPage) ? 1 : urlPage;\n  }\n\n  get orderByKey() {\n    return this.props.searchParams.get('orderByKey') ?? MODEL_VERSIONS_SEARCH_TIMESTAMP_FIELD;\n  }\n\n  get orderByAsc() {\n    return this.props.searchParams.get('orderByAsc') === 'true';\n  }\n\n  getPersistedPageTokens() {\n    const store = getModelPageSessionStore(this.modelPageStoreKey);\n    if (store && store.getItem('page_tokens')) {\n      return JSON.parse(store.getItem('page_tokens'));\n    } else {\n      return this.defaultPersistedPageTokens;\n    }\n  }\n\n  setPersistedPageTokens(page_tokens: any) {\n    const store = getModelPageSessionStore(this.modelPageStoreKey);\n    if (store) {\n      store.setItem('page_tokens', JSON.stringify(page_tokens));\n    }\n  }\n\n  getPersistedMaxResults() {\n    const store = getModelPageSessionStore(this.modelPageStoreKey);\n    if (store && store.getItem('max_results')) {\n      return parseInt(store.getItem('max_results'), 10);\n    } else {\n      return MODEL_VERSIONS_PER_PAGE_COMPACT;\n    }\n  }\n\n  setMaxResultsInStore(max_results: any) {\n    const store = getModelPageSessionStore(this.modelPageStoreKey);\n    store.setItem('max_results', max_results.toString());\n  }\n\n  handleEditDescription = (description: any) => {\n    const { model } = this.props;\n    return this.props\n      .updateRegisteredModelApi(model.name, description, this.updateRegisteredModelApiId)\n      .then(() => this.loadPage(1, false, true));\n  };\n\n  handleDelete = () => {\n    const { model } = this.props;\n    return this.props.deleteRegisteredModelApi(model.name, this.deleteRegisteredModelApiId).then(() => {\n      this.props.navigate(ModelRegistryRoutes.modelListPageRoute);\n    });\n  };\n\n  loadPage = (page: number, isInitialLoading: boolean, loadModelMetadata = false) => {\n    const { modelName } = this.props;\n    const { pageTokens } = this.state;\n    this.setState({ loading: true, error: undefined });\n    const filters_obj = { name: modelName };\n    const promiseValues = [\n      this.props\n        .searchModelVersionsApi(\n          filters_obj,\n          isInitialLoading ? this.initSearchModelVersionsApiRequestId : null,\n          this.state.maxResultsSelection,\n          getOrderByExpr(this.orderByKey, this.orderByAsc),\n          pageTokens[page],\n        )\n        .then((response: any) => {\n          this.updatePageState(page, response);\n        }),\n    ];\n    if (loadModelMetadata) {\n      promiseValues.push(\n        this.props.getRegisteredModelApi(\n          modelName,\n          isInitialLoading === true ? this.initgetRegisteredModelApiRequestId : null,\n        ),\n      );\n    }\n    return Promise.all(promiseValues)\n      .then(() => {\n        this.setState({ loading: false });\n      })\n      .catch((error) => {\n        this.setState({ loading: false, error });\n        this.resetHistoryState();\n      });\n  };\n\n  getNextPageTokenFromResponse(response: any) {\n    const { value } = response;\n    if (this.isEmptyPageResponse(value)) {\n      // Why we could be here:\n      // 1. There are no models returned: we went to the previous page but all models after that\n      //    page's token has been deleted.\n      // 2. If `next_page_token` is not returned, assume there is no next page.\n      return null;\n    } else {\n      return value.next_page_token;\n    }\n  }\n\n  updatePageState = (page: any, response = {}) => {\n    const nextPageToken = this.getNextPageTokenFromResponse(response);\n    this.setState(\n      (prevState: any) => ({\n        pageTokens: {\n          ...prevState.pageTokens,\n          [page + 1]: nextPageToken,\n        },\n      }),\n      () => {\n        this.setPersistedPageTokens(this.state.pageTokens);\n      },\n    );\n  };\n\n  handleMaxResultsChange = (key: string) => {\n    this.setState({ maxResultsSelection: parseInt(key, 10) }, () => {\n      this.resetHistoryState();\n      const { maxResultsSelection } = this.state;\n      this.setMaxResultsInStore(maxResultsSelection);\n      this.loadPage(1, false);\n    });\n  };\n\n  handleClickNext = () => {\n    const nextPage = this.currentPage + 1;\n    this.updateUrlWithState(this.orderByKey, this.orderByAsc, nextPage).then(() => {\n      this.loadPage(nextPage, false);\n    });\n  };\n\n  handleClickPrev = () => {\n    const prevPage = this.currentPage - 1;\n    this.updateUrlWithState(this.orderByKey, this.orderByAsc, prevPage).then(() => {\n      this.loadPage(prevPage, false);\n    });\n  };\n\n  handleClickSortableColumn = (orderByKey: string, orderByDesc: boolean) => {\n    const orderByAsc = !orderByDesc;\n    this.resetHistoryState();\n    this.updateUrlWithState(orderByKey, orderByAsc, 1).then(() => {\n      this.loadPage(1, false);\n    });\n  };\n\n  getMaxResultsSelection = () => {\n    return this.state.maxResultsSelection;\n  };\n\n  render() {\n    const { model, modelVersions, navigate, modelName } = this.props;\n    const { pageTokens } = this.state;\n    return (\n      <PageContainer>\n        <RequestStateWrapper requestIds={this.criticalInitialRequestIds}>\n          {(loading: any, hasError: any, requests: any) => {\n            if (hasError) {\n              if (Utils.shouldRender404(requests, [this.initgetRegisteredModelApiRequestId])) {\n                return (\n                  <ErrorView\n                    statusCode={404}\n                    subMessage={this.props.intl.formatMessage(\n                      {\n                        defaultMessage: 'Model {modelName} does not exist',\n                        description: 'Sub-message text for error message on overall model page',\n                      },\n                      {\n                        modelName: modelName,\n                      },\n                    )}\n                    fallbackHomePageReactRoute={ModelRegistryRoutes.modelListPageRoute}\n                  />\n                );\n              }\n              const permissionDeniedErrors = requests.filter((request: any) => {\n                return (\n                  this.criticalInitialRequestIds.includes(request.id) &&\n                  request.error?.getErrorCode() === ErrorCodes.PERMISSION_DENIED\n                );\n              });\n              if (permissionDeniedErrors && permissionDeniedErrors[0]) {\n                return (\n                  <ErrorView\n                    statusCode={403}\n                    subMessage={this.props.intl.formatMessage(\n                      {\n                        defaultMessage: 'Permission denied for {modelName}. Error: \"{errorMsg}\"',\n                        description: 'Permission denied error message on registered model detail page',\n                      },\n                      {\n                        modelName: modelName,\n                        errorMsg: permissionDeniedErrors[0].error?.getMessageField(),\n                      },\n                    )}\n                    fallbackHomePageReactRoute={ModelRegistryRoutes.modelListPageRoute}\n                  />\n                );\n              }\n              // TODO(Zangr) Have a more generic boundary to handle all errors, not just 404.\n              triggerError(requests);\n            } else if (loading) {\n              return <Spinner />;\n            } else if (model) {\n              // Null check to prevent NPE after delete operation\n              return (\n                <ModelView\n                  model={model}\n                  modelVersions={modelVersions}\n                  handleEditDescription={this.handleEditDescription}\n                  handleDelete={this.handleDelete}\n                  navigate={navigate}\n                  onMetadataUpdated={this.loadModelVersions}\n                  orderByKey={this.orderByKey}\n                  orderByAsc={this.orderByAsc}\n                  currentPage={this.currentPage}\n                  nextPageToken={pageTokens[this.currentPage + 1]}\n                  onClickNext={this.handleClickNext}\n                  onClickPrev={this.handleClickPrev}\n                  onClickSortableColumn={this.handleClickSortableColumn}\n                  onSetMaxResult={this.handleMaxResultsChange}\n                  maxResultValue={this.getMaxResultsSelection()}\n                  loading={this.state.loading}\n                />\n              );\n            }\n            return null;\n          }}\n        </RequestStateWrapper>\n      </PageContainer>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any, ownProps: WithRouterNextProps<{ modelName: string }>) => {\n  const modelName = decodeURIComponent(ownProps.params.modelName);\n  const model = state.entities.modelByName[modelName];\n  const modelVersions = getModelVersions(state, modelName);\n  return {\n    modelName,\n    model,\n    modelVersions,\n  };\n};\n\nconst mapDispatchToProps = {\n  searchModelVersionsApi,\n  getRegisteredModelApi,\n  updateRegisteredModelApi,\n  deleteRegisteredModelApi,\n};\n\nconst ModelPageWithRouter = withRouterNext(\n  // @ts-expect-error TS(2769): No overload matches this call.\n  connect(mapStateToProps, mapDispatchToProps)(injectIntl(ModelPageImpl)),\n);\n\nexport const ModelPage = withErrorBoundary(ErrorUtils.mlflowServices.MODEL_REGISTRY, ModelPageWithRouter);\n\nexport default ModelPage;\n","/**\n * NOTE: this code file was automatically migrated to TypeScript using ts-migrate and\n * may contain multiple `any` type annotations and `@ts-expect-error` directives.\n * If possible, please improve types while making changes to this file. If the type\n * annotations are already looking good, please remove this comment.\n */\n\n/**\n * Utils for working with local storage.\n */\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class -- TODO(FEINF-4274)\nexport default class LocalStorageUtils {\n  /**\n   * Protocol version of MLflow's local storage. Should be incremented on any breaking change in how\n   * data persisted in local storage is used, to prevent old (invalid) cached data from being loaded\n   * and breaking the application.\n   */\n  static version = '1.1';\n\n  /**\n   * Return a LocalStorageStore corresponding to the specified component and ID, where the ID\n   * can be used to disambiguate between multiple instances of cached data for the same component\n   * (e.g. cached data for multiple experiments).\n   */\n  static getStoreForComponent(componentName: any, id: any) {\n    return new LocalStorageStore([componentName, id].join('-'), 'localStorage');\n  }\n\n  static getSessionScopedStoreForComponent(componentName: any, id: any) {\n    return new LocalStorageStore([componentName, id].join('-'), 'sessionStorage');\n  }\n}\n\n/**\n * Interface to browser local storage that allows for setting key-value pairs under the specified\n * \"scope\".\n */\nclass LocalStorageStore {\n  constructor(scope: any, type: any) {\n    this.scope = scope;\n    if (type === 'localStorage') {\n      this.storageObj = window.localStorage;\n    } else {\n      this.storageObj = window.sessionStorage;\n    }\n  }\n  static reactComponentStateKey = 'ReactComponentState';\n\n  scope: any;\n  storageObj: any;\n\n  /**\n   * Loads React component state cached in local storage into a vanilla JS object.\n   */\n  loadComponentState() {\n    const storedVal = this.getItem(LocalStorageStore.reactComponentStateKey);\n    if (storedVal) {\n      return JSON.parse(storedVal);\n    }\n    return {};\n  }\n\n  /**\n   * Save React component state in local storage.\n   * @param stateRecord: Immutable.Record instance or plain object containing component state.\n   */\n  saveComponentState(stateRecord: any) {\n    const targetValue = typeof stateRecord.toJSON === 'function' ? stateRecord.toJSON() : stateRecord;\n    this.setItem(LocalStorageStore.reactComponentStateKey, JSON.stringify(targetValue));\n  }\n\n  /**\n   * Helper method for constructing a scoped key to use for setting/getting values in\n   * local storage.\n   */\n  withScopePrefix(key: any) {\n    return ['MLflowLocalStorage', LocalStorageUtils.version, this.scope, key].join('-');\n  }\n\n  /** Save the specified key-value pair in local storage. */\n  setItem(key: any, value: any) {\n    this.storageObj.setItem(this.withScopePrefix(key), value);\n  }\n\n  /** Fetch the value corresponding to the passed-in key from local storage. */\n  getItem(key: any) {\n    return this.storageObj.getItem(this.withScopePrefix(key));\n  }\n}\n","import { sortedIndexOf } from 'lodash';\nimport React, { useMemo, useRef, useState } from 'react';\nimport type { Control } from 'react-hook-form';\nimport { useController } from 'react-hook-form';\nimport { useIntl } from 'react-intl';\n\nimport { PlusIcon, LegacySelect, LegacyTooltip, useDesignSystemTheme } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../types';\n\n/**\n * Will show an extra row at the bottom of the dropdown menu to create a new tag when\n * The user has typed something in the search input\n * and either\n * 1. The search input is not an exact match for an existing tag name\n * 2. There are no tags available based on search input\n */\n\nfunction DropdownMenu(menu: React.ReactElement, allAvailableTags: string[]) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n  const searchValue = menu.props.searchValue.toLowerCase();\n\n  const resolvedMenu = useMemo(() => {\n    if (!searchValue) return menu;\n\n    const doesTagExists = sortedIndexOf(allAvailableTags, searchValue) >= 0;\n    if (doesTagExists) return menu;\n\n    const isValidTagKey = /^[^,.:/=\\-\\s]+$/.test(searchValue);\n\n    // Overriding the menu to add a new option at the top\n    return React.cloneElement(menu, {\n      flattenOptions: [\n        {\n          data: {\n            value: searchValue,\n            disabled: !isValidTagKey,\n            style: {\n              color: isValidTagKey ? theme.colors.actionTertiaryTextDefault : theme.colors.actionDisabledText,\n            },\n            children: (\n              <LegacyTooltip\n                title={\n                  isValidTagKey\n                    ? undefined\n                    : intl.formatMessage({\n                        defaultMessage: ', . : / - = and blank spaces are not allowed',\n                        description:\n                          'Key-value tag editor modal > Tag dropdown Manage Modal > Invalid characters error',\n                      })\n                }\n                placement=\"right\"\n              >\n                <span css={{ display: 'block' }}>\n                  <PlusIcon css={{ marginRight: theme.spacing.sm }} />\n                  {intl.formatMessage(\n                    {\n                      defaultMessage: 'Add tag \"{tagKey}\"',\n                      description: 'Key-value tag editor modal > Tag dropdown Manage Modal > Add new tag button',\n                    },\n                    {\n                      tagKey: searchValue,\n                    },\n                  )}\n                </span>\n              </LegacyTooltip>\n            ),\n          },\n          key: searchValue,\n          groupOption: false,\n        },\n        ...menu.props.flattenOptions,\n      ],\n    });\n  }, [allAvailableTags, menu, searchValue, intl, theme]);\n\n  return resolvedMenu;\n}\n\nfunction getDropdownMenu(allAvailableTags: string[]) {\n  return (menu: React.ReactElement) => DropdownMenu(menu, allAvailableTags);\n}\n\n/**\n * Used in tag edit feature, allows selecting existing / adding new tag value\n */\nexport function TagKeySelectDropdown({\n  allAvailableTags,\n  control,\n  onKeyChangeCallback,\n}: {\n  allAvailableTags: string[];\n  control: Control<KeyValueEntity>;\n  onKeyChangeCallback?: (key?: string) => void;\n}) {\n  const intl = useIntl();\n  const [isOpen, setIsOpen] = useState(false);\n  const selectRef = useRef<{ blur: () => void; focus: () => void }>(null);\n\n  const { field, fieldState } = useController({\n    control: control,\n    name: 'key',\n    rules: {\n      required: {\n        message: intl.formatMessage({\n          defaultMessage: 'A tag key is required',\n          description: 'Key-value tag editor modal > Tag dropdown > Tag key required error message',\n        }),\n        value: true,\n      },\n    },\n  });\n\n  const handleDropdownVisibleChange = (visible: boolean) => {\n    setIsOpen(visible);\n  };\n\n  const handleClear = () => {\n    field.onChange(undefined);\n    onKeyChangeCallback?.(undefined);\n  };\n\n  const handleSelect = (key: string) => {\n    field.onChange(key);\n    onKeyChangeCallback?.(key);\n  };\n\n  return (\n    <LegacySelect\n      allowClear\n      ref={selectRef}\n      dangerouslySetAntdProps={{\n        showSearch: true,\n        dropdownRender: getDropdownMenu(allAvailableTags),\n      }}\n      css={{ width: '100%' }}\n      placeholder={intl.formatMessage({\n        defaultMessage: 'Type a key',\n        description: 'Key-value tag editor modal > Tag dropdown > Tag input placeholder',\n      })}\n      value={field.value}\n      defaultValue={field.value}\n      open={isOpen}\n      onDropdownVisibleChange={handleDropdownVisibleChange}\n      filterOption={(input, option) => option?.value.toLowerCase().includes(input.toLowerCase())}\n      onSelect={handleSelect}\n      onClear={handleClear}\n      validationState={fieldState.error ? 'error' : undefined}\n    >\n      {allAvailableTags.map((tag) => (\n        <LegacySelect.Option value={tag} key={tag}>\n          {tag}\n        </LegacySelect.Option>\n      ))}\n    </LegacySelect>\n  );\n}\n","import { isEqual, sortBy } from 'lodash';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { truncate } from 'lodash';\n\nimport {\n  Button,\n  FormUI,\n  Modal,\n  PlusIcon,\n  Popover,\n  RHFControlledComponents,\n  RestoreAntDDefaultClsPrefix,\n  LegacyTooltip,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\nimport { Typography } from '@databricks/design-system';\nimport type { KeyValueEntity } from '../types';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useForm } from 'react-hook-form';\nimport { TagKeySelectDropdown } from '../components/TagSelectDropdown';\nimport { KeyValueTag } from '../components/KeyValueTag';\nimport { ErrorWrapper } from '../utils/ErrorWrapper';\n\nfunction getTagsMap(tags: KeyValueEntity[]) {\n  return new Map(tags.map((tag) => [tag.key, tag]));\n}\n\n/**\n * Provides methods to initialize and display modal used to add and remove tags from any compatible entity\n */\nexport const useEditKeyValueTagsModal = <T extends { tags?: KeyValueEntity[] }>({\n  onSuccess,\n  saveTagsHandler,\n  allAvailableTags,\n  valueRequired = false,\n  title,\n}: {\n  onSuccess?: () => void;\n  saveTagsHandler: (editedEntity: T, existingTags: KeyValueEntity[], newTags: KeyValueEntity[]) => Promise<any>;\n  allAvailableTags?: string[];\n  valueRequired?: boolean;\n  title?: React.ReactNode;\n}) => {\n  const editedEntityRef = useRef<T>();\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const { theme } = useDesignSystemTheme();\n\n  const [initialTags, setInitialTags] = useState<Map<string, KeyValueEntity>>(new Map());\n  const [finalTags, setFinalTags] = useState<Map<string, KeyValueEntity>>(new Map());\n\n  const [showModal, setShowModal] = useState(false);\n\n  const form = useForm<KeyValueEntity>({\n    defaultValues: {\n      key: undefined,\n      value: '',\n    },\n  });\n\n  const hideModal = () => setShowModal(false);\n\n  /**\n   * Function used to invoke the modal and start editing tags of the particular model version\n   */\n  const showEditTagsModal = useCallback(\n    (editedEntity: T) => {\n      editedEntityRef.current = editedEntity;\n      setInitialTags(getTagsMap(editedEntity.tags || []));\n      setFinalTags(getTagsMap(editedEntity.tags || []));\n      form.reset();\n\n      setShowModal(true);\n    },\n    [form],\n  );\n\n  const saveTags = async () => {\n    if (!editedEntityRef.current) {\n      return;\n    }\n    setErrorMessage('');\n    setIsLoading(true);\n    saveTagsHandler(editedEntityRef.current, Array.from(initialTags.values()), Array.from(finalTags.values()))\n      .then(() => {\n        hideModal();\n        onSuccess?.();\n        setIsLoading(false);\n      })\n      .catch((e: ErrorWrapper | Error) => {\n        setIsLoading(false);\n        setErrorMessage(e instanceof ErrorWrapper ? e.getUserVisibleError()?.message : e.message);\n      });\n  };\n\n  const intl = useIntl();\n  const formValues = form.watch();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const hasNewValues = useMemo(\n    () => !isEqual(sortBy(Array.from(initialTags.values()), 'key'), sortBy(Array.from(finalTags.values()), 'key')),\n    [initialTags, finalTags],\n  );\n  const isDirty = formValues.key || formValues.value;\n  const showPopoverMessage = hasNewValues && isDirty;\n\n  const onKeyChangeCallback = (key: string | undefined) => {\n    const tag = key ? finalTags.get(key) : undefined;\n    /**\n     * If a tag value exists for provided key, set the value to the existing tag value\n     */\n    form.setValue('value', tag?.value ?? '');\n  };\n\n  const handleTagDelete = ({ key }: KeyValueEntity) => {\n    setFinalTags((currentFinalTags) => {\n      currentFinalTags.delete(key);\n      return new Map(currentFinalTags);\n    });\n  };\n\n  const onSubmit = () => {\n    // Do not accept form if no value provided while it's required\n    if (valueRequired && !formValues.value.trim()) {\n      return;\n    }\n\n    // Add new tag to existing tags leaving only one tag per key value\n    const newEntries = new Map(finalTags);\n    newEntries.set(formValues.key, formValues);\n\n    setFinalTags(newEntries);\n    form.reset();\n  };\n\n  const EditTagsModal = (\n    <Modal\n      componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_135\"\n      destroyOnClose\n      visible={showModal}\n      title={\n        title ?? (\n          <FormattedMessage\n            defaultMessage=\"Add/Edit tags\"\n            description=\"Key-value tag editor modal > Title of the update tags modal\"\n          />\n        )\n      }\n      onCancel={hideModal}\n      footer={\n        <RestoreAntDDefaultClsPrefix>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_147\"\n            dangerouslyUseFocusPseudoClass\n            onClick={hideModal}\n            /**\n             * Hack: The footer will remove the margin to the save tags button\n             * if the button if wrapped on another component.\n             */\n            css={{ marginRight: !hasNewValues ? theme.spacing.sm : 0 }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Manage Tag cancel button',\n            })}\n          </Button>\n          {showPopoverMessage ? (\n            <UnsavedTagPopoverTrigger formValues={formValues} isLoading={isLoading} onSaveTask={saveTags} />\n          ) : (\n            <LegacyTooltip\n              title={\n                !hasNewValues\n                  ? intl.formatMessage({\n                      defaultMessage: 'Please add or remove one or more tags before saving',\n                      description: 'Key-value tag editor modal > Tag disabled message',\n                    })\n                  : undefined\n              }\n            >\n              <Button\n                componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_174\"\n                dangerouslyUseFocusPseudoClass\n                disabled={!hasNewValues}\n                loading={isLoading}\n                type=\"primary\"\n                onClick={saveTags}\n              >\n                {intl.formatMessage({\n                  defaultMessage: 'Save tags',\n                  description: 'Key-value tag editor modal > Manage Tag save button',\n                })}\n              </Button>\n            </LegacyTooltip>\n          )}\n        </RestoreAntDDefaultClsPrefix>\n      }\n    >\n      <form\n        onSubmit={form.handleSubmit(onSubmit)}\n        css={{ display: 'flex', alignItems: 'flex-end', gap: theme.spacing.md }}\n      >\n        <div css={{ minWidth: 0, display: 'flex', gap: theme.spacing.md, flex: 1 }}>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"key\">\n              {intl.formatMessage({\n                defaultMessage: 'Key',\n                description: 'Key-value tag editor modal > Key input label',\n              })}\n            </FormUI.Label>\n            <TagKeySelectDropdown\n              allAvailableTags={allAvailableTags || []}\n              control={form.control}\n              onKeyChangeCallback={onKeyChangeCallback}\n            />\n          </div>\n          <div css={{ flex: 1 }}>\n            <FormUI.Label htmlFor=\"value\">\n              {valueRequired\n                ? intl.formatMessage({\n                    defaultMessage: 'Value',\n                    description: 'Key-value tag editor modal > Value input label (required)',\n                  })\n                : intl.formatMessage({\n                    defaultMessage: 'Value (optional)',\n                    description: 'Key-value tag editor modal > Value input label',\n                  })}\n            </FormUI.Label>\n            <RHFControlledComponents.Input\n              componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_223\"\n              name=\"value\"\n              control={form.control}\n              aria-label={\n                valueRequired\n                  ? intl.formatMessage({\n                      defaultMessage: 'Value',\n                      description: 'Key-value tag editor modal > Value input label (required)',\n                    })\n                  : intl.formatMessage({\n                      defaultMessage: 'Value (optional)',\n                      description: 'Key-value tag editor modal > Value input label',\n                    })\n              }\n              placeholder={intl.formatMessage({\n                defaultMessage: 'Type a value',\n                description: 'Key-value tag editor modal > Value input placeholder',\n              })}\n            />\n          </div>\n        </div>\n        <LegacyTooltip\n          title={intl.formatMessage({\n            defaultMessage: 'Add tag',\n            description: 'Key-value tag editor modal > Add tag button',\n          })}\n        >\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_248\"\n            htmlType=\"submit\"\n            aria-label={intl.formatMessage({\n              defaultMessage: 'Add tag',\n              description: 'Key-value tag editor modal > Add tag button',\n            })}\n          >\n            <PlusIcon />\n          </Button>\n        </LegacyTooltip>\n      </form>\n      {errorMessage && <FormUI.Message type=\"error\" message={errorMessage} />}\n      <div\n        css={{\n          display: 'flex',\n          rowGap: theme.spacing.xs,\n          flexWrap: 'wrap',\n          marginTop: theme.spacing.sm,\n        }}\n      >\n        {Array.from(finalTags.values()).map((tag) => (\n          <KeyValueTag isClosable tag={tag} onClose={() => handleTagDelete(tag)} key={tag.key} />\n        ))}\n      </div>\n    </Modal>\n  );\n\n  return { EditTagsModal, showEditTagsModal, isLoading };\n};\n\nfunction UnsavedTagPopoverTrigger({\n  isLoading,\n  formValues,\n  onSaveTask,\n}: {\n  isLoading: boolean;\n  formValues: any;\n  onSaveTask: () => void;\n}) {\n  const intl = useIntl();\n  const { theme } = useDesignSystemTheme();\n\n  const tagKeyDisplay = `${truncate(formValues.key, { length: 20 }) || '_'}`;\n  const tagValueDisplay = formValues.value ? `:${truncate(formValues.value, { length: 20 })}` : '';\n  const fullTagDisplay = `${tagKeyDisplay}${tagValueDisplay}`;\n\n  const shownText = intl.formatMessage(\n    {\n      defaultMessage: 'Are you sure you want to save and close without adding \"{tag}\"',\n      description: 'Key-value tag editor modal > Unsaved tag message',\n    },\n    {\n      tag: fullTagDisplay,\n    },\n  );\n  return (\n    <Popover.Root componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_309\">\n      <Popover.Trigger asChild>\n        <Button\n          componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_306\"\n          dangerouslyUseFocusPseudoClass\n          loading={isLoading}\n          type=\"primary\"\n        >\n          {intl.formatMessage({\n            defaultMessage: 'Save tags',\n            description: 'Key-value tag editor modal > Manage Tag save button',\n          })}\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content align=\"end\" aria-label={shownText}>\n        <Typography.Paragraph css={{ maxWidth: 400 }}>{shownText}</Typography.Paragraph>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_316\"\n            onClick={onSaveTask}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Yes, save and close',\n              description: 'Key-value tag editor modal > Unsaved tag message > Yes, save and close button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Close asChild>\n          <Button\n            componentId=\"codegen_mlflow_app_src_common_hooks_useeditkeyvaluetagsmodal.tsx_324\"\n            type=\"primary\"\n            css={{ marginLeft: theme.spacing.sm }}\n          >\n            {intl.formatMessage({\n              defaultMessage: 'Cancel',\n              description: 'Key-value tag editor modal > Unsaved tag message > cancel button',\n            })}\n          </Button>\n        </Popover.Close>\n        <Popover.Arrow />\n      </Popover.Content>\n    </Popover.Root>\n  );\n}\n","import { takeWhile, truncate } from 'lodash';\n// Import pako lazily to reduce bundle size\nconst lazyPako = () => import('pako');\n\nexport const truncateToFirstLineWithMaxLength = (str: string, maxLength: number): string => {\n  const truncated = truncate(str, {\n    length: maxLength,\n  });\n  return takeWhile(truncated, (char) => char !== '\\n').join('');\n};\n\nexport const capitalizeFirstChar = (str: unknown) => {\n  if (!str || typeof str !== 'string' || str.length < 1) {\n    return str;\n  }\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n};\n\nexport const middleTruncateStr = (str: string, maxLen: number) => {\n  if (str.length > maxLen) {\n    const firstPartLen = Math.floor((maxLen - 3) / 2);\n    const lastPartLen = maxLen - 3 - firstPartLen;\n    return str.substring(0, firstPartLen) + '...' + str.substring(str.length - lastPartLen, str.length);\n  } else {\n    return str;\n  }\n};\n\nconst capitalizeFirstLetter = (string: string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nconst _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n/* eslint-disable no-bitwise */\n/**\n * UTF-8 safe version of base64 encoder\n * Source: http://www.webtoolkit.info/javascript_base64.html\n *\n * @param {string} input - Text to encode\n */\nexport const btoaUtf8 = (input: string) => {\n  let output = '';\n  let i = 0;\n\n  const result = _utf8_encode(input);\n\n  while (i < result.length) {\n    const chr1 = result.charCodeAt(i++);\n    const chr2 = result.charCodeAt(i++);\n    const chr3 = result.charCodeAt(i++);\n\n    const enc1 = chr1 >> 2;\n    const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n    let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n    let enc4 = chr3 & 63;\n\n    if (isNaN(chr2)) {\n      enc4 = 64;\n      enc3 = enc4;\n    } else if (isNaN(chr3)) {\n      enc4 = 64;\n    }\n\n    output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n  }\n\n  return output;\n};\n\n/**\n * UTF-8 safe version of base64 decoder\n * Source: http://www.webtoolkit.info/javascript_base64.html\n *\n * @param {string} input - Text to decode\n */\nexport const atobUtf8 = (input: string) => {\n  let output = '';\n  let i = 0;\n\n  const result = input?.replace(/[^A-Za-z0-9+/=]/g, '') || '';\n\n  while (i < result.length) {\n    const enc1 = _keyStr.indexOf(result.charAt(i++));\n    const enc2 = _keyStr.indexOf(result.charAt(i++));\n    const enc3 = _keyStr.indexOf(result.charAt(i++));\n    const enc4 = _keyStr.indexOf(result.charAt(i++));\n\n    const chr1 = (enc1 << 2) | (enc2 >> 4);\n    const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n    const chr3 = ((enc3 & 3) << 6) | enc4;\n\n    output += String.fromCharCode(chr1);\n\n    if (enc3 !== 64) {\n      output += String.fromCharCode(chr2);\n    }\n\n    if (enc4 !== 64) {\n      output += String.fromCharCode(chr3);\n    }\n  }\n\n  return _utf8_decode(output);\n};\n\n/**\n * (private method) does a UTF-8 encoding\n *\n * @private\n * @param {string} string - Text to encode\n */\nconst _utf8_encode = (string = '') => {\n  const result = string.replace(/\\r\\n/g, '\\n');\n  let utftext = '';\n\n  for (let n = 0; n < result.length; n++) {\n    const c = result.charCodeAt(n);\n\n    if (c < 128) {\n      utftext += String.fromCharCode(c);\n    } else if (c > 127 && c < 2048) {\n      utftext += String.fromCharCode((c >> 6) | 192) + String.fromCharCode((c & 63) | 128);\n    } else {\n      utftext +=\n        String.fromCharCode((c >> 12) | 224) +\n        String.fromCharCode(((c >> 6) & 63) | 128) +\n        String.fromCharCode((c & 63) | 128);\n    }\n  }\n\n  return utftext;\n};\n\n/**\n * (private method) does a UTF-8 decoding\n *\n * @private\n * @param {string} utftext - UTF-8 text to dencode\n */\nconst _utf8_decode = (utftext = '') => {\n  let string = '';\n  let i = 0;\n\n  while (i < utftext.length) {\n    const c = utftext.charCodeAt(i);\n\n    if (c < 128) {\n      string += String.fromCharCode(c);\n      i++;\n    } else if (c > 191 && c < 224) {\n      const c2 = utftext.charCodeAt(i + 1);\n      string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n      i += 2;\n    } else {\n      const c2 = utftext.charCodeAt(i + 1);\n      const c3 = utftext.charCodeAt(i + 2);\n      string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n      i += 3;\n    }\n  }\n  return string;\n};\n/* eslint-enable no-bitwise */\n\n/**\n * Returns a SHA256 hash of the input string\n */\nexport const getStringSHA256 = (input: string) => {\n  return crypto.subtle.digest('SHA-256', new TextEncoder().encode(input)).then((arrayBuffer) => {\n    return Array.prototype.map.call(new Uint8Array(arrayBuffer), (x) => ('00' + x.toString(16)).slice(-2)).join('');\n  });\n};\n\nconst COMPRESSED_TEXT_DEFLATE_PREFIX = 'deflate;';\n\nexport const textCompressDeflate = async (text: string) => {\n  const pako = await lazyPako();\n  const binaryData = pako.deflate(text);\n\n  // Buffer-based implementation\n  if (typeof Buffer !== 'undefined') {\n    const b64encoded = Buffer.from(binaryData).toString('base64');\n    return `${COMPRESSED_TEXT_DEFLATE_PREFIX}${b64encoded}`;\n  }\n\n  // btoa-based implementation\n  const binaryString = Array.from(binaryData, (byte) => String.fromCodePoint(byte)).join('');\n  return `${COMPRESSED_TEXT_DEFLATE_PREFIX}${btoa(binaryString)}`;\n};\n\nexport const textDecompressDeflate = async (compressedText: string) => {\n  const pako = await lazyPako();\n  if (!compressedText.startsWith(COMPRESSED_TEXT_DEFLATE_PREFIX)) {\n    throw new Error('Invalid compressed text, payload header invalid');\n  }\n  const compressedTextWithoutPrefix = compressedText.slice(COMPRESSED_TEXT_DEFLATE_PREFIX.length);\n\n  // Buffer-based implementation\n  if (typeof Buffer !== 'undefined') {\n    const binaryString = Buffer.from(compressedTextWithoutPrefix, 'base64');\n    return pako.inflate(\n      // This doesn't fail in Mlflow-Copybara-Tester-Pr. TODO: check why.\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore [FEINF-4084] No overload matches this call.\n      binaryString,\n      { to: 'string' },\n    );\n  }\n\n  // atob-based implementation\n  const binaryString = atob(compressedTextWithoutPrefix);\n  return pako.inflate(\n    Uint8Array.from(binaryString, (m) => m.codePointAt(0) ?? 0),\n    { to: 'string' },\n  );\n};\n\nexport const isTextCompressedDeflate = (text: string) => text.startsWith(COMPRESSED_TEXT_DEFLATE_PREFIX);\n","import { Button, PencilIcon, useDesignSystemTheme } from '@databricks/design-system';\nimport { AliasTag } from '../../../common/components/AliasTag';\nimport { FormattedMessage } from 'react-intl';\n\ninterface ModelVersionTableAliasesCellProps {\n  aliases?: string[];\n  modelName: string;\n  version: string;\n  onAddEdit: () => void;\n  className?: string;\n}\n\nexport const ModelVersionTableAliasesCell = ({\n  aliases = [],\n  onAddEdit,\n  className,\n}: ModelVersionTableAliasesCellProps) => {\n  const { theme } = useDesignSystemTheme();\n\n  return (\n    <div\n      css={{\n        maxWidth: 300,\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'flex-start',\n        '> *': {\n          marginRight: '0 !important',\n        },\n        rowGap: theme.spacing.xs / 2,\n        columnGap: theme.spacing.xs,\n      }}\n      className={className}\n    >\n      {aliases.length < 1 ? (\n        <Button\n          componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversiontablealiasescell.tsx_30\"\n          size=\"small\"\n          type=\"link\"\n          onClick={onAddEdit}\n        >\n          <FormattedMessage\n            defaultMessage=\"Add\"\n            description=\"Model registry > model version table > aliases column > 'add' button label\"\n          />\n        </Button>\n      ) : (\n        <>\n          {aliases.map((alias) => (\n            <AliasTag value={alias} key={alias} css={{ marginTop: theme.spacing.xs / 2 }} />\n          ))}\n          <Button\n            componentId=\"codegen_mlflow_app_src_model-registry_components_aliases_modelversiontablealiasescell.tsx_41\"\n            size=\"small\"\n            icon={<PencilIcon />}\n            onClick={onAddEdit}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n"],"names":["KeyValueTagsEditorCell","tags","onAddEdit","theme","useDesignSystemTheme","_jsx","css","_css","display","flexWrap","marginRight","gap","spacing","xs","children","length","Button","componentId","size","type","onClick","FormattedMessage","id","defaultMessage","_jsxs","_Fragment","map","tag","KeyValueTag","key","value","icon","PencilIcon","COLUMN_IDS","getAliasesModalTitle","version","values","_ref","name","styles","ModelVersionTable","modelName","modelVersions","activeStageOnly","orderByAsc","orderByKey","onSortChange","onChange","getSortFieldName","modelEntity","onMetadataUpdated","usingNextModelsUI","aliases","pagination","isLoading","_modelEntity$aliases","aliasesByVersion","useMemo","result","forEach","alias","push","versions","filter","current_stage","ACTIVE_STAGES","includes","intl","useIntl","allTagsKeys","allTagsList","modelVersion","flat","Array","from","Set","sort","dispatch","useDispatch","EditTagsModal","showEditTagsModal","useEditKeyValueTagsModal","allAvailableTags","saveTagsHandler","async","existingTags","newTags","updateModelVersionTagsApi","onSuccess","EditAliasesModal","showEditAliasesModal","useEditAliasesModal","onSave","currentlyEditedVersion","existingAliases","draftAliases","setModelVersionAliasesApi","getTitle","description","link","chunks","href","mlflowAliasesLearnMoreLink","rel","target","rowSelection","setRowSelection","useState","useEffect","selectedVersions","selectedVersionNumbers","tableColumns","columns","STATUS","enableSorting","header","meta","flexBasis","general","heightSm","flexGrow","cell","row","original","status","status_message","LegacyTooltip","title","modelVersionStatusIconTooltips","Typography","Text","ModelVersionStatusIcons","VERSION","formatMessage","className","accessorKey","getValue","Link","to","ModelRegistryRoutes","getModelVersionPageRoute","String","versionNumber","CREATION_TIMESTAMP","minWidth","Utils","formatTimestamp","USER_ID","TAGS","flex","ALIASES","multiline","mvAliases","ModelVersionTableAliasesCell","STAGE","StageTagComponents","DESCRIPTION","truncateToFirstLineWithMaxLength","sorting","desc","table","useReactTable","data","state","getCoreRowModel","getSortedRowModel","getRowId","onRowSelectionChange","onSortingChange","stateUpdater","newSortState","sorter","emptyComponent","Empty","RegisteringModelDocUrl","image","PlusIcon","Table","scrollable","empty","getRowModel","rows","undefined","someRowsSelected","getIsSomeRowsSelected","getIsAllRowsSelected","TableRow","isHeader","TableRowSelectCell","checked","indeterminate","getToggleAllRowsSelectedHandler","getLeafHeaders","_meta","TableHeader","sortable","column","getCanSort","sortDirection","getIsSorted","onToggleSort","currentSortColumn","sortDesc","toggleSorting","columnDef","flexRender","getContext","TableSkeletonRows","getIsSelected","getToggleSelectedHandler","getAllCells","_meta2","_meta3","_meta4","TableCell","StageFilters","_ref2","_ref3","_ref4","ModelViewImpl","React","constructor","props","super","maxResultsSelection","MODEL_VERSIONS_PER_PAGE_COMPACT","stageFilter","showDescriptionEditor","isDeleteModalVisible","isDeleteModalConfirmLoading","runsSelected","isTagsRequestPending","updatingEmailPreferences","isTagAssignmentModalVisible","isSavingTags","tagSavingError","formRef","sharedTaggingUIEnabled","shouldUseSharedTaggingUI","handleSetMaxResult","this","onSetMaxResult","MODEL_VERSIONS_SEARCH_TIMESTAMP_FIELD","handleSortChange","params","onClickSortableColumn","handleStageFilterChange","e","setState","handleCancelEditDescription","handleSubmitEditDescription","handleEditDescription","then","startEditingDescription","stopPropagation","showDeleteModal","hideDeleteModal","showConfirmLoading","hideConfirmLoading","handleDeleteConfirm","navigate","handleDelete","modelListPageRoute","catch","logErrorAndNotifyUser","getTags","sortBy","getVisibleTagValues","handleEditTags","handleCloseTagAssignmentModal","handleAddTag","form","current","model","setRegisteredModelTagApi","resetFields","ex","console","error","message","ErrorWrapper","getMessageField","displayGlobalErrorNotification","handleSaveEdit","handleDeleteTag","deleteRegisteredModelTagApi","handleSaveTags","deletedTags","newTagsToSet","deletedTagsToDelete","Promise","all","selectedRowKeys","selectedRows","newState","Object","assign","run_id","renderDetails","currentPage","nextPageToken","compareDisabled","keys","wrapper","Descriptions","Item","label","creation_timestamp","last_updated_timestamp","user_id","TagList","onEdit","CollapsibleSection","collapsiblePanel","renderDescriptionEditIcon","forceOpen","defaultCollapsed","EditableNote","defaultMarkdown","onSubmit","onCancel","showEditor","EditableTagsTableView","innerRef","isRequestPending","versionsTabButtons","SegmentedControlGroup","SegmentedControlButton","getActiveVersionsCount","disabled","onCompare","shouldShowModelsNextUI","ModelsNextUIToggleSwitch","loading","CursorPagination","hasNextPage","Boolean","hasPreviousPage","onNextPage","onClickNext","onPreviousPage","onClickPrev","pageSizeSelect","num","default","maxResultValue","options","DangerModal","visible","confirmLoading","onOk","okText","cancelText","bind","componentDidMount","pageTitle","updatePageTitle","v","getOverflowMenuItems","itemName","getCompareModelVersionsPageRoute","editButton","renderMainPanel","render","breadcrumbs","PageHeader","OverflowMenu","menu","mapDispatchToProps","emailNotificationPreferenceDropdown","width","marginBottom","md","emailNotificationPreferenceTip","paddingLeft","sm","paddingRight","height","buttonHeight","marginLeft","alignItems","ModelView","connect","mapStateToProps","ownProps","getRegisteredModelTags","withNextModelsUIContext","injectIntl","getModelPageSessionStore","LocalStorageUtils","getSessionScopedStoreForComponent","getOrderByExpr","ModelPageImpl","modelPageStoreKey","defaultPersistedPageTokens","initSearchModelVersionsApiRequestId","getUUID","initgetRegisteredModelApiRequestId","updateRegisteredModelApiId","deleteRegisteredModelApiId","criticalInitialRequestIds","isEmptyPageResponse","model_versions","next_page_token","updateRegisteredModelApi","loadPage","deleteRegisteredModelApi","page","isInitialLoading","loadModelMetadata","pageTokens","filters_obj","promiseValues","searchModelVersionsApi","response","updatePageState","getRegisteredModelApi","resetHistoryState","getNextPageTokenFromResponse","prevState","setPersistedPageTokens","handleMaxResultsChange","parseInt","setMaxResultsInStore","handleClickNext","nextPage","updateUrlWithState","handleClickPrev","prevPage","handleClickSortableColumn","orderByDesc","getMaxResultsSelection","persistedPageTokens","getPersistedPageTokens","maxResultsForTokens","getPersistedMaxResults","loadModelVersions","resolve","newParams","URLSearchParams","searchParams","set","setSearchParams","urlPage","get","isNaN","_this$props$searchPar","store","getItem","JSON","parse","page_tokens","setItem","stringify","max_results","toString","PageContainer","RequestStateWrapper","requestIds","hasError","requests","shouldRender404","ErrorView","statusCode","subMessage","fallbackHomePageReactRoute","permissionDeniedErrors","request","_request$error","getErrorCode","ErrorCodes","PERMISSION_DENIED","_permissionDeniedErro","errorMsg","triggerError","Spinner","ModelPageWithRouter","withRouterNext","decodeURIComponent","entities","modelByName","getModelVersions","ModelPage","withErrorBoundary","ErrorUtils","mlflowServices","MODEL_REGISTRY","getStoreForComponent","componentName","LocalStorageStore","join","scope","storageObj","window","localStorage","sessionStorage","loadComponentState","storedVal","reactComponentStateKey","saveComponentState","stateRecord","targetValue","toJSON","withScopePrefix","getDropdownMenu","searchValue","toLowerCase","sortedIndexOf","isValidTagKey","test","flattenOptions","style","color","colors","actionTertiaryTextDefault","actionDisabledText","placement","tagKey","groupOption","DropdownMenu","TagKeySelectDropdown","control","onKeyChangeCallback","isOpen","setIsOpen","selectRef","useRef","field","fieldState","useController","rules","required","LegacySelect","allowClear","ref","dangerouslySetAntdProps","showSearch","dropdownRender","placeholder","defaultValue","open","onDropdownVisibleChange","filterOption","input","option","onSelect","onClear","handleClear","validationState","Option","getTagsMap","Map","valueRequired","editedEntityRef","errorMessage","setErrorMessage","initialTags","setInitialTags","finalTags","setFinalTags","showModal","setShowModal","useForm","defaultValues","hideModal","useCallback","editedEntity","reset","saveTags","setIsLoading","_e$getUserVisibleErro","getUserVisibleError","formValues","watch","hasNewValues","isEqual","isDirty","showPopoverMessage","Modal","destroyOnClose","footer","RestoreAntDDefaultClsPrefix","dangerouslyUseFocusPseudoClass","UnsavedTagPopoverTrigger","onSaveTask","handleSubmit","trim","newEntries","FormUI","Label","htmlFor","_tag$value","setValue","RHFControlledComponents","Input","htmlType","Message","rowGap","marginTop","isClosable","onClose","handleTagDelete","currentFinalTags","delete","fullTagDisplay","truncate","shownText","Popover","Root","Trigger","asChild","Content","align","Paragraph","Close","Arrow","lazyPako","str","maxLength","truncated","takeWhile","char","middleTruncateStr","maxLen","firstPartLen","Math","floor","lastPartLen","substring","_keyStr","btoaUtf8","output","i","_utf8_encode","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","charAt","atobUtf8","replace","indexOf","fromCharCode","_utf8_decode","string","utftext","n","c","c2","c3","getStringSHA256","crypto","subtle","digest","TextEncoder","encode","arrayBuffer","prototype","call","Uint8Array","x","slice","COMPRESSED_TEXT_DEFLATE_PREFIX","textCompressDeflate","binaryData","deflate","text","Buffer","b64encoded","binaryString","byte","fromCodePoint","btoa","textDecompressDeflate","pako","compressedText","startsWith","Error","compressedTextWithoutPrefix","inflate","atob","m","_m$codePointAt","codePointAt","isTextCompressedDeflate","maxWidth","columnGap","AliasTag"],"sourceRoot":""}