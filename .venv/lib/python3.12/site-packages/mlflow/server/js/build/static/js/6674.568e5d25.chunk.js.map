{"version":3,"file":"static/js/6674.568e5d25.chunk.js","mappings":"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","sources":["../node_modules/use-sync-external-store/shim/index.js","../node_modules/@tanstack/react-query/src/isRestoring.tsx","../node_modules/react-error-boundary/dist/src/ErrorBoundaryContext.ts","../node_modules/react-error-boundary/dist/src/ErrorBoundary.ts","../node_modules/react-error-boundary/dist/src/assertErrorBoundaryContext.ts","../node_modules/react-error-boundary/dist/src/useErrorBoundary.ts","../node_modules/react-error-boundary/dist/src/withErrorBoundary.ts","../node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../node_modules/@tanstack/react-query/src/useQuery.ts","../node_modules/@tanstack/react-query/src/suspense.ts","../node_modules/@tanstack/react-query/src/useBaseQuery.ts","../node_modules/@tanstack/query-core/src/queryObserver.ts","../node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../node_modules/@tanstack/react-query/src/useSyncExternalStore.ts","../node_modules/@tanstack/react-query/src/utils.ts","../node_modules/use-debounce/src/useDebouncedCallback.ts","../node_modules/@tanstack/query-core/src/mutationObserver.ts","../node_modules/@tanstack/react-query/src/useMutation.ts","../node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.js","../node_modules/use-clipboard-copy/dist/index.js"],"sourcesContent":["'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim.production.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","import { createContext } from \"react\";\n\nexport type ErrorBoundaryContextType = {\n  didCatch: boolean;\n  error: any;\n  resetErrorBoundary: (...args: any[]) => void;\n};\n\nexport const ErrorBoundaryContext =\n  createContext<ErrorBoundaryContextType | null>(null);\n","import {\n  Component,\n  createElement,\n  ErrorInfo,\n  isValidElement,\n  PropsWithChildren,\n  PropsWithRef,\n  ReactElement,\n} from \"react\";\nimport { ErrorBoundaryContext } from \"./ErrorBoundaryContext\";\nimport { ErrorBoundaryProps, FallbackProps } from \"./types\";\n\ntype ErrorBoundaryState = { didCatch: boolean; error: any };\n\nconst initialState: ErrorBoundaryState = {\n  didCatch: false,\n  error: null,\n};\n\nexport class ErrorBoundary extends Component<\n  PropsWithRef<PropsWithChildren<ErrorBoundaryProps>>,\n  ErrorBoundaryState\n> {\n  state = initialState;\n\n  static getDerivedStateFromError(error: Error) {\n    return { didCatch: true, error };\n  }\n\n  resetErrorBoundary = (...args: any[]) => {\n    const { error } = this.state;\n\n    if (error !== null) {\n      this.props.onReset?.({\n        args,\n        reason: \"imperative-api\",\n      });\n\n      this.setState(initialState);\n    }\n  };\n\n  componentDidCatch(error: Error, info: ErrorInfo) {\n    this.props.onError?.(error, info);\n  }\n\n  componentDidUpdate(\n    prevProps: ErrorBoundaryProps,\n    prevState: ErrorBoundaryState\n  ) {\n    const { didCatch } = this.state;\n    const { resetKeys } = this.props;\n\n    // There's an edge case where if the thing that triggered the error happens to *also* be in the resetKeys array,\n    // we'd end up resetting the error boundary immediately.\n    // This would likely trigger a second error to be thrown.\n    // So we make sure that we don't check the resetKeys on the first call of cDU after the error is set.\n\n    if (\n      didCatch &&\n      prevState.error !== null &&\n      hasArrayChanged(prevProps.resetKeys, resetKeys)\n    ) {\n      this.props.onReset?.({\n        next: resetKeys,\n        prev: prevProps.resetKeys,\n        reason: \"keys\",\n      });\n\n      this.setState(initialState);\n    }\n  }\n\n  render() {\n    const { children, fallbackRender, FallbackComponent, fallback } =\n      this.props;\n    const { didCatch, error } = this.state;\n\n    let childToRender = children;\n\n    if (didCatch) {\n      const props: FallbackProps = {\n        error,\n        resetErrorBoundary: this.resetErrorBoundary,\n      };\n\n      if (isValidElement(fallback)) {\n        childToRender = fallback;\n      } else if (typeof fallbackRender === \"function\") {\n        childToRender = fallbackRender(props);\n      } else if (FallbackComponent) {\n        childToRender = createElement(FallbackComponent, props);\n      } else {\n        throw new Error(\n          \"react-error-boundary requires either a fallback, fallbackRender, or FallbackComponent prop\"\n        );\n      }\n    }\n\n    return createElement(\n      ErrorBoundaryContext.Provider,\n      {\n        value: {\n          didCatch,\n          error,\n          resetErrorBoundary: this.resetErrorBoundary,\n        },\n      },\n      childToRender\n    ) as ReactElement;\n  }\n}\n\nfunction hasArrayChanged(a: any[] = [], b: any[] = []) {\n  return (\n    a.length !== b.length || a.some((item, index) => !Object.is(item, b[index]))\n  );\n}\n","import { ErrorBoundaryContextType } from \"./ErrorBoundaryContext\";\n\nexport function assertErrorBoundaryContext(\n  value: any\n): value is ErrorBoundaryContextType {\n  if (\n    value == null ||\n    typeof value.didCatch !== \"boolean\" ||\n    typeof value.resetErrorBoundary !== \"function\"\n  ) {\n    throw new Error(\"ErrorBoundaryContext not found\");\n  }\n\n  return true;\n}\n","import { useContext, useMemo, useState } from \"react\";\nimport { assertErrorBoundaryContext } from \"./assertErrorBoundaryContext\";\nimport { ErrorBoundaryContext } from \"./ErrorBoundaryContext\";\n\nexport type UseErrorBoundaryApi<Error> = {\n  resetBoundary: () => void;\n  showBoundary: (error: Error) => void;\n};\n\nexport function useErrorBoundary<Error = any>(): UseErrorBoundaryApi<Error> {\n  const context = useContext(ErrorBoundaryContext);\n\n  assertErrorBoundaryContext(context);\n\n  const [state, setState] = useState<{\n    error: Error | null;\n    hasError: boolean;\n  }>({\n    error: null,\n    hasError: false,\n  });\n\n  const memoized = useMemo(\n    () => ({\n      resetBoundary: () => {\n        context?.resetErrorBoundary();\n        setState({ error: null, hasError: false });\n      },\n      showBoundary: (error: Error) =>\n        setState({\n          error,\n          hasError: true,\n        }),\n    }),\n    [context?.resetErrorBoundary]\n  );\n\n  if (state.hasError) {\n    throw state.error;\n  }\n\n  return memoized;\n}\n","import { ComponentType, createElement } from \"react\";\nimport { ErrorBoundary } from \"./ErrorBoundary\";\nimport { ErrorBoundaryProps } from \"./types\";\n\nexport function withErrorBoundary<Props extends Object>(\n  Component: ComponentType<Props>,\n  errorBoundaryProps: ErrorBoundaryProps\n): ComponentType<Props> {\n  const Wrapped: ComponentType<Props> = (props: Props) => {\n    return createElement(\n      ErrorBoundary,\n      errorBoundaryProps,\n      createElement(Component, props)\n    );\n  };\n\n  // Format for display in DevTools\n  const name = Component.displayName || Component.name || \"Unknown\";\n  Wrapped.displayName = `withErrorBoundary(${name})`;\n\n  return Wrapped;\n}\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","import 'client-only'\nimport type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport { parseQueryArgs, QueryObserver } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","import type { DefaultedQueryObserverOptions } from '@tanstack/query-core'\nimport type { QueryObserver } from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport type { QueryObserverResult } from '@tanstack/query-core'\nimport type { QueryKey } from '@tanstack/query-core'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => defaultedOptions?.suspense && willFetch(result, isRestoring)\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer\n    .fetchOptimistic(defaultedOptions)\n    .then(({ data }) => {\n      defaultedOptions.onSuccess?.(data as TData)\n      defaultedOptions.onSettled?.(data, null)\n    })\n    .catch((error) => {\n      errorResetBoundary.clearReset()\n      defaultedOptions.onError?.(error)\n      defaultedOptions.onSettled?.(undefined, error)\n    })\n","import 'client-only'\nimport * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { QueryKey, QueryObserver } from '@tanstack/query-core'\nimport { notifyManager } from '@tanstack/query-core'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { UseBaseQueryOptions } from './types'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { ensureStaleTime, shouldSuspend, fetchOptimistic } from './suspense'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  ensureStaleTime(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        const unsubscribe = isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange))\n\n        // Update result to make sure we did not miss any query updates\n        // between creating the observer and subscribing to it.\n        observer.updateResult()\n\n        return unsubscribe\n      },\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result, isRestoring)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      useErrorBoundary: defaultedOptions.useErrorBoundary,\n      query: observer.getCurrentQuery(),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","import type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof options?.isDataEqual !== 'undefined'\n    ) {\n      this.client\n        .getLogger()\n        .error(\n          `The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option`,\n        )\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdatedAt &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(prevResult?.data, placeholderData, options) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","'use client'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  UseErrorBoundary,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  useErrorBoundary,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  useErrorBoundary: UseErrorBoundary<\n    TQueryFnData,\n    TError,\n    TQueryData,\n    TQueryKey\n  >\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(useErrorBoundary, [result.error, query])\n  )\n}\n","'use client'\n// Temporary workaround due to an issue with react-native uSES - https://github.com/TanStack/query/pull/3601\nimport { useSyncExternalStore as uSES } from 'use-sync-external-store/shim/index.js'\n\nexport const useSyncExternalStore = uSES\n","export function shouldThrowError<T extends (...args: any[]) => boolean>(\n  _useErrorBoundary: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(...params)\n  }\n\n  return !!_useErrorBoundary\n}\n","import { useRef, useEffect, useMemo } from 'react';\n\nexport interface CallOptions {\n  /**\n   * Controls if the function should be invoked on the leading edge of the timeout.\n   */\n  leading?: boolean;\n  /**\n   * Controls if the function should be invoked on the trailing edge of the timeout.\n   */\n  trailing?: boolean;\n}\n\nexport interface Options extends CallOptions {\n  /**\n   * The maximum time the given function is allowed to be delayed before it's invoked.\n   */\n  maxWait?: number;\n  /**\n   * If the setting is set to true, all debouncing and timers will happen on the server side as well\n   */\n  debounceOnServer?: boolean;\n}\n\nexport interface ControlFunctions<ReturnT> {\n  /**\n   * Cancel pending function invocations\n   */\n  cancel: () => void;\n  /**\n   * Immediately invoke pending function invocations\n   */\n  flush: () => ReturnT | undefined;\n  /**\n   * Returns `true` if there are any pending function invocations\n   */\n  isPending: () => boolean;\n}\n\n/**\n * Subsequent calls to the debounced function return the result of the last func invocation.\n * Note, that if there are no previous invocations you will get undefined. You should check it in your code properly.\n */\nexport interface DebouncedState<T extends (...args: any) => ReturnType<T>>\n  extends ControlFunctions<ReturnType<T>> {\n  (...args: Parameters<T>): ReturnType<T> | undefined;\n}\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn.\n *\n * The debounced function comes with a `cancel` method to cancel delayed `func`\n * invocations and a `flush` method to immediately invoke them.\n *\n * Provide `options` to indicate whether `func` should be invoked on the leading\n * and/or trailing edge of the `wait` timeout. The `func` is invoked with the\n * last arguments provided to the debounced function.\n *\n * Subsequent calls to the debounced function return the result of the last\n * `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Controls if `func` should be invoked on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Controls if `func` should be invoked the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback<\n  T extends (...args: any) => ReturnType<T>,\n>(func: T, wait?: number, options?: Options): DebouncedState<T> {\n  const lastCallTime = useRef(null);\n  const lastInvokeTime = useRef(0);\n  const timerId = useRef(null);\n  const lastArgs = useRef<unknown[]>([]);\n  const lastThis = useRef<unknown>();\n  const result = useRef<ReturnType<T>>();\n  const funcRef = useRef(func);\n  const mounted = useRef(true);\n  // Always keep the latest version of debounce callback, with no wait time.\n  funcRef.current = func;\n\n  const isClientSide = typeof window !== 'undefined';\n  // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n  const useRAF = !wait && wait !== 0 && isClientSide;\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  wait = +wait || 0;\n  options = options || {};\n\n  const leading = !!options.leading;\n  const trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n  const maxing = 'maxWait' in options;\n  const debounceOnServer =\n    'debounceOnServer' in options ? !!options.debounceOnServer : false; // `false` by default\n  const maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n\n  // You may have a question, why we have so many code under the useMemo definition.\n  //\n  // This was made as we want to escape from useCallback hell and\n  // not to initialize a number of functions each time useDebouncedCallback is called.\n  //\n  // It means that we have less garbage for our GC calls which improves performance.\n  // Also, it makes this library smaller.\n  //\n  // And the last reason, that the code without lots of useCallback with deps is easier to read.\n  // You have only one place for that.\n  const debounced = useMemo(() => {\n    const invokeFunc = (time: number) => {\n      const args = lastArgs.current;\n      const thisArg = lastThis.current;\n\n      lastArgs.current = lastThis.current = null;\n      lastInvokeTime.current = time;\n      return (result.current = funcRef.current.apply(thisArg, args));\n    };\n\n    const startTimer = (pendingFunc: () => void, wait: number) => {\n      if (useRAF) cancelAnimationFrame(timerId.current);\n      timerId.current = useRAF\n        ? requestAnimationFrame(pendingFunc)\n        : setTimeout(pendingFunc, wait);\n    };\n\n    const shouldInvoke = (time: number) => {\n      if (!mounted.current) return false;\n\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n\n      // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n      return (\n        !lastCallTime.current ||\n        timeSinceLastCall >= wait ||\n        timeSinceLastCall < 0 ||\n        (maxing && timeSinceLastInvoke >= maxWait)\n      );\n    };\n\n    const trailingEdge = (time: number) => {\n      timerId.current = null;\n\n      // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n      if (trailing && lastArgs.current) {\n        return invokeFunc(time);\n      }\n      lastArgs.current = lastThis.current = null;\n      return result.current;\n    };\n\n    const timerExpired = () => {\n      const time = Date.now();\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      }\n      // https://github.com/xnimorz/use-debounce/issues/97\n      if (!mounted.current) {\n        return;\n      }\n      // Remaining wait calculation\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n      const timeWaiting = wait - timeSinceLastCall;\n      const remainingWait = maxing\n        ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n        : timeWaiting;\n\n      // Restart the timer\n      startTimer(timerExpired, remainingWait);\n    };\n\n    const func: DebouncedState<T> = (...args: Parameters<T>): ReturnType<T> => {\n      if (!isClientSide && !debounceOnServer) {\n        return;\n      }\n      const time = Date.now();\n      const isInvoking = shouldInvoke(time);\n\n      lastArgs.current = args;\n      lastThis.current = this;\n      lastCallTime.current = time;\n\n      if (isInvoking) {\n        if (!timerId.current && mounted.current) {\n          // Reset any `maxWait` timer.\n          lastInvokeTime.current = lastCallTime.current;\n          // Start the timer for the trailing edge.\n          startTimer(timerExpired, wait);\n          // Invoke the leading edge.\n          return leading ? invokeFunc(lastCallTime.current) : result.current;\n        }\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          startTimer(timerExpired, wait);\n          return invokeFunc(lastCallTime.current);\n        }\n      }\n      if (!timerId.current) {\n        startTimer(timerExpired, wait);\n      }\n      return result.current;\n    };\n\n    func.cancel = () => {\n      if (timerId.current) {\n        useRAF\n          ? cancelAnimationFrame(timerId.current)\n          : clearTimeout(timerId.current);\n      }\n      lastInvokeTime.current = 0;\n      lastArgs.current =\n        lastCallTime.current =\n        lastThis.current =\n        timerId.current =\n          null;\n    };\n\n    func.isPending = () => {\n      return !!timerId.current;\n    };\n\n    func.flush = () => {\n      return !timerId.current ? result.current : trailingEdge(Date.now());\n    };\n\n    return func;\n  }, [\n    leading,\n    maxing,\n    wait,\n    maxWait,\n    trailing,\n    useRAF,\n    isClientSide,\n    debounceOnServer,\n  ]);\n\n  return debounced;\n}\n","import type { Action, Mutation } from './mutation'\nimport { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\nimport { shallowEqualObjects } from './utils'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import 'client-only'\nimport * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport {\n  notifyManager,\n  parseMutationArgs,\n  MutationObserver,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport { shouldThrowError } from './utils'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n","/**\n * @license React\n * use-sync-external-store-shim.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar React = require(\"react\");\nfunction is(x, y) {\n  return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);\n}\nvar objectIs = \"function\" === typeof Object.is ? Object.is : is,\n  useState = React.useState,\n  useEffect = React.useEffect,\n  useLayoutEffect = React.useLayoutEffect,\n  useDebugValue = React.useDebugValue;\nfunction useSyncExternalStore$2(subscribe, getSnapshot) {\n  var value = getSnapshot(),\n    _useState = useState({ inst: { value: value, getSnapshot: getSnapshot } }),\n    inst = _useState[0].inst,\n    forceUpdate = _useState[1];\n  useLayoutEffect(\n    function () {\n      inst.value = value;\n      inst.getSnapshot = getSnapshot;\n      checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n    },\n    [subscribe, value, getSnapshot]\n  );\n  useEffect(\n    function () {\n      checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n      return subscribe(function () {\n        checkIfSnapshotChanged(inst) && forceUpdate({ inst: inst });\n      });\n    },\n    [subscribe]\n  );\n  useDebugValue(value);\n  return value;\n}\nfunction checkIfSnapshotChanged(inst) {\n  var latestGetSnapshot = inst.getSnapshot;\n  inst = inst.value;\n  try {\n    var nextValue = latestGetSnapshot();\n    return !objectIs(inst, nextValue);\n  } catch (error) {\n    return !0;\n  }\n}\nfunction useSyncExternalStore$1(subscribe, getSnapshot) {\n  return getSnapshot();\n}\nvar shim =\n  \"undefined\" === typeof window ||\n  \"undefined\" === typeof window.document ||\n  \"undefined\" === typeof window.document.createElement\n    ? useSyncExternalStore$1\n    : useSyncExternalStore$2;\nexports.useSyncExternalStore =\n  void 0 !== React.useSyncExternalStore ? React.useSyncExternalStore : shim;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useClipboard = void 0;\nvar clipboard_copy_1 = __importDefault(require(\"clipboard-copy\"));\nvar react_1 = require(\"react\");\nvar useTimedToggle_1 = require(\"./useTimedToggle\");\nfunction isInputLike(node) {\n    return node && (node.nodeName === 'TEXTAREA' || node.nodeName === 'INPUT');\n}\nfunction useClipboard(options) {\n    if (options === void 0) { options = {}; }\n    var _a = useTimedToggle_1.useTimedToggle(false), copied = _a[0], toggleCopied = _a[1];\n    var targetRef = react_1.useRef(null);\n    var optionsRef = react_1.useRef(options);\n    optionsRef.current = options;\n    function isSupported() {\n        return (!!navigator.clipboard ||\n            (typeof document.execCommand === 'function' &&\n                typeof document.queryCommandSupported === 'function' &&\n                document.queryCommandSupported('copy')));\n    }\n    var copyHandler = react_1.useCallback(function (text) {\n        var opts = optionsRef.current;\n        var target = targetRef.current;\n        function handleSuccess() {\n            if (opts.onSuccess) {\n                opts.onSuccess();\n            }\n            if (opts.copiedTimeout) {\n                toggleCopied(opts.copiedTimeout);\n            }\n            if (opts.selectOnCopy && isInputLike(target)) {\n                target.select();\n            }\n        }\n        function handleError() {\n            if (opts.onError) {\n                opts.onError();\n            }\n            if (opts.selectOnError !== false && isInputLike(target)) {\n                target.select();\n            }\n        }\n        function copy(value) {\n            clipboard_copy_1.default(value).then(handleSuccess).catch(handleError);\n        }\n        if (typeof text === 'string') {\n            copy(text);\n        }\n        else if (target) {\n            copy(target.value);\n        }\n    }, []);\n    return {\n        copied: copied,\n        copy: copyHandler,\n        isSupported: isSupported,\n        target: targetRef,\n    };\n}\nexports.useClipboard = useClipboard;\n"],"names":["module","exports","IsRestoringContext","React","useIsRestoring","Provider","$ebb31c7feaa4405e$export$b16d9fb1a22de840","$hgUW1$createContext","$44d7e150ebc754d2$var$initialState","didCatch","error","$44d7e150ebc754d2$export$e926676385687eaf","$hgUW1$Component","state","getDerivedStateFromError","resetErrorBoundary","args","this","props","onReset","reason","setState","componentDidCatch","info","onError","componentDidUpdate","prevProps","prevState","resetKeys","a","b","length","some","item","index","Object","is","$44d7e150ebc754d2$var$hasArrayChanged","next","prev","render","children","fallbackRender","FallbackComponent","fallback","childToRender","$hgUW1$isValidElement","Error","$hgUW1$createElement","value","$75c9d331f9c1ed1a$export$f20aa86254872370","$7c3c25b3f398a9d6$export$c052f6604b7d51fe","context","$hgUW1$useContext","$hgUW1$useState","hasError","memoized","$hgUW1$useMemo","resetBoundary","showBoundary","$62ff477d53f02a5b$export$f0c7a449e0cfaec7","Component","errorBoundaryProps","Wrapped","name","displayName","createValue","clearReset","isReset","reset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","useQuery","arg1","arg2","arg3","parsedOptions","parseQueryArgs","useBaseQuery","QueryObserver","ensureStaleTime","defaultedOptions","suspense","staleTime","shouldSuspend","result","isRestoring","willFetch","isLoading","isFetching","fetchOptimistic","observer","errorResetBoundary","then","data","onSuccess","onSettled","catch","undefined","options","Observer","queryClient","useQueryClient","defaultQueryOptions","_optimisticResults","notifyManager","batchCalls","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","getOptimisticResult","useSyncExternalStore","onStoreChange","unsubscribe","subscribe","updateResult","getCurrentResult","setOptions","listeners","getHasError","useErrorBoundary","query","getCurrentQuery","notifyOnChangeProps","trackResult","Subscribable","constructor","client","super","trackedProps","Set","selectError","bindMethods","remove","bind","refetch","onSubscribe","size","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","shallowEqualObjects","getQueryCache","notify","type","enabled","queryKey","updateQuery","mounted","shouldFetchOptionally","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","build","createResult","currentResult","trackedResult","keys","forEach","key","defineProperty","configurable","enumerable","get","add","refetchPage","fetch","meta","isFetchingOptimistic","fetchOptions","_fetchOptions$cancelR","cancelRefetch","promise","throwOnError","noop","isServer","isStale","isValidTimeout","timeout","timeUntilStale","dataUpdatedAt","staleTimeoutId","setTimeout","_this$options$refetch","refetchInterval","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","fetchStatus","status","isPreviousData","isPlaceholderData","fetchOnMount","fetchOptionally","canFetch","networkMode","keepPreviousData","isSuccess","select","selectFn","selectResult","replaceData","process","placeholderData","Date","now","isError","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","nextResult","defaultNotifyOptions","cache","shouldNotifyListeners","includedProps","typedKey","has","onQueryUpdate","action","manual","isCancelledError","batch","_this$options$onSucce","_this$options","_this$options$onSettl","_this$options2","call","_this$options$onError","_this$options3","_this$options$onSettl2","_this$options4","listener","retryOnMount","shouldLoadOnMount","refetchOnMount","field","isStaleByTime","useSyncExternalStore$1","shouldThrowError","_useErrorBoundary","params","c","e","u","i","r","o","f","l","v","m","d","g","current","p","window","w","TypeError","s","leading","x","trailing","h","y","debounceOnServer","F","Math","max","maxWait","n","A","t","apply","cancelAnimationFrame","requestAnimationFrame","min","slice","arguments","cancel","isPending","flush","MutationObserver","mutate","_this$currentMutation","defaultMutationOptions","getMutationCache","mutation","currentMutation","_this$currentMutation2","onMutationUpdate","variables","mutateOptions","execute","getDefaultState","isIdle","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","useMutation","parseMutationArgs","mutateAsync","require","objectIs","useState","useEffect","useLayoutEffect","useDebugValue","checkIfSnapshotChanged","inst","latestGetSnapshot","getSnapshot","nextValue","shim","document","createElement","_useState","forceUpdate","__importDefault","mod","__esModule","useClipboard","clipboard_copy_1","react_1","useTimedToggle_1","isInputLike","node","nodeName","_a","useTimedToggle","copied","toggleCopied","targetRef","useRef","optionsRef","copy","useCallback","text","opts","target","handleSuccess","copiedTimeout","selectOnCopy","handleError","selectOnError","default","isSupported","navigator","clipboard","execCommand","queryCommandSupported"],"sourceRoot":""}